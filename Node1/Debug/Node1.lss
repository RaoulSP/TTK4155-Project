
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e4  00800100  0000308e  00003122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000308e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  008002e4  008002e4  00003306  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003306  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000360  00000000  00000000  00003362  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003bae  00000000  00000000  000036c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001430  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001279  00000000  00000000  000086a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000934  00000000  00000000  0000991c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b10  00000000  00000000  0000a250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025fc  00000000  00000000  0000ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000d35c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_1>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_7>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_10>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	ee e8       	ldi	r30, 0x8E	; 142
     702:	f0 e3       	ldi	r31, 0x30	; 48
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a4 3e       	cpi	r26, 0xE4	; 228
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	23 e0       	ldi	r18, 0x03	; 3
     712:	a4 ee       	ldi	r26, 0xE4	; 228
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	af 30       	cpi	r26, 0x0F	; 15
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <main>
     724:	0c 94 45 18 	jmp	0x308a	; 0x308a <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
#include "adc.h"

#ifdef NODE_1
	void adc_init(){
		clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
	}
	uint8_t adc_read(char channel){
		volatile char *ext_adc = (char *) 0x1400; 
		switch (channel){
     730:	82 37       	cpi	r24, 0x72	; 114
     732:	a9 f0       	breq	.+42     	; 0x75e <adc_read+0x2e>
     734:	18 f4       	brcc	.+6      	; 0x73c <adc_read+0xc>
     736:	8c 36       	cpi	r24, 0x6C	; 108
     738:	71 f0       	breq	.+28     	; 0x756 <adc_read+0x26>
     73a:	14 c0       	rjmp	.+40     	; 0x764 <adc_read+0x34>
     73c:	88 37       	cpi	r24, 0x78	; 120
     73e:	19 f0       	breq	.+6      	; 0x746 <adc_read+0x16>
     740:	89 37       	cpi	r24, 0x79	; 121
     742:	29 f0       	breq	.+10     	; 0x74e <adc_read+0x1e>
     744:	0f c0       	rjmp	.+30     	; 0x764 <adc_read+0x34>
		case 'x':
			*ext_adc = 0b0100;
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	80 93 00 14 	sts	0x1400, r24
			break;
     74c:	0b c0       	rjmp	.+22     	; 0x764 <adc_read+0x34>
		case 'y':
			*ext_adc = 0b0101;
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	80 93 00 14 	sts	0x1400, r24
			break;
     754:	07 c0       	rjmp	.+14     	; 0x764 <adc_read+0x34>
		case 'l':
			*ext_adc = 0b0110;
     756:	86 e0       	ldi	r24, 0x06	; 6
     758:	80 93 00 14 	sts	0x1400, r24
			break;
     75c:	03 c0       	rjmp	.+6      	; 0x764 <adc_read+0x34>
		case 'r':
			*ext_adc = 0b0111;
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	80 93 00 14 	sts	0x1400, r24
			break;
		}
		
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     764:	28 99       	sbic	0x05, 0	; 5
     766:	fe cf       	rjmp	.-4      	; 0x764 <adc_read+0x34>
		return (uint8_t) *ext_adc;
     768:	80 91 00 14 	lds	r24, 0x1400
}
     76c:	08 95       	ret

0000076e <can_init>:
#include "settings.h"
#include "interrupts.h"

volatile int can_message_received = 0;

void can_init(int mode){
     76e:	cf 93       	push	r28
     770:	c8 2f       	mov	r28, r24
	mcp_init();
     772:	0e 94 42 06 	call	0xc84	; 0xc84 <mcp_init>
	
	mcp_bit_modify(0x2B,0b00000011, 0b00000011); //enable receive msg interrupt
     776:	43 e0       	ldi	r20, 0x03	; 3
     778:	63 e0       	ldi	r22, 0x03	; 3
     77a:	8b e2       	ldi	r24, 0x2B	; 43
     77c:	0e 94 24 06 	call	0xc48	; 0xc48 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     780:	40 e6       	ldi	r20, 0x60	; 96
     782:	60 e6       	ldi	r22, 0x60	; 96
     784:	80 e6       	ldi	r24, 0x60	; 96
     786:	0e 94 24 06 	call	0xc48	; 0xc48 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     78a:	4c 2f       	mov	r20, r28
     78c:	6f ef       	ldi	r22, 0xFF	; 255
     78e:	8f e0       	ldi	r24, 0x0F	; 15
     790:	0e 94 24 06 	call	0xc48	; 0xc48 <mcp_bit_modify>
	mcp_bit_modify(0x0C, 0b00001111, 0b00001111); //Set receive buffer interrupts 0 and 1
     794:	4f e0       	ldi	r20, 0x0F	; 15
     796:	6f e0       	ldi	r22, 0x0F	; 15
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	0e 94 24 06 	call	0xc48	; 0xc48 <mcp_bit_modify>
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
	
	#ifdef NODE_1
	//External interrupt
	MCUCR |= (1 << ISC01); //Enable interrupt on falling edge
     79e:	85 b7       	in	r24, 0x35	; 53
     7a0:	82 60       	ori	r24, 0x02	; 2
     7a2:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);   //Enable external interrupt 0
     7a4:	8b b7       	in	r24, 0x3b	; 59
     7a6:	80 64       	ori	r24, 0x40	; 64
     7a8:	8b bf       	out	0x3b, r24	; 59
	//printf("ISR init");
	EICRB |= (1 << ISC51);
	EIMSK |= (1 << INT5);
	
	#endif
}
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <can_transmit>:

void can_transmit(Msg msg){
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <can_transmit+0xe>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <can_transmit+0x10>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <can_transmit+0x12>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	49 83       	std	Y+1, r20	; 0x01
     7c6:	5a 83       	std	Y+2, r21	; 0x02
     7c8:	6b 83       	std	Y+3, r22	; 0x03
     7ca:	7c 83       	std	Y+4, r23	; 0x04
     7cc:	8d 83       	std	Y+5, r24	; 0x05
     7ce:	9e 83       	std	Y+6, r25	; 0x06
     7d0:	09 81       	ldd	r16, Y+1	; 0x01
     7d2:	1a 81       	ldd	r17, Y+2	; 0x02
     7d4:	eb 80       	ldd	r14, Y+3	; 0x03
     7d6:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3, buffer = n - 1
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7d8:	b8 01       	movw	r22, r16
     7da:	75 95       	asr	r23
     7dc:	67 95       	ror	r22
     7de:	75 95       	asr	r23
     7e0:	67 95       	ror	r22
     7e2:	75 95       	asr	r23
     7e4:	67 95       	ror	r22
     7e6:	81 e5       	ldi	r24, 0x51	; 81
     7e8:	0e 94 02 06 	call	0xc04	; 0xc04 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7ec:	60 2f       	mov	r22, r16
     7ee:	62 95       	swap	r22
     7f0:	66 0f       	add	r22, r22
     7f2:	60 7e       	andi	r22, 0xE0	; 224
     7f4:	82 e5       	ldi	r24, 0x52	; 82
     7f6:	0e 94 02 06 	call	0xc04	; 0xc04 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7fa:	6e 2d       	mov	r22, r14
     7fc:	85 e5       	ldi	r24, 0x55	; 85
     7fe:	0e 94 02 06 	call	0xc04	; 0xc04 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     802:	1e 14       	cp	r1, r14
     804:	1f 04       	cpc	r1, r15
     806:	84 f4       	brge	.+32     	; 0x828 <can_transmit+0x7a>
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     80c:	ed 81       	ldd	r30, Y+5	; 0x05
     80e:	fe 81       	ldd	r31, Y+6	; 0x06
     810:	e0 0f       	add	r30, r16
     812:	f1 1f       	adc	r31, r17
     814:	60 81       	ld	r22, Z
     816:	86 e5       	ldi	r24, 0x56	; 86
     818:	80 0f       	add	r24, r16
     81a:	0e 94 02 06 	call	0xc04	; 0xc04 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	0e 15       	cp	r16, r14
     824:	1f 05       	cpc	r17, r15
     826:	91 f7       	brne	.-28     	; 0x80c <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 14 06 	call	0xc28	; 0xc28 <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     838:	26 96       	adiw	r28, 0x06	; 6
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	08 95       	ret

00000852 <can_receive>:

Msg can_receive(){
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	00 d0       	rcall	.+0      	; 0x86c <can_receive+0x1a>
     86c:	00 d0       	rcall	.+0      	; 0x86e <can_receive+0x1c>
     86e:	00 d0       	rcall	.+0      	; 0x870 <can_receive+0x1e>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2, buffer = n - 1
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     874:	81 e6       	ldi	r24, 0x61	; 97
     876:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <mcp_read>
     87a:	a8 2e       	mov	r10, r24
     87c:	82 e6       	ldi	r24, 0x62	; 98
     87e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <mcp_read>
     882:	82 95       	swap	r24
     884:	86 95       	lsr	r24
     886:	87 70       	andi	r24, 0x07	; 7
     888:	b1 2c       	mov	r11, r1
     88a:	aa 0c       	add	r10, r10
     88c:	bb 1c       	adc	r11, r11
     88e:	aa 0c       	add	r10, r10
     890:	bb 1c       	adc	r11, r11
     892:	aa 0c       	add	r10, r10
     894:	bb 1c       	adc	r11, r11
     896:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     898:	85 e6       	ldi	r24, 0x65	; 101
     89a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <mcp_read>
     89e:	8f 70       	andi	r24, 0x0F	; 15
     8a0:	c8 2e       	mov	r12, r24
     8a2:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     8a4:	c6 01       	movw	r24, r12
     8a6:	0e 94 cb 12 	call	0x2596	; 0x2596 <malloc>
     8aa:	98 2e       	mov	r9, r24
     8ac:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     8ae:	1c 14       	cp	r1, r12
     8b0:	1d 04       	cpc	r1, r13
     8b2:	84 f4       	brge	.+32     	; 0x8d4 <can_receive+0x82>
     8b4:	e8 2e       	mov	r14, r24
     8b6:	f9 2e       	mov	r15, r25
     8b8:	00 e0       	ldi	r16, 0x00	; 0
     8ba:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     8bc:	86 e6       	ldi	r24, 0x66	; 102
     8be:	80 0f       	add	r24, r16
     8c0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <mcp_read>
     8c4:	f7 01       	movw	r30, r14
     8c6:	81 93       	st	Z+, r24
     8c8:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     8ca:	0f 5f       	subi	r16, 0xFF	; 255
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	0c 15       	cp	r16, r12
     8d0:	1d 05       	cpc	r17, r13
     8d2:	a4 f3       	brlt	.-24     	; 0x8bc <can_receive+0x6a>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RXnIF to 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	8c e2       	ldi	r24, 0x2C	; 44
     8da:	0e 94 24 06 	call	0xc48	; 0xc48 <mcp_bit_modify>
	return msg;
     8de:	ba 82       	std	Y+2, r11	; 0x02
     8e0:	a9 82       	std	Y+1, r10	; 0x01
     8e2:	dc 82       	std	Y+4, r13	; 0x04
     8e4:	cb 82       	std	Y+3, r12	; 0x03
     8e6:	9d 82       	std	Y+5, r9	; 0x05
     8e8:	8e 82       	std	Y+6, r8	; 0x06
     8ea:	2a 2d       	mov	r18, r10
     8ec:	3a 81       	ldd	r19, Y+2	; 0x02
     8ee:	4c 2d       	mov	r20, r12
     8f0:	5c 81       	ldd	r21, Y+4	; 0x04
     8f2:	69 2d       	mov	r22, r9
     8f4:	78 2d       	mov	r23, r8
}
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	26 96       	adiw	r28, 0x06	; 6
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	08 95       	ret

00000920 <__vector_1>:
	Msg msg = {id,length,data};
	return msg;
} 

#ifdef NODE_1
ISR(INT0_vect){
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
	//printf("int?");
	can_message_received = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	90 93 e5 02 	sts	0x02E5, r25
     936:	80 93 e4 02 	sts	0x02E4, r24
	//printf("ISR: %d\r\n", can_message_received);
}
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     948:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     94a:	c2 9a       	sbi	0x18, 2	; 24
     94c:	08 95       	ret

0000094e <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	28 97       	sbiw	r28, 0x08	; 8
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
		x = adc_read('x');
     96a:	88 e7       	ldi	r24, 0x78	; 120
     96c:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 02 03 	sts	0x0302, r25
     976:	80 93 01 03 	sts	0x0301, r24
		y = adc_read('y');
     97a:	89 e7       	ldi	r24, 0x79	; 121
     97c:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	30 93 04 03 	sts	0x0304, r19
     988:	20 93 03 03 	sts	0x0303, r18
		z = !test_bit(PINB, PB2);
     98c:	16 b3       	in	r17, 0x16	; 22
     98e:	16 95       	lsr	r17
     990:	16 95       	lsr	r17
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	18 27       	eor	r17, r24
     996:	11 70       	andi	r17, 0x01	; 1
     998:	00 e0       	ldi	r16, 0x00	; 0
     99a:	10 93 ea 02 	sts	0x02EA, r17
     99e:	00 93 eb 02 	sts	0x02EB, r16
		
		if (x > xmean){
     9a2:	80 91 01 03 	lds	r24, 0x0301
     9a6:	90 91 02 03 	lds	r25, 0x0302
     9aa:	40 91 0c 01 	lds	r20, 0x010C
     9ae:	50 91 0d 01 	lds	r21, 0x010D
     9b2:	48 17       	cp	r20, r24
     9b4:	59 07       	cpc	r21, r25
     9b6:	b4 f4       	brge	.+44     	; 0x9e4 <joy_get_position+0x96>
			x = ((x - xmean) * 100) / (xmax - xmean);
     9b8:	bc 01       	movw	r22, r24
     9ba:	64 1b       	sub	r22, r20
     9bc:	75 0b       	sbc	r23, r21
     9be:	e4 e6       	ldi	r30, 0x64	; 100
     9c0:	e6 9f       	mul	r30, r22
     9c2:	c0 01       	movw	r24, r0
     9c4:	e7 9f       	mul	r30, r23
     9c6:	90 0d       	add	r25, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	60 91 0a 01 	lds	r22, 0x010A
     9ce:	70 91 0b 01 	lds	r23, 0x010B
     9d2:	64 1b       	sub	r22, r20
     9d4:	75 0b       	sbc	r23, r21
     9d6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__divmodhi4>
     9da:	70 93 02 03 	sts	0x0302, r23
     9de:	60 93 01 03 	sts	0x0301, r22
     9e2:	17 c0       	rjmp	.+46     	; 0xa12 <joy_get_position+0xc4>
		}
		else {
			x = ((x - xmean) * 100) / (xmean - xmin);
     9e4:	bc 01       	movw	r22, r24
     9e6:	64 1b       	sub	r22, r20
     9e8:	75 0b       	sbc	r23, r21
     9ea:	e4 e6       	ldi	r30, 0x64	; 100
     9ec:	e6 9f       	mul	r30, r22
     9ee:	c0 01       	movw	r24, r0
     9f0:	e7 9f       	mul	r30, r23
     9f2:	90 0d       	add	r25, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	60 91 e8 02 	lds	r22, 0x02E8
     9fa:	70 91 e9 02 	lds	r23, 0x02E9
     9fe:	fa 01       	movw	r30, r20
     a00:	e6 1b       	sub	r30, r22
     a02:	f7 0b       	sbc	r31, r23
     a04:	bf 01       	movw	r22, r30
     a06:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__divmodhi4>
     a0a:	70 93 02 03 	sts	0x0302, r23
     a0e:	60 93 01 03 	sts	0x0301, r22
		}
		if (y > ymean){
     a12:	40 91 08 01 	lds	r20, 0x0108
     a16:	50 91 09 01 	lds	r21, 0x0109
     a1a:	42 17       	cp	r20, r18
     a1c:	53 07       	cpc	r21, r19
     a1e:	ac f4       	brge	.+42     	; 0xa4a <joy_get_position+0xfc>
			y = ((y - ymean) * 100) / (ymax - ymean);
     a20:	24 1b       	sub	r18, r20
     a22:	35 0b       	sbc	r19, r21
     a24:	64 e6       	ldi	r22, 0x64	; 100
     a26:	62 9f       	mul	r22, r18
     a28:	c0 01       	movw	r24, r0
     a2a:	63 9f       	mul	r22, r19
     a2c:	90 0d       	add	r25, r0
     a2e:	11 24       	eor	r1, r1
     a30:	60 91 06 01 	lds	r22, 0x0106
     a34:	70 91 07 01 	lds	r23, 0x0107
     a38:	64 1b       	sub	r22, r20
     a3a:	75 0b       	sbc	r23, r21
     a3c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__divmodhi4>
     a40:	70 93 04 03 	sts	0x0304, r23
     a44:	60 93 03 03 	sts	0x0303, r22
     a48:	15 c0       	rjmp	.+42     	; 0xa74 <joy_get_position+0x126>
		}
		else {
			y = ((y - ymean)  * 100) / (ymean - ymin);
     a4a:	24 1b       	sub	r18, r20
     a4c:	35 0b       	sbc	r19, r21
     a4e:	64 e6       	ldi	r22, 0x64	; 100
     a50:	62 9f       	mul	r22, r18
     a52:	c0 01       	movw	r24, r0
     a54:	63 9f       	mul	r22, r19
     a56:	90 0d       	add	r25, r0
     a58:	11 24       	eor	r1, r1
     a5a:	20 91 e6 02 	lds	r18, 0x02E6
     a5e:	30 91 e7 02 	lds	r19, 0x02E7
     a62:	ba 01       	movw	r22, r20
     a64:	62 1b       	sub	r22, r18
     a66:	73 0b       	sbc	r23, r19
     a68:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__divmodhi4>
     a6c:	70 93 04 03 	sts	0x0304, r23
     a70:	60 93 03 03 	sts	0x0303, r22
		}
		
		Position pos;
		//pos.x = x;
		pos.x = 0;
		pos.y = y;
     a74:	f0 90 03 03 	lds	r15, 0x0303
     a78:	e0 90 04 03 	lds	r14, 0x0304
		pos.z = z;
		pos.r_slider = adc_read('r');
     a7c:	82 e7       	ldi	r24, 0x72	; 114
     a7e:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     a82:	90 e0       	ldi	r25, 0x00	; 0
		
		if (x < 4 && x > -4){
			pos.x = 0;
		}
		if (y < 4 && y > -4){
     a84:	20 91 03 03 	lds	r18, 0x0303
     a88:	30 91 04 03 	lds	r19, 0x0304
     a8c:	2d 5f       	subi	r18, 0xFD	; 253
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	27 30       	cpi	r18, 0x07	; 7
     a92:	31 05       	cpc	r19, r1
     a94:	10 f4       	brcc	.+4      	; 0xa9a <joy_get_position+0x14c>
			pos.y = 0;
     a96:	f1 2c       	mov	r15, r1
     a98:	e1 2c       	mov	r14, r1
		}
		return pos;
     a9a:	1a 82       	std	Y+2, r1	; 0x02
     a9c:	19 82       	std	Y+1, r1	; 0x01
     a9e:	fb 82       	std	Y+3, r15	; 0x03
     aa0:	ec 82       	std	Y+4, r14	; 0x04
     aa2:	1d 83       	std	Y+5, r17	; 0x05
     aa4:	0e 83       	std	Y+6, r16	; 0x06
     aa6:	98 87       	std	Y+8, r25	; 0x08
     aa8:	8f 83       	std	Y+7, r24	; 0x07
     aaa:	3a 81       	ldd	r19, Y+2	; 0x02
     aac:	4f 2d       	mov	r20, r15
     aae:	5e 2d       	mov	r21, r14
     ab0:	61 2f       	mov	r22, r17
     ab2:	70 2f       	mov	r23, r16
}
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	98 85       	ldd	r25, Y+8	; 0x08
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	28 97       	sbiw	r28, 0x08	; 8
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
	Position pos_cart = joy_get_position();
     af6:	0e 94 a7 04 	call	0x94e	; 0x94e <joy_get_position>
     afa:	29 83       	std	Y+1, r18	; 0x01
     afc:	3a 83       	std	Y+2, r19	; 0x02
     afe:	4b 83       	std	Y+3, r20	; 0x03
     b00:	5c 83       	std	Y+4, r21	; 0x04
     b02:	89 80       	ldd	r8, Y+1	; 0x01
     b04:	9a 80       	ldd	r9, Y+2	; 0x02
     b06:	ab 80       	ldd	r10, Y+3	; 0x03
     b08:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     b0a:	b4 01       	movw	r22, r8
     b0c:	88 27       	eor	r24, r24
     b0e:	77 fd       	sbrc	r23, 7
     b10:	80 95       	com	r24
     b12:	98 2f       	mov	r25, r24
     b14:	0e 94 ed 10 	call	0x21da	; 0x21da <__floatsisf>
     b18:	6b 01       	movw	r12, r22
     b1a:	7c 01       	movw	r14, r24
     b1c:	b5 01       	movw	r22, r10
     b1e:	88 27       	eor	r24, r24
     b20:	77 fd       	sbrc	r23, 7
     b22:	80 95       	com	r24
     b24:	98 2f       	mov	r25, r24
     b26:	0e 94 ed 10 	call	0x21da	; 0x21da <__floatsisf>
     b2a:	a7 01       	movw	r20, r14
     b2c:	96 01       	movw	r18, r12
     b2e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <atan2>
     b32:	6b 01       	movw	r12, r22
     b34:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b36:	88 9c       	mul	r8, r8
     b38:	b0 01       	movw	r22, r0
     b3a:	89 9c       	mul	r8, r9
     b3c:	70 0d       	add	r23, r0
     b3e:	70 0d       	add	r23, r0
     b40:	11 24       	eor	r1, r1
     b42:	aa 9c       	mul	r10, r10
     b44:	c0 01       	movw	r24, r0
     b46:	ab 9c       	mul	r10, r11
     b48:	90 0d       	add	r25, r0
     b4a:	90 0d       	add	r25, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	68 0f       	add	r22, r24
     b50:	79 1f       	adc	r23, r25
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatunsisf>
     b5a:	0e 94 0c 12 	call	0x2418	; 0x2418 <sqrt>
     b5e:	4b 01       	movw	r8, r22
     b60:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     b62:	20 ee       	ldi	r18, 0xE0	; 224
     b64:	3e e2       	ldi	r19, 0x2E	; 46
     b66:	45 e6       	ldi	r20, 0x65	; 101
     b68:	52 e4       	ldi	r21, 0x42	; 66
     b6a:	c7 01       	movw	r24, r14
     b6c:	b6 01       	movw	r22, r12
     b6e:	0e 94 a5 11 	call	0x234a	; 0x234a <__mulsf3>
     b72:	0e 94 ba 10 	call	0x2174	; 0x2174 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     b76:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b78:	c5 01       	movw	r24, r10
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 ba 10 	call	0x2174	; 0x2174 <__fixsfsi>
	return pos_pol;
     b80:	7b 01       	movw	r14, r22
}
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	28 96       	adiw	r28, 0x08	; 8
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	08 95       	ret

00000ba8 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     ba8:	0e 94 69 05 	call	0xad2	; 0xad2 <joy_get_position_polar>
     bac:	9b 01       	movw	r18, r22
	if(pos_pol.amplitude > 80){
     bae:	81 35       	cpi	r24, 0x51	; 81
     bb0:	91 05       	cpc	r25, r1
     bb2:	7c f0       	brlt	.+30     	; 0xbd2 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     bb4:	68 38       	cpi	r22, 0x88	; 136
     bb6:	71 05       	cpc	r23, r1
     bb8:	74 f4       	brge	.+28     	; 0xbd6 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     bba:	6e 32       	cpi	r22, 0x2E	; 46
     bbc:	71 05       	cpc	r23, r1
     bbe:	6c f4       	brge	.+26     	; 0xbda <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     bc0:	24 3d       	cpi	r18, 0xD4	; 212
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	38 07       	cpc	r19, r24
     bc6:	5c f4       	brge	.+22     	; 0xbde <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     bc8:	2a 37       	cpi	r18, 0x7A	; 122
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	54 f0       	brlt	.+20     	; 0xbe2 <joy_get_direction+0x3a>
			return DOWN;
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	08 95       	ret

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     be2:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     be4:	08 95       	ret

00000be6 <mcp_read>:
#include "settings.h"
#include "spi.h"
#include "mcp.h"

char mcp_read(char address){
     be6:	cf 93       	push	r28
     be8:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, MCP_PIN);
     bea:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	spi_master_transmit(address);
     bf2:	8c 2f       	mov	r24, r28
     bf4:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     bfe:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <mcp_write>:

void mcp_write(char address, char data){
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	d8 2f       	mov	r29, r24
     c0a:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, MCP_PIN);
     c0c:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	spi_master_transmit(address);
     c14:	8d 2f       	mov	r24, r29
     c16:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	spi_master_transmit(data);
     c1a:	8c 2f       	mov	r24, r28
     c1c:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     c20:	c4 9a       	sbi	0x18, 4	; 24
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, MCP_PIN);
     c28:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,MCP_PIN);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	80 68       	ori	r24, 0x80	; 128
     c34:	48 2b       	or	r20, r24
     c36:	59 2b       	or	r21, r25
     c38:	cb 01       	movw	r24, r22
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
	clear_bit(PORTB, MCP_PIN);
	spi_master_transmit(command);
     c3e:	84 2b       	or	r24, r20
     c40:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c44:	c4 9a       	sbi	0x18, 4	; 24
     c46:	08 95       	ret

00000c48 <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,MCP_PIN);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	18 2f       	mov	r17, r24
     c50:	d6 2f       	mov	r29, r22
     c52:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, MCP_PIN);
     c54:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	spi_master_transmit(address);
     c5c:	81 2f       	mov	r24, r17
     c5e:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	spi_master_transmit(mask);
     c62:	8d 2f       	mov	r24, r29
     c64:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	spi_master_transmit(data);
     c68:	8c 2f       	mov	r24, r28
     c6a:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c6e:	c4 9a       	sbi	0x18, 4	; 24
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	08 95       	ret

00000c78 <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, MCP_PIN);
     c78:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);
     c7a:	80 ec       	ldi	r24, 0xC0	; 192
     c7c:	0e 94 90 06 	call	0xd20	; 0xd20 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c80:	c4 9a       	sbi	0x18, 4	; 24
     c82:	08 95       	ret

00000c84 <mcp_init>:
}
	
void mcp_init(){
	spi_master_init();
     c84:	0e 94 88 06 	call	0xd10	; 0xd10 <spi_master_init>
	mcp_reset();
     c88:	0e 94 3c 06 	call	0xc78	; 0xc78 <mcp_reset>
     c8c:	08 95       	ret

00000c8e <pwm_set_duty_cycle>:
}

void pwm_set_duty_cycle(float ms){
	#ifdef NODE_1
		float duty_cycle = 0.5;
		OCR1B = (pwm_top*duty_cycle);
     c8e:	60 91 ec 02 	lds	r22, 0x02EC
     c92:	70 91 ed 02 	lds	r23, 0x02ED
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatunsisf>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	5f e3       	ldi	r21, 0x3F	; 63
     ca6:	0e 94 a5 11 	call	0x234a	; 0x234a <__mulsf3>
     caa:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     cae:	79 bd       	out	0x29, r23	; 41
     cb0:	68 bd       	out	0x28, r22	; 40
     cb2:	08 95       	ret

00000cb4 <pwm_init>:
uint16_t pwm_top = 0;

void pwm_init(){
	uint16_t f = 0; //Period 20ms --> f = 1/20ms
	#ifdef NODE_1
		DDRE |= (1 << PE2); 
     cb4:	32 9a       	sbi	0x06, 2	; 6
		TCCR1A |= (1 << WGM11) | (1 << COM1B1); //Sets mode to fast pwm and prescaler clock 8 //Initial values all 0
     cb6:	8f b5       	in	r24, 0x2f	; 47
     cb8:	82 62       	ori	r24, 0x22	; 34
     cba:	8f bd       	out	0x2f, r24	; 47
		DDRB |= (1 << DDB5); //Set direction for PWM pin to output //PB5 = pin 11 on the Arduino shield
		TCCR1A |= (1 << WGM11) | (1 << COM1A1); //Sets mode to fast pwm and prescaler clock 8 //Initial values all 0
		f = 50; 
	#endif
	
	TCCR1B |= (1 << WGM13) | (1 << WGM12) |  (1 << CS11);
     cbc:	8e b5       	in	r24, 0x2e	; 46
     cbe:	8a 61       	ori	r24, 0x1A	; 26
     cc0:	8e bd       	out	0x2e, r24	; 46
	
	uint16_t prescaler = 8;
	pwm_top = ((uint32_t)F_CPU/(uint16_t)(f * prescaler) - 1);
     cc2:	8b ec       	ldi	r24, 0xCB	; 203
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	90 93 ed 02 	sts	0x02ED, r25
     cca:	80 93 ec 02 	sts	0x02EC, r24
	ICR1 = pwm_top; //This defines the pwm period length
     cce:	95 bd       	out	0x25, r25	; 37
     cd0:	84 bd       	out	0x24, r24	; 36
	pwm_set_duty_cycle(1.5); //Center the servo
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 ec       	ldi	r24, 0xC0	; 192
     cd8:	9f e3       	ldi	r25, 0x3F	; 63
     cda:	0e 94 47 06 	call	0xc8e	; 0xc8e <pwm_set_duty_cycle>
     cde:	08 95       	ret

00000ce0 <pwm_change_freq>:
	}
	#endif
}

void pwm_change_freq(int freq){
	pwm_top = ((uint32_t)F_CPU/(uint16_t)(freq * 8) - 1);
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	9c 01       	movw	r18, r24
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	8b e4       	ldi	r24, 0x4B	; 75
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 76 12 	call	0x24ec	; 0x24ec <__udivmodsi4>
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	31 09       	sbc	r19, r1
     d02:	30 93 ed 02 	sts	0x02ED, r19
     d06:	20 93 ec 02 	sts	0x02EC, r18
	ICR1 = pwm_top;
     d0a:	35 bd       	out	0x25, r19	; 37
     d0c:	24 bd       	out	0x24, r18	; 36
     d0e:	08 95       	ret

00000d10 <spi_master_init>:
#include "spi.h"

void spi_master_init()
{
	#ifdef NODE_1
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
     d10:	87 b3       	in	r24, 0x17	; 23
     d12:	80 6b       	ori	r24, 0xB0	; 176
     d14:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
     d16:	be 98       	cbi	0x17, 6	; 23
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
     d18:	81 e5       	ldi	r24, 0x51	; 81
     d1a:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
     d1c:	c4 9a       	sbi	0x18, 4	; 24
     d1e:	08 95       	ret

00000d20 <spi_master_transmit>:
	#endif
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
     d20:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
     d22:	77 9b       	sbis	0x0e, 7	; 14
     d24:	fe cf       	rjmp	.-4      	; 0xd22 <spi_master_transmit+0x2>
	return SPDR;
     d26:	8f b1       	in	r24, 0x0f	; 15
     d28:	08 95       	ret

00000d2a <uart_putchar>:
	#endif
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     d2a:	5d 9b       	sbis	0x0b, 5	; 11
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
     d2e:	8c b9       	out	0x0c, r24	; 12
     d30:	08 95       	ret

00000d32 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     d32:	5f 9b       	sbis	0x0b, 7	; 11
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <uart_getchar>
	return UDR0;
     d36:	8c b1       	in	r24, 0x0c	; 12
     d38:	08 95       	ret

00000d3a <uart_init>:
#include <stdio.h>
#include "settings.h"
#include "uart.h"

void uart_init(int baudRate){
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     d3a:	aa 27       	eor	r26, r26
     d3c:	97 fd       	sbrc	r25, 7
     d3e:	a0 95       	com	r26
     d40:	ba 2f       	mov	r27, r26
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	aa 1f       	adc	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	aa 1f       	adc	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	9c 01       	movw	r18, r24
     d54:	ad 01       	movw	r20, r26
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	44 1f       	adc	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	44 1f       	adc	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	8b e4       	ldi	r24, 0x4B	; 75
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 98 12 	call	0x2530	; 0x2530 <__divmodsi4>
     d72:	21 50       	subi	r18, 0x01	; 1
     d74:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     d76:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
     d78:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     d7a:	88 e1       	ldi	r24, 0x18	; 24
     d7c:	8a b9       	out	0x0a, r24	; 10
	
	#ifdef NODE_1
		UCSR0C = ((1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00));
     d7e:	8e e8       	ldi	r24, 0x8E	; 142
     d80:	80 bd       	out	0x20, r24	; 32
	#endif
	#ifdef NODE_2
		UCSR0C = ((1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	#endif
	fdevopen(uart_putchar, uart_getchar);
     d82:	69 e9       	ldi	r22, 0x99	; 153
     d84:	76 e0       	ldi	r23, 0x06	; 6
     d86:	85 e9       	ldi	r24, 0x95	; 149
     d88:	96 e0       	ldi	r25, 0x06	; 6
     d8a:	0e 94 c5 14 	call	0x298a	; 0x298a <fdevopen>
     d8e:	08 95       	ret

00000d90 <end_game>:
	.offset = 1
};

//Actions for the menu options in the game
Menu* end_game(Menu* self){
	state = in_menu;
     d90:	10 92 fd 02 	sts	0x02FD, r1
	return self;
}
     d94:	08 95       	ret

00000d96 <replay_game>:

Menu* replay_game(Menu* self){
	game_state = INITIALIZING;
     d96:	10 92 ee 02 	sts	0x02EE, r1
	return self;
}
     d9a:	08 95       	ret

00000d9c <start_game>:

Menu* start_game(Menu* self){
	player_name = self->name;
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 81       	ld	r18, Z
     da0:	31 81       	ldd	r19, Z+1	; 0x01
     da2:	30 93 33 01 	sts	0x0133, r19
     da6:	20 93 32 01 	sts	0x0132, r18
	game_state = PLAYING;
     daa:	21 e0       	ldi	r18, 0x01	; 1
     dac:	20 93 ee 02 	sts	0x02EE, r18
	return self;
}
     db0:	08 95       	ret

00000db2 <game_init>:

void game_init(){
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	2c 97       	sbiw	r28, 0x0c	; 12
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
	game_state = PLAYER_SELECTION;
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	80 93 ee 02 	sts	0x02EE, r24
	game_time = -1;
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	9f ef       	ldi	r25, 0xFF	; 255
     dd0:	90 93 35 01 	sts	0x0135, r25
     dd4:	80 93 34 01 	sts	0x0134, r24
	//Choose player menu
	char* player_list[4] = {"Peter","Herman","Raoul","Hans"};
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	ef e0       	ldi	r30, 0x0F	; 15
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	de 01       	movw	r26, r28
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	01 90       	ld	r0, Z+
     de4:	0d 92       	st	X+, r0
     de6:	8a 95       	dec	r24
     de8:	e1 f7       	brne	.-8      	; 0xde2 <game_init+0x30>
	
	add_list_entries(&choose_player,player_list,4);
     dea:	44 e0       	ldi	r20, 0x04	; 4
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	8e e0       	ldi	r24, 0x0E	; 14
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 44 09 	call	0x1288	; 0x1288 <add_list_entries>
	choose_player.sub_menus[0]->action = start_game;
     dfc:	e0 91 1a 01 	lds	r30, 0x011A
     e00:	f0 91 1b 01 	lds	r31, 0x011B
     e04:	a0 81       	ld	r26, Z
     e06:	b1 81       	ldd	r27, Z+1	; 0x01
     e08:	8e ec       	ldi	r24, 0xCE	; 206
     e0a:	96 e0       	ldi	r25, 0x06	; 6
     e0c:	51 96       	adiw	r26, 0x11	; 17
     e0e:	9c 93       	st	X, r25
     e10:	8e 93       	st	-X, r24
     e12:	50 97       	sbiw	r26, 0x10	; 16
	choose_player.sub_menus[1]->action = start_game;
     e14:	a2 81       	ldd	r26, Z+2	; 0x02
     e16:	b3 81       	ldd	r27, Z+3	; 0x03
     e18:	51 96       	adiw	r26, 0x11	; 17
     e1a:	9c 93       	st	X, r25
     e1c:	8e 93       	st	-X, r24
     e1e:	50 97       	sbiw	r26, 0x10	; 16
	choose_player.sub_menus[2]->action = start_game;
     e20:	a4 81       	ldd	r26, Z+4	; 0x04
     e22:	b5 81       	ldd	r27, Z+5	; 0x05
     e24:	51 96       	adiw	r26, 0x11	; 17
     e26:	9c 93       	st	X, r25
     e28:	8e 93       	st	-X, r24
     e2a:	50 97       	sbiw	r26, 0x10	; 16
	choose_player.sub_menus[3]->action = start_game;
     e2c:	06 80       	ldd	r0, Z+6	; 0x06
     e2e:	f7 81       	ldd	r31, Z+7	; 0x07
     e30:	e0 2d       	mov	r30, r0
     e32:	91 8b       	std	Z+17, r25	; 0x11
     e34:	80 8b       	std	Z+16, r24	; 0x10
	
	//Game over menu
	char* end_of_game_options[2] = {"Continue","End game"};
     e36:	87 e1       	ldi	r24, 0x17	; 23
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	9a 87       	std	Y+10, r25	; 0x0a
     e3c:	89 87       	std	Y+9, r24	; 0x09
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	9c 87       	std	Y+12, r25	; 0x0c
     e44:	8b 87       	std	Y+11, r24	; 0x0b
	add_list_entries(&game_over,end_of_game_options,2);
     e46:	42 e0       	ldi	r20, 0x02	; 2
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	be 01       	movw	r22, r28
     e4c:	67 5f       	subi	r22, 0xF7	; 247
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 44 09 	call	0x1288	; 0x1288 <add_list_entries>
	game_over.sub_menus[0]->action = replay_game;
     e58:	e0 91 2c 01 	lds	r30, 0x012C
     e5c:	f0 91 2d 01 	lds	r31, 0x012D
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	8b ec       	ldi	r24, 0xCB	; 203
     e66:	96 e0       	ldi	r25, 0x06	; 6
     e68:	51 96       	adiw	r26, 0x11	; 17
     e6a:	9c 93       	st	X, r25
     e6c:	8e 93       	st	-X, r24
     e6e:	50 97       	sbiw	r26, 0x10	; 16
	game_over.sub_menus[1]->action = end_game;
     e70:	02 80       	ldd	r0, Z+2	; 0x02
     e72:	f3 81       	ldd	r31, Z+3	; 0x03
     e74:	e0 2d       	mov	r30, r0
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	96 e0       	ldi	r25, 0x06	; 6
     e7a:	91 8b       	std	Z+17, r25	; 0x11
     e7c:	80 8b       	std	Z+16, r24	; 0x10
}
     e7e:	2c 96       	adiw	r28, 0x0c	; 12
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <game_run>:
int tones[] = { 1898, 1690, 1500, 1420, 1265, 1194, 1126, 1063, 1001, 947, 893, 843, 795, 749, 710, 668, 630, 594 };

void game_run(){
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	68 97       	sbiw	r28, 0x18	; 24
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
	printf("%d\n",game_state);
     eb0:	80 91 ee 02 	lds	r24, 0x02EE
     eb4:	1f 92       	push	r1
     eb6:	8f 93       	push	r24
     eb8:	81 e4       	ldi	r24, 0x41	; 65
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	9f 93       	push	r25
     ebe:	8f 93       	push	r24
     ec0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <printf>
	switch(game_state){
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	80 91 ee 02 	lds	r24, 0x02EE
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	f9 f0       	breq	.+62     	; 0xf12 <game_run+0x82>
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <game_run+0x52>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	09 f4       	brne	.+2      	; 0xedc <game_run+0x4c>
     eda:	a3 c0       	rjmp	.+326    	; 0x1022 <game_run+0x192>
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	21 f0       	breq	.+8      	; 0xee8 <game_run+0x58>
     ee0:	f1 c0       	rjmp	.+482    	; 0x10c4 <game_run+0x234>
		case INITIALIZING:
			game_init();
     ee2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <game_init>
			//music_init(); Maybe?
			break;
     ee6:	ee c0       	rjmp	.+476    	; 0x10c4 <game_run+0x234>
		
		case PLAYER_SELECTION:
			if(flags.game_time_passed == 1){
     ee8:	80 91 fe 02 	lds	r24, 0x02FE
     eec:	81 ff       	sbrs	r24, 1
     eee:	ea c0       	rjmp	.+468    	; 0x10c4 <game_run+0x234>
				oled_clear_screen();
     ef0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <oled_clear_screen>
				choose_player.draw(&choose_player);
     ef4:	e0 91 1c 01 	lds	r30, 0x011C
     ef8:	f0 91 1d 01 	lds	r31, 0x011D
     efc:	8e e0       	ldi	r24, 0x0E	; 14
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	09 95       	icall
				oled_refresh();
     f02:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <oled_refresh>
				flags.game_time_passed = 0;
     f06:	80 91 fe 02 	lds	r24, 0x02FE
     f0a:	8d 7f       	andi	r24, 0xFD	; 253
     f0c:	80 93 fe 02 	sts	0x02FE, r24
     f10:	d9 c0       	rjmp	.+434    	; 0x10c4 <game_run+0x234>
			}
			break;
		
		case PLAYING:
			if(flags.game_time_passed == 1){
     f12:	80 91 fe 02 	lds	r24, 0x02FE
     f16:	81 ff       	sbrs	r24, 1
     f18:	74 c0       	rjmp	.+232    	; 0x1002 <game_run+0x172>
				//Update music?
				Position position = joy_get_position();
     f1a:	0e 94 a7 04 	call	0x94e	; 0x94e <joy_get_position>
     f1e:	29 83       	std	Y+1, r18	; 0x01
     f20:	3a 83       	std	Y+2, r19	; 0x02
     f22:	4b 83       	std	Y+3, r20	; 0x03
     f24:	5c 83       	std	Y+4, r21	; 0x04
     f26:	6d 83       	std	Y+5, r22	; 0x05
     f28:	7e 83       	std	Y+6, r23	; 0x06
     f2a:	8f 83       	std	Y+7, r24	; 0x07
     f2c:	98 87       	std	Y+8, r25	; 0x08
				Msg msg;
				msg.id = POSITION;
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	48 2f       	mov	r20, r24
     f32:	89 87       	std	Y+9, r24	; 0x09
     f34:	1a 86       	std	Y+10, r1	; 0x0a
				msg.length = sizeof(position);
     f36:	88 e0       	ldi	r24, 0x08	; 8
     f38:	68 2f       	mov	r22, r24
     f3a:	8b 87       	std	Y+11, r24	; 0x0b
     f3c:	1c 86       	std	Y+12, r1	; 0x0c
				msg.data = (char*) &position;
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	9e 87       	std	Y+14, r25	; 0x0e
     f44:	8d 87       	std	Y+13, r24	; 0x0d
				can_transmit(msg);
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <can_transmit>
				
				//UPDATING THE SCREEN
				char h_score_temp[5];
				char score_temp[5];
				game_time++;
     f50:	80 91 34 01 	lds	r24, 0x0134
     f54:	90 91 35 01 	lds	r25, 0x0135
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	90 93 35 01 	sts	0x0135, r25
     f5e:	80 93 34 01 	sts	0x0134, r24
				//sprintf(stemp,"%5d",game_time);
			
				oled_clear_screen();
     f62:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <oled_clear_screen>
				oled_print_string("HIGH SCORE:",0,0,5,0);
     f66:	00 e0       	ldi	r16, 0x00	; 0
     f68:	10 e0       	ldi	r17, 0x00	; 0
     f6a:	25 e0       	ldi	r18, 0x05	; 5
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	85 e4       	ldi	r24, 0x45	; 69
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
				oled_print_string("SCORE:",0,1,5,0);
     f78:	25 e0       	ldi	r18, 0x05	; 5
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	8a e4       	ldi	r24, 0x4A	; 74
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
				sprintf(h_score_temp,"%5d", high_score);
     f86:	80 91 f0 02 	lds	r24, 0x02F0
     f8a:	8f 93       	push	r24
     f8c:	80 91 ef 02 	lds	r24, 0x02EF
     f90:	8f 93       	push	r24
     f92:	0f 2e       	mov	r0, r31
     f94:	f1 e5       	ldi	r31, 0x51	; 81
     f96:	ef 2e       	mov	r14, r31
     f98:	f2 e0       	ldi	r31, 0x02	; 2
     f9a:	ff 2e       	mov	r15, r31
     f9c:	f0 2d       	mov	r31, r0
     f9e:	ff 92       	push	r15
     fa0:	ef 92       	push	r14
     fa2:	6e 01       	movw	r12, r28
     fa4:	84 e1       	ldi	r24, 0x14	; 20
     fa6:	c8 0e       	add	r12, r24
     fa8:	d1 1c       	adc	r13, r1
     faa:	df 92       	push	r13
     fac:	cf 92       	push	r12
     fae:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <sprintf>
				oled_print_string(h_score_temp,128-5*8,0,5,0);
     fb2:	25 e0       	ldi	r18, 0x05	; 5
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	68 e5       	ldi	r22, 0x58	; 88
     fb8:	c6 01       	movw	r24, r12
     fba:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
				sprintf(score_temp,"%5d", game_time);
     fbe:	80 91 35 01 	lds	r24, 0x0135
     fc2:	8f 93       	push	r24
     fc4:	80 91 34 01 	lds	r24, 0x0134
     fc8:	8f 93       	push	r24
     fca:	ff 92       	push	r15
     fcc:	ef 92       	push	r14
     fce:	7e 01       	movw	r14, r28
     fd0:	9f e0       	ldi	r25, 0x0F	; 15
     fd2:	e9 0e       	add	r14, r25
     fd4:	f1 1c       	adc	r15, r1
     fd6:	ff 92       	push	r15
     fd8:	ef 92       	push	r14
     fda:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <sprintf>
				oled_print_string(score_temp,128-5*8,1,5,0);
     fde:	25 e0       	ldi	r18, 0x05	; 5
     fe0:	41 e0       	ldi	r20, 0x01	; 1
     fe2:	68 e5       	ldi	r22, 0x58	; 88
     fe4:	c7 01       	movw	r24, r14
     fe6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
				oled_refresh();
     fea:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <oled_refresh>
				flags.game_time_passed = 0;
     fee:	80 91 fe 02 	lds	r24, 0x02FE
     ff2:	8d 7f       	andi	r24, 0xFD	; 253
     ff4:	80 93 fe 02 	sts	0x02FE, r24
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
			}
		
			if(flags.game_occluded){
    1002:	80 91 fe 02 	lds	r24, 0x02FE
    1006:	80 ff       	sbrs	r24, 0
    1008:	5d c0       	rjmp	.+186    	; 0x10c4 <game_run+0x234>
				//Checking if the ball is blocking the sensor
				score = game_time;
    100a:	80 91 34 01 	lds	r24, 0x0134
    100e:	90 91 35 01 	lds	r25, 0x0135
    1012:	90 93 f2 02 	sts	0x02F2, r25
    1016:	80 93 f1 02 	sts	0x02F1, r24
				game_state = GAME_OVER;
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	80 93 ee 02 	sts	0x02EE, r24
    1020:	51 c0       	rjmp	.+162    	; 0x10c4 <game_run+0x234>
			}
			break;
		
		case GAME_OVER:
			if(flags.game_time_passed == 1){
    1022:	80 91 fe 02 	lds	r24, 0x02FE
    1026:	81 ff       	sbrs	r24, 1
    1028:	4d c0       	rjmp	.+154    	; 0x10c4 <game_run+0x234>
				oled_clear_screen();
    102a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <oled_clear_screen>
				char score_temp[5];
				sprintf(score_temp,"%5d",score);
    102e:	80 91 f2 02 	lds	r24, 0x02F2
    1032:	8f 93       	push	r24
    1034:	80 91 f1 02 	lds	r24, 0x02F1
    1038:	8f 93       	push	r24
    103a:	81 e5       	ldi	r24, 0x51	; 81
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <sprintf>
				if(score > high_score){
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	20 91 f1 02 	lds	r18, 0x02F1
    105e:	30 91 f2 02 	lds	r19, 0x02F2
    1062:	80 91 ef 02 	lds	r24, 0x02EF
    1066:	90 91 f0 02 	lds	r25, 0x02F0
    106a:	82 17       	cp	r24, r18
    106c:	93 07       	cpc	r25, r19
    106e:	54 f4       	brge	.+20     	; 0x1084 <game_run+0x1f4>
					oled_print_string("NEW HIGH SCORE: ",0,1,5,0);
    1070:	00 e0       	ldi	r16, 0x00	; 0
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	25 e0       	ldi	r18, 0x05	; 5
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	85 e5       	ldi	r24, 0x55	; 85
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <game_run+0x206>
					//TODO: Store in EEPROM
				}
				else{
					oled_print_string("SCORE: ",0,1,5,0);
    1084:	00 e0       	ldi	r16, 0x00	; 0
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	25 e0       	ldi	r18, 0x05	; 5
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	8e e5       	ldi	r24, 0x5E	; 94
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
				}
				oled_print_string(score_temp,128-5*8,1,5,0);
    1096:	00 e0       	ldi	r16, 0x00	; 0
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	25 e0       	ldi	r18, 0x05	; 5
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	68 e5       	ldi	r22, 0x58	; 88
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
				game_over.draw(&game_over); //With offset
    10a8:	e0 91 2e 01 	lds	r30, 0x012E
    10ac:	f0 91 2f 01 	lds	r31, 0x012F
    10b0:	80 e2       	ldi	r24, 0x20	; 32
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	09 95       	icall
				oled_refresh();
    10b6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <oled_refresh>
				flags.game_time_passed = 0;
    10ba:	80 91 fe 02 	lds	r24, 0x02FE
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	80 93 fe 02 	sts	0x02FE, r24
			break;
	}
	
	//TODO: Create state-machine
	//TODO: Calibrate hardware (?)
}
    10c4:	68 96       	adiw	r28, 0x18	; 24
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	08 95       	ret

000010e2 <action_run_game>:
	}
}

//Action functions
Menu* action_run_game(Menu* self){
	state = in_game;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 fd 02 	sts	0x02FD, r24
}
    10e8:	08 95       	ret

000010ea <action_start_transition_right>:

Menu* action_start_transition_right(Menu* self){
	if (self->sub_menus[self->cursor]->num_of_entries != 0){
    10ea:	dc 01       	movw	r26, r24
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	1c 96       	adiw	r26, 0x0c	; 12
    10fa:	2d 91       	ld	r18, X+
    10fc:	3c 91       	ld	r19, X
    10fe:	1d 97       	sbiw	r26, 0x0d	; 13
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	01 90       	ld	r0, Z+
    1106:	f0 81       	ld	r31, Z
    1108:	e0 2d       	mov	r30, r0
    110a:	20 85       	ldd	r18, Z+8	; 0x08
    110c:	31 85       	ldd	r19, Z+9	; 0x09
    110e:	23 2b       	or	r18, r19
    1110:	59 f0       	breq	.+22     	; 0x1128 <action_start_transition_right+0x3e>
		self = self->sub_menus[self->cursor];
		joy_held = 1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	90 93 f4 02 	sts	0x02F4, r25
    111a:	80 93 f3 02 	sts	0x02F3, r24
		transition = 1;
    111e:	90 93 f8 02 	sts	0x02F8, r25
    1122:	80 93 f7 02 	sts	0x02F7, r24
	state = in_game;
}

Menu* action_start_transition_right(Menu* self){
	if (self->sub_menus[self->cursor]->num_of_entries != 0){
		self = self->sub_menus[self->cursor];
    1126:	cf 01       	movw	r24, r30
		joy_held = 1;
		transition = 1;
	}
	return self;
}
    1128:	08 95       	ret

0000112a <action_toggle_name>:
Menu* action_toggle_name(Menu* self){	//TEST FOR CHECK BOXES IN OPTIONS
	self->sub_menus[self->cursor]->name= "Herman";
    112a:	dc 01       	movw	r26, r24
    112c:	12 96       	adiw	r26, 0x02	; 2
    112e:	ed 91       	ld	r30, X+
    1130:	fc 91       	ld	r31, X
    1132:	13 97       	sbiw	r26, 0x03	; 3
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	1c 96       	adiw	r26, 0x0c	; 12
    113a:	2d 91       	ld	r18, X+
    113c:	3c 91       	ld	r19, X
    113e:	1d 97       	sbiw	r26, 0x0d	; 13
    1140:	e2 0f       	add	r30, r18
    1142:	f3 1f       	adc	r31, r19
    1144:	01 90       	ld	r0, Z+
    1146:	f0 81       	ld	r31, Z
    1148:	e0 2d       	mov	r30, r0
    114a:	2f e2       	ldi	r18, 0x2F	; 47
    114c:	32 e0       	ldi	r19, 0x02	; 2
    114e:	31 83       	std	Z+1, r19	; 0x01
    1150:	20 83       	st	Z, r18
	return self;
}
    1152:	08 95       	ret

00001154 <draw_list>:
			transition = 0;
		}
	}
	return self;
}
Menu* draw_list(Menu* self){
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	7c 01       	movw	r14, r24
	for(int i = 0; i < self->num_of_entries; i++){
    1162:	dc 01       	movw	r26, r24
    1164:	18 96       	adiw	r26, 0x08	; 8
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	19 97       	sbiw	r26, 0x09	; 9
    116c:	18 16       	cp	r1, r24
    116e:	19 06       	cpc	r1, r25
    1170:	fc f4       	brge	.+62     	; 0x11b0 <draw_list+0x5c>
    1172:	c0 e0       	ldi	r28, 0x00	; 0
    1174:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
    1176:	ce 01       	movw	r24, r28
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	d7 01       	movw	r26, r14
    117e:	1c 96       	adiw	r26, 0x0c	; 12
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	1d 97       	sbiw	r26, 0x0d	; 13
    1186:	e8 0f       	add	r30, r24
    1188:	f9 1f       	adc	r31, r25
    118a:	01 90       	ld	r0, Z+
    118c:	f0 81       	ld	r31, Z
    118e:	e0 2d       	mov	r30, r0
    1190:	00 e0       	ldi	r16, 0x00	; 0
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	25 e0       	ldi	r18, 0x05	; 5
    1196:	4c 2f       	mov	r20, r28
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
		}
	}
	return self;
}
Menu* draw_list(Menu* self){
	for(int i = 0; i < self->num_of_entries; i++){
    11a2:	21 96       	adiw	r28, 0x01	; 1
    11a4:	f7 01       	movw	r30, r14
    11a6:	80 85       	ldd	r24, Z+8	; 0x08
    11a8:	91 85       	ldd	r25, Z+9	; 0x09
    11aa:	c8 17       	cp	r28, r24
    11ac:	d9 07       	cpc	r29, r25
    11ae:	1c f3       	brlt	.-58     	; 0x1176 <draw_list+0x22>
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
	}
	//Where to go next
	Direction dir = joy_get_direction();
    11b0:	0e 94 d4 05 	call	0xba8	; 0xba8 <joy_get_direction>
	if((dir == LEFT) & (self->super_menu != NULL)){
		self = self->super_menu;
	}
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	08 95       	ret

000011c2 <add_sub_menu>:
		empty->num_of_entries = 0;
		add_sub_menu(menu, empty);
	}
}

void add_sub_menu(Menu* super, Menu* sub){
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    11d2:	88 85       	ldd	r24, Y+8	; 0x08
    11d4:	99 85       	ldd	r25, Y+9	; 0x09
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	99 87       	std	Y+9, r25	; 0x09
    11da:	88 87       	std	Y+8, r24	; 0x08
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    11dc:	fb 01       	movw	r30, r22
    11de:	d3 87       	std	Z+11, r29	; 0x0b
    11e0:	c2 87       	std	Z+10, r28	; 0x0a
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    11e2:	68 85       	ldd	r22, Y+8	; 0x08
    11e4:	79 85       	ldd	r23, Y+9	; 0x09
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ee:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <realloc>
    11f2:	9d 87       	std	Y+13, r25	; 0x0d
    11f4:	8c 87       	std	Y+12, r24	; 0x0c
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    11f6:	e8 84       	ldd	r14, Y+8	; 0x08
    11f8:	f9 84       	ldd	r15, Y+9	; 0x09
    11fa:	f1 e0       	ldi	r31, 0x01	; 1
    11fc:	ef 1a       	sub	r14, r31
    11fe:	f0 e8       	ldi	r31, 0x80	; 128
    1200:	ff 0a       	sbc	r15, r31
    1202:	ee 0c       	add	r14, r14
    1204:	ff 1c       	adc	r15, r15
    1206:	e8 0e       	add	r14, r24
    1208:	f9 1e       	adc	r15, r25
    120a:	82 e1       	ldi	r24, 0x12	; 18
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 cb 12 	call	0x2596	; 0x2596 <malloc>
    1212:	f7 01       	movw	r30, r14
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    1218:	e8 85       	ldd	r30, Y+8	; 0x08
    121a:	f9 85       	ldd	r31, Y+9	; 0x09
    121c:	e1 50       	subi	r30, 0x01	; 1
    121e:	f0 48       	sbci	r31, 0x80	; 128
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	8c 85       	ldd	r24, Y+12	; 0x0c
    1226:	9d 85       	ldd	r25, Y+13	; 0x0d
    1228:	e8 0f       	add	r30, r24
    122a:	f9 1f       	adc	r31, r25
    122c:	11 83       	std	Z+1, r17	; 0x01
    122e:	00 83       	st	Z, r16
}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	08 95       	ret

0000123e <menu_init>:

Menu* current_menu = &main_menu;

//The initializer - How the menus are related
void menu_init(){
	add_sub_menu(&main_menu, &play_game);
    123e:	68 e3       	ldi	r22, 0x38	; 56
    1240:	71 e0       	ldi	r23, 0x01	; 1
    1242:	84 ea       	ldi	r24, 0xA4	; 164
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>
	
	char* control_entr[3] = {"player1", "player2", "player3"};
	//add_list_entries(&control, control_entr, 3);
	add_sub_menu(&options, &control);
    124a:	6e e6       	ldi	r22, 0x6E	; 110
    124c:	71 e0       	ldi	r23, 0x01	; 1
    124e:	82 e9       	ldi	r24, 0x92	; 146
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>
	
	//char* contro_entr[4] = {"low", "medium", "high","ultra"};
	//add_list_entries(&contro, contro_entr, 4);
	add_sub_menu(&options, &contro);
    1256:	6c e5       	ldi	r22, 0x5C	; 92
    1258:	71 e0       	ldi	r23, 0x01	; 1
    125a:	82 e9       	ldi	r24, 0x92	; 146
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    1262:	62 e9       	ldi	r22, 0x92	; 146
    1264:	71 e0       	ldi	r23, 0x01	; 1
    1266:	84 ea       	ldi	r24, 0xA4	; 164
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>
	add_sub_menu(&main_menu, &toggle);
    126e:	6a e4       	ldi	r22, 0x4A	; 74
    1270:	71 e0       	ldi	r23, 0x01	; 1
    1272:	84 ea       	ldi	r24, 0xA4	; 164
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>
	//add_list_entries(&main_menu, diff_entr, 1);
	//add_sub_menu(&main_menu, &difficulty);
	
	char* high_entr[4] = {"1. herman","2. raoul","3. alle andre","-inf^inf. hans"};
	//add_list_entries(&highscore, high_entr,4);
	add_sub_menu(&main_menu, &highscore);
    127a:	60 e8       	ldi	r22, 0x80	; 128
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	84 ea       	ldi	r24, 0xA4	; 164
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>
    1286:	08 95       	ret

00001288 <add_list_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS POINT----------

//Functions for adding entries and nodes
void add_list_entries(Menu* menu, char* entries[], int num_of_new_entries){
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	8c 01       	movw	r16, r24

	//Creates an empty menu to be added
	for(int i = 0; i < num_of_new_entries; i++){
    1296:	14 16       	cp	r1, r20
    1298:	15 06       	cpc	r1, r21
    129a:	c4 f4       	brge	.+48     	; 0x12cc <add_list_entries+0x44>
    129c:	eb 01       	movw	r28, r22
    129e:	7a 01       	movw	r14, r20
    12a0:	ee 0c       	add	r14, r14
    12a2:	ff 1c       	adc	r15, r15
    12a4:	e6 0e       	add	r14, r22
    12a6:	f7 1e       	adc	r15, r23
		Menu* empty;
		empty = malloc(sizeof(*empty));
    12a8:	82 e1       	ldi	r24, 0x12	; 18
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 cb 12 	call	0x2596	; 0x2596 <malloc>
    12b0:	fc 01       	movw	r30, r24
		empty->name = entries[i];
    12b2:	29 91       	ld	r18, Y+
    12b4:	39 91       	ld	r19, Y+
    12b6:	31 83       	std	Z+1, r19	; 0x01
    12b8:	20 83       	st	Z, r18
		empty->num_of_entries = 0;
    12ba:	11 86       	std	Z+9, r1	; 0x09
    12bc:	10 86       	std	Z+8, r1	; 0x08
		add_sub_menu(menu, empty);
    12be:	bc 01       	movw	r22, r24
    12c0:	c8 01       	movw	r24, r16
    12c2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <add_sub_menu>

//Functions for adding entries and nodes
void add_list_entries(Menu* menu, char* entries[], int num_of_new_entries){

	//Creates an empty menu to be added
	for(int i = 0; i < num_of_new_entries; i++){
    12c6:	ce 15       	cp	r28, r14
    12c8:	df 05       	cpc	r29, r15
    12ca:	71 f7       	brne	.-36     	; 0x12a8 <add_list_entries+0x20>
		empty = malloc(sizeof(*empty));
		empty->name = entries[i];
		empty->num_of_entries = 0;
		add_sub_menu(menu, empty);
	}
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <menu_run_display>:
	return self;
}
//void action_animation(){}

void menu_run_display(){
	oled_clear_screen();
    12da:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    12de:	80 91 36 01 	lds	r24, 0x0136
    12e2:	90 91 37 01 	lds	r25, 0x0137
    12e6:	dc 01       	movw	r26, r24
    12e8:	1e 96       	adiw	r26, 0x0e	; 14
    12ea:	ed 91       	ld	r30, X+
    12ec:	fc 91       	ld	r31, X
    12ee:	1f 97       	sbiw	r26, 0x0f	; 15
    12f0:	09 95       	icall
    12f2:	90 93 37 01 	sts	0x0137, r25
    12f6:	80 93 36 01 	sts	0x0136, r24
	oled_refresh();
    12fa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <oled_refresh>
    12fe:	08 95       	ret

00001300 <menu_transition>:
}
void menu_transition(Menu *self, int dir){
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
	//If done with transition
	if (transition_count == 8){
    130e:	80 91 f5 02 	lds	r24, 0x02F5
    1312:	90 91 f6 02 	lds	r25, 0x02F6
    1316:	88 30       	cpi	r24, 0x08	; 8
    1318:	91 05       	cpc	r25, r1
    131a:	09 f0       	breq	.+2      	; 0x131e <menu_transition+0x1e>
    131c:	43 c0       	rjmp	.+134    	; 0x13a4 <menu_transition+0xa4>
		//wrapping
		if(transition_dir == UP){
    131e:	80 91 b6 01 	lds	r24, 0x01B6
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	69 f4       	brne	.+26     	; 0x1340 <menu_transition+0x40>
			self->cursor--;
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9b 83       	std	Y+3, r25	; 0x03
    132e:	8a 83       	std	Y+2, r24	; 0x02
			if(self->cursor == -1){
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	b9 f4       	brne	.+46     	; 0x1362 <menu_transition+0x62>
				self->cursor = self->num_of_entries - 1;
    1334:	88 85       	ldd	r24, Y+8	; 0x08
    1336:	99 85       	ldd	r25, Y+9	; 0x09
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	9b 83       	std	Y+3, r25	; 0x03
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	11 c0       	rjmp	.+34     	; 0x1362 <menu_transition+0x62>
			}
		}
		else if(transition_dir == DOWN){
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	79 f4       	brne	.+30     	; 0x1362 <menu_transition+0x62>
			//wrapping
			if(self->cursor == self->num_of_entries - 1){
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	28 85       	ldd	r18, Y+8	; 0x08
    134a:	39 85       	ldd	r19, Y+9	; 0x09
    134c:	21 50       	subi	r18, 0x01	; 1
    134e:	31 09       	sbc	r19, r1
    1350:	82 17       	cp	r24, r18
    1352:	93 07       	cpc	r25, r19
    1354:	19 f4       	brne	.+6      	; 0x135c <menu_transition+0x5c>
				self->cursor = 0;
    1356:	1b 82       	std	Y+3, r1	; 0x03
    1358:	1a 82       	std	Y+2, r1	; 0x02
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <menu_transition+0x62>
			}
			else{
				self->cursor++;
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
			}
		}
		transition_count = 0;
    1362:	10 92 f6 02 	sts	0x02F6, r1
    1366:	10 92 f5 02 	sts	0x02F5, r1
		transition_dir = NEUTRAL;
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	80 93 b6 01 	sts	0x01B6, r24
		transition = 0;
    1370:	10 92 f8 02 	sts	0x02F8, r1
    1374:	10 92 f7 02 	sts	0x02F7, r1
		oled_invert_rectangle(self->offset,8*(self->cursor + self->offset),64,8*((self->cursor + self->offset) + 1));//The final box
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	2a 81       	ldd	r18, Y+2	; 0x02
    137e:	3b 81       	ldd	r19, Y+3	; 0x03
    1380:	28 0f       	add	r18, r24
    1382:	39 1f       	adc	r19, r25
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	b9 01       	movw	r22, r18
    1396:	68 50       	subi	r22, 0x08	; 8
    1398:	71 09       	sbc	r23, r1
    139a:	40 e4       	ldi	r20, 0x40	; 64
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
    13a2:	a5 c0       	rjmp	.+330    	; 0x14ee <menu_transition+0x1ee>
	}
	//Update the transition
	else if(transition == 1 && (transition_dir == UP || transition_dir == DOWN)){
    13a4:	20 91 f7 02 	lds	r18, 0x02F7
    13a8:	30 91 f8 02 	lds	r19, 0x02F8
    13ac:	21 30       	cpi	r18, 0x01	; 1
    13ae:	31 05       	cpc	r19, r1
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <menu_transition+0xb4>
    13b2:	9d c0       	rjmp	.+314    	; 0x14ee <menu_transition+0x1ee>
    13b4:	20 91 b6 01 	lds	r18, 0x01B6
    13b8:	21 30       	cpi	r18, 0x01	; 1
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <menu_transition+0xc8>
    13bc:	23 30       	cpi	r18, 0x03	; 3
    13be:	09 f0       	breq	.+2      	; 0x13c2 <menu_transition+0xc2>
    13c0:	96 c0       	rjmp	.+300    	; 0x14ee <menu_transition+0x1ee>
		int sign = 1;
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <menu_transition+0xcc>
		if(transition_dir == UP){
			sign = -1;
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	7f ef       	ldi	r23, 0xFF	; 255
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor + self->offset) + sign*transition_count;
    13cc:	ea 81       	ldd	r30, Y+2	; 0x02
    13ce:	fb 81       	ldd	r31, Y+3	; 0x03
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	68 9f       	mul	r22, r24
    13d6:	90 01       	movw	r18, r0
    13d8:	69 9f       	mul	r22, r25
    13da:	30 0d       	add	r19, r0
    13dc:	78 9f       	mul	r23, r24
    13de:	30 0d       	add	r19, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	8f 01       	movw	r16, r30
    13e4:	04 0f       	add	r16, r20
    13e6:	15 1f       	adc	r17, r21
    13e8:	00 0f       	add	r16, r16
    13ea:	11 1f       	adc	r17, r17
    13ec:	00 0f       	add	r16, r16
    13ee:	11 1f       	adc	r17, r17
    13f0:	00 0f       	add	r16, r16
    13f2:	11 1f       	adc	r17, r17
    13f4:	02 0f       	add	r16, r18
    13f6:	13 1f       	adc	r17, r19
		int y2 = 8*(self->cursor + 1 + self->offset) + sign*transition_count;
    13f8:	31 96       	adiw	r30, 0x01	; 1
    13fa:	e4 0f       	add	r30, r20
    13fc:	f5 1f       	adc	r31, r21
    13fe:	7f 01       	movw	r14, r30
    1400:	ee 0c       	add	r14, r14
    1402:	ff 1c       	adc	r15, r15
    1404:	ee 0c       	add	r14, r14
    1406:	ff 1c       	adc	r15, r15
    1408:	ee 0c       	add	r14, r14
    140a:	ff 1c       	adc	r15, r15
    140c:	e2 0e       	add	r14, r18
    140e:	f3 1e       	adc	r15, r19
		
		if(y1 < 8*self->offset){
    1410:	ba 01       	movw	r22, r20
    1412:	66 0f       	add	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	06 17       	cp	r16, r22
    1420:	17 07       	cpc	r17, r23
    1422:	1c f5       	brge	.+70     	; 0x146a <menu_transition+0x16a>
			oled_invert_rectangle(x1, 8*self->offset,x2,y2);
    1424:	97 01       	movw	r18, r14
    1426:	40 e4       	ldi	r20, 0x40	; 64
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
			oled_invert_rectangle(x1,(self->num_of_entries)*8+y1,x2,(self->num_of_entries + self->offset)*8);
    1432:	88 85       	ldd	r24, Y+8	; 0x08
    1434:	99 85       	ldd	r25, Y+9	; 0x09
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	28 0f       	add	r18, r24
    143c:	39 1f       	adc	r19, r25
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	22 0f       	add	r18, r18
    1448:	33 1f       	adc	r19, r19
    144a:	bc 01       	movw	r22, r24
    144c:	66 0f       	add	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	66 0f       	add	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	60 0f       	add	r22, r16
    145a:	71 1f       	adc	r23, r17
    145c:	40 e4       	ldi	r20, 0x40	; 64
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
    1468:	39 c0       	rjmp	.+114    	; 0x14dc <menu_transition+0x1dc>
		}
		else if(y2 > (self->num_of_entries + self->offset)*8){
    146a:	28 85       	ldd	r18, Y+8	; 0x08
    146c:	39 85       	ldd	r19, Y+9	; 0x09
    146e:	42 0f       	add	r20, r18
    1470:	53 1f       	adc	r21, r19
    1472:	9a 01       	movw	r18, r20
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	22 0f       	add	r18, r18
    147a:	33 1f       	adc	r19, r19
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	2e 15       	cp	r18, r14
    1482:	3f 05       	cpc	r19, r15
    1484:	1c f5       	brge	.+70     	; 0x14cc <menu_transition+0x1cc>
			oled_invert_rectangle(x1,y1,x2,(self->num_of_entries + self->offset)*8);
    1486:	40 e4       	ldi	r20, 0x40	; 64
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	b8 01       	movw	r22, r16
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
			oled_invert_rectangle(x1,8*self->offset,x2,y2 - (self->num_of_entries)*8);
    1494:	28 85       	ldd	r18, Y+8	; 0x08
    1496:	39 85       	ldd	r19, Y+9	; 0x09
    1498:	22 0f       	add	r18, r18
    149a:	33 1f       	adc	r19, r19
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	31 95       	neg	r19
    14a6:	21 95       	neg	r18
    14a8:	31 09       	sbc	r19, r1
    14aa:	2e 0d       	add	r18, r14
    14ac:	3f 1d       	adc	r19, r15
    14ae:	6c 81       	ldd	r22, Y+4	; 0x04
    14b0:	7d 81       	ldd	r23, Y+5	; 0x05
    14b2:	66 0f       	add	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	66 0f       	add	r22, r22
    14bc:	77 1f       	adc	r23, r23
    14be:	40 e4       	ldi	r20, 0x40	; 64
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
    14ca:	08 c0       	rjmp	.+16     	; 0x14dc <menu_transition+0x1dc>
		}
		else{
			oled_invert_rectangle(x1,y1,x2,y2);
    14cc:	97 01       	movw	r18, r14
    14ce:	40 e4       	ldi	r20, 0x40	; 64
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	b8 01       	movw	r22, r16
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
		}
		transition_count++;
    14dc:	80 91 f5 02 	lds	r24, 0x02F5
    14e0:	90 91 f6 02 	lds	r25, 0x02F6
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	90 93 f6 02 	sts	0x02F6, r25
    14ea:	80 93 f5 02 	sts	0x02F5, r24
	}
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	08 95       	ret

000014fc <draw_menu>:
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
	super->sub_menus[super->num_of_entries - 1] = sub;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	28 97       	sbiw	r28, 0x08	; 8
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	6c 01       	movw	r12, r24
	//Print the menu
	
	oled_print_string(self->name,10,0,8,0);
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	28 e0       	ldi	r18, 0x08	; 8
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	6a e0       	ldi	r22, 0x0A	; 10
    1528:	dc 01       	movw	r26, r24
    152a:	8d 91       	ld	r24, X+
    152c:	9c 91       	ld	r25, X
    152e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
	for(int i = 0; i < self->num_of_entries; i++){
    1532:	f6 01       	movw	r30, r12
    1534:	80 85       	ldd	r24, Z+8	; 0x08
    1536:	91 85       	ldd	r25, Z+9	; 0x09
    1538:	18 16       	cp	r1, r24
    153a:	19 06       	cpc	r1, r25
    153c:	24 f5       	brge	.+72     	; 0x1586 <draw_menu+0x8a>
    153e:	e1 2c       	mov	r14, r1
    1540:	f1 2c       	mov	r15, r1
		oled_print_string(self->sub_menus[i]->name,0,i + self->offset,5,0);
    1542:	d6 01       	movw	r26, r12
    1544:	14 96       	adiw	r26, 0x04	; 4
    1546:	4c 91       	ld	r20, X
    1548:	14 97       	sbiw	r26, 0x04	; 4
    154a:	4e 0d       	add	r20, r14
    154c:	c7 01       	movw	r24, r14
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	1c 96       	adiw	r26, 0x0c	; 12
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	1d 97       	sbiw	r26, 0x0d	; 13
    155a:	e8 0f       	add	r30, r24
    155c:	f9 1f       	adc	r31, r25
    155e:	01 90       	ld	r0, Z+
    1560:	f0 81       	ld	r31, Z
    1562:	e0 2d       	mov	r30, r0
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	25 e0       	ldi	r18, 0x05	; 5
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <oled_print_string>
//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	//Print the menu
	
	oled_print_string(self->name,10,0,8,0);
	for(int i = 0; i < self->num_of_entries; i++){
    1574:	bf ef       	ldi	r27, 0xFF	; 255
    1576:	eb 1a       	sub	r14, r27
    1578:	fb 0a       	sbc	r15, r27
    157a:	f6 01       	movw	r30, r12
    157c:	80 85       	ldd	r24, Z+8	; 0x08
    157e:	91 85       	ldd	r25, Z+9	; 0x09
    1580:	e8 16       	cp	r14, r24
    1582:	f9 06       	cpc	r15, r25
    1584:	f4 f2       	brlt	.-68     	; 0x1542 <draw_menu+0x46>
		oled_print_string(self->sub_menus[i]->name,0,i + self->offset,5,0);
	}
	if(transition == 0){
    1586:	80 91 f7 02 	lds	r24, 0x02F7
    158a:	90 91 f8 02 	lds	r25, 0x02F8
    158e:	89 2b       	or	r24, r25
    1590:	e1 f4       	brne	.+56     	; 0x15ca <draw_menu+0xce>
		oled_invert_rectangle(0,8*(self->cursor + self->offset),64,8*((self->cursor + self->offset) + 1));
    1592:	d6 01       	movw	r26, r12
    1594:	12 96       	adiw	r26, 0x02	; 2
    1596:	2d 91       	ld	r18, X+
    1598:	3c 91       	ld	r19, X
    159a:	13 97       	sbiw	r26, 0x03	; 3
    159c:	14 96       	adiw	r26, 0x04	; 4
    159e:	8d 91       	ld	r24, X+
    15a0:	9c 91       	ld	r25, X
    15a2:	15 97       	sbiw	r26, 0x05	; 5
    15a4:	28 0f       	add	r18, r24
    15a6:	39 1f       	adc	r19, r25
    15a8:	2f 5f       	subi	r18, 0xFF	; 255
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	b9 01       	movw	r22, r18
    15ba:	68 50       	subi	r22, 0x08	; 8
    15bc:	71 09       	sbc	r23, r1
    15be:	40 e4       	ldi	r20, 0x40	; 64
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <oled_invert_rectangle>
	}
	//Where to go next
	Direction dir = joy_get_direction();
    15ca:	0e 94 d4 05 	call	0xba8	; 0xba8 <joy_get_direction>
    15ce:	18 2f       	mov	r17, r24
	Position pos = joy_get_position();
    15d0:	0e 94 a7 04 	call	0x94e	; 0x94e <joy_get_position>
    15d4:	29 83       	std	Y+1, r18	; 0x01
    15d6:	3a 83       	std	Y+2, r19	; 0x02
    15d8:	4b 83       	std	Y+3, r20	; 0x03
    15da:	5c 83       	std	Y+4, r21	; 0x04
    15dc:	6d 83       	std	Y+5, r22	; 0x05
    15de:	7e 83       	std	Y+6, r23	; 0x06
    15e0:	8f 83       	std	Y+7, r24	; 0x07
    15e2:	98 87       	std	Y+8, r25	; 0x08
    15e4:	4d 81       	ldd	r20, Y+5	; 0x05
    15e6:	5e 81       	ldd	r21, Y+6	; 0x06
	//THIS DOES NOT WORK IF THE JOYSTICK IS NOT WORKING
	if(transition == 0){
    15e8:	20 91 f7 02 	lds	r18, 0x02F7
    15ec:	30 91 f8 02 	lds	r19, 0x02F8
    15f0:	23 2b       	or	r18, r19
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <draw_menu+0xfa>
    15f4:	66 c0       	rjmp	.+204    	; 0x16c2 <draw_menu+0x1c6>
		switch(dir){
    15f6:	11 30       	cpi	r17, 0x01	; 1
    15f8:	59 f0       	breq	.+22     	; 0x1610 <draw_menu+0x114>
    15fa:	2c f4       	brge	.+10     	; 0x1606 <draw_menu+0x10a>
    15fc:	1f 3f       	cpi	r17, 0xFF	; 255
    15fe:	91 f1       	breq	.+100    	; 0x1664 <draw_menu+0x168>
    1600:	11 23       	and	r17, r17
    1602:	59 f1       	breq	.+86     	; 0x165a <draw_menu+0x15e>
    1604:	75 c0       	rjmp	.+234    	; 0x16f0 <draw_menu+0x1f4>
    1606:	12 30       	cpi	r17, 0x02	; 2
    1608:	b1 f0       	breq	.+44     	; 0x1636 <draw_menu+0x13a>
    160a:	13 30       	cpi	r17, 0x03	; 3
    160c:	51 f0       	breq	.+20     	; 0x1622 <draw_menu+0x126>
    160e:	70 c0       	rjmp	.+224    	; 0x16f0 <draw_menu+0x1f4>
			case UP:
			transition = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	90 93 f8 02 	sts	0x02F8, r25
    1618:	80 93 f7 02 	sts	0x02F7, r24
			transition_dir = UP;
    161c:	80 93 b6 01 	sts	0x01B6, r24
			break;
    1620:	67 c0       	rjmp	.+206    	; 0x16f0 <draw_menu+0x1f4>
			case DOWN:
			transition = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 f8 02 	sts	0x02F8, r25
    162a:	80 93 f7 02 	sts	0x02F7, r24
			transition_dir = DOWN;
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	80 93 b6 01 	sts	0x01B6, r24
			break;
    1634:	5d c0       	rjmp	.+186    	; 0x16f0 <draw_menu+0x1f4>
			case LEFT:
			if (self->super_menu != NULL){
    1636:	f6 01       	movw	r30, r12
    1638:	82 85       	ldd	r24, Z+10	; 0x0a
    163a:	93 85       	ldd	r25, Z+11	; 0x0b
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	09 f4       	brne	.+2      	; 0x1642 <draw_menu+0x146>
    1640:	57 c0       	rjmp	.+174    	; 0x16f0 <draw_menu+0x1f4>
				self = self->super_menu;
				joy_held = 1;
    1642:	21 e0       	ldi	r18, 0x01	; 1
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	30 93 f4 02 	sts	0x02F4, r19
    164a:	20 93 f3 02 	sts	0x02F3, r18
				transition = 1;
    164e:	30 93 f8 02 	sts	0x02F8, r19
    1652:	20 93 f7 02 	sts	0x02F7, r18
			transition = 1;
			transition_dir = DOWN;
			break;
			case LEFT:
			if (self->super_menu != NULL){
				self = self->super_menu;
    1656:	6c 01       	movw	r12, r24
    1658:	4b c0       	rjmp	.+150    	; 0x16f0 <draw_menu+0x1f4>
				joy_held = 1;
				transition = 1;
			}
			break;
			case RIGHT:
			self = action_start_transition_right(self);
    165a:	c6 01       	movw	r24, r12
    165c:	0e 94 75 08 	call	0x10ea	; 0x10ea <action_start_transition_right>
    1660:	6c 01       	movw	r12, r24
			break;
    1662:	46 c0       	rjmp	.+140    	; 0x16f0 <draw_menu+0x1f4>
			case NEUTRAL:
			if(pos.z  == 1 && self->sub_menus[self->cursor]->action != NULL && joy_held == 0){
    1664:	41 30       	cpi	r20, 0x01	; 1
    1666:	51 05       	cpc	r21, r1
    1668:	29 f5       	brne	.+74     	; 0x16b4 <draw_menu+0x1b8>
    166a:	d6 01       	movw	r26, r12
    166c:	12 96       	adiw	r26, 0x02	; 2
    166e:	8d 91       	ld	r24, X+
    1670:	9c 91       	ld	r25, X
    1672:	13 97       	sbiw	r26, 0x03	; 3
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	1c 96       	adiw	r26, 0x0c	; 12
    167a:	ed 91       	ld	r30, X+
    167c:	fc 91       	ld	r31, X
    167e:	1d 97       	sbiw	r26, 0x0d	; 13
    1680:	e8 0f       	add	r30, r24
    1682:	f9 1f       	adc	r31, r25
    1684:	01 90       	ld	r0, Z+
    1686:	f0 81       	ld	r31, Z
    1688:	e0 2d       	mov	r30, r0
    168a:	00 88       	ldd	r0, Z+16	; 0x10
    168c:	f1 89       	ldd	r31, Z+17	; 0x11
    168e:	e0 2d       	mov	r30, r0
    1690:	30 97       	sbiw	r30, 0x00	; 0
    1692:	71 f1       	breq	.+92     	; 0x16f0 <draw_menu+0x1f4>
    1694:	80 91 f3 02 	lds	r24, 0x02F3
    1698:	90 91 f4 02 	lds	r25, 0x02F4
    169c:	89 2b       	or	r24, r25
    169e:	41 f5       	brne	.+80     	; 0x16f0 <draw_menu+0x1f4>
				self = self->sub_menus[self->cursor]->action(self);
    16a0:	c6 01       	movw	r24, r12
    16a2:	09 95       	icall
    16a4:	6c 01       	movw	r12, r24
				joy_held = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	90 93 f4 02 	sts	0x02F4, r25
    16ae:	80 93 f3 02 	sts	0x02F3, r24
    16b2:	1e c0       	rjmp	.+60     	; 0x16f0 <draw_menu+0x1f4>
				
			}
			else if(pos.z == 0){
    16b4:	45 2b       	or	r20, r21
    16b6:	e1 f4       	brne	.+56     	; 0x16f0 <draw_menu+0x1f4>
				joy_held = 0;
    16b8:	10 92 f4 02 	sts	0x02F4, r1
    16bc:	10 92 f3 02 	sts	0x02F3, r1
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <draw_menu+0x1f4>
			}
			break;
		}
	}
	else{
		if (transition_dir == UP || transition_dir == DOWN){
    16c2:	60 91 b6 01 	lds	r22, 0x01B6
    16c6:	86 2f       	mov	r24, r22
    16c8:	8d 7f       	andi	r24, 0xFD	; 253
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	39 f4       	brne	.+14     	; 0x16dc <draw_menu+0x1e0>
			menu_transition(self, transition_dir);
    16ce:	77 27       	eor	r23, r23
    16d0:	67 fd       	sbrc	r22, 7
    16d2:	70 95       	com	r23
    16d4:	c6 01       	movw	r24, r12
    16d6:	0e 94 80 09 	call	0x1300	; 0x1300 <menu_transition>
    16da:	0a c0       	rjmp	.+20     	; 0x16f0 <draw_menu+0x1f4>
		}
		else if(dir == NEUTRAL){
    16dc:	1f 3f       	cpi	r17, 0xFF	; 255
    16de:	41 f4       	brne	.+16     	; 0x16f0 <draw_menu+0x1f4>
			joy_held = 0;
    16e0:	10 92 f4 02 	sts	0x02F4, r1
    16e4:	10 92 f3 02 	sts	0x02F3, r1
			transition = 0;
    16e8:	10 92 f8 02 	sts	0x02F8, r1
    16ec:	10 92 f7 02 	sts	0x02F7, r1
		}
	}
	return self;
}
    16f0:	c6 01       	movw	r24, r12
    16f2:	28 96       	adiw	r28, 0x08	; 8
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	08 95       	ret

00001710 <music_init>:
				 {.note = E5,  .duration = 2},
				 {.note = F4,  .duration = 1}};
	
	
void music_init(){
	pwm_init();
    1710:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <pwm_init>
	double T = 0;		//Time between notes
	int OCRA_num = (double)F_CPU*T/(2.0*256.0)-1.0;
	
	//Prescale with 256 to get seconds
	OCR3AH = OCRA_num >> 8;
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	80 93 87 00 	sts	0x0087, r24
	OCR3AL = OCRA_num;									//Sets the value for the compare match to 10240
    171a:	80 93 86 00 	sts	0x0086, r24
	TCCR3A = (1 << WGM31) | (1 << WGM30);				//Compare match mode
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS12);	//clock source to be used by the Timer/Counter clkI/O/8
    1724:	8c e1       	ldi	r24, 0x1C	; 28
    1726:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = (1 << OCIE3A);								//Interrupt on compare match
    172a:	80 e1       	ldi	r24, 0x10	; 16
    172c:	80 93 7d 00 	sts	0x007D, r24
    1730:	08 95       	ret

00001732 <music_play_song>:
	pwm_change_freq(note);
	//TCCR3B |= (1 << CS12); //Enable timer
}

void music_play_song(){
	if(song_count == length){
    1732:	20 91 fb 02 	lds	r18, 0x02FB
    1736:	30 91 fc 02 	lds	r19, 0x02FC
    173a:	80 91 f9 02 	lds	r24, 0x02F9
    173e:	90 91 fa 02 	lds	r25, 0x02FA
    1742:	28 17       	cp	r18, r24
    1744:	39 07       	cpc	r19, r25
    1746:	21 f4       	brne	.+8      	; 0x1750 <music_play_song+0x1e>
		song_count = 0;
    1748:	10 92 fc 02 	sts	0x02FC, r1
    174c:	10 92 fb 02 	sts	0x02FB, r1
	}
	tone(song[song_count].note,song[song_count].duration);
    1750:	e0 91 fb 02 	lds	r30, 0x02FB
    1754:	f0 91 fc 02 	lds	r31, 0x02FC
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	ee 0f       	add	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	e9 54       	subi	r30, 0x49	; 73
    1766:	fe 4f       	sbci	r31, 0xFE	; 254
	//int OCRA_num = (double)F_CPU*duration/(2.0*256.0)-1.0; //Max 6 seconds
	//OCR3AH = OCRA_num >> 8;	//New top to count to
	//OCR3AL = OCRA_num;
	//TCNT3H = 0;	//Counting register to 0
	//TCNT3L = 0;
	pwm_change_freq(note);
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0e 94 ba 10 	call	0x2174	; 0x2174 <__fixsfsi>
    1774:	cb 01       	movw	r24, r22
    1776:	0e 94 70 06 	call	0xce0	; 0xce0 <pwm_change_freq>
void music_play_song(){
	if(song_count == length){
		song_count = 0;
	}
	tone(song[song_count].note,song[song_count].duration);
	song_count++;
    177a:	80 91 fb 02 	lds	r24, 0x02FB
    177e:	90 91 fc 02 	lds	r25, 0x02FC
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	90 93 fc 02 	sts	0x02FC, r25
    1788:	80 93 fb 02 	sts	0x02FB, r24
    178c:	08 95       	ret

0000178e <__vector_7>:
}

//TODO: Change time for music interrupts 
//-Something weird happening

ISR(TIMER3_COMPA_vect){
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	8f 93       	push	r24
	flags.music_beat = 1;
    179a:	80 91 fe 02 	lds	r24, 0x02FE
    179e:	80 61       	ori	r24, 0x10	; 16
    17a0:	80 93 fe 02 	sts	0x02FE, r24
}
    17a4:	8f 91       	pop	r24
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <main>:
//Global variables
volatile Flags flags = {0,0,0,0,0,0};
State state = in_menu;

int main(void)
{
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <main+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <main+0x8>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <main+0xa>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<SRE);	//Enable external memory
    17be:	85 b7       	in	r24, 0x35	; 53
    17c0:	80 68       	ori	r24, 0x80	; 128
    17c2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); 
    17c4:	80 b7       	in	r24, 0x30	; 48
    17c6:	80 62       	ori	r24, 0x20	; 32
    17c8:	80 bf       	out	0x30, r24	; 48
	uart_init(9600);
    17ca:	80 e8       	ldi	r24, 0x80	; 128
    17cc:	95 e2       	ldi	r25, 0x25	; 37
    17ce:	0e 94 9d 06 	call	0xd3a	; 0xd3a <uart_init>
	printf("\r\nRESET\r\n");
    17d2:	89 ec       	ldi	r24, 0xC9	; 201
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <puts>
	can_init(MODE_NORMAL);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 b7 03 	call	0x76e	; 0x76e <can_init>
	adc_init();
    17e2:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
    17e6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <oled_init>
	joy_init();
    17ea:	0e 94 a4 04 	call	0x948	; 0x948 <joy_init>
	touch_init();
    17ee:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <touch_init>
	music_init();
    17f2:	0e 94 88 0b 	call	0x1710	; 0x1710 <music_init>
	menu_init();
    17f6:	0e 94 1f 09 	call	0x123e	; 0x123e <menu_init>
	sei();
    17fa:	78 94       	sei
				case POSITION:
					position_received = *(Position*)msg_received.data;
					printf("%4d\r", position_received.y);
					break;
				default:
					printf("ID unknown\r");
    17fc:	0f 2e       	mov	r0, r31
    17fe:	f7 ed       	ldi	r31, 0xD7	; 215
    1800:	cf 2e       	mov	r12, r31
    1802:	f2 e0       	ldi	r31, 0x02	; 2
    1804:	df 2e       	mov	r13, r31
    1806:	f0 2d       	mov	r31, r0
				case OCCLUDED:
					flags.game_occluded = 1;
					break;
				case POSITION:
					position_received = *(Position*)msg_received.data;
					printf("%4d\r", position_received.y);
    1808:	0f 2e       	mov	r0, r31
    180a:	f2 ed       	ldi	r31, 0xD2	; 210
    180c:	ef 2e       	mov	r14, r31
    180e:	f2 e0       	ldi	r31, 0x02	; 2
    1810:	ff 2e       	mov	r15, r31
    1812:	f0 2d       	mov	r31, r0
	Position position_received = {0,0,0,0};
	Msg msg_received;
	
	while (1)
	{	
		if(flags.music_beat == 1){
    1814:	80 91 fe 02 	lds	r24, 0x02FE
    1818:	84 ff       	sbrs	r24, 4
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <main+0x74>
			music_play_song();
    181c:	0e 94 99 0b 	call	0x1732	; 0x1732 <music_play_song>
			flags.music_beat == 0;
    1820:	80 91 fe 02 	lds	r24, 0x02FE
		}
		
		switch (state){
    1824:	80 91 fd 02 	lds	r24, 0x02FD
    1828:	88 23       	and	r24, r24
    182a:	19 f0       	breq	.+6      	; 0x1832 <main+0x82>
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	69 f0       	breq	.+26     	; 0x184a <main+0x9a>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <main+0xaa>
			case in_menu:
				if(flags.oled_refresh_timeout == 1){
    1832:	80 91 fe 02 	lds	r24, 0x02FE
    1836:	83 ff       	sbrs	r24, 3
    1838:	10 c0       	rjmp	.+32     	; 0x185a <main+0xaa>
					menu_run_display();
    183a:	0e 94 6d 09 	call	0x12da	; 0x12da <menu_run_display>
					flags.oled_refresh_timeout = 0;
    183e:	80 91 fe 02 	lds	r24, 0x02FE
    1842:	87 7f       	andi	r24, 0xF7	; 247
    1844:	80 93 fe 02 	sts	0x02FE, r24
    1848:	08 c0       	rjmp	.+16     	; 0x185a <main+0xaa>
				}
				break;
			case in_game:		
				if(flags.game_interrupt == 1){
    184a:	80 91 fe 02 	lds	r24, 0x02FE
    184e:	82 ff       	sbrs	r24, 2
    1850:	04 c0       	rjmp	.+8      	; 0x185a <main+0xaa>
					game_run();
    1852:	0e 94 48 07 	call	0xe90	; 0xe90 <game_run>
					flags.game_interrupt == 0; //set to 0 when we start using interrupts
    1856:	80 91 fe 02 	lds	r24, 0x02FE
				}
				break;
		}
		
		if (can_message_received == 1){
    185a:	80 91 e4 02 	lds	r24, 0x02E4
    185e:	90 91 e5 02 	lds	r25, 0x02E5
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	a1 f5       	brne	.+104    	; 0x18ce <main+0x11e>
			msg_received = can_receive();
    1866:	0e 94 29 04 	call	0x852	; 0x852 <can_receive>
    186a:	29 83       	std	Y+1, r18	; 0x01
    186c:	3a 83       	std	Y+2, r19	; 0x02
    186e:	4b 83       	std	Y+3, r20	; 0x03
    1870:	5c 83       	std	Y+4, r21	; 0x04
    1872:	6d 83       	std	Y+5, r22	; 0x05
    1874:	7e 83       	std	Y+6, r23	; 0x06
    1876:	0d 81       	ldd	r16, Y+5	; 0x05
    1878:	1e 81       	ldd	r17, Y+6	; 0x06
			switch (msg_received.id){
    187a:	29 81       	ldd	r18, Y+1	; 0x01
    187c:	3a 81       	ldd	r19, Y+2	; 0x02
    187e:	23 30       	cpi	r18, 0x03	; 3
    1880:	31 05       	cpc	r19, r1
    1882:	21 f0       	breq	.+8      	; 0x188c <main+0xdc>
    1884:	24 30       	cpi	r18, 0x04	; 4
    1886:	31 05       	cpc	r19, r1
    1888:	39 f0       	breq	.+14     	; 0x1898 <main+0xe8>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <main+0x104>
				case OCCLUDED:
					flags.game_occluded = 1;
    188c:	80 91 fe 02 	lds	r24, 0x02FE
    1890:	81 60       	ori	r24, 0x01	; 1
    1892:	80 93 fe 02 	sts	0x02FE, r24
					break;
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <main+0x110>
				case POSITION:
					position_received = *(Position*)msg_received.data;
					printf("%4d\r", position_received.y);
    1898:	f8 01       	movw	r30, r16
    189a:	83 81       	ldd	r24, Z+3	; 0x03
    189c:	8f 93       	push	r24
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	8f 93       	push	r24
    18a2:	ff 92       	push	r15
    18a4:	ef 92       	push	r14
    18a6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <printf>
					break;
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <main+0x110>
				default:
					printf("ID unknown\r");
    18b4:	df 92       	push	r13
    18b6:	cf 92       	push	r12
    18b8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <printf>
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
			}
			free(msg_received.data);
    18c0:	c8 01       	movw	r24, r16
    18c2:	0e 94 63 13 	call	0x26c6	; 0x26c6 <free>
			can_message_received = 0;
    18c6:	10 92 e5 02 	sts	0x02E5, r1
    18ca:	10 92 e4 02 	sts	0x02E4, r1
		}
		
	sleep_enable(); //reduces power draw by 5-6 mA?
    18ce:	85 b7       	in	r24, 0x35	; 53
    18d0:	80 62       	ori	r24, 0x20	; 32
    18d2:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
    18d4:	88 95       	sleep
	sleep_disable(); //SMCR &= ~(1<<SE);
    18d6:	85 b7       	in	r24, 0x35	; 53
    18d8:	8f 7d       	andi	r24, 0xDF	; 223
    18da:	85 bf       	out	0x35, r24	; 53
	}
    18dc:	9b cf       	rjmp	.-202    	; 0x1814 <main+0x64>

000018de <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    18de:	20 91 0d 02 	lds	r18, 0x020D
    18e2:	30 91 0e 02 	lds	r19, 0x020E
    18e6:	23 2b       	or	r18, r19
    18e8:	d1 f0       	breq	.+52     	; 0x191e <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    18ea:	20 91 ff 02 	lds	r18, 0x02FF
    18ee:	30 91 00 03 	lds	r19, 0x0300
    18f2:	21 15       	cp	r18, r1
    18f4:	94 e0       	ldi	r25, 0x04	; 4
    18f6:	39 07       	cpc	r19, r25
    18f8:	bc f4       	brge	.+46     	; 0x1928 <oled_write_data+0x4a>
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    18fa:	40 91 09 02 	lds	r20, 0x0209
    18fe:	50 91 0a 02 	lds	r21, 0x020A
    1902:	fa 01       	movw	r30, r20
    1904:	e2 0f       	add	r30, r18
    1906:	f3 1f       	adc	r31, r19
    1908:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    190a:	80 91 ff 02 	lds	r24, 0x02FF
    190e:	90 91 00 03 	lds	r25, 0x0300
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	90 93 00 03 	sts	0x0300, r25
    1918:	80 93 ff 02 	sts	0x02FF, r24
    191c:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    191e:	e0 91 07 02 	lds	r30, 0x0207
    1922:	f0 91 08 02 	lds	r31, 0x0208
    1926:	80 83       	st	Z, r24
    1928:	08 95       	ret

0000192a <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    1936:	68 30       	cpi	r22, 0x08	; 8
    1938:	59 f4       	brne	.+22     	; 0x1950 <oled_print_char+0x26>
		font_address = &font8[character-' '];
    193a:	08 2f       	mov	r16, r24
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	00 0f       	add	r16, r16
    1940:	11 1f       	adc	r17, r17
    1942:	00 0f       	add	r16, r16
    1944:	11 1f       	adc	r17, r17
    1946:	00 0f       	add	r16, r16
    1948:	11 1f       	adc	r17, r17
    194a:	0b 50       	subi	r16, 0x0B	; 11
    194c:	1d 4f       	sbci	r17, 0xFD	; 253
    194e:	1a c0       	rjmp	.+52     	; 0x1984 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    1950:	65 30       	cpi	r22, 0x05	; 5
    1952:	71 f4       	brne	.+28     	; 0x1970 <oled_print_char+0x46>
		font_address = &font5[character-' '];
    1954:	08 2f       	mov	r16, r24
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	00 52       	subi	r16, 0x20	; 32
    195a:	11 09       	sbc	r17, r1
    195c:	c8 01       	movw	r24, r16
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	08 0f       	add	r16, r24
    1968:	19 1f       	adc	r17, r25
    196a:	06 5e       	subi	r16, 0xE6	; 230
    196c:	1d 4f       	sbci	r17, 0xFD	; 253
    196e:	0a c0       	rjmp	.+20     	; 0x1984 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    1970:	64 30       	cpi	r22, 0x04	; 4
    1972:	41 f4       	brne	.+16     	; 0x1984 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    1974:	08 2f       	mov	r16, r24
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	00 0f       	add	r16, r16
    197a:	11 1f       	adc	r17, r17
    197c:	00 0f       	add	r16, r16
    197e:	11 1f       	adc	r17, r17
    1980:	02 5e       	subi	r16, 0xE2	; 226
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    1984:	45 2b       	or	r20, r21
    1986:	31 f0       	breq	.+12     	; 0x1994 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1988:	e6 2e       	mov	r14, r22
    198a:	f1 2c       	mov	r15, r1
    198c:	1e 14       	cp	r1, r14
    198e:	1f 04       	cpc	r1, r15
    1990:	9c f0       	brlt	.+38     	; 0x19b8 <oled_print_char+0x8e>
    1992:	1f c0       	rjmp	.+62     	; 0x19d2 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1994:	e6 2e       	mov	r14, r22
    1996:	f1 2c       	mov	r15, r1
    1998:	1e 14       	cp	r1, r14
    199a:	1f 04       	cpc	r1, r15
    199c:	d4 f4       	brge	.+52     	; 0x19d2 <oled_print_char+0xa8>
    199e:	c0 e0       	ldi	r28, 0x00	; 0
    19a0:	d0 e0       	ldi	r29, 0x00	; 0
    19a2:	fe 01       	movw	r30, r28
    19a4:	e0 0f       	add	r30, r16
    19a6:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    19a8:	84 91       	lpm	r24, Z
    19aa:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    19ae:	21 96       	adiw	r28, 0x01	; 1
    19b0:	ce 15       	cp	r28, r14
    19b2:	df 05       	cpc	r29, r15
    19b4:	b4 f3       	brlt	.-20     	; 0x19a2 <oled_print_char+0x78>
    19b6:	0d c0       	rjmp	.+26     	; 0x19d2 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    19b8:	c0 e0       	ldi	r28, 0x00	; 0
    19ba:	d0 e0       	ldi	r29, 0x00	; 0
    19bc:	fe 01       	movw	r30, r28
    19be:	e0 0f       	add	r30, r16
    19c0:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    19c2:	84 91       	lpm	r24, Z
    19c4:	80 95       	com	r24
    19c6:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    19ca:	21 96       	adiw	r28, 0x01	; 1
    19cc:	ce 15       	cp	r28, r14
    19ce:	df 05       	cpc	r29, r15
    19d0:	ac f3       	brlt	.-22     	; 0x19bc <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	08 95       	ret

000019e0 <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    19e0:	80 91 0d 02 	lds	r24, 0x020D
    19e4:	90 91 0e 02 	lds	r25, 0x020E
    19e8:	89 2b       	or	r24, r25
    19ea:	89 f0       	breq	.+34     	; 0x1a0e <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    19ec:	80 91 ff 02 	lds	r24, 0x02FF
    19f0:	90 91 00 03 	lds	r25, 0x0300
    19f4:	81 15       	cp	r24, r1
    19f6:	24 e0       	ldi	r18, 0x04	; 4
    19f8:	92 07       	cpc	r25, r18
    19fa:	5c f4       	brge	.+22     	; 0x1a12 <oled_read_data+0x32>
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    19fc:	20 91 09 02 	lds	r18, 0x0209
    1a00:	30 91 0a 02 	lds	r19, 0x020A
    1a04:	f9 01       	movw	r30, r18
    1a06:	e8 0f       	add	r30, r24
    1a08:	f9 1f       	adc	r31, r25
    1a0a:	80 81       	ld	r24, Z
    1a0c:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	08 95       	ret
}

char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			return 0x00;
    1a12:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    1a14:	08 95       	ret

00001a16 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    1a16:	40 91 0d 02 	lds	r20, 0x020D
    1a1a:	50 91 0e 02 	lds	r21, 0x020E
    1a1e:	45 2b       	or	r20, r21
    1a20:	d1 f0       	breq	.+52     	; 0x1a56 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    1a22:	20 91 ff 02 	lds	r18, 0x02FF
    1a26:	30 91 00 03 	lds	r19, 0x0300
    1a2a:	2f 77       	andi	r18, 0x7F	; 127
    1a2c:	30 78       	andi	r19, 0x80	; 128
    1a2e:	33 23       	and	r19, r19
    1a30:	34 f4       	brge	.+12     	; 0x1a3e <oled_goto_line+0x28>
    1a32:	21 50       	subi	r18, 0x01	; 1
    1a34:	31 09       	sbc	r19, r1
    1a36:	20 68       	ori	r18, 0x80	; 128
    1a38:	3f 6f       	ori	r19, 0xFF	; 255
    1a3a:	2f 5f       	subi	r18, 0xFF	; 255
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	96 95       	lsr	r25
    1a40:	98 2f       	mov	r25, r24
    1a42:	88 27       	eor	r24, r24
    1a44:	97 95       	ror	r25
    1a46:	87 95       	ror	r24
    1a48:	28 0f       	add	r18, r24
    1a4a:	39 1f       	adc	r19, r25
    1a4c:	30 93 00 03 	sts	0x0300, r19
    1a50:	20 93 ff 02 	sts	0x02FF, r18
    1a54:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    1a56:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a58:	e0 91 0b 02 	lds	r30, 0x020B
    1a5c:	f0 91 0c 02 	lds	r31, 0x020C
    1a60:	80 83       	st	Z, r24
    1a62:	08 95       	ret

00001a64 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    1a64:	20 91 0d 02 	lds	r18, 0x020D
    1a68:	30 91 0e 02 	lds	r19, 0x020E
    1a6c:	23 2b       	or	r18, r19
    1a6e:	c1 f0       	breq	.+48     	; 0x1aa0 <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    1a70:	40 91 ff 02 	lds	r20, 0x02FF
    1a74:	50 91 00 03 	lds	r21, 0x0300
    1a78:	9a 01       	movw	r18, r20
    1a7a:	2f 77       	andi	r18, 0x7F	; 127
    1a7c:	30 78       	andi	r19, 0x80	; 128
    1a7e:	33 23       	and	r19, r19
    1a80:	34 f4       	brge	.+12     	; 0x1a8e <oled_goto_column+0x2a>
    1a82:	21 50       	subi	r18, 0x01	; 1
    1a84:	31 09       	sbc	r19, r1
    1a86:	20 68       	ori	r18, 0x80	; 128
    1a88:	3f 6f       	ori	r19, 0xFF	; 255
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	42 1b       	sub	r20, r18
    1a90:	53 0b       	sbc	r21, r19
    1a92:	84 0f       	add	r24, r20
    1a94:	95 1f       	adc	r25, r21
    1a96:	90 93 00 03 	sts	0x0300, r25
    1a9a:	80 93 ff 02 	sts	0x02FF, r24
    1a9e:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1aa0:	e0 91 0b 02 	lds	r30, 0x020B
    1aa4:	f0 91 0c 02 	lds	r31, 0x020C
    1aa8:	10 82       	st	Z, r1
    1aaa:	e0 91 0b 02 	lds	r30, 0x020B
    1aae:	f0 91 0c 02 	lds	r31, 0x020C
    1ab2:	80 e1       	ldi	r24, 0x10	; 16
    1ab4:	80 83       	st	Z, r24
    1ab6:	08 95       	ret

00001ab8 <oled_print_string>:
	TIMSK = (1 << OCIE2);					
	int OCRA_num = (long)F_CPU/(refresh_rate*1024);
	OCR2 = OCRA_num; //Sets the value for the compare match to 80
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	96 2e       	mov	r9, r22
    1ad8:	74 2e       	mov	r7, r20
    1ada:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    1adc:	86 2f       	mov	r24, r22
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <oled_goto_column>
	oled_goto_line(line);
    1ae4:	87 2d       	mov	r24, r7
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
	
	int length = strlen(string);
    1aec:	fe 01       	movw	r30, r28
    1aee:	01 90       	ld	r0, Z+
    1af0:	00 20       	and	r0, r0
    1af2:	e9 f7       	brne	.-6      	; 0x1aee <oled_print_string+0x36>
    1af4:	31 97       	sbiw	r30, 0x01	; 1
    1af6:	6f 01       	movw	r12, r30
    1af8:	cc 1a       	sub	r12, r28
    1afa:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    1afc:	1c 14       	cp	r1, r12
    1afe:	1d 04       	cpc	r1, r13
    1b00:	24 f5       	brge	.+72     	; 0x1b4a <oled_print_string+0x92>
    1b02:	7e 01       	movw	r14, r28
    1b04:	c0 e0       	ldi	r28, 0x00	; 0
    1b06:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    1b08:	8f e7       	ldi	r24, 0x7F	; 127
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	5c 01       	movw	r10, r24
    1b0e:	a8 18       	sub	r10, r8
    1b10:	b1 08       	sbc	r11, r1
			column = 0;
    1b12:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    1b14:	a8 01       	movw	r20, r16
    1b16:	68 2d       	mov	r22, r8
    1b18:	f7 01       	movw	r30, r14
    1b1a:	81 91       	ld	r24, Z+
    1b1c:	7f 01       	movw	r14, r30
    1b1e:	0e 94 95 0c 	call	0x192a	; 0x192a <oled_print_char>
		column = column + font_size;
    1b22:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    1b24:	89 2d       	mov	r24, r9
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a8 16       	cp	r10, r24
    1b2a:	b9 06       	cpc	r11, r25
    1b2c:	54 f4       	brge	.+20     	; 0x1b42 <oled_print_string+0x8a>
			column = 0;
			line++;
    1b2e:	73 94       	inc	r7
			oled_goto_column(column);
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <oled_goto_column>
			oled_goto_line(line);
    1b38:	87 2d       	mov	r24, r7
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    1b40:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    1b42:	21 96       	adiw	r28, 0x01	; 1
    1b44:	cc 16       	cp	r12, r28
    1b46:	dd 06       	cpc	r13, r29
    1b48:	29 f7       	brne	.-54     	; 0x1b14 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	cf 90       	pop	r12
    1b5a:	bf 90       	pop	r11
    1b5c:	af 90       	pop	r10
    1b5e:	9f 90       	pop	r9
    1b60:	8f 90       	pop	r8
    1b62:	7f 90       	pop	r7
    1b64:	6f 90       	pop	r6
    1b66:	08 95       	ret

00001b68 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    1b68:	cf 93       	push	r28
	oled_goto_line(line);
    1b6a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
	oled_goto_column(0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    1b76:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    1b7e:	cf 5f       	subi	r28, 0xFF	; 255
    1b80:	c0 38       	cpi	r28, 0x80	; 128
    1b82:	d1 f7       	brne	.-12     	; 0x1b78 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	c0 e0       	ldi	r28, 0x00	; 0
    1b8e:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    1b90:	ce 01       	movw	r24, r28
    1b92:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <oled_clear_line>
    1b96:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    1b98:	c8 30       	cpi	r28, 0x08	; 8
    1b9a:	d1 05       	cpc	r29, r1
    1b9c:	c9 f7       	brne	.-14     	; 0x1b90 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	08 95       	ret

00001ba4 <oled_init>:

volatile uint8_t *oled_command = 0x1000;
volatile uint8_t *oled_back_buffer = 0x1800;
volatile uint8_t *oled_front_buffer = 0x1200;

void oled_init(){
    1ba4:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1ba6:	e0 91 0b 02 	lds	r30, 0x020B
    1baa:	f0 91 0c 02 	lds	r31, 0x020C
    1bae:	8e ea       	ldi	r24, 0xAE	; 174
    1bb0:	80 83       	st	Z, r24
    1bb2:	e0 91 0b 02 	lds	r30, 0x020B
    1bb6:	f0 91 0c 02 	lds	r31, 0x020C
    1bba:	81 ea       	ldi	r24, 0xA1	; 161
    1bbc:	80 83       	st	Z, r24
    1bbe:	e0 91 0b 02 	lds	r30, 0x020B
    1bc2:	f0 91 0c 02 	lds	r31, 0x020C
    1bc6:	8a ed       	ldi	r24, 0xDA	; 218
    1bc8:	80 83       	st	Z, r24
    1bca:	e0 91 0b 02 	lds	r30, 0x020B
    1bce:	f0 91 0c 02 	lds	r31, 0x020C
    1bd2:	82 e1       	ldi	r24, 0x12	; 18
    1bd4:	80 83       	st	Z, r24
    1bd6:	e0 91 0b 02 	lds	r30, 0x020B
    1bda:	f0 91 0c 02 	lds	r31, 0x020C
    1bde:	88 ec       	ldi	r24, 0xC8	; 200
    1be0:	80 83       	st	Z, r24
    1be2:	e0 91 0b 02 	lds	r30, 0x020B
    1be6:	f0 91 0c 02 	lds	r31, 0x020C
    1bea:	88 ea       	ldi	r24, 0xA8	; 168
    1bec:	80 83       	st	Z, r24
    1bee:	e0 91 0b 02 	lds	r30, 0x020B
    1bf2:	f0 91 0c 02 	lds	r31, 0x020C
    1bf6:	8f e3       	ldi	r24, 0x3F	; 63
    1bf8:	80 83       	st	Z, r24
    1bfa:	e0 91 0b 02 	lds	r30, 0x020B
    1bfe:	f0 91 0c 02 	lds	r31, 0x020C
    1c02:	85 ed       	ldi	r24, 0xD5	; 213
    1c04:	80 83       	st	Z, r24
    1c06:	e0 91 0b 02 	lds	r30, 0x020B
    1c0a:	f0 91 0c 02 	lds	r31, 0x020C
    1c0e:	80 e8       	ldi	r24, 0x80	; 128
    1c10:	80 83       	st	Z, r24
    1c12:	e0 91 0b 02 	lds	r30, 0x020B
    1c16:	f0 91 0c 02 	lds	r31, 0x020C
    1c1a:	81 e8       	ldi	r24, 0x81	; 129
    1c1c:	80 83       	st	Z, r24
    1c1e:	e0 91 0b 02 	lds	r30, 0x020B
    1c22:	f0 91 0c 02 	lds	r31, 0x020C
    1c26:	c0 e5       	ldi	r28, 0x50	; 80
    1c28:	c0 83       	st	Z, r28
    1c2a:	e0 91 0b 02 	lds	r30, 0x020B
    1c2e:	f0 91 0c 02 	lds	r31, 0x020C
    1c32:	89 ed       	ldi	r24, 0xD9	; 217
    1c34:	80 83       	st	Z, r24
    1c36:	e0 91 0b 02 	lds	r30, 0x020B
    1c3a:	f0 91 0c 02 	lds	r31, 0x020C
    1c3e:	81 e2       	ldi	r24, 0x21	; 33
    1c40:	80 83       	st	Z, r24
    1c42:	e0 91 0b 02 	lds	r30, 0x020B
    1c46:	f0 91 0c 02 	lds	r31, 0x020C
    1c4a:	80 e2       	ldi	r24, 0x20	; 32
    1c4c:	80 83       	st	Z, r24
    1c4e:	e0 91 0b 02 	lds	r30, 0x020B
    1c52:	f0 91 0c 02 	lds	r31, 0x020C
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	80 83       	st	Z, r24
    1c5a:	e0 91 0b 02 	lds	r30, 0x020B
    1c5e:	f0 91 0c 02 	lds	r31, 0x020C
    1c62:	8b ed       	ldi	r24, 0xDB	; 219
    1c64:	80 83       	st	Z, r24
    1c66:	e0 91 0b 02 	lds	r30, 0x020B
    1c6a:	f0 91 0c 02 	lds	r31, 0x020C
    1c6e:	80 e3       	ldi	r24, 0x30	; 48
    1c70:	80 83       	st	Z, r24
    1c72:	e0 91 0b 02 	lds	r30, 0x020B
    1c76:	f0 91 0c 02 	lds	r31, 0x020C
    1c7a:	8d ea       	ldi	r24, 0xAD	; 173
    1c7c:	80 83       	st	Z, r24
    1c7e:	e0 91 0b 02 	lds	r30, 0x020B
    1c82:	f0 91 0c 02 	lds	r31, 0x020C
    1c86:	10 82       	st	Z, r1
    1c88:	e0 91 0b 02 	lds	r30, 0x020B
    1c8c:	f0 91 0c 02 	lds	r31, 0x020C
    1c90:	84 ea       	ldi	r24, 0xA4	; 164
    1c92:	80 83       	st	Z, r24
    1c94:	e0 91 0b 02 	lds	r30, 0x020B
    1c98:	f0 91 0c 02 	lds	r31, 0x020C
    1c9c:	86 ea       	ldi	r24, 0xA6	; 166
    1c9e:	80 83       	st	Z, r24
    1ca0:	e0 91 0b 02 	lds	r30, 0x020B
    1ca4:	f0 91 0c 02 	lds	r31, 0x020C
    1ca8:	8f ea       	ldi	r24, 0xAF	; 175
    1caa:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen();	  //Sets all buffer data to 0
    1cac:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <oled_clear_screen>
	
	//Set up timer, enable timer/counter compare match interrupt for 60 FPS
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20) | (1 << WGM21);  //clock source to be used by the Timer/Counter clkI/O/1024 -  CTC mode
    1cb0:	8f e0       	ldi	r24, 0x0F	; 15
    1cb2:	87 bd       	out	0x27, r24	; 39
	TIMSK = (1 << OCIE2);					
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	89 bf       	out	0x39, r24	; 57
	int OCRA_num = (long)F_CPU/(refresh_rate*1024);
	OCR2 = OCRA_num; //Sets the value for the compare match to 80
    1cb8:	c2 bd       	out	0x22, r28	; 34
}
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

00001cbe <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    1cbe:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1cc0:	e0 91 0b 02 	lds	r30, 0x020B
    1cc4:	f0 91 0c 02 	lds	r31, 0x020C
    1cc8:	10 82       	st	Z, r1
    1cca:	e0 91 0b 02 	lds	r30, 0x020B
    1cce:	f0 91 0c 02 	lds	r31, 0x020C
    1cd2:	80 e1       	ldi	r24, 0x10	; 16
    1cd4:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    1cd6:	80 91 0d 02 	lds	r24, 0x020D
    1cda:	90 91 0e 02 	lds	r25, 0x020E
    1cde:	89 2b       	or	r24, r25
    1ce0:	21 f1       	breq	.+72     	; 0x1d2a <oled_refresh+0x6c>
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1ce8:	c0 e0       	ldi	r28, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1cec:	e0 91 0b 02 	lds	r30, 0x020B
    1cf0:	f0 91 0c 02 	lds	r31, 0x020C
    1cf4:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1cf6:	8c 2f       	mov	r24, r28
    1cf8:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    1cfa:	e0 91 07 02 	lds	r30, 0x0207
    1cfe:	f0 91 08 02 	lds	r31, 0x0208
    1d02:	9c 01       	movw	r18, r24
    1d04:	24 0f       	add	r18, r20
    1d06:	35 1f       	adc	r19, r21
    1d08:	a0 91 09 02 	lds	r26, 0x0209
    1d0c:	b0 91 0a 02 	lds	r27, 0x020A
    1d10:	a2 0f       	add	r26, r18
    1d12:	b3 1f       	adc	r27, r19
    1d14:	2c 91       	ld	r18, X
    1d16:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	80 38       	cpi	r24, 0x80	; 128
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <oled_refresh+0x3c>
    1d20:	6f 5f       	subi	r22, 0xFF	; 255
    1d22:	40 58       	subi	r20, 0x80	; 128
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1d26:	68 3b       	cpi	r22, 0xB8	; 184
    1d28:	09 f7       	brne	.-62     	; 0x1cec <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <oled_invert_rectangle>:
	}
	
	//TODO: make it draw correctly in every direction
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1d2e:	6f 92       	push	r6
    1d30:	7f 92       	push	r7
    1d32:	8f 92       	push	r8
    1d34:	9f 92       	push	r9
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	8c 01       	movw	r16, r24
    1d4c:	ea 01       	movw	r28, r20
	if(y1 > y2){
    1d4e:	26 17       	cp	r18, r22
    1d50:	37 07       	cpc	r19, r23
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <oled_invert_rectangle+0x30>
    1d54:	96 2f       	mov	r25, r22
    1d56:	87 2f       	mov	r24, r23
		int temp = y1;
		y1 = y2;
    1d58:	b9 01       	movw	r22, r18
		y2 = temp;
    1d5a:	29 2f       	mov	r18, r25
    1d5c:	38 2f       	mov	r19, r24
	}
	
	if(x1 > x2){
    1d5e:	c0 17       	cp	r28, r16
    1d60:	d1 07       	cpc	r29, r17
    1d62:	14 f4       	brge	.+4      	; 0x1d68 <oled_invert_rectangle+0x3a>
		int temp = x1;
		x1 = y2;
		x2 = temp;
    1d64:	e8 01       	movw	r28, r16
		y2 = temp;
	}
	
	if(x1 > x2){
		int temp = x1;
		x1 = y2;
    1d66:	89 01       	movw	r16, r18
		x2 = temp;
	}
	int t = 255 << y1%8;		//Top line to be filled
    1d68:	cb 01       	movw	r24, r22
    1d6a:	87 70       	andi	r24, 0x07	; 7
    1d6c:	90 78       	andi	r25, 0x80	; 128
    1d6e:	99 23       	and	r25, r25
    1d70:	24 f4       	brge	.+8      	; 0x1d7a <oled_invert_rectangle+0x4c>
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	88 6f       	ori	r24, 0xF8	; 248
    1d76:	9f 6f       	ori	r25, 0xFF	; 255
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	4f ef       	ldi	r20, 0xFF	; 255
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	6a 01       	movw	r12, r20
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <oled_invert_rectangle+0x58>
    1d82:	cc 0c       	add	r12, r12
    1d84:	dd 1c       	adc	r13, r13
    1d86:	8a 95       	dec	r24
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <oled_invert_rectangle+0x54>
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
    1d8a:	c9 01       	movw	r24, r18
    1d8c:	87 70       	andi	r24, 0x07	; 7
    1d8e:	90 78       	andi	r25, 0x80	; 128
    1d90:	99 23       	and	r25, r25
    1d92:	24 f4       	brge	.+8      	; 0x1d9c <oled_invert_rectangle+0x6e>
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	88 6f       	ori	r24, 0xF8	; 248
    1d98:	9f 6f       	ori	r25, 0xFF	; 255
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	48 e0       	ldi	r20, 0x08	; 8
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	5a 01       	movw	r10, r20
    1da2:	a8 1a       	sub	r10, r24
    1da4:	b9 0a       	sbc	r11, r25
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	ac 01       	movw	r20, r24
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <oled_invert_rectangle+0x84>
    1dae:	55 95       	asr	r21
    1db0:	47 95       	ror	r20
    1db2:	aa 94       	dec	r10
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <oled_invert_rectangle+0x80>
    1db6:	5a 01       	movw	r10, r20
	if(y1/8 != y2/8){			//Over several lines
    1db8:	3b 01       	movw	r6, r22
    1dba:	77 23       	and	r23, r23
    1dbc:	1c f4       	brge	.+6      	; 0x1dc4 <oled_invert_rectangle+0x96>
    1dbe:	57 e0       	ldi	r21, 0x07	; 7
    1dc0:	65 0e       	add	r6, r21
    1dc2:	71 1c       	adc	r7, r1
    1dc4:	75 94       	asr	r7
    1dc6:	67 94       	ror	r6
    1dc8:	75 94       	asr	r7
    1dca:	67 94       	ror	r6
    1dcc:	75 94       	asr	r7
    1dce:	67 94       	ror	r6
    1dd0:	79 01       	movw	r14, r18
    1dd2:	33 23       	and	r19, r19
    1dd4:	1c f4       	brge	.+6      	; 0x1ddc <oled_invert_rectangle+0xae>
    1dd6:	87 e0       	ldi	r24, 0x07	; 7
    1dd8:	e8 0e       	add	r14, r24
    1dda:	f1 1c       	adc	r15, r1
    1ddc:	f5 94       	asr	r15
    1dde:	e7 94       	ror	r14
    1de0:	f5 94       	asr	r15
    1de2:	e7 94       	ror	r14
    1de4:	f5 94       	asr	r15
    1de6:	e7 94       	ror	r14
    1de8:	6e 14       	cp	r6, r14
    1dea:	7f 04       	cpc	r7, r15
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <oled_invert_rectangle+0xc2>
    1dee:	4d c0       	rjmp	.+154    	; 0x1e8a <oled_invert_rectangle+0x15c>
		//Filling top
		oled_goto_line(y1/8);
    1df0:	c3 01       	movw	r24, r6
    1df2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1df6:	0c 17       	cp	r16, r28
    1df8:	1d 07       	cpc	r17, r29
    1dfa:	7c f4       	brge	.+30     	; 0x1e1a <oled_invert_rectangle+0xec>
    1dfc:	48 01       	movw	r8, r16
			oled_goto_column(x);
    1dfe:	c4 01       	movw	r24, r8
    1e00:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <oled_goto_column>
			oled_write_data(t ^ oled_read_data());
    1e04:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <oled_read_data>
    1e08:	8c 25       	eor	r24, r12
    1e0a:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
	int t = 255 << y1%8;		//Top line to be filled
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
	if(y1/8 != y2/8){			//Over several lines
		//Filling top
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1e0e:	4f ef       	ldi	r20, 0xFF	; 255
    1e10:	84 1a       	sub	r8, r20
    1e12:	94 0a       	sbc	r9, r20
    1e14:	8c 16       	cp	r8, r28
    1e16:	9d 06       	cpc	r9, r29
    1e18:	94 f3       	brlt	.-28     	; 0x1dfe <oled_invert_rectangle+0xd0>
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1e1a:	5f ef       	ldi	r21, 0xFF	; 255
    1e1c:	65 1a       	sub	r6, r21
    1e1e:	75 0a       	sbc	r7, r21
    1e20:	6e 14       	cp	r6, r14
    1e22:	7f 04       	cpc	r7, r15
    1e24:	f4 f4       	brge	.+60     	; 0x1e62 <oled_invert_rectangle+0x134>
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1e26:	80 2e       	mov	r8, r16
    1e28:	91 2e       	mov	r9, r17
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
    1e2a:	c3 01       	movw	r24, r6
    1e2c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
			for (int x = x1; x < x2; x++){
    1e30:	0c 17       	cp	r16, r28
    1e32:	1d 07       	cpc	r17, r29
    1e34:	84 f4       	brge	.+32     	; 0x1e56 <oled_invert_rectangle+0x128>
    1e36:	c8 2c       	mov	r12, r8
    1e38:	d9 2c       	mov	r13, r9
				oled_goto_line(x);
    1e3a:	c6 01       	movw	r24, r12
    1e3c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
				oled_write_data(255 ^ oled_read_data());
    1e40:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <oled_read_data>
    1e44:	80 95       	com	r24
    1e46:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	c8 1a       	sub	r12, r24
    1e4e:	d8 0a       	sbc	r13, r24
    1e50:	cc 16       	cp	r12, r28
    1e52:	dd 06       	cpc	r13, r29
    1e54:	94 f3       	brlt	.-28     	; 0x1e3a <oled_invert_rectangle+0x10c>
		for(int x = x1; x < x2; x++){
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1e56:	4f ef       	ldi	r20, 0xFF	; 255
    1e58:	64 1a       	sub	r6, r20
    1e5a:	74 0a       	sbc	r7, r20
    1e5c:	6e 14       	cp	r6, r14
    1e5e:	7f 04       	cpc	r7, r15
    1e60:	24 f3       	brlt	.-56     	; 0x1e2a <oled_invert_rectangle+0xfc>
				oled_goto_line(x);
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
    1e62:	c7 01       	movw	r24, r14
    1e64:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1e68:	0c 17       	cp	r16, r28
    1e6a:	1d 07       	cpc	r17, r29
    1e6c:	1c f5       	brge	.+70     	; 0x1eb4 <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1e6e:	c8 01       	movw	r24, r16
    1e70:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <oled_goto_column>
			oled_write_data(b ^ oled_read_data());
    1e74:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <oled_read_data>
    1e78:	8a 25       	eor	r24, r10
    1e7a:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
		for(int x = x1; x < x2; x++){
    1e7e:	0f 5f       	subi	r16, 0xFF	; 255
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	0c 17       	cp	r16, r28
    1e84:	1d 07       	cpc	r17, r29
    1e86:	9c f3       	brlt	.-26     	; 0x1e6e <oled_invert_rectangle+0x140>
    1e88:	15 c0       	rjmp	.+42     	; 0x1eb4 <oled_invert_rectangle+0x186>
			oled_goto_column(x);
			oled_write_data(b ^ oled_read_data());
		}
	}
	else{
		int m = t & b;
    1e8a:	ca 20       	and	r12, r10
    1e8c:	db 20       	and	r13, r11
		oled_goto_line(y1/8);
    1e8e:	c3 01       	movw	r24, r6
    1e90:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1e94:	0c 17       	cp	r16, r28
    1e96:	1d 07       	cpc	r17, r29
    1e98:	6c f4       	brge	.+26     	; 0x1eb4 <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <oled_goto_column>
			oled_write_data(m ^ oled_read_data());
    1ea0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <oled_read_data>
    1ea4:	8c 25       	eor	r24, r12
    1ea6:	0e 94 6f 0c 	call	0x18de	; 0x18de <oled_write_data>
		}
	}
	else{
		int m = t & b;
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1eaa:	0f 5f       	subi	r16, 0xFF	; 255
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	0c 17       	cp	r16, r28
    1eb0:	1d 07       	cpc	r17, r29
    1eb2:	9c f3       	brlt	.-26     	; 0x1e9a <oled_invert_rectangle+0x16c>
			oled_goto_column(x);
			oled_write_data(m ^ oled_read_data());
		}
	}
}
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	08 95       	ret

00001ed2 <__vector_10>:

ISR(TIMER2_COMP_vect)
{
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	8f 93       	push	r24
	if(state == in_menu){
    1ede:	80 91 fd 02 	lds	r24, 0x02FD
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	06 c0       	rjmp	.+12     	; 0x1ef2 <__vector_10+0x20>
		flags.oled_refresh_timeout = 1;	
    1ee6:	80 91 fe 02 	lds	r24, 0x02FE
    1eea:	88 60       	ori	r24, 0x08	; 8
    1eec:	80 93 fe 02 	sts	0x02FE, r24
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <__vector_10+0x32>
	}
	else if(state == in_game){
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	39 f4       	brne	.+14     	; 0x1f04 <__vector_10+0x32>
		flags.game_time_passed = 1;
    1ef6:	80 91 fe 02 	lds	r24, 0x02FE
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	80 93 fe 02 	sts	0x02FE, r24
		flags.game_interrupt == 1;
    1f00:	80 91 fe 02 	lds	r24, 0x02FE
	}
	
    1f04:	8f 91       	pop	r24
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <touch_init>:
#include "../lib/settings.h"
#include "touch.h"
#include "../lib/adc.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    1f10:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    1f12:	b9 98       	cbi	0x17, 1	; 23
    1f14:	08 95       	ret

00001f16 <__subsf3>:
    1f16:	50 58       	subi	r21, 0x80	; 128

00001f18 <__addsf3>:
    1f18:	bb 27       	eor	r27, r27
    1f1a:	aa 27       	eor	r26, r26
    1f1c:	0e d0       	rcall	.+28     	; 0x1f3a <__addsf3x>
    1f1e:	d4 c1       	rjmp	.+936    	; 0x22c8 <__fp_round>
    1f20:	c5 d1       	rcall	.+906    	; 0x22ac <__fp_pscA>
    1f22:	30 f0       	brcs	.+12     	; 0x1f30 <__addsf3+0x18>
    1f24:	ca d1       	rcall	.+916    	; 0x22ba <__fp_pscB>
    1f26:	20 f0       	brcs	.+8      	; 0x1f30 <__addsf3+0x18>
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <__addsf3+0x1e>
    1f2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <__addsf3+0x1a>
    1f2e:	1e f4       	brtc	.+6      	; 0x1f36 <__addsf3+0x1e>
    1f30:	95 c1       	rjmp	.+810    	; 0x225c <__fp_nan>
    1f32:	0e f4       	brtc	.+2      	; 0x1f36 <__addsf3+0x1e>
    1f34:	e0 95       	com	r30
    1f36:	e7 fb       	bst	r30, 7
    1f38:	8b c1       	rjmp	.+790    	; 0x2250 <__fp_inf>

00001f3a <__addsf3x>:
    1f3a:	e9 2f       	mov	r30, r25
    1f3c:	d6 d1       	rcall	.+940    	; 0x22ea <__fp_split3>
    1f3e:	80 f3       	brcs	.-32     	; 0x1f20 <__addsf3+0x8>
    1f40:	ba 17       	cp	r27, r26
    1f42:	62 07       	cpc	r22, r18
    1f44:	73 07       	cpc	r23, r19
    1f46:	84 07       	cpc	r24, r20
    1f48:	95 07       	cpc	r25, r21
    1f4a:	18 f0       	brcs	.+6      	; 0x1f52 <__addsf3x+0x18>
    1f4c:	71 f4       	brne	.+28     	; 0x1f6a <__addsf3x+0x30>
    1f4e:	9e f5       	brtc	.+102    	; 0x1fb6 <__addsf3x+0x7c>
    1f50:	ee c1       	rjmp	.+988    	; 0x232e <__fp_zero>
    1f52:	0e f4       	brtc	.+2      	; 0x1f56 <__addsf3x+0x1c>
    1f54:	e0 95       	com	r30
    1f56:	0b 2e       	mov	r0, r27
    1f58:	ba 2f       	mov	r27, r26
    1f5a:	a0 2d       	mov	r26, r0
    1f5c:	0b 01       	movw	r0, r22
    1f5e:	b9 01       	movw	r22, r18
    1f60:	90 01       	movw	r18, r0
    1f62:	0c 01       	movw	r0, r24
    1f64:	ca 01       	movw	r24, r20
    1f66:	a0 01       	movw	r20, r0
    1f68:	11 24       	eor	r1, r1
    1f6a:	ff 27       	eor	r31, r31
    1f6c:	59 1b       	sub	r21, r25
    1f6e:	99 f0       	breq	.+38     	; 0x1f96 <__addsf3x+0x5c>
    1f70:	59 3f       	cpi	r21, 0xF9	; 249
    1f72:	50 f4       	brcc	.+20     	; 0x1f88 <__addsf3x+0x4e>
    1f74:	50 3e       	cpi	r21, 0xE0	; 224
    1f76:	68 f1       	brcs	.+90     	; 0x1fd2 <__addsf3x+0x98>
    1f78:	1a 16       	cp	r1, r26
    1f7a:	f0 40       	sbci	r31, 0x00	; 0
    1f7c:	a2 2f       	mov	r26, r18
    1f7e:	23 2f       	mov	r18, r19
    1f80:	34 2f       	mov	r19, r20
    1f82:	44 27       	eor	r20, r20
    1f84:	58 5f       	subi	r21, 0xF8	; 248
    1f86:	f3 cf       	rjmp	.-26     	; 0x1f6e <__addsf3x+0x34>
    1f88:	46 95       	lsr	r20
    1f8a:	37 95       	ror	r19
    1f8c:	27 95       	ror	r18
    1f8e:	a7 95       	ror	r26
    1f90:	f0 40       	sbci	r31, 0x00	; 0
    1f92:	53 95       	inc	r21
    1f94:	c9 f7       	brne	.-14     	; 0x1f88 <__addsf3x+0x4e>
    1f96:	7e f4       	brtc	.+30     	; 0x1fb6 <__addsf3x+0x7c>
    1f98:	1f 16       	cp	r1, r31
    1f9a:	ba 0b       	sbc	r27, r26
    1f9c:	62 0b       	sbc	r22, r18
    1f9e:	73 0b       	sbc	r23, r19
    1fa0:	84 0b       	sbc	r24, r20
    1fa2:	ba f0       	brmi	.+46     	; 0x1fd2 <__addsf3x+0x98>
    1fa4:	91 50       	subi	r25, 0x01	; 1
    1fa6:	a1 f0       	breq	.+40     	; 0x1fd0 <__addsf3x+0x96>
    1fa8:	ff 0f       	add	r31, r31
    1faa:	bb 1f       	adc	r27, r27
    1fac:	66 1f       	adc	r22, r22
    1fae:	77 1f       	adc	r23, r23
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	c2 f7       	brpl	.-16     	; 0x1fa4 <__addsf3x+0x6a>
    1fb4:	0e c0       	rjmp	.+28     	; 0x1fd2 <__addsf3x+0x98>
    1fb6:	ba 0f       	add	r27, r26
    1fb8:	62 1f       	adc	r22, r18
    1fba:	73 1f       	adc	r23, r19
    1fbc:	84 1f       	adc	r24, r20
    1fbe:	48 f4       	brcc	.+18     	; 0x1fd2 <__addsf3x+0x98>
    1fc0:	87 95       	ror	r24
    1fc2:	77 95       	ror	r23
    1fc4:	67 95       	ror	r22
    1fc6:	b7 95       	ror	r27
    1fc8:	f7 95       	ror	r31
    1fca:	9e 3f       	cpi	r25, 0xFE	; 254
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <__addsf3x+0x96>
    1fce:	b3 cf       	rjmp	.-154    	; 0x1f36 <__addsf3+0x1e>
    1fd0:	93 95       	inc	r25
    1fd2:	88 0f       	add	r24, r24
    1fd4:	08 f0       	brcs	.+2      	; 0x1fd8 <__addsf3x+0x9e>
    1fd6:	99 27       	eor	r25, r25
    1fd8:	ee 0f       	add	r30, r30
    1fda:	97 95       	ror	r25
    1fdc:	87 95       	ror	r24
    1fde:	08 95       	ret
    1fe0:	65 d1       	rcall	.+714    	; 0x22ac <__fp_pscA>
    1fe2:	58 f0       	brcs	.+22     	; 0x1ffa <__addsf3x+0xc0>
    1fe4:	80 e8       	ldi	r24, 0x80	; 128
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <__addsf3x+0xb2>
    1fea:	9e ef       	ldi	r25, 0xFE	; 254
    1fec:	66 d1       	rcall	.+716    	; 0x22ba <__fp_pscB>
    1fee:	28 f0       	brcs	.+10     	; 0x1ffa <__addsf3x+0xc0>
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	51 e0       	ldi	r21, 0x01	; 1
    1ff4:	59 f4       	brne	.+22     	; 0x200c <atan2+0xe>
    1ff6:	5e ef       	ldi	r21, 0xFE	; 254
    1ff8:	09 c0       	rjmp	.+18     	; 0x200c <atan2+0xe>
    1ffa:	30 c1       	rjmp	.+608    	; 0x225c <__fp_nan>
    1ffc:	98 c1       	rjmp	.+816    	; 0x232e <__fp_zero>

00001ffe <atan2>:
    1ffe:	e9 2f       	mov	r30, r25
    2000:	e0 78       	andi	r30, 0x80	; 128
    2002:	73 d1       	rcall	.+742    	; 0x22ea <__fp_split3>
    2004:	68 f3       	brcs	.-38     	; 0x1fe0 <__addsf3x+0xa6>
    2006:	09 2e       	mov	r0, r25
    2008:	05 2a       	or	r0, r21
    200a:	c1 f3       	breq	.-16     	; 0x1ffc <__addsf3x+0xc2>
    200c:	26 17       	cp	r18, r22
    200e:	37 07       	cpc	r19, r23
    2010:	48 07       	cpc	r20, r24
    2012:	59 07       	cpc	r21, r25
    2014:	38 f0       	brcs	.+14     	; 0x2024 <atan2+0x26>
    2016:	0e 2e       	mov	r0, r30
    2018:	07 f8       	bld	r0, 7
    201a:	e0 25       	eor	r30, r0
    201c:	69 f0       	breq	.+26     	; 0x2038 <atan2+0x3a>
    201e:	e0 25       	eor	r30, r0
    2020:	e0 64       	ori	r30, 0x40	; 64
    2022:	0a c0       	rjmp	.+20     	; 0x2038 <atan2+0x3a>
    2024:	ef 63       	ori	r30, 0x3F	; 63
    2026:	07 f8       	bld	r0, 7
    2028:	00 94       	com	r0
    202a:	07 fa       	bst	r0, 7
    202c:	db 01       	movw	r26, r22
    202e:	b9 01       	movw	r22, r18
    2030:	9d 01       	movw	r18, r26
    2032:	dc 01       	movw	r26, r24
    2034:	ca 01       	movw	r24, r20
    2036:	ad 01       	movw	r20, r26
    2038:	ef 93       	push	r30
    203a:	43 d0       	rcall	.+134    	; 0x20c2 <__divsf3_pse>
    203c:	45 d1       	rcall	.+650    	; 0x22c8 <__fp_round>
    203e:	0a d0       	rcall	.+20     	; 0x2054 <atan>
    2040:	5f 91       	pop	r21
    2042:	55 23       	and	r21, r21
    2044:	31 f0       	breq	.+12     	; 0x2052 <atan2+0x54>
    2046:	2b ed       	ldi	r18, 0xDB	; 219
    2048:	3f e0       	ldi	r19, 0x0F	; 15
    204a:	49 e4       	ldi	r20, 0x49	; 73
    204c:	50 fd       	sbrc	r21, 0
    204e:	49 ec       	ldi	r20, 0xC9	; 201
    2050:	63 cf       	rjmp	.-314    	; 0x1f18 <__addsf3>
    2052:	08 95       	ret

00002054 <atan>:
    2054:	df 93       	push	r29
    2056:	dd 27       	eor	r29, r29
    2058:	b9 2f       	mov	r27, r25
    205a:	bf 77       	andi	r27, 0x7F	; 127
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	16 16       	cp	r1, r22
    2062:	17 06       	cpc	r1, r23
    2064:	48 07       	cpc	r20, r24
    2066:	5b 07       	cpc	r21, r27
    2068:	10 f4       	brcc	.+4      	; 0x206e <atan+0x1a>
    206a:	d9 2f       	mov	r29, r25
    206c:	67 d1       	rcall	.+718    	; 0x233c <inverse>
    206e:	9f 93       	push	r25
    2070:	8f 93       	push	r24
    2072:	7f 93       	push	r23
    2074:	6f 93       	push	r22
    2076:	0e d2       	rcall	.+1052   	; 0x2494 <square>
    2078:	e0 e7       	ldi	r30, 0x70	; 112
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	f2 d0       	rcall	.+484    	; 0x2262 <__fp_powser>
    207e:	24 d1       	rcall	.+584    	; 0x22c8 <__fp_round>
    2080:	2f 91       	pop	r18
    2082:	3f 91       	pop	r19
    2084:	4f 91       	pop	r20
    2086:	5f 91       	pop	r21
    2088:	6c d1       	rcall	.+728    	; 0x2362 <__mulsf3x>
    208a:	dd 23       	and	r29, r29
    208c:	49 f0       	breq	.+18     	; 0x20a0 <atan+0x4c>
    208e:	90 58       	subi	r25, 0x80	; 128
    2090:	a2 ea       	ldi	r26, 0xA2	; 162
    2092:	2a ed       	ldi	r18, 0xDA	; 218
    2094:	3f e0       	ldi	r19, 0x0F	; 15
    2096:	49 ec       	ldi	r20, 0xC9	; 201
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	d0 78       	andi	r29, 0x80	; 128
    209c:	5d 27       	eor	r21, r29
    209e:	4d df       	rcall	.-358    	; 0x1f3a <__addsf3x>
    20a0:	df 91       	pop	r29
    20a2:	12 c1       	rjmp	.+548    	; 0x22c8 <__fp_round>

000020a4 <__divsf3>:
    20a4:	0c d0       	rcall	.+24     	; 0x20be <__divsf3x>
    20a6:	10 c1       	rjmp	.+544    	; 0x22c8 <__fp_round>
    20a8:	08 d1       	rcall	.+528    	; 0x22ba <__fp_pscB>
    20aa:	40 f0       	brcs	.+16     	; 0x20bc <__divsf3+0x18>
    20ac:	ff d0       	rcall	.+510    	; 0x22ac <__fp_pscA>
    20ae:	30 f0       	brcs	.+12     	; 0x20bc <__divsf3+0x18>
    20b0:	21 f4       	brne	.+8      	; 0x20ba <__divsf3+0x16>
    20b2:	5f 3f       	cpi	r21, 0xFF	; 255
    20b4:	19 f0       	breq	.+6      	; 0x20bc <__divsf3+0x18>
    20b6:	cc c0       	rjmp	.+408    	; 0x2250 <__fp_inf>
    20b8:	51 11       	cpse	r21, r1
    20ba:	3a c1       	rjmp	.+628    	; 0x2330 <__fp_szero>
    20bc:	cf c0       	rjmp	.+414    	; 0x225c <__fp_nan>

000020be <__divsf3x>:
    20be:	15 d1       	rcall	.+554    	; 0x22ea <__fp_split3>
    20c0:	98 f3       	brcs	.-26     	; 0x20a8 <__divsf3+0x4>

000020c2 <__divsf3_pse>:
    20c2:	99 23       	and	r25, r25
    20c4:	c9 f3       	breq	.-14     	; 0x20b8 <__divsf3+0x14>
    20c6:	55 23       	and	r21, r21
    20c8:	b1 f3       	breq	.-20     	; 0x20b6 <__divsf3+0x12>
    20ca:	95 1b       	sub	r25, r21
    20cc:	55 0b       	sbc	r21, r21
    20ce:	bb 27       	eor	r27, r27
    20d0:	aa 27       	eor	r26, r26
    20d2:	62 17       	cp	r22, r18
    20d4:	73 07       	cpc	r23, r19
    20d6:	84 07       	cpc	r24, r20
    20d8:	38 f0       	brcs	.+14     	; 0x20e8 <__divsf3_pse+0x26>
    20da:	9f 5f       	subi	r25, 0xFF	; 255
    20dc:	5f 4f       	sbci	r21, 0xFF	; 255
    20de:	22 0f       	add	r18, r18
    20e0:	33 1f       	adc	r19, r19
    20e2:	44 1f       	adc	r20, r20
    20e4:	aa 1f       	adc	r26, r26
    20e6:	a9 f3       	breq	.-22     	; 0x20d2 <__divsf3_pse+0x10>
    20e8:	33 d0       	rcall	.+102    	; 0x2150 <__divsf3_pse+0x8e>
    20ea:	0e 2e       	mov	r0, r30
    20ec:	3a f0       	brmi	.+14     	; 0x20fc <__divsf3_pse+0x3a>
    20ee:	e0 e8       	ldi	r30, 0x80	; 128
    20f0:	30 d0       	rcall	.+96     	; 0x2152 <__divsf3_pse+0x90>
    20f2:	91 50       	subi	r25, 0x01	; 1
    20f4:	50 40       	sbci	r21, 0x00	; 0
    20f6:	e6 95       	lsr	r30
    20f8:	00 1c       	adc	r0, r0
    20fa:	ca f7       	brpl	.-14     	; 0x20ee <__divsf3_pse+0x2c>
    20fc:	29 d0       	rcall	.+82     	; 0x2150 <__divsf3_pse+0x8e>
    20fe:	fe 2f       	mov	r31, r30
    2100:	27 d0       	rcall	.+78     	; 0x2150 <__divsf3_pse+0x8e>
    2102:	66 0f       	add	r22, r22
    2104:	77 1f       	adc	r23, r23
    2106:	88 1f       	adc	r24, r24
    2108:	bb 1f       	adc	r27, r27
    210a:	26 17       	cp	r18, r22
    210c:	37 07       	cpc	r19, r23
    210e:	48 07       	cpc	r20, r24
    2110:	ab 07       	cpc	r26, r27
    2112:	b0 e8       	ldi	r27, 0x80	; 128
    2114:	09 f0       	breq	.+2      	; 0x2118 <__divsf3_pse+0x56>
    2116:	bb 0b       	sbc	r27, r27
    2118:	80 2d       	mov	r24, r0
    211a:	bf 01       	movw	r22, r30
    211c:	ff 27       	eor	r31, r31
    211e:	93 58       	subi	r25, 0x83	; 131
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	2a f0       	brmi	.+10     	; 0x212e <__divsf3_pse+0x6c>
    2124:	9e 3f       	cpi	r25, 0xFE	; 254
    2126:	51 05       	cpc	r21, r1
    2128:	68 f0       	brcs	.+26     	; 0x2144 <__divsf3_pse+0x82>
    212a:	92 c0       	rjmp	.+292    	; 0x2250 <__fp_inf>
    212c:	01 c1       	rjmp	.+514    	; 0x2330 <__fp_szero>
    212e:	5f 3f       	cpi	r21, 0xFF	; 255
    2130:	ec f3       	brlt	.-6      	; 0x212c <__divsf3_pse+0x6a>
    2132:	98 3e       	cpi	r25, 0xE8	; 232
    2134:	dc f3       	brlt	.-10     	; 0x212c <__divsf3_pse+0x6a>
    2136:	86 95       	lsr	r24
    2138:	77 95       	ror	r23
    213a:	67 95       	ror	r22
    213c:	b7 95       	ror	r27
    213e:	f7 95       	ror	r31
    2140:	9f 5f       	subi	r25, 0xFF	; 255
    2142:	c9 f7       	brne	.-14     	; 0x2136 <__divsf3_pse+0x74>
    2144:	88 0f       	add	r24, r24
    2146:	91 1d       	adc	r25, r1
    2148:	96 95       	lsr	r25
    214a:	87 95       	ror	r24
    214c:	97 f9       	bld	r25, 7
    214e:	08 95       	ret
    2150:	e1 e0       	ldi	r30, 0x01	; 1
    2152:	66 0f       	add	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	bb 1f       	adc	r27, r27
    215a:	62 17       	cp	r22, r18
    215c:	73 07       	cpc	r23, r19
    215e:	84 07       	cpc	r24, r20
    2160:	ba 07       	cpc	r27, r26
    2162:	20 f0       	brcs	.+8      	; 0x216c <__divsf3_pse+0xaa>
    2164:	62 1b       	sub	r22, r18
    2166:	73 0b       	sbc	r23, r19
    2168:	84 0b       	sbc	r24, r20
    216a:	ba 0b       	sbc	r27, r26
    216c:	ee 1f       	adc	r30, r30
    216e:	88 f7       	brcc	.-30     	; 0x2152 <__divsf3_pse+0x90>
    2170:	e0 95       	com	r30
    2172:	08 95       	ret

00002174 <__fixsfsi>:
    2174:	04 d0       	rcall	.+8      	; 0x217e <__fixunssfsi>
    2176:	68 94       	set
    2178:	b1 11       	cpse	r27, r1
    217a:	da c0       	rjmp	.+436    	; 0x2330 <__fp_szero>
    217c:	08 95       	ret

0000217e <__fixunssfsi>:
    217e:	bd d0       	rcall	.+378    	; 0x22fa <__fp_splitA>
    2180:	88 f0       	brcs	.+34     	; 0x21a4 <__fixunssfsi+0x26>
    2182:	9f 57       	subi	r25, 0x7F	; 127
    2184:	90 f0       	brcs	.+36     	; 0x21aa <__fixunssfsi+0x2c>
    2186:	b9 2f       	mov	r27, r25
    2188:	99 27       	eor	r25, r25
    218a:	b7 51       	subi	r27, 0x17	; 23
    218c:	a0 f0       	brcs	.+40     	; 0x21b6 <__fixunssfsi+0x38>
    218e:	d1 f0       	breq	.+52     	; 0x21c4 <__fixunssfsi+0x46>
    2190:	66 0f       	add	r22, r22
    2192:	77 1f       	adc	r23, r23
    2194:	88 1f       	adc	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	1a f0       	brmi	.+6      	; 0x21a0 <__fixunssfsi+0x22>
    219a:	ba 95       	dec	r27
    219c:	c9 f7       	brne	.-14     	; 0x2190 <__fixunssfsi+0x12>
    219e:	12 c0       	rjmp	.+36     	; 0x21c4 <__fixunssfsi+0x46>
    21a0:	b1 30       	cpi	r27, 0x01	; 1
    21a2:	81 f0       	breq	.+32     	; 0x21c4 <__fixunssfsi+0x46>
    21a4:	c4 d0       	rcall	.+392    	; 0x232e <__fp_zero>
    21a6:	b1 e0       	ldi	r27, 0x01	; 1
    21a8:	08 95       	ret
    21aa:	c1 c0       	rjmp	.+386    	; 0x232e <__fp_zero>
    21ac:	67 2f       	mov	r22, r23
    21ae:	78 2f       	mov	r23, r24
    21b0:	88 27       	eor	r24, r24
    21b2:	b8 5f       	subi	r27, 0xF8	; 248
    21b4:	39 f0       	breq	.+14     	; 0x21c4 <__fixunssfsi+0x46>
    21b6:	b9 3f       	cpi	r27, 0xF9	; 249
    21b8:	cc f3       	brlt	.-14     	; 0x21ac <__fixunssfsi+0x2e>
    21ba:	86 95       	lsr	r24
    21bc:	77 95       	ror	r23
    21be:	67 95       	ror	r22
    21c0:	b3 95       	inc	r27
    21c2:	d9 f7       	brne	.-10     	; 0x21ba <__fixunssfsi+0x3c>
    21c4:	3e f4       	brtc	.+14     	; 0x21d4 <__fixunssfsi+0x56>
    21c6:	90 95       	com	r25
    21c8:	80 95       	com	r24
    21ca:	70 95       	com	r23
    21cc:	61 95       	neg	r22
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	8f 4f       	sbci	r24, 0xFF	; 255
    21d2:	9f 4f       	sbci	r25, 0xFF	; 255
    21d4:	08 95       	ret

000021d6 <__floatunsisf>:
    21d6:	e8 94       	clt
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <__floatsisf+0x12>

000021da <__floatsisf>:
    21da:	97 fb       	bst	r25, 7
    21dc:	3e f4       	brtc	.+14     	; 0x21ec <__floatsisf+0x12>
    21de:	90 95       	com	r25
    21e0:	80 95       	com	r24
    21e2:	70 95       	com	r23
    21e4:	61 95       	neg	r22
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	99 23       	and	r25, r25
    21ee:	a9 f0       	breq	.+42     	; 0x221a <__floatsisf+0x40>
    21f0:	f9 2f       	mov	r31, r25
    21f2:	96 e9       	ldi	r25, 0x96	; 150
    21f4:	bb 27       	eor	r27, r27
    21f6:	93 95       	inc	r25
    21f8:	f6 95       	lsr	r31
    21fa:	87 95       	ror	r24
    21fc:	77 95       	ror	r23
    21fe:	67 95       	ror	r22
    2200:	b7 95       	ror	r27
    2202:	f1 11       	cpse	r31, r1
    2204:	f8 cf       	rjmp	.-16     	; 0x21f6 <__floatsisf+0x1c>
    2206:	fa f4       	brpl	.+62     	; 0x2246 <__floatsisf+0x6c>
    2208:	bb 0f       	add	r27, r27
    220a:	11 f4       	brne	.+4      	; 0x2210 <__floatsisf+0x36>
    220c:	60 ff       	sbrs	r22, 0
    220e:	1b c0       	rjmp	.+54     	; 0x2246 <__floatsisf+0x6c>
    2210:	6f 5f       	subi	r22, 0xFF	; 255
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	8f 4f       	sbci	r24, 0xFF	; 255
    2216:	9f 4f       	sbci	r25, 0xFF	; 255
    2218:	16 c0       	rjmp	.+44     	; 0x2246 <__floatsisf+0x6c>
    221a:	88 23       	and	r24, r24
    221c:	11 f0       	breq	.+4      	; 0x2222 <__floatsisf+0x48>
    221e:	96 e9       	ldi	r25, 0x96	; 150
    2220:	11 c0       	rjmp	.+34     	; 0x2244 <__floatsisf+0x6a>
    2222:	77 23       	and	r23, r23
    2224:	21 f0       	breq	.+8      	; 0x222e <__floatsisf+0x54>
    2226:	9e e8       	ldi	r25, 0x8E	; 142
    2228:	87 2f       	mov	r24, r23
    222a:	76 2f       	mov	r23, r22
    222c:	05 c0       	rjmp	.+10     	; 0x2238 <__floatsisf+0x5e>
    222e:	66 23       	and	r22, r22
    2230:	71 f0       	breq	.+28     	; 0x224e <__floatsisf+0x74>
    2232:	96 e8       	ldi	r25, 0x86	; 134
    2234:	86 2f       	mov	r24, r22
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	2a f0       	brmi	.+10     	; 0x2246 <__floatsisf+0x6c>
    223c:	9a 95       	dec	r25
    223e:	66 0f       	add	r22, r22
    2240:	77 1f       	adc	r23, r23
    2242:	88 1f       	adc	r24, r24
    2244:	da f7       	brpl	.-10     	; 0x223c <__floatsisf+0x62>
    2246:	88 0f       	add	r24, r24
    2248:	96 95       	lsr	r25
    224a:	87 95       	ror	r24
    224c:	97 f9       	bld	r25, 7
    224e:	08 95       	ret

00002250 <__fp_inf>:
    2250:	97 f9       	bld	r25, 7
    2252:	9f 67       	ori	r25, 0x7F	; 127
    2254:	80 e8       	ldi	r24, 0x80	; 128
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	08 95       	ret

0000225c <__fp_nan>:
    225c:	9f ef       	ldi	r25, 0xFF	; 255
    225e:	80 ec       	ldi	r24, 0xC0	; 192
    2260:	08 95       	ret

00002262 <__fp_powser>:
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	1f 93       	push	r17
    2268:	0f 93       	push	r16
    226a:	ff 92       	push	r15
    226c:	ef 92       	push	r14
    226e:	df 92       	push	r13
    2270:	7b 01       	movw	r14, r22
    2272:	8c 01       	movw	r16, r24
    2274:	68 94       	set
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <__fp_powser+0x20>
    2278:	da 2e       	mov	r13, r26
    227a:	ef 01       	movw	r28, r30
    227c:	72 d0       	rcall	.+228    	; 0x2362 <__mulsf3x>
    227e:	fe 01       	movw	r30, r28
    2280:	e8 94       	clt
    2282:	a5 91       	lpm	r26, Z+
    2284:	25 91       	lpm	r18, Z+
    2286:	35 91       	lpm	r19, Z+
    2288:	45 91       	lpm	r20, Z+
    228a:	55 91       	lpm	r21, Z+
    228c:	ae f3       	brts	.-22     	; 0x2278 <__fp_powser+0x16>
    228e:	ef 01       	movw	r28, r30
    2290:	54 de       	rcall	.-856    	; 0x1f3a <__addsf3x>
    2292:	fe 01       	movw	r30, r28
    2294:	97 01       	movw	r18, r14
    2296:	a8 01       	movw	r20, r16
    2298:	da 94       	dec	r13
    229a:	79 f7       	brne	.-34     	; 0x227a <__fp_powser+0x18>
    229c:	df 90       	pop	r13
    229e:	ef 90       	pop	r14
    22a0:	ff 90       	pop	r15
    22a2:	0f 91       	pop	r16
    22a4:	1f 91       	pop	r17
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <__fp_pscA>:
    22ac:	00 24       	eor	r0, r0
    22ae:	0a 94       	dec	r0
    22b0:	16 16       	cp	r1, r22
    22b2:	17 06       	cpc	r1, r23
    22b4:	18 06       	cpc	r1, r24
    22b6:	09 06       	cpc	r0, r25
    22b8:	08 95       	ret

000022ba <__fp_pscB>:
    22ba:	00 24       	eor	r0, r0
    22bc:	0a 94       	dec	r0
    22be:	12 16       	cp	r1, r18
    22c0:	13 06       	cpc	r1, r19
    22c2:	14 06       	cpc	r1, r20
    22c4:	05 06       	cpc	r0, r21
    22c6:	08 95       	ret

000022c8 <__fp_round>:
    22c8:	09 2e       	mov	r0, r25
    22ca:	03 94       	inc	r0
    22cc:	00 0c       	add	r0, r0
    22ce:	11 f4       	brne	.+4      	; 0x22d4 <__fp_round+0xc>
    22d0:	88 23       	and	r24, r24
    22d2:	52 f0       	brmi	.+20     	; 0x22e8 <__fp_round+0x20>
    22d4:	bb 0f       	add	r27, r27
    22d6:	40 f4       	brcc	.+16     	; 0x22e8 <__fp_round+0x20>
    22d8:	bf 2b       	or	r27, r31
    22da:	11 f4       	brne	.+4      	; 0x22e0 <__fp_round+0x18>
    22dc:	60 ff       	sbrs	r22, 0
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <__fp_round+0x20>
    22e0:	6f 5f       	subi	r22, 0xFF	; 255
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	08 95       	ret

000022ea <__fp_split3>:
    22ea:	57 fd       	sbrc	r21, 7
    22ec:	90 58       	subi	r25, 0x80	; 128
    22ee:	44 0f       	add	r20, r20
    22f0:	55 1f       	adc	r21, r21
    22f2:	59 f0       	breq	.+22     	; 0x230a <__fp_splitA+0x10>
    22f4:	5f 3f       	cpi	r21, 0xFF	; 255
    22f6:	71 f0       	breq	.+28     	; 0x2314 <__fp_splitA+0x1a>
    22f8:	47 95       	ror	r20

000022fa <__fp_splitA>:
    22fa:	88 0f       	add	r24, r24
    22fc:	97 fb       	bst	r25, 7
    22fe:	99 1f       	adc	r25, r25
    2300:	61 f0       	breq	.+24     	; 0x231a <__fp_splitA+0x20>
    2302:	9f 3f       	cpi	r25, 0xFF	; 255
    2304:	79 f0       	breq	.+30     	; 0x2324 <__fp_splitA+0x2a>
    2306:	87 95       	ror	r24
    2308:	08 95       	ret
    230a:	12 16       	cp	r1, r18
    230c:	13 06       	cpc	r1, r19
    230e:	14 06       	cpc	r1, r20
    2310:	55 1f       	adc	r21, r21
    2312:	f2 cf       	rjmp	.-28     	; 0x22f8 <__fp_split3+0xe>
    2314:	46 95       	lsr	r20
    2316:	f1 df       	rcall	.-30     	; 0x22fa <__fp_splitA>
    2318:	08 c0       	rjmp	.+16     	; 0x232a <__fp_splitA+0x30>
    231a:	16 16       	cp	r1, r22
    231c:	17 06       	cpc	r1, r23
    231e:	18 06       	cpc	r1, r24
    2320:	99 1f       	adc	r25, r25
    2322:	f1 cf       	rjmp	.-30     	; 0x2306 <__fp_splitA+0xc>
    2324:	86 95       	lsr	r24
    2326:	71 05       	cpc	r23, r1
    2328:	61 05       	cpc	r22, r1
    232a:	08 94       	sec
    232c:	08 95       	ret

0000232e <__fp_zero>:
    232e:	e8 94       	clt

00002330 <__fp_szero>:
    2330:	bb 27       	eor	r27, r27
    2332:	66 27       	eor	r22, r22
    2334:	77 27       	eor	r23, r23
    2336:	cb 01       	movw	r24, r22
    2338:	97 f9       	bld	r25, 7
    233a:	08 95       	ret

0000233c <inverse>:
    233c:	9b 01       	movw	r18, r22
    233e:	ac 01       	movw	r20, r24
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	80 e8       	ldi	r24, 0x80	; 128
    2346:	9f e3       	ldi	r25, 0x3F	; 63
    2348:	ad ce       	rjmp	.-678    	; 0x20a4 <__divsf3>

0000234a <__mulsf3>:
    234a:	0b d0       	rcall	.+22     	; 0x2362 <__mulsf3x>
    234c:	bd cf       	rjmp	.-134    	; 0x22c8 <__fp_round>
    234e:	ae df       	rcall	.-164    	; 0x22ac <__fp_pscA>
    2350:	28 f0       	brcs	.+10     	; 0x235c <__mulsf3+0x12>
    2352:	b3 df       	rcall	.-154    	; 0x22ba <__fp_pscB>
    2354:	18 f0       	brcs	.+6      	; 0x235c <__mulsf3+0x12>
    2356:	95 23       	and	r25, r21
    2358:	09 f0       	breq	.+2      	; 0x235c <__mulsf3+0x12>
    235a:	7a cf       	rjmp	.-268    	; 0x2250 <__fp_inf>
    235c:	7f cf       	rjmp	.-258    	; 0x225c <__fp_nan>
    235e:	11 24       	eor	r1, r1
    2360:	e7 cf       	rjmp	.-50     	; 0x2330 <__fp_szero>

00002362 <__mulsf3x>:
    2362:	c3 df       	rcall	.-122    	; 0x22ea <__fp_split3>
    2364:	a0 f3       	brcs	.-24     	; 0x234e <__mulsf3+0x4>

00002366 <__mulsf3_pse>:
    2366:	95 9f       	mul	r25, r21
    2368:	d1 f3       	breq	.-12     	; 0x235e <__mulsf3+0x14>
    236a:	95 0f       	add	r25, r21
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	55 1f       	adc	r21, r21
    2370:	62 9f       	mul	r22, r18
    2372:	f0 01       	movw	r30, r0
    2374:	72 9f       	mul	r23, r18
    2376:	bb 27       	eor	r27, r27
    2378:	f0 0d       	add	r31, r0
    237a:	b1 1d       	adc	r27, r1
    237c:	63 9f       	mul	r22, r19
    237e:	aa 27       	eor	r26, r26
    2380:	f0 0d       	add	r31, r0
    2382:	b1 1d       	adc	r27, r1
    2384:	aa 1f       	adc	r26, r26
    2386:	64 9f       	mul	r22, r20
    2388:	66 27       	eor	r22, r22
    238a:	b0 0d       	add	r27, r0
    238c:	a1 1d       	adc	r26, r1
    238e:	66 1f       	adc	r22, r22
    2390:	82 9f       	mul	r24, r18
    2392:	22 27       	eor	r18, r18
    2394:	b0 0d       	add	r27, r0
    2396:	a1 1d       	adc	r26, r1
    2398:	62 1f       	adc	r22, r18
    239a:	73 9f       	mul	r23, r19
    239c:	b0 0d       	add	r27, r0
    239e:	a1 1d       	adc	r26, r1
    23a0:	62 1f       	adc	r22, r18
    23a2:	83 9f       	mul	r24, r19
    23a4:	a0 0d       	add	r26, r0
    23a6:	61 1d       	adc	r22, r1
    23a8:	22 1f       	adc	r18, r18
    23aa:	74 9f       	mul	r23, r20
    23ac:	33 27       	eor	r19, r19
    23ae:	a0 0d       	add	r26, r0
    23b0:	61 1d       	adc	r22, r1
    23b2:	23 1f       	adc	r18, r19
    23b4:	84 9f       	mul	r24, r20
    23b6:	60 0d       	add	r22, r0
    23b8:	21 1d       	adc	r18, r1
    23ba:	82 2f       	mov	r24, r18
    23bc:	76 2f       	mov	r23, r22
    23be:	6a 2f       	mov	r22, r26
    23c0:	11 24       	eor	r1, r1
    23c2:	9f 57       	subi	r25, 0x7F	; 127
    23c4:	50 40       	sbci	r21, 0x00	; 0
    23c6:	8a f0       	brmi	.+34     	; 0x23ea <__mulsf3_pse+0x84>
    23c8:	e1 f0       	breq	.+56     	; 0x2402 <__mulsf3_pse+0x9c>
    23ca:	88 23       	and	r24, r24
    23cc:	4a f0       	brmi	.+18     	; 0x23e0 <__mulsf3_pse+0x7a>
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	bb 1f       	adc	r27, r27
    23d4:	66 1f       	adc	r22, r22
    23d6:	77 1f       	adc	r23, r23
    23d8:	88 1f       	adc	r24, r24
    23da:	91 50       	subi	r25, 0x01	; 1
    23dc:	50 40       	sbci	r21, 0x00	; 0
    23de:	a9 f7       	brne	.-22     	; 0x23ca <__mulsf3_pse+0x64>
    23e0:	9e 3f       	cpi	r25, 0xFE	; 254
    23e2:	51 05       	cpc	r21, r1
    23e4:	70 f0       	brcs	.+28     	; 0x2402 <__mulsf3_pse+0x9c>
    23e6:	34 cf       	rjmp	.-408    	; 0x2250 <__fp_inf>
    23e8:	a3 cf       	rjmp	.-186    	; 0x2330 <__fp_szero>
    23ea:	5f 3f       	cpi	r21, 0xFF	; 255
    23ec:	ec f3       	brlt	.-6      	; 0x23e8 <__mulsf3_pse+0x82>
    23ee:	98 3e       	cpi	r25, 0xE8	; 232
    23f0:	dc f3       	brlt	.-10     	; 0x23e8 <__mulsf3_pse+0x82>
    23f2:	86 95       	lsr	r24
    23f4:	77 95       	ror	r23
    23f6:	67 95       	ror	r22
    23f8:	b7 95       	ror	r27
    23fa:	f7 95       	ror	r31
    23fc:	e7 95       	ror	r30
    23fe:	9f 5f       	subi	r25, 0xFF	; 255
    2400:	c1 f7       	brne	.-16     	; 0x23f2 <__mulsf3_pse+0x8c>
    2402:	fe 2b       	or	r31, r30
    2404:	88 0f       	add	r24, r24
    2406:	91 1d       	adc	r25, r1
    2408:	96 95       	lsr	r25
    240a:	87 95       	ror	r24
    240c:	97 f9       	bld	r25, 7
    240e:	08 95       	ret
    2410:	11 f4       	brne	.+4      	; 0x2416 <__mulsf3_pse+0xb0>
    2412:	0e f4       	brtc	.+2      	; 0x2416 <__mulsf3_pse+0xb0>
    2414:	23 cf       	rjmp	.-442    	; 0x225c <__fp_nan>
    2416:	41 c0       	rjmp	.+130    	; 0x249a <__fp_mpack>

00002418 <sqrt>:
    2418:	70 df       	rcall	.-288    	; 0x22fa <__fp_splitA>
    241a:	d0 f3       	brcs	.-12     	; 0x2410 <__mulsf3_pse+0xaa>
    241c:	99 23       	and	r25, r25
    241e:	d9 f3       	breq	.-10     	; 0x2416 <__mulsf3_pse+0xb0>
    2420:	ce f3       	brts	.-14     	; 0x2414 <__mulsf3_pse+0xae>
    2422:	9f 57       	subi	r25, 0x7F	; 127
    2424:	55 0b       	sbc	r21, r21
    2426:	87 ff       	sbrs	r24, 7
    2428:	46 d0       	rcall	.+140    	; 0x24b6 <__fp_norm2>
    242a:	00 24       	eor	r0, r0
    242c:	a0 e6       	ldi	r26, 0x60	; 96
    242e:	40 ea       	ldi	r20, 0xA0	; 160
    2430:	90 01       	movw	r18, r0
    2432:	80 58       	subi	r24, 0x80	; 128
    2434:	56 95       	lsr	r21
    2436:	97 95       	ror	r25
    2438:	28 f4       	brcc	.+10     	; 0x2444 <sqrt+0x2c>
    243a:	80 5c       	subi	r24, 0xC0	; 192
    243c:	66 0f       	add	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	88 1f       	adc	r24, r24
    2442:	20 f0       	brcs	.+8      	; 0x244c <sqrt+0x34>
    2444:	26 17       	cp	r18, r22
    2446:	37 07       	cpc	r19, r23
    2448:	48 07       	cpc	r20, r24
    244a:	30 f4       	brcc	.+12     	; 0x2458 <sqrt+0x40>
    244c:	62 1b       	sub	r22, r18
    244e:	73 0b       	sbc	r23, r19
    2450:	84 0b       	sbc	r24, r20
    2452:	20 29       	or	r18, r0
    2454:	31 29       	or	r19, r1
    2456:	4a 2b       	or	r20, r26
    2458:	a6 95       	lsr	r26
    245a:	17 94       	ror	r1
    245c:	07 94       	ror	r0
    245e:	20 25       	eor	r18, r0
    2460:	31 25       	eor	r19, r1
    2462:	4a 27       	eor	r20, r26
    2464:	58 f7       	brcc	.-42     	; 0x243c <sqrt+0x24>
    2466:	66 0f       	add	r22, r22
    2468:	77 1f       	adc	r23, r23
    246a:	88 1f       	adc	r24, r24
    246c:	20 f0       	brcs	.+8      	; 0x2476 <sqrt+0x5e>
    246e:	26 17       	cp	r18, r22
    2470:	37 07       	cpc	r19, r23
    2472:	48 07       	cpc	r20, r24
    2474:	30 f4       	brcc	.+12     	; 0x2482 <sqrt+0x6a>
    2476:	62 0b       	sbc	r22, r18
    2478:	73 0b       	sbc	r23, r19
    247a:	84 0b       	sbc	r24, r20
    247c:	20 0d       	add	r18, r0
    247e:	31 1d       	adc	r19, r1
    2480:	41 1d       	adc	r20, r1
    2482:	a0 95       	com	r26
    2484:	81 f7       	brne	.-32     	; 0x2466 <sqrt+0x4e>
    2486:	b9 01       	movw	r22, r18
    2488:	84 2f       	mov	r24, r20
    248a:	91 58       	subi	r25, 0x81	; 129
    248c:	88 0f       	add	r24, r24
    248e:	96 95       	lsr	r25
    2490:	87 95       	ror	r24
    2492:	08 95       	ret

00002494 <square>:
    2494:	9b 01       	movw	r18, r22
    2496:	ac 01       	movw	r20, r24
    2498:	58 cf       	rjmp	.-336    	; 0x234a <__mulsf3>

0000249a <__fp_mpack>:
    249a:	9f 3f       	cpi	r25, 0xFF	; 255
    249c:	31 f0       	breq	.+12     	; 0x24aa <__fp_mpack_finite+0xc>

0000249e <__fp_mpack_finite>:
    249e:	91 50       	subi	r25, 0x01	; 1
    24a0:	20 f4       	brcc	.+8      	; 0x24aa <__fp_mpack_finite+0xc>
    24a2:	87 95       	ror	r24
    24a4:	77 95       	ror	r23
    24a6:	67 95       	ror	r22
    24a8:	b7 95       	ror	r27
    24aa:	88 0f       	add	r24, r24
    24ac:	91 1d       	adc	r25, r1
    24ae:	96 95       	lsr	r25
    24b0:	87 95       	ror	r24
    24b2:	97 f9       	bld	r25, 7
    24b4:	08 95       	ret

000024b6 <__fp_norm2>:
    24b6:	91 50       	subi	r25, 0x01	; 1
    24b8:	50 40       	sbci	r21, 0x00	; 0
    24ba:	66 0f       	add	r22, r22
    24bc:	77 1f       	adc	r23, r23
    24be:	88 1f       	adc	r24, r24
    24c0:	d2 f7       	brpl	.-12     	; 0x24b6 <__fp_norm2>
    24c2:	08 95       	ret

000024c4 <__divmodhi4>:
    24c4:	97 fb       	bst	r25, 7
    24c6:	07 2e       	mov	r0, r23
    24c8:	16 f4       	brtc	.+4      	; 0x24ce <__divmodhi4+0xa>
    24ca:	00 94       	com	r0
    24cc:	07 d0       	rcall	.+14     	; 0x24dc <__divmodhi4_neg1>
    24ce:	77 fd       	sbrc	r23, 7
    24d0:	09 d0       	rcall	.+18     	; 0x24e4 <__divmodhi4_neg2>
    24d2:	0e 94 b7 12 	call	0x256e	; 0x256e <__udivmodhi4>
    24d6:	07 fc       	sbrc	r0, 7
    24d8:	05 d0       	rcall	.+10     	; 0x24e4 <__divmodhi4_neg2>
    24da:	3e f4       	brtc	.+14     	; 0x24ea <__divmodhi4_exit>

000024dc <__divmodhi4_neg1>:
    24dc:	90 95       	com	r25
    24de:	81 95       	neg	r24
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	08 95       	ret

000024e4 <__divmodhi4_neg2>:
    24e4:	70 95       	com	r23
    24e6:	61 95       	neg	r22
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255

000024ea <__divmodhi4_exit>:
    24ea:	08 95       	ret

000024ec <__udivmodsi4>:
    24ec:	a1 e2       	ldi	r26, 0x21	; 33
    24ee:	1a 2e       	mov	r1, r26
    24f0:	aa 1b       	sub	r26, r26
    24f2:	bb 1b       	sub	r27, r27
    24f4:	fd 01       	movw	r30, r26
    24f6:	0d c0       	rjmp	.+26     	; 0x2512 <__udivmodsi4_ep>

000024f8 <__udivmodsi4_loop>:
    24f8:	aa 1f       	adc	r26, r26
    24fa:	bb 1f       	adc	r27, r27
    24fc:	ee 1f       	adc	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	a2 17       	cp	r26, r18
    2502:	b3 07       	cpc	r27, r19
    2504:	e4 07       	cpc	r30, r20
    2506:	f5 07       	cpc	r31, r21
    2508:	20 f0       	brcs	.+8      	; 0x2512 <__udivmodsi4_ep>
    250a:	a2 1b       	sub	r26, r18
    250c:	b3 0b       	sbc	r27, r19
    250e:	e4 0b       	sbc	r30, r20
    2510:	f5 0b       	sbc	r31, r21

00002512 <__udivmodsi4_ep>:
    2512:	66 1f       	adc	r22, r22
    2514:	77 1f       	adc	r23, r23
    2516:	88 1f       	adc	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	1a 94       	dec	r1
    251c:	69 f7       	brne	.-38     	; 0x24f8 <__udivmodsi4_loop>
    251e:	60 95       	com	r22
    2520:	70 95       	com	r23
    2522:	80 95       	com	r24
    2524:	90 95       	com	r25
    2526:	9b 01       	movw	r18, r22
    2528:	ac 01       	movw	r20, r24
    252a:	bd 01       	movw	r22, r26
    252c:	cf 01       	movw	r24, r30
    252e:	08 95       	ret

00002530 <__divmodsi4>:
    2530:	05 2e       	mov	r0, r21
    2532:	97 fb       	bst	r25, 7
    2534:	1e f4       	brtc	.+6      	; 0x253c <__divmodsi4+0xc>
    2536:	00 94       	com	r0
    2538:	0e 94 af 12 	call	0x255e	; 0x255e <__negsi2>
    253c:	57 fd       	sbrc	r21, 7
    253e:	07 d0       	rcall	.+14     	; 0x254e <__divmodsi4_neg2>
    2540:	0e 94 76 12 	call	0x24ec	; 0x24ec <__udivmodsi4>
    2544:	07 fc       	sbrc	r0, 7
    2546:	03 d0       	rcall	.+6      	; 0x254e <__divmodsi4_neg2>
    2548:	4e f4       	brtc	.+18     	; 0x255c <__divmodsi4_exit>
    254a:	0c 94 af 12 	jmp	0x255e	; 0x255e <__negsi2>

0000254e <__divmodsi4_neg2>:
    254e:	50 95       	com	r21
    2550:	40 95       	com	r20
    2552:	30 95       	com	r19
    2554:	21 95       	neg	r18
    2556:	3f 4f       	sbci	r19, 0xFF	; 255
    2558:	4f 4f       	sbci	r20, 0xFF	; 255
    255a:	5f 4f       	sbci	r21, 0xFF	; 255

0000255c <__divmodsi4_exit>:
    255c:	08 95       	ret

0000255e <__negsi2>:
    255e:	90 95       	com	r25
    2560:	80 95       	com	r24
    2562:	70 95       	com	r23
    2564:	61 95       	neg	r22
    2566:	7f 4f       	sbci	r23, 0xFF	; 255
    2568:	8f 4f       	sbci	r24, 0xFF	; 255
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	08 95       	ret

0000256e <__udivmodhi4>:
    256e:	aa 1b       	sub	r26, r26
    2570:	bb 1b       	sub	r27, r27
    2572:	51 e1       	ldi	r21, 0x11	; 17
    2574:	07 c0       	rjmp	.+14     	; 0x2584 <__udivmodhi4_ep>

00002576 <__udivmodhi4_loop>:
    2576:	aa 1f       	adc	r26, r26
    2578:	bb 1f       	adc	r27, r27
    257a:	a6 17       	cp	r26, r22
    257c:	b7 07       	cpc	r27, r23
    257e:	10 f0       	brcs	.+4      	; 0x2584 <__udivmodhi4_ep>
    2580:	a6 1b       	sub	r26, r22
    2582:	b7 0b       	sbc	r27, r23

00002584 <__udivmodhi4_ep>:
    2584:	88 1f       	adc	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	5a 95       	dec	r21
    258a:	a9 f7       	brne	.-22     	; 0x2576 <__udivmodhi4_loop>
    258c:	80 95       	com	r24
    258e:	90 95       	com	r25
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	08 95       	ret

00002596 <malloc>:
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	82 30       	cpi	r24, 0x02	; 2
    259c:	91 05       	cpc	r25, r1
    259e:	10 f4       	brcc	.+4      	; 0x25a4 <malloc+0xe>
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	e0 91 07 03 	lds	r30, 0x0307
    25a8:	f0 91 08 03 	lds	r31, 0x0308
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	a0 e0       	ldi	r26, 0x00	; 0
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	30 97       	sbiw	r30, 0x00	; 0
    25b6:	39 f1       	breq	.+78     	; 0x2606 <malloc+0x70>
    25b8:	40 81       	ld	r20, Z
    25ba:	51 81       	ldd	r21, Z+1	; 0x01
    25bc:	48 17       	cp	r20, r24
    25be:	59 07       	cpc	r21, r25
    25c0:	b8 f0       	brcs	.+46     	; 0x25f0 <malloc+0x5a>
    25c2:	48 17       	cp	r20, r24
    25c4:	59 07       	cpc	r21, r25
    25c6:	71 f4       	brne	.+28     	; 0x25e4 <malloc+0x4e>
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	10 97       	sbiw	r26, 0x00	; 0
    25ce:	29 f0       	breq	.+10     	; 0x25da <malloc+0x44>
    25d0:	13 96       	adiw	r26, 0x03	; 3
    25d2:	9c 93       	st	X, r25
    25d4:	8e 93       	st	-X, r24
    25d6:	12 97       	sbiw	r26, 0x02	; 2
    25d8:	2c c0       	rjmp	.+88     	; 0x2632 <malloc+0x9c>
    25da:	90 93 08 03 	sts	0x0308, r25
    25de:	80 93 07 03 	sts	0x0307, r24
    25e2:	27 c0       	rjmp	.+78     	; 0x2632 <malloc+0x9c>
    25e4:	21 15       	cp	r18, r1
    25e6:	31 05       	cpc	r19, r1
    25e8:	31 f0       	breq	.+12     	; 0x25f6 <malloc+0x60>
    25ea:	42 17       	cp	r20, r18
    25ec:	53 07       	cpc	r21, r19
    25ee:	18 f0       	brcs	.+6      	; 0x25f6 <malloc+0x60>
    25f0:	a9 01       	movw	r20, r18
    25f2:	db 01       	movw	r26, r22
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <malloc+0x62>
    25f6:	ef 01       	movw	r28, r30
    25f8:	9a 01       	movw	r18, r20
    25fa:	bd 01       	movw	r22, r26
    25fc:	df 01       	movw	r26, r30
    25fe:	02 80       	ldd	r0, Z+2	; 0x02
    2600:	f3 81       	ldd	r31, Z+3	; 0x03
    2602:	e0 2d       	mov	r30, r0
    2604:	d7 cf       	rjmp	.-82     	; 0x25b4 <malloc+0x1e>
    2606:	21 15       	cp	r18, r1
    2608:	31 05       	cpc	r19, r1
    260a:	f9 f0       	breq	.+62     	; 0x264a <malloc+0xb4>
    260c:	28 1b       	sub	r18, r24
    260e:	39 0b       	sbc	r19, r25
    2610:	24 30       	cpi	r18, 0x04	; 4
    2612:	31 05       	cpc	r19, r1
    2614:	80 f4       	brcc	.+32     	; 0x2636 <malloc+0xa0>
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	61 15       	cp	r22, r1
    261c:	71 05       	cpc	r23, r1
    261e:	21 f0       	breq	.+8      	; 0x2628 <malloc+0x92>
    2620:	fb 01       	movw	r30, r22
    2622:	93 83       	std	Z+3, r25	; 0x03
    2624:	82 83       	std	Z+2, r24	; 0x02
    2626:	04 c0       	rjmp	.+8      	; 0x2630 <malloc+0x9a>
    2628:	90 93 08 03 	sts	0x0308, r25
    262c:	80 93 07 03 	sts	0x0307, r24
    2630:	fe 01       	movw	r30, r28
    2632:	32 96       	adiw	r30, 0x02	; 2
    2634:	44 c0       	rjmp	.+136    	; 0x26be <malloc+0x128>
    2636:	fe 01       	movw	r30, r28
    2638:	e2 0f       	add	r30, r18
    263a:	f3 1f       	adc	r31, r19
    263c:	81 93       	st	Z+, r24
    263e:	91 93       	st	Z+, r25
    2640:	22 50       	subi	r18, 0x02	; 2
    2642:	31 09       	sbc	r19, r1
    2644:	39 83       	std	Y+1, r19	; 0x01
    2646:	28 83       	st	Y, r18
    2648:	3a c0       	rjmp	.+116    	; 0x26be <malloc+0x128>
    264a:	20 91 05 03 	lds	r18, 0x0305
    264e:	30 91 06 03 	lds	r19, 0x0306
    2652:	23 2b       	or	r18, r19
    2654:	41 f4       	brne	.+16     	; 0x2666 <malloc+0xd0>
    2656:	20 91 02 01 	lds	r18, 0x0102
    265a:	30 91 03 01 	lds	r19, 0x0103
    265e:	30 93 06 03 	sts	0x0306, r19
    2662:	20 93 05 03 	sts	0x0305, r18
    2666:	20 91 00 01 	lds	r18, 0x0100
    266a:	30 91 01 01 	lds	r19, 0x0101
    266e:	21 15       	cp	r18, r1
    2670:	31 05       	cpc	r19, r1
    2672:	41 f4       	brne	.+16     	; 0x2684 <malloc+0xee>
    2674:	2d b7       	in	r18, 0x3d	; 61
    2676:	3e b7       	in	r19, 0x3e	; 62
    2678:	40 91 04 01 	lds	r20, 0x0104
    267c:	50 91 05 01 	lds	r21, 0x0105
    2680:	24 1b       	sub	r18, r20
    2682:	35 0b       	sbc	r19, r21
    2684:	e0 91 05 03 	lds	r30, 0x0305
    2688:	f0 91 06 03 	lds	r31, 0x0306
    268c:	e2 17       	cp	r30, r18
    268e:	f3 07       	cpc	r31, r19
    2690:	a0 f4       	brcc	.+40     	; 0x26ba <malloc+0x124>
    2692:	2e 1b       	sub	r18, r30
    2694:	3f 0b       	sbc	r19, r31
    2696:	28 17       	cp	r18, r24
    2698:	39 07       	cpc	r19, r25
    269a:	78 f0       	brcs	.+30     	; 0x26ba <malloc+0x124>
    269c:	ac 01       	movw	r20, r24
    269e:	4e 5f       	subi	r20, 0xFE	; 254
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	24 17       	cp	r18, r20
    26a4:	35 07       	cpc	r19, r21
    26a6:	48 f0       	brcs	.+18     	; 0x26ba <malloc+0x124>
    26a8:	4e 0f       	add	r20, r30
    26aa:	5f 1f       	adc	r21, r31
    26ac:	50 93 06 03 	sts	0x0306, r21
    26b0:	40 93 05 03 	sts	0x0305, r20
    26b4:	81 93       	st	Z+, r24
    26b6:	91 93       	st	Z+, r25
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <malloc+0x128>
    26ba:	e0 e0       	ldi	r30, 0x00	; 0
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	cf 01       	movw	r24, r30
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <free>:
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <free+0xa>
    26ce:	87 c0       	rjmp	.+270    	; 0x27de <free+0x118>
    26d0:	fc 01       	movw	r30, r24
    26d2:	32 97       	sbiw	r30, 0x02	; 2
    26d4:	13 82       	std	Z+3, r1	; 0x03
    26d6:	12 82       	std	Z+2, r1	; 0x02
    26d8:	c0 91 07 03 	lds	r28, 0x0307
    26dc:	d0 91 08 03 	lds	r29, 0x0308
    26e0:	20 97       	sbiw	r28, 0x00	; 0
    26e2:	81 f4       	brne	.+32     	; 0x2704 <free+0x3e>
    26e4:	20 81       	ld	r18, Z
    26e6:	31 81       	ldd	r19, Z+1	; 0x01
    26e8:	28 0f       	add	r18, r24
    26ea:	39 1f       	adc	r19, r25
    26ec:	80 91 05 03 	lds	r24, 0x0305
    26f0:	90 91 06 03 	lds	r25, 0x0306
    26f4:	82 17       	cp	r24, r18
    26f6:	93 07       	cpc	r25, r19
    26f8:	79 f5       	brne	.+94     	; 0x2758 <free+0x92>
    26fa:	f0 93 06 03 	sts	0x0306, r31
    26fe:	e0 93 05 03 	sts	0x0305, r30
    2702:	6d c0       	rjmp	.+218    	; 0x27de <free+0x118>
    2704:	de 01       	movw	r26, r28
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	ae 17       	cp	r26, r30
    270c:	bf 07       	cpc	r27, r31
    270e:	50 f4       	brcc	.+20     	; 0x2724 <free+0x5e>
    2710:	12 96       	adiw	r26, 0x02	; 2
    2712:	4d 91       	ld	r20, X+
    2714:	5c 91       	ld	r21, X
    2716:	13 97       	sbiw	r26, 0x03	; 3
    2718:	9d 01       	movw	r18, r26
    271a:	41 15       	cp	r20, r1
    271c:	51 05       	cpc	r21, r1
    271e:	09 f1       	breq	.+66     	; 0x2762 <free+0x9c>
    2720:	da 01       	movw	r26, r20
    2722:	f3 cf       	rjmp	.-26     	; 0x270a <free+0x44>
    2724:	b3 83       	std	Z+3, r27	; 0x03
    2726:	a2 83       	std	Z+2, r26	; 0x02
    2728:	40 81       	ld	r20, Z
    272a:	51 81       	ldd	r21, Z+1	; 0x01
    272c:	84 0f       	add	r24, r20
    272e:	95 1f       	adc	r25, r21
    2730:	8a 17       	cp	r24, r26
    2732:	9b 07       	cpc	r25, r27
    2734:	71 f4       	brne	.+28     	; 0x2752 <free+0x8c>
    2736:	8d 91       	ld	r24, X+
    2738:	9c 91       	ld	r25, X
    273a:	11 97       	sbiw	r26, 0x01	; 1
    273c:	84 0f       	add	r24, r20
    273e:	95 1f       	adc	r25, r21
    2740:	02 96       	adiw	r24, 0x02	; 2
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
    2746:	12 96       	adiw	r26, 0x02	; 2
    2748:	8d 91       	ld	r24, X+
    274a:	9c 91       	ld	r25, X
    274c:	13 97       	sbiw	r26, 0x03	; 3
    274e:	93 83       	std	Z+3, r25	; 0x03
    2750:	82 83       	std	Z+2, r24	; 0x02
    2752:	21 15       	cp	r18, r1
    2754:	31 05       	cpc	r19, r1
    2756:	29 f4       	brne	.+10     	; 0x2762 <free+0x9c>
    2758:	f0 93 08 03 	sts	0x0308, r31
    275c:	e0 93 07 03 	sts	0x0307, r30
    2760:	3e c0       	rjmp	.+124    	; 0x27de <free+0x118>
    2762:	d9 01       	movw	r26, r18
    2764:	13 96       	adiw	r26, 0x03	; 3
    2766:	fc 93       	st	X, r31
    2768:	ee 93       	st	-X, r30
    276a:	12 97       	sbiw	r26, 0x02	; 2
    276c:	4d 91       	ld	r20, X+
    276e:	5d 91       	ld	r21, X+
    2770:	a4 0f       	add	r26, r20
    2772:	b5 1f       	adc	r27, r21
    2774:	ea 17       	cp	r30, r26
    2776:	fb 07       	cpc	r31, r27
    2778:	79 f4       	brne	.+30     	; 0x2798 <free+0xd2>
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	84 0f       	add	r24, r20
    2780:	95 1f       	adc	r25, r21
    2782:	02 96       	adiw	r24, 0x02	; 2
    2784:	d9 01       	movw	r26, r18
    2786:	11 96       	adiw	r26, 0x01	; 1
    2788:	9c 93       	st	X, r25
    278a:	8e 93       	st	-X, r24
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	13 96       	adiw	r26, 0x03	; 3
    2792:	9c 93       	st	X, r25
    2794:	8e 93       	st	-X, r24
    2796:	12 97       	sbiw	r26, 0x02	; 2
    2798:	e0 e0       	ldi	r30, 0x00	; 0
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	9b 81       	ldd	r25, Y+3	; 0x03
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	19 f0       	breq	.+6      	; 0x27aa <free+0xe4>
    27a4:	fe 01       	movw	r30, r28
    27a6:	ec 01       	movw	r28, r24
    27a8:	f9 cf       	rjmp	.-14     	; 0x279c <free+0xd6>
    27aa:	ce 01       	movw	r24, r28
    27ac:	02 96       	adiw	r24, 0x02	; 2
    27ae:	28 81       	ld	r18, Y
    27b0:	39 81       	ldd	r19, Y+1	; 0x01
    27b2:	82 0f       	add	r24, r18
    27b4:	93 1f       	adc	r25, r19
    27b6:	20 91 05 03 	lds	r18, 0x0305
    27ba:	30 91 06 03 	lds	r19, 0x0306
    27be:	28 17       	cp	r18, r24
    27c0:	39 07       	cpc	r19, r25
    27c2:	69 f4       	brne	.+26     	; 0x27de <free+0x118>
    27c4:	30 97       	sbiw	r30, 0x00	; 0
    27c6:	29 f4       	brne	.+10     	; 0x27d2 <free+0x10c>
    27c8:	10 92 08 03 	sts	0x0308, r1
    27cc:	10 92 07 03 	sts	0x0307, r1
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <free+0x110>
    27d2:	13 82       	std	Z+3, r1	; 0x03
    27d4:	12 82       	std	Z+2, r1	; 0x02
    27d6:	d0 93 06 03 	sts	0x0306, r29
    27da:	c0 93 05 03 	sts	0x0305, r28
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	08 95       	ret

000027e4 <realloc>:
    27e4:	a0 e0       	ldi	r26, 0x00	; 0
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e8 ef       	ldi	r30, 0xF8	; 248
    27ea:	f3 e1       	ldi	r31, 0x13	; 19
    27ec:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__prologue_saves__+0x8>
    27f0:	ec 01       	movw	r28, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	20 97       	sbiw	r28, 0x00	; 0
    27f6:	19 f4       	brne	.+6      	; 0x27fe <realloc+0x1a>
    27f8:	0e 94 cb 12 	call	0x2596	; 0x2596 <malloc>
    27fc:	b8 c0       	rjmp	.+368    	; 0x296e <realloc+0x18a>
    27fe:	fe 01       	movw	r30, r28
    2800:	e6 0f       	add	r30, r22
    2802:	f7 1f       	adc	r31, r23
    2804:	9e 01       	movw	r18, r28
    2806:	22 50       	subi	r18, 0x02	; 2
    2808:	31 09       	sbc	r19, r1
    280a:	e2 17       	cp	r30, r18
    280c:	f3 07       	cpc	r31, r19
    280e:	08 f4       	brcc	.+2      	; 0x2812 <realloc+0x2e>
    2810:	ac c0       	rjmp	.+344    	; 0x296a <realloc+0x186>
    2812:	d9 01       	movw	r26, r18
    2814:	0d 91       	ld	r16, X+
    2816:	1c 91       	ld	r17, X
    2818:	11 97       	sbiw	r26, 0x01	; 1
    281a:	06 17       	cp	r16, r22
    281c:	17 07       	cpc	r17, r23
    281e:	b8 f0       	brcs	.+46     	; 0x284e <realloc+0x6a>
    2820:	05 30       	cpi	r16, 0x05	; 5
    2822:	11 05       	cpc	r17, r1
    2824:	08 f4       	brcc	.+2      	; 0x2828 <realloc+0x44>
    2826:	9f c0       	rjmp	.+318    	; 0x2966 <realloc+0x182>
    2828:	a8 01       	movw	r20, r16
    282a:	44 50       	subi	r20, 0x04	; 4
    282c:	51 09       	sbc	r21, r1
    282e:	46 17       	cp	r20, r22
    2830:	57 07       	cpc	r21, r23
    2832:	08 f4       	brcc	.+2      	; 0x2836 <realloc+0x52>
    2834:	98 c0       	rjmp	.+304    	; 0x2966 <realloc+0x182>
    2836:	02 50       	subi	r16, 0x02	; 2
    2838:	11 09       	sbc	r17, r1
    283a:	06 1b       	sub	r16, r22
    283c:	17 0b       	sbc	r17, r23
    283e:	01 93       	st	Z+, r16
    2840:	11 93       	st	Z+, r17
    2842:	6d 93       	st	X+, r22
    2844:	7c 93       	st	X, r23
    2846:	cf 01       	movw	r24, r30
    2848:	0e 94 63 13 	call	0x26c6	; 0x26c6 <free>
    284c:	8c c0       	rjmp	.+280    	; 0x2966 <realloc+0x182>
    284e:	5b 01       	movw	r10, r22
    2850:	a0 1a       	sub	r10, r16
    2852:	b1 0a       	sbc	r11, r17
    2854:	4e 01       	movw	r8, r28
    2856:	80 0e       	add	r8, r16
    2858:	91 1e       	adc	r9, r17
    285a:	a0 91 07 03 	lds	r26, 0x0307
    285e:	b0 91 08 03 	lds	r27, 0x0308
    2862:	61 2c       	mov	r6, r1
    2864:	71 2c       	mov	r7, r1
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	10 97       	sbiw	r26, 0x00	; 0
    286c:	09 f4       	brne	.+2      	; 0x2870 <realloc+0x8c>
    286e:	49 c0       	rjmp	.+146    	; 0x2902 <realloc+0x11e>
    2870:	a8 15       	cp	r26, r8
    2872:	b9 05       	cpc	r27, r9
    2874:	c9 f5       	brne	.+114    	; 0x28e8 <realloc+0x104>
    2876:	ed 90       	ld	r14, X+
    2878:	fc 90       	ld	r15, X
    287a:	11 97       	sbiw	r26, 0x01	; 1
    287c:	67 01       	movw	r12, r14
    287e:	42 e0       	ldi	r20, 0x02	; 2
    2880:	c4 0e       	add	r12, r20
    2882:	d1 1c       	adc	r13, r1
    2884:	ca 14       	cp	r12, r10
    2886:	db 04       	cpc	r13, r11
    2888:	78 f1       	brcs	.+94     	; 0x28e8 <realloc+0x104>
    288a:	47 01       	movw	r8, r14
    288c:	8a 18       	sub	r8, r10
    288e:	9b 08       	sbc	r9, r11
    2890:	64 01       	movw	r12, r8
    2892:	42 e0       	ldi	r20, 0x02	; 2
    2894:	c4 0e       	add	r12, r20
    2896:	d1 1c       	adc	r13, r1
    2898:	12 96       	adiw	r26, 0x02	; 2
    289a:	bc 90       	ld	r11, X
    289c:	12 97       	sbiw	r26, 0x02	; 2
    289e:	13 96       	adiw	r26, 0x03	; 3
    28a0:	ac 91       	ld	r26, X
    28a2:	b5 e0       	ldi	r27, 0x05	; 5
    28a4:	cb 16       	cp	r12, r27
    28a6:	d1 04       	cpc	r13, r1
    28a8:	40 f0       	brcs	.+16     	; 0x28ba <realloc+0xd6>
    28aa:	b2 82       	std	Z+2, r11	; 0x02
    28ac:	a3 83       	std	Z+3, r26	; 0x03
    28ae:	91 82       	std	Z+1, r9	; 0x01
    28b0:	80 82       	st	Z, r8
    28b2:	d9 01       	movw	r26, r18
    28b4:	8d 93       	st	X+, r24
    28b6:	9c 93       	st	X, r25
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <realloc+0xe8>
    28ba:	0e 5f       	subi	r16, 0xFE	; 254
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	0e 0d       	add	r16, r14
    28c0:	1f 1d       	adc	r17, r15
    28c2:	f9 01       	movw	r30, r18
    28c4:	11 83       	std	Z+1, r17	; 0x01
    28c6:	00 83       	st	Z, r16
    28c8:	eb 2d       	mov	r30, r11
    28ca:	fa 2f       	mov	r31, r26
    28cc:	61 15       	cp	r22, r1
    28ce:	71 05       	cpc	r23, r1
    28d0:	31 f0       	breq	.+12     	; 0x28de <realloc+0xfa>
    28d2:	db 01       	movw	r26, r22
    28d4:	13 96       	adiw	r26, 0x03	; 3
    28d6:	fc 93       	st	X, r31
    28d8:	ee 93       	st	-X, r30
    28da:	12 97       	sbiw	r26, 0x02	; 2
    28dc:	44 c0       	rjmp	.+136    	; 0x2966 <realloc+0x182>
    28de:	f0 93 08 03 	sts	0x0308, r31
    28e2:	e0 93 07 03 	sts	0x0307, r30
    28e6:	3f c0       	rjmp	.+126    	; 0x2966 <realloc+0x182>
    28e8:	6d 91       	ld	r22, X+
    28ea:	7c 91       	ld	r23, X
    28ec:	11 97       	sbiw	r26, 0x01	; 1
    28ee:	66 16       	cp	r6, r22
    28f0:	77 06       	cpc	r7, r23
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <realloc+0x112>
    28f4:	3b 01       	movw	r6, r22
    28f6:	bd 01       	movw	r22, r26
    28f8:	12 96       	adiw	r26, 0x02	; 2
    28fa:	0d 90       	ld	r0, X+
    28fc:	bc 91       	ld	r27, X
    28fe:	a0 2d       	mov	r26, r0
    2900:	b4 cf       	rjmp	.-152    	; 0x286a <realloc+0x86>
    2902:	60 91 05 03 	lds	r22, 0x0305
    2906:	70 91 06 03 	lds	r23, 0x0306
    290a:	68 15       	cp	r22, r8
    290c:	79 05       	cpc	r23, r9
    290e:	e9 f4       	brne	.+58     	; 0x294a <realloc+0x166>
    2910:	68 16       	cp	r6, r24
    2912:	79 06       	cpc	r7, r25
    2914:	d0 f4       	brcc	.+52     	; 0x294a <realloc+0x166>
    2916:	40 91 00 01 	lds	r20, 0x0100
    291a:	50 91 01 01 	lds	r21, 0x0101
    291e:	41 15       	cp	r20, r1
    2920:	51 05       	cpc	r21, r1
    2922:	41 f4       	brne	.+16     	; 0x2934 <realloc+0x150>
    2924:	4d b7       	in	r20, 0x3d	; 61
    2926:	5e b7       	in	r21, 0x3e	; 62
    2928:	60 91 04 01 	lds	r22, 0x0104
    292c:	70 91 05 01 	lds	r23, 0x0105
    2930:	46 1b       	sub	r20, r22
    2932:	57 0b       	sbc	r21, r23
    2934:	e4 17       	cp	r30, r20
    2936:	f5 07       	cpc	r31, r21
    2938:	c0 f4       	brcc	.+48     	; 0x296a <realloc+0x186>
    293a:	f0 93 06 03 	sts	0x0306, r31
    293e:	e0 93 05 03 	sts	0x0305, r30
    2942:	f9 01       	movw	r30, r18
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	0e c0       	rjmp	.+28     	; 0x2966 <realloc+0x182>
    294a:	0e 94 cb 12 	call	0x2596	; 0x2596 <malloc>
    294e:	7c 01       	movw	r14, r24
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	59 f0       	breq	.+22     	; 0x296a <realloc+0x186>
    2954:	a8 01       	movw	r20, r16
    2956:	be 01       	movw	r22, r28
    2958:	0e 94 bc 14 	call	0x2978	; 0x2978 <memcpy>
    295c:	ce 01       	movw	r24, r28
    295e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <free>
    2962:	c7 01       	movw	r24, r14
    2964:	04 c0       	rjmp	.+8      	; 0x296e <realloc+0x18a>
    2966:	ce 01       	movw	r24, r28
    2968:	02 c0       	rjmp	.+4      	; 0x296e <realloc+0x18a>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	ee e0       	ldi	r30, 0x0E	; 14
    2974:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__epilogue_restores__+0x8>

00002978 <memcpy>:
    2978:	fb 01       	movw	r30, r22
    297a:	dc 01       	movw	r26, r24
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <memcpy+0xa>
    297e:	01 90       	ld	r0, Z+
    2980:	0d 92       	st	X+, r0
    2982:	41 50       	subi	r20, 0x01	; 1
    2984:	50 40       	sbci	r21, 0x00	; 0
    2986:	d8 f7       	brcc	.-10     	; 0x297e <memcpy+0x6>
    2988:	08 95       	ret

0000298a <fdevopen>:
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	ec 01       	movw	r28, r24
    2994:	8b 01       	movw	r16, r22
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	31 f4       	brne	.+12     	; 0x29a6 <fdevopen+0x1c>
    299a:	61 15       	cp	r22, r1
    299c:	71 05       	cpc	r23, r1
    299e:	19 f4       	brne	.+6      	; 0x29a6 <fdevopen+0x1c>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	38 c0       	rjmp	.+112    	; 0x2a16 <fdevopen+0x8c>
    29a6:	6e e0       	ldi	r22, 0x0E	; 14
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <calloc>
    29b2:	fc 01       	movw	r30, r24
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	a1 f3       	breq	.-24     	; 0x29a0 <fdevopen+0x16>
    29b8:	80 e8       	ldi	r24, 0x80	; 128
    29ba:	83 83       	std	Z+3, r24	; 0x03
    29bc:	01 15       	cp	r16, r1
    29be:	11 05       	cpc	r17, r1
    29c0:	71 f0       	breq	.+28     	; 0x29de <fdevopen+0x54>
    29c2:	13 87       	std	Z+11, r17	; 0x0b
    29c4:	02 87       	std	Z+10, r16	; 0x0a
    29c6:	81 e8       	ldi	r24, 0x81	; 129
    29c8:	83 83       	std	Z+3, r24	; 0x03
    29ca:	80 91 09 03 	lds	r24, 0x0309
    29ce:	90 91 0a 03 	lds	r25, 0x030A
    29d2:	89 2b       	or	r24, r25
    29d4:	21 f4       	brne	.+8      	; 0x29de <fdevopen+0x54>
    29d6:	f0 93 0a 03 	sts	0x030A, r31
    29da:	e0 93 09 03 	sts	0x0309, r30
    29de:	20 97       	sbiw	r28, 0x00	; 0
    29e0:	c9 f0       	breq	.+50     	; 0x2a14 <fdevopen+0x8a>
    29e2:	d1 87       	std	Z+9, r29	; 0x09
    29e4:	c0 87       	std	Z+8, r28	; 0x08
    29e6:	83 81       	ldd	r24, Z+3	; 0x03
    29e8:	82 60       	ori	r24, 0x02	; 2
    29ea:	83 83       	std	Z+3, r24	; 0x03
    29ec:	80 91 0b 03 	lds	r24, 0x030B
    29f0:	90 91 0c 03 	lds	r25, 0x030C
    29f4:	89 2b       	or	r24, r25
    29f6:	71 f4       	brne	.+28     	; 0x2a14 <fdevopen+0x8a>
    29f8:	f0 93 0c 03 	sts	0x030C, r31
    29fc:	e0 93 0b 03 	sts	0x030B, r30
    2a00:	80 91 0d 03 	lds	r24, 0x030D
    2a04:	90 91 0e 03 	lds	r25, 0x030E
    2a08:	89 2b       	or	r24, r25
    2a0a:	21 f4       	brne	.+8      	; 0x2a14 <fdevopen+0x8a>
    2a0c:	f0 93 0e 03 	sts	0x030E, r31
    2a10:	e0 93 0d 03 	sts	0x030D, r30
    2a14:	cf 01       	movw	r24, r30
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	08 95       	ret

00002a20 <printf>:
    2a20:	a0 e0       	ldi	r26, 0x00	; 0
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e6 e1       	ldi	r30, 0x16	; 22
    2a26:	f5 e1       	ldi	r31, 0x15	; 21
    2a28:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__prologue_saves__+0x20>
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	35 96       	adiw	r30, 0x05	; 5
    2a30:	61 91       	ld	r22, Z+
    2a32:	71 91       	ld	r23, Z+
    2a34:	af 01       	movw	r20, r30
    2a36:	80 91 0b 03 	lds	r24, 0x030B
    2a3a:	90 91 0c 03 	lds	r25, 0x030C
    2a3e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vfprintf>
    2a42:	e2 e0       	ldi	r30, 0x02	; 2
    2a44:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__epilogue_restores__+0x20>

00002a48 <puts>:
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	e0 91 0b 03 	lds	r30, 0x030B
    2a54:	f0 91 0c 03 	lds	r31, 0x030C
    2a58:	23 81       	ldd	r18, Z+3	; 0x03
    2a5a:	21 ff       	sbrs	r18, 1
    2a5c:	1b c0       	rjmp	.+54     	; 0x2a94 <puts+0x4c>
    2a5e:	ec 01       	movw	r28, r24
    2a60:	00 e0       	ldi	r16, 0x00	; 0
    2a62:	10 e0       	ldi	r17, 0x00	; 0
    2a64:	89 91       	ld	r24, Y+
    2a66:	60 91 0b 03 	lds	r22, 0x030B
    2a6a:	70 91 0c 03 	lds	r23, 0x030C
    2a6e:	db 01       	movw	r26, r22
    2a70:	18 96       	adiw	r26, 0x08	; 8
    2a72:	ed 91       	ld	r30, X+
    2a74:	fc 91       	ld	r31, X
    2a76:	19 97       	sbiw	r26, 0x09	; 9
    2a78:	88 23       	and	r24, r24
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <puts+0x40>
    2a7c:	09 95       	icall
    2a7e:	89 2b       	or	r24, r25
    2a80:	89 f3       	breq	.-30     	; 0x2a64 <puts+0x1c>
    2a82:	0f ef       	ldi	r16, 0xFF	; 255
    2a84:	1f ef       	ldi	r17, 0xFF	; 255
    2a86:	ee cf       	rjmp	.-36     	; 0x2a64 <puts+0x1c>
    2a88:	8a e0       	ldi	r24, 0x0A	; 10
    2a8a:	09 95       	icall
    2a8c:	89 2b       	or	r24, r25
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <puts+0x4c>
    2a90:	c8 01       	movw	r24, r16
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <puts+0x50>
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	9f ef       	ldi	r25, 0xFF	; 255
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

00002aa2 <sprintf>:
    2aa2:	ae e0       	ldi	r26, 0x0E	; 14
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e7 e5       	ldi	r30, 0x57	; 87
    2aa8:	f5 e1       	ldi	r31, 0x15	; 21
    2aaa:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x1c>
    2aae:	0d 89       	ldd	r16, Y+21	; 0x15
    2ab0:	1e 89       	ldd	r17, Y+22	; 0x16
    2ab2:	86 e0       	ldi	r24, 0x06	; 6
    2ab4:	8c 83       	std	Y+4, r24	; 0x04
    2ab6:	1a 83       	std	Y+2, r17	; 0x02
    2ab8:	09 83       	std	Y+1, r16	; 0x01
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	9f e7       	ldi	r25, 0x7F	; 127
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	ae 01       	movw	r20, r28
    2ac4:	47 5e       	subi	r20, 0xE7	; 231
    2ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac8:	6f 89       	ldd	r22, Y+23	; 0x17
    2aca:	78 8d       	ldd	r23, Y+24	; 0x18
    2acc:	ce 01       	movw	r24, r28
    2ace:	01 96       	adiw	r24, 0x01	; 1
    2ad0:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vfprintf>
    2ad4:	ef 81       	ldd	r30, Y+7	; 0x07
    2ad6:	f8 85       	ldd	r31, Y+8	; 0x08
    2ad8:	e0 0f       	add	r30, r16
    2ada:	f1 1f       	adc	r31, r17
    2adc:	10 82       	st	Z, r1
    2ade:	2e 96       	adiw	r28, 0x0e	; 14
    2ae0:	e4 e0       	ldi	r30, 0x04	; 4
    2ae2:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x1c>

00002ae6 <vfprintf>:
    2ae6:	ac e0       	ldi	r26, 0x0C	; 12
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e9 e7       	ldi	r30, 0x79	; 121
    2aec:	f5 e1       	ldi	r31, 0x15	; 21
    2aee:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__prologue_saves__>
    2af2:	7c 01       	movw	r14, r24
    2af4:	6b 01       	movw	r12, r22
    2af6:	8a 01       	movw	r16, r20
    2af8:	fc 01       	movw	r30, r24
    2afa:	17 82       	std	Z+7, r1	; 0x07
    2afc:	16 82       	std	Z+6, r1	; 0x06
    2afe:	83 81       	ldd	r24, Z+3	; 0x03
    2b00:	81 ff       	sbrs	r24, 1
    2b02:	bd c1       	rjmp	.+890    	; 0x2e7e <vfprintf+0x398>
    2b04:	ce 01       	movw	r24, r28
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	4c 01       	movw	r8, r24
    2b0a:	f7 01       	movw	r30, r14
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	f6 01       	movw	r30, r12
    2b10:	93 fd       	sbrc	r25, 3
    2b12:	85 91       	lpm	r24, Z+
    2b14:	93 ff       	sbrs	r25, 3
    2b16:	81 91       	ld	r24, Z+
    2b18:	6f 01       	movw	r12, r30
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <vfprintf+0x3a>
    2b1e:	ab c1       	rjmp	.+854    	; 0x2e76 <vfprintf+0x390>
    2b20:	85 32       	cpi	r24, 0x25	; 37
    2b22:	39 f4       	brne	.+14     	; 0x2b32 <vfprintf+0x4c>
    2b24:	93 fd       	sbrc	r25, 3
    2b26:	85 91       	lpm	r24, Z+
    2b28:	93 ff       	sbrs	r25, 3
    2b2a:	81 91       	ld	r24, Z+
    2b2c:	6f 01       	movw	r12, r30
    2b2e:	85 32       	cpi	r24, 0x25	; 37
    2b30:	29 f4       	brne	.+10     	; 0x2b3c <vfprintf+0x56>
    2b32:	b7 01       	movw	r22, r14
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2b3a:	e7 cf       	rjmp	.-50     	; 0x2b0a <vfprintf+0x24>
    2b3c:	51 2c       	mov	r5, r1
    2b3e:	31 2c       	mov	r3, r1
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	20 32       	cpi	r18, 0x20	; 32
    2b44:	a0 f4       	brcc	.+40     	; 0x2b6e <vfprintf+0x88>
    2b46:	8b 32       	cpi	r24, 0x2B	; 43
    2b48:	69 f0       	breq	.+26     	; 0x2b64 <vfprintf+0x7e>
    2b4a:	30 f4       	brcc	.+12     	; 0x2b58 <vfprintf+0x72>
    2b4c:	80 32       	cpi	r24, 0x20	; 32
    2b4e:	59 f0       	breq	.+22     	; 0x2b66 <vfprintf+0x80>
    2b50:	83 32       	cpi	r24, 0x23	; 35
    2b52:	69 f4       	brne	.+26     	; 0x2b6e <vfprintf+0x88>
    2b54:	20 61       	ori	r18, 0x10	; 16
    2b56:	2c c0       	rjmp	.+88     	; 0x2bb0 <vfprintf+0xca>
    2b58:	8d 32       	cpi	r24, 0x2D	; 45
    2b5a:	39 f0       	breq	.+14     	; 0x2b6a <vfprintf+0x84>
    2b5c:	80 33       	cpi	r24, 0x30	; 48
    2b5e:	39 f4       	brne	.+14     	; 0x2b6e <vfprintf+0x88>
    2b60:	21 60       	ori	r18, 0x01	; 1
    2b62:	26 c0       	rjmp	.+76     	; 0x2bb0 <vfprintf+0xca>
    2b64:	22 60       	ori	r18, 0x02	; 2
    2b66:	24 60       	ori	r18, 0x04	; 4
    2b68:	23 c0       	rjmp	.+70     	; 0x2bb0 <vfprintf+0xca>
    2b6a:	28 60       	ori	r18, 0x08	; 8
    2b6c:	21 c0       	rjmp	.+66     	; 0x2bb0 <vfprintf+0xca>
    2b6e:	27 fd       	sbrc	r18, 7
    2b70:	27 c0       	rjmp	.+78     	; 0x2bc0 <vfprintf+0xda>
    2b72:	30 ed       	ldi	r19, 0xD0	; 208
    2b74:	38 0f       	add	r19, r24
    2b76:	3a 30       	cpi	r19, 0x0A	; 10
    2b78:	78 f4       	brcc	.+30     	; 0x2b98 <vfprintf+0xb2>
    2b7a:	26 ff       	sbrs	r18, 6
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <vfprintf+0xa4>
    2b7e:	fa e0       	ldi	r31, 0x0A	; 10
    2b80:	5f 9e       	mul	r5, r31
    2b82:	30 0d       	add	r19, r0
    2b84:	11 24       	eor	r1, r1
    2b86:	53 2e       	mov	r5, r19
    2b88:	13 c0       	rjmp	.+38     	; 0x2bb0 <vfprintf+0xca>
    2b8a:	8a e0       	ldi	r24, 0x0A	; 10
    2b8c:	38 9e       	mul	r3, r24
    2b8e:	30 0d       	add	r19, r0
    2b90:	11 24       	eor	r1, r1
    2b92:	33 2e       	mov	r3, r19
    2b94:	20 62       	ori	r18, 0x20	; 32
    2b96:	0c c0       	rjmp	.+24     	; 0x2bb0 <vfprintf+0xca>
    2b98:	8e 32       	cpi	r24, 0x2E	; 46
    2b9a:	21 f4       	brne	.+8      	; 0x2ba4 <vfprintf+0xbe>
    2b9c:	26 fd       	sbrc	r18, 6
    2b9e:	6b c1       	rjmp	.+726    	; 0x2e76 <vfprintf+0x390>
    2ba0:	20 64       	ori	r18, 0x40	; 64
    2ba2:	06 c0       	rjmp	.+12     	; 0x2bb0 <vfprintf+0xca>
    2ba4:	8c 36       	cpi	r24, 0x6C	; 108
    2ba6:	11 f4       	brne	.+4      	; 0x2bac <vfprintf+0xc6>
    2ba8:	20 68       	ori	r18, 0x80	; 128
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <vfprintf+0xca>
    2bac:	88 36       	cpi	r24, 0x68	; 104
    2bae:	41 f4       	brne	.+16     	; 0x2bc0 <vfprintf+0xda>
    2bb0:	f6 01       	movw	r30, r12
    2bb2:	93 fd       	sbrc	r25, 3
    2bb4:	85 91       	lpm	r24, Z+
    2bb6:	93 ff       	sbrs	r25, 3
    2bb8:	81 91       	ld	r24, Z+
    2bba:	6f 01       	movw	r12, r30
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	c1 cf       	rjmp	.-126    	; 0x2b42 <vfprintf+0x5c>
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	9f 7d       	andi	r25, 0xDF	; 223
    2bc4:	95 54       	subi	r25, 0x45	; 69
    2bc6:	93 30       	cpi	r25, 0x03	; 3
    2bc8:	28 f4       	brcc	.+10     	; 0x2bd4 <vfprintf+0xee>
    2bca:	0c 5f       	subi	r16, 0xFC	; 252
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	ff e3       	ldi	r31, 0x3F	; 63
    2bd0:	f9 83       	std	Y+1, r31	; 0x01
    2bd2:	0d c0       	rjmp	.+26     	; 0x2bee <vfprintf+0x108>
    2bd4:	83 36       	cpi	r24, 0x63	; 99
    2bd6:	31 f0       	breq	.+12     	; 0x2be4 <vfprintf+0xfe>
    2bd8:	83 37       	cpi	r24, 0x73	; 115
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <vfprintf+0x112>
    2bdc:	83 35       	cpi	r24, 0x53	; 83
    2bde:	09 f0       	breq	.+2      	; 0x2be2 <vfprintf+0xfc>
    2be0:	5b c0       	rjmp	.+182    	; 0x2c98 <vfprintf+0x1b2>
    2be2:	22 c0       	rjmp	.+68     	; 0x2c28 <vfprintf+0x142>
    2be4:	f8 01       	movw	r30, r16
    2be6:	80 81       	ld	r24, Z
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	0e 5f       	subi	r16, 0xFE	; 254
    2bec:	1f 4f       	sbci	r17, 0xFF	; 255
    2bee:	44 24       	eor	r4, r4
    2bf0:	43 94       	inc	r4
    2bf2:	51 2c       	mov	r5, r1
    2bf4:	54 01       	movw	r10, r8
    2bf6:	15 c0       	rjmp	.+42     	; 0x2c22 <vfprintf+0x13c>
    2bf8:	38 01       	movw	r6, r16
    2bfa:	f2 e0       	ldi	r31, 0x02	; 2
    2bfc:	6f 0e       	add	r6, r31
    2bfe:	71 1c       	adc	r7, r1
    2c00:	f8 01       	movw	r30, r16
    2c02:	a0 80       	ld	r10, Z
    2c04:	b1 80       	ldd	r11, Z+1	; 0x01
    2c06:	26 ff       	sbrs	r18, 6
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <vfprintf+0x12a>
    2c0a:	65 2d       	mov	r22, r5
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <vfprintf+0x12e>
    2c10:	6f ef       	ldi	r22, 0xFF	; 255
    2c12:	7f ef       	ldi	r23, 0xFF	; 255
    2c14:	c5 01       	movw	r24, r10
    2c16:	2c 87       	std	Y+12, r18	; 0x0c
    2c18:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <strnlen>
    2c1c:	2c 01       	movw	r4, r24
    2c1e:	83 01       	movw	r16, r6
    2c20:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c22:	2f 77       	andi	r18, 0x7F	; 127
    2c24:	22 2e       	mov	r2, r18
    2c26:	17 c0       	rjmp	.+46     	; 0x2c56 <vfprintf+0x170>
    2c28:	38 01       	movw	r6, r16
    2c2a:	f2 e0       	ldi	r31, 0x02	; 2
    2c2c:	6f 0e       	add	r6, r31
    2c2e:	71 1c       	adc	r7, r1
    2c30:	f8 01       	movw	r30, r16
    2c32:	a0 80       	ld	r10, Z
    2c34:	b1 80       	ldd	r11, Z+1	; 0x01
    2c36:	26 ff       	sbrs	r18, 6
    2c38:	03 c0       	rjmp	.+6      	; 0x2c40 <vfprintf+0x15a>
    2c3a:	65 2d       	mov	r22, r5
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <vfprintf+0x15e>
    2c40:	6f ef       	ldi	r22, 0xFF	; 255
    2c42:	7f ef       	ldi	r23, 0xFF	; 255
    2c44:	c5 01       	movw	r24, r10
    2c46:	2c 87       	std	Y+12, r18	; 0x0c
    2c48:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <strnlen_P>
    2c4c:	2c 01       	movw	r4, r24
    2c4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c50:	20 68       	ori	r18, 0x80	; 128
    2c52:	22 2e       	mov	r2, r18
    2c54:	83 01       	movw	r16, r6
    2c56:	23 fc       	sbrc	r2, 3
    2c58:	1b c0       	rjmp	.+54     	; 0x2c90 <vfprintf+0x1aa>
    2c5a:	83 2d       	mov	r24, r3
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	48 16       	cp	r4, r24
    2c60:	59 06       	cpc	r5, r25
    2c62:	b0 f4       	brcc	.+44     	; 0x2c90 <vfprintf+0x1aa>
    2c64:	b7 01       	movw	r22, r14
    2c66:	80 e2       	ldi	r24, 0x20	; 32
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2c6e:	3a 94       	dec	r3
    2c70:	f4 cf       	rjmp	.-24     	; 0x2c5a <vfprintf+0x174>
    2c72:	f5 01       	movw	r30, r10
    2c74:	27 fc       	sbrc	r2, 7
    2c76:	85 91       	lpm	r24, Z+
    2c78:	27 fe       	sbrs	r2, 7
    2c7a:	81 91       	ld	r24, Z+
    2c7c:	5f 01       	movw	r10, r30
    2c7e:	b7 01       	movw	r22, r14
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2c86:	31 10       	cpse	r3, r1
    2c88:	3a 94       	dec	r3
    2c8a:	f1 e0       	ldi	r31, 0x01	; 1
    2c8c:	4f 1a       	sub	r4, r31
    2c8e:	51 08       	sbc	r5, r1
    2c90:	41 14       	cp	r4, r1
    2c92:	51 04       	cpc	r5, r1
    2c94:	71 f7       	brne	.-36     	; 0x2c72 <vfprintf+0x18c>
    2c96:	e5 c0       	rjmp	.+458    	; 0x2e62 <vfprintf+0x37c>
    2c98:	84 36       	cpi	r24, 0x64	; 100
    2c9a:	11 f0       	breq	.+4      	; 0x2ca0 <vfprintf+0x1ba>
    2c9c:	89 36       	cpi	r24, 0x69	; 105
    2c9e:	39 f5       	brne	.+78     	; 0x2cee <vfprintf+0x208>
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	27 ff       	sbrs	r18, 7
    2ca4:	07 c0       	rjmp	.+14     	; 0x2cb4 <vfprintf+0x1ce>
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	0c 5f       	subi	r16, 0xFC	; 252
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	08 c0       	rjmp	.+16     	; 0x2cc4 <vfprintf+0x1de>
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	88 27       	eor	r24, r24
    2cba:	77 fd       	sbrc	r23, 7
    2cbc:	80 95       	com	r24
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	0e 5f       	subi	r16, 0xFE	; 254
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	2f 76       	andi	r18, 0x6F	; 111
    2cc6:	b2 2e       	mov	r11, r18
    2cc8:	97 ff       	sbrs	r25, 7
    2cca:	09 c0       	rjmp	.+18     	; 0x2cde <vfprintf+0x1f8>
    2ccc:	90 95       	com	r25
    2cce:	80 95       	com	r24
    2cd0:	70 95       	com	r23
    2cd2:	61 95       	neg	r22
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	20 68       	ori	r18, 0x80	; 128
    2cdc:	b2 2e       	mov	r11, r18
    2cde:	2a e0       	ldi	r18, 0x0A	; 10
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	a4 01       	movw	r20, r8
    2ce4:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__ultoa_invert>
    2ce8:	a8 2e       	mov	r10, r24
    2cea:	a8 18       	sub	r10, r8
    2cec:	44 c0       	rjmp	.+136    	; 0x2d76 <vfprintf+0x290>
    2cee:	85 37       	cpi	r24, 0x75	; 117
    2cf0:	29 f4       	brne	.+10     	; 0x2cfc <vfprintf+0x216>
    2cf2:	2f 7e       	andi	r18, 0xEF	; 239
    2cf4:	b2 2e       	mov	r11, r18
    2cf6:	2a e0       	ldi	r18, 0x0A	; 10
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	25 c0       	rjmp	.+74     	; 0x2d46 <vfprintf+0x260>
    2cfc:	f2 2f       	mov	r31, r18
    2cfe:	f9 7f       	andi	r31, 0xF9	; 249
    2d00:	bf 2e       	mov	r11, r31
    2d02:	8f 36       	cpi	r24, 0x6F	; 111
    2d04:	c1 f0       	breq	.+48     	; 0x2d36 <vfprintf+0x250>
    2d06:	18 f4       	brcc	.+6      	; 0x2d0e <vfprintf+0x228>
    2d08:	88 35       	cpi	r24, 0x58	; 88
    2d0a:	79 f0       	breq	.+30     	; 0x2d2a <vfprintf+0x244>
    2d0c:	b4 c0       	rjmp	.+360    	; 0x2e76 <vfprintf+0x390>
    2d0e:	80 37       	cpi	r24, 0x70	; 112
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <vfprintf+0x232>
    2d12:	88 37       	cpi	r24, 0x78	; 120
    2d14:	21 f0       	breq	.+8      	; 0x2d1e <vfprintf+0x238>
    2d16:	af c0       	rjmp	.+350    	; 0x2e76 <vfprintf+0x390>
    2d18:	2f 2f       	mov	r18, r31
    2d1a:	20 61       	ori	r18, 0x10	; 16
    2d1c:	b2 2e       	mov	r11, r18
    2d1e:	b4 fe       	sbrs	r11, 4
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <vfprintf+0x256>
    2d22:	8b 2d       	mov	r24, r11
    2d24:	84 60       	ori	r24, 0x04	; 4
    2d26:	b8 2e       	mov	r11, r24
    2d28:	09 c0       	rjmp	.+18     	; 0x2d3c <vfprintf+0x256>
    2d2a:	24 ff       	sbrs	r18, 4
    2d2c:	0a c0       	rjmp	.+20     	; 0x2d42 <vfprintf+0x25c>
    2d2e:	9f 2f       	mov	r25, r31
    2d30:	96 60       	ori	r25, 0x06	; 6
    2d32:	b9 2e       	mov	r11, r25
    2d34:	06 c0       	rjmp	.+12     	; 0x2d42 <vfprintf+0x25c>
    2d36:	28 e0       	ldi	r18, 0x08	; 8
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	05 c0       	rjmp	.+10     	; 0x2d46 <vfprintf+0x260>
    2d3c:	20 e1       	ldi	r18, 0x10	; 16
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <vfprintf+0x260>
    2d42:	20 e1       	ldi	r18, 0x10	; 16
    2d44:	32 e0       	ldi	r19, 0x02	; 2
    2d46:	f8 01       	movw	r30, r16
    2d48:	b7 fe       	sbrs	r11, 7
    2d4a:	07 c0       	rjmp	.+14     	; 0x2d5a <vfprintf+0x274>
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	0c 5f       	subi	r16, 0xFC	; 252
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	06 c0       	rjmp	.+12     	; 0x2d66 <vfprintf+0x280>
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 5f       	subi	r16, 0xFE	; 254
    2d64:	1f 4f       	sbci	r17, 0xFF	; 255
    2d66:	a4 01       	movw	r20, r8
    2d68:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__ultoa_invert>
    2d6c:	a8 2e       	mov	r10, r24
    2d6e:	a8 18       	sub	r10, r8
    2d70:	fb 2d       	mov	r31, r11
    2d72:	ff 77       	andi	r31, 0x7F	; 127
    2d74:	bf 2e       	mov	r11, r31
    2d76:	b6 fe       	sbrs	r11, 6
    2d78:	0b c0       	rjmp	.+22     	; 0x2d90 <vfprintf+0x2aa>
    2d7a:	2b 2d       	mov	r18, r11
    2d7c:	2e 7f       	andi	r18, 0xFE	; 254
    2d7e:	a5 14       	cp	r10, r5
    2d80:	50 f4       	brcc	.+20     	; 0x2d96 <vfprintf+0x2b0>
    2d82:	b4 fe       	sbrs	r11, 4
    2d84:	0a c0       	rjmp	.+20     	; 0x2d9a <vfprintf+0x2b4>
    2d86:	b2 fc       	sbrc	r11, 2
    2d88:	08 c0       	rjmp	.+16     	; 0x2d9a <vfprintf+0x2b4>
    2d8a:	2b 2d       	mov	r18, r11
    2d8c:	2e 7e       	andi	r18, 0xEE	; 238
    2d8e:	05 c0       	rjmp	.+10     	; 0x2d9a <vfprintf+0x2b4>
    2d90:	7a 2c       	mov	r7, r10
    2d92:	2b 2d       	mov	r18, r11
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <vfprintf+0x2b6>
    2d96:	7a 2c       	mov	r7, r10
    2d98:	01 c0       	rjmp	.+2      	; 0x2d9c <vfprintf+0x2b6>
    2d9a:	75 2c       	mov	r7, r5
    2d9c:	24 ff       	sbrs	r18, 4
    2d9e:	0d c0       	rjmp	.+26     	; 0x2dba <vfprintf+0x2d4>
    2da0:	fe 01       	movw	r30, r28
    2da2:	ea 0d       	add	r30, r10
    2da4:	f1 1d       	adc	r31, r1
    2da6:	80 81       	ld	r24, Z
    2da8:	80 33       	cpi	r24, 0x30	; 48
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <vfprintf+0x2ca>
    2dac:	29 7e       	andi	r18, 0xE9	; 233
    2dae:	09 c0       	rjmp	.+18     	; 0x2dc2 <vfprintf+0x2dc>
    2db0:	22 ff       	sbrs	r18, 2
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <vfprintf+0x2da>
    2db4:	73 94       	inc	r7
    2db6:	73 94       	inc	r7
    2db8:	04 c0       	rjmp	.+8      	; 0x2dc2 <vfprintf+0x2dc>
    2dba:	82 2f       	mov	r24, r18
    2dbc:	86 78       	andi	r24, 0x86	; 134
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <vfprintf+0x2dc>
    2dc0:	73 94       	inc	r7
    2dc2:	23 fd       	sbrc	r18, 3
    2dc4:	13 c0       	rjmp	.+38     	; 0x2dec <vfprintf+0x306>
    2dc6:	20 ff       	sbrs	r18, 0
    2dc8:	06 c0       	rjmp	.+12     	; 0x2dd6 <vfprintf+0x2f0>
    2dca:	5a 2c       	mov	r5, r10
    2dcc:	73 14       	cp	r7, r3
    2dce:	18 f4       	brcc	.+6      	; 0x2dd6 <vfprintf+0x2f0>
    2dd0:	53 0c       	add	r5, r3
    2dd2:	57 18       	sub	r5, r7
    2dd4:	73 2c       	mov	r7, r3
    2dd6:	73 14       	cp	r7, r3
    2dd8:	68 f4       	brcc	.+26     	; 0x2df4 <vfprintf+0x30e>
    2dda:	b7 01       	movw	r22, r14
    2ddc:	80 e2       	ldi	r24, 0x20	; 32
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	2c 87       	std	Y+12, r18	; 0x0c
    2de2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2de6:	73 94       	inc	r7
    2de8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dea:	f5 cf       	rjmp	.-22     	; 0x2dd6 <vfprintf+0x2f0>
    2dec:	73 14       	cp	r7, r3
    2dee:	10 f4       	brcc	.+4      	; 0x2df4 <vfprintf+0x30e>
    2df0:	37 18       	sub	r3, r7
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <vfprintf+0x310>
    2df4:	31 2c       	mov	r3, r1
    2df6:	24 ff       	sbrs	r18, 4
    2df8:	12 c0       	rjmp	.+36     	; 0x2e1e <vfprintf+0x338>
    2dfa:	b7 01       	movw	r22, r14
    2dfc:	80 e3       	ldi	r24, 0x30	; 48
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	2c 87       	std	Y+12, r18	; 0x0c
    2e02:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2e06:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e08:	22 ff       	sbrs	r18, 2
    2e0a:	17 c0       	rjmp	.+46     	; 0x2e3a <vfprintf+0x354>
    2e0c:	21 ff       	sbrs	r18, 1
    2e0e:	03 c0       	rjmp	.+6      	; 0x2e16 <vfprintf+0x330>
    2e10:	88 e5       	ldi	r24, 0x58	; 88
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <vfprintf+0x334>
    2e16:	88 e7       	ldi	r24, 0x78	; 120
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	b7 01       	movw	r22, r14
    2e1c:	0c c0       	rjmp	.+24     	; 0x2e36 <vfprintf+0x350>
    2e1e:	82 2f       	mov	r24, r18
    2e20:	86 78       	andi	r24, 0x86	; 134
    2e22:	59 f0       	breq	.+22     	; 0x2e3a <vfprintf+0x354>
    2e24:	21 fd       	sbrc	r18, 1
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <vfprintf+0x346>
    2e28:	80 e2       	ldi	r24, 0x20	; 32
    2e2a:	01 c0       	rjmp	.+2      	; 0x2e2e <vfprintf+0x348>
    2e2c:	8b e2       	ldi	r24, 0x2B	; 43
    2e2e:	27 fd       	sbrc	r18, 7
    2e30:	8d e2       	ldi	r24, 0x2D	; 45
    2e32:	b7 01       	movw	r22, r14
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2e3a:	a5 14       	cp	r10, r5
    2e3c:	38 f4       	brcc	.+14     	; 0x2e4c <vfprintf+0x366>
    2e3e:	b7 01       	movw	r22, r14
    2e40:	80 e3       	ldi	r24, 0x30	; 48
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2e48:	5a 94       	dec	r5
    2e4a:	f7 cf       	rjmp	.-18     	; 0x2e3a <vfprintf+0x354>
    2e4c:	aa 94       	dec	r10
    2e4e:	f4 01       	movw	r30, r8
    2e50:	ea 0d       	add	r30, r10
    2e52:	f1 1d       	adc	r31, r1
    2e54:	80 81       	ld	r24, Z
    2e56:	b7 01       	movw	r22, r14
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2e5e:	a1 10       	cpse	r10, r1
    2e60:	f5 cf       	rjmp	.-22     	; 0x2e4c <vfprintf+0x366>
    2e62:	33 20       	and	r3, r3
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <vfprintf+0x382>
    2e66:	51 ce       	rjmp	.-862    	; 0x2b0a <vfprintf+0x24>
    2e68:	b7 01       	movw	r22, r14
    2e6a:	80 e2       	ldi	r24, 0x20	; 32
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fputc>
    2e72:	3a 94       	dec	r3
    2e74:	f6 cf       	rjmp	.-20     	; 0x2e62 <vfprintf+0x37c>
    2e76:	f7 01       	movw	r30, r14
    2e78:	86 81       	ldd	r24, Z+6	; 0x06
    2e7a:	97 81       	ldd	r25, Z+7	; 0x07
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <vfprintf+0x39c>
    2e7e:	8f ef       	ldi	r24, 0xFF	; 255
    2e80:	9f ef       	ldi	r25, 0xFF	; 255
    2e82:	2c 96       	adiw	r28, 0x0c	; 12
    2e84:	e2 e1       	ldi	r30, 0x12	; 18
    2e86:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__epilogue_restores__>

00002e8a <calloc>:
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	86 9f       	mul	r24, r22
    2e94:	80 01       	movw	r16, r0
    2e96:	87 9f       	mul	r24, r23
    2e98:	10 0d       	add	r17, r0
    2e9a:	96 9f       	mul	r25, r22
    2e9c:	10 0d       	add	r17, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	c8 01       	movw	r24, r16
    2ea2:	0e 94 cb 12 	call	0x2596	; 0x2596 <malloc>
    2ea6:	ec 01       	movw	r28, r24
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	29 f0       	breq	.+10     	; 0x2eb6 <calloc+0x2c>
    2eac:	a8 01       	movw	r20, r16
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <memset>
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	08 95       	ret

00002ec2 <strnlen_P>:
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	05 90       	lpm	r0, Z+
    2ec6:	61 50       	subi	r22, 0x01	; 1
    2ec8:	70 40       	sbci	r23, 0x00	; 0
    2eca:	01 10       	cpse	r0, r1
    2ecc:	d8 f7       	brcc	.-10     	; 0x2ec4 <strnlen_P+0x2>
    2ece:	80 95       	com	r24
    2ed0:	90 95       	com	r25
    2ed2:	8e 0f       	add	r24, r30
    2ed4:	9f 1f       	adc	r25, r31
    2ed6:	08 95       	ret

00002ed8 <memset>:
    2ed8:	dc 01       	movw	r26, r24
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <memset+0x6>
    2edc:	6d 93       	st	X+, r22
    2ede:	41 50       	subi	r20, 0x01	; 1
    2ee0:	50 40       	sbci	r21, 0x00	; 0
    2ee2:	e0 f7       	brcc	.-8      	; 0x2edc <memset+0x4>
    2ee4:	08 95       	ret

00002ee6 <strnlen>:
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	61 50       	subi	r22, 0x01	; 1
    2eea:	70 40       	sbci	r23, 0x00	; 0
    2eec:	01 90       	ld	r0, Z+
    2eee:	01 10       	cpse	r0, r1
    2ef0:	d8 f7       	brcc	.-10     	; 0x2ee8 <strnlen+0x2>
    2ef2:	80 95       	com	r24
    2ef4:	90 95       	com	r25
    2ef6:	8e 0f       	add	r24, r30
    2ef8:	9f 1f       	adc	r25, r31
    2efa:	08 95       	ret

00002efc <fputc>:
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	18 2f       	mov	r17, r24
    2f06:	09 2f       	mov	r16, r25
    2f08:	eb 01       	movw	r28, r22
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	81 fd       	sbrc	r24, 1
    2f0e:	03 c0       	rjmp	.+6      	; 0x2f16 <fputc+0x1a>
    2f10:	8f ef       	ldi	r24, 0xFF	; 255
    2f12:	9f ef       	ldi	r25, 0xFF	; 255
    2f14:	20 c0       	rjmp	.+64     	; 0x2f56 <fputc+0x5a>
    2f16:	82 ff       	sbrs	r24, 2
    2f18:	10 c0       	rjmp	.+32     	; 0x2f3a <fputc+0x3e>
    2f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f1c:	5f 81       	ldd	r21, Y+7	; 0x07
    2f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f20:	3d 81       	ldd	r19, Y+5	; 0x05
    2f22:	42 17       	cp	r20, r18
    2f24:	53 07       	cpc	r21, r19
    2f26:	7c f4       	brge	.+30     	; 0x2f46 <fputc+0x4a>
    2f28:	e8 81       	ld	r30, Y
    2f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f2c:	9f 01       	movw	r18, r30
    2f2e:	2f 5f       	subi	r18, 0xFF	; 255
    2f30:	3f 4f       	sbci	r19, 0xFF	; 255
    2f32:	39 83       	std	Y+1, r19	; 0x01
    2f34:	28 83       	st	Y, r18
    2f36:	10 83       	st	Z, r17
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <fputc+0x4a>
    2f3a:	e8 85       	ldd	r30, Y+8	; 0x08
    2f3c:	f9 85       	ldd	r31, Y+9	; 0x09
    2f3e:	81 2f       	mov	r24, r17
    2f40:	09 95       	icall
    2f42:	89 2b       	or	r24, r25
    2f44:	29 f7       	brne	.-54     	; 0x2f10 <fputc+0x14>
    2f46:	2e 81       	ldd	r18, Y+6	; 0x06
    2f48:	3f 81       	ldd	r19, Y+7	; 0x07
    2f4a:	2f 5f       	subi	r18, 0xFF	; 255
    2f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4e:	3f 83       	std	Y+7, r19	; 0x07
    2f50:	2e 83       	std	Y+6, r18	; 0x06
    2f52:	81 2f       	mov	r24, r17
    2f54:	90 2f       	mov	r25, r16
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	08 95       	ret

00002f60 <__ultoa_invert>:
    2f60:	fa 01       	movw	r30, r20
    2f62:	aa 27       	eor	r26, r26
    2f64:	28 30       	cpi	r18, 0x08	; 8
    2f66:	51 f1       	breq	.+84     	; 0x2fbc <__ultoa_invert+0x5c>
    2f68:	20 31       	cpi	r18, 0x10	; 16
    2f6a:	81 f1       	breq	.+96     	; 0x2fcc <__ultoa_invert+0x6c>
    2f6c:	e8 94       	clt
    2f6e:	6f 93       	push	r22
    2f70:	6e 7f       	andi	r22, 0xFE	; 254
    2f72:	6e 5f       	subi	r22, 0xFE	; 254
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255
    2f76:	8f 4f       	sbci	r24, 0xFF	; 255
    2f78:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7a:	af 4f       	sbci	r26, 0xFF	; 255
    2f7c:	b1 e0       	ldi	r27, 0x01	; 1
    2f7e:	3e d0       	rcall	.+124    	; 0x2ffc <__ultoa_invert+0x9c>
    2f80:	b4 e0       	ldi	r27, 0x04	; 4
    2f82:	3c d0       	rcall	.+120    	; 0x2ffc <__ultoa_invert+0x9c>
    2f84:	67 0f       	add	r22, r23
    2f86:	78 1f       	adc	r23, r24
    2f88:	89 1f       	adc	r24, r25
    2f8a:	9a 1f       	adc	r25, r26
    2f8c:	a1 1d       	adc	r26, r1
    2f8e:	68 0f       	add	r22, r24
    2f90:	79 1f       	adc	r23, r25
    2f92:	8a 1f       	adc	r24, r26
    2f94:	91 1d       	adc	r25, r1
    2f96:	a1 1d       	adc	r26, r1
    2f98:	6a 0f       	add	r22, r26
    2f9a:	71 1d       	adc	r23, r1
    2f9c:	81 1d       	adc	r24, r1
    2f9e:	91 1d       	adc	r25, r1
    2fa0:	a1 1d       	adc	r26, r1
    2fa2:	20 d0       	rcall	.+64     	; 0x2fe4 <__ultoa_invert+0x84>
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <__ultoa_invert+0x48>
    2fa6:	68 94       	set
    2fa8:	3f 91       	pop	r19
    2faa:	2a e0       	ldi	r18, 0x0A	; 10
    2fac:	26 9f       	mul	r18, r22
    2fae:	11 24       	eor	r1, r1
    2fb0:	30 19       	sub	r19, r0
    2fb2:	30 5d       	subi	r19, 0xD0	; 208
    2fb4:	31 93       	st	Z+, r19
    2fb6:	de f6       	brtc	.-74     	; 0x2f6e <__ultoa_invert+0xe>
    2fb8:	cf 01       	movw	r24, r30
    2fba:	08 95       	ret
    2fbc:	46 2f       	mov	r20, r22
    2fbe:	47 70       	andi	r20, 0x07	; 7
    2fc0:	40 5d       	subi	r20, 0xD0	; 208
    2fc2:	41 93       	st	Z+, r20
    2fc4:	b3 e0       	ldi	r27, 0x03	; 3
    2fc6:	0f d0       	rcall	.+30     	; 0x2fe6 <__ultoa_invert+0x86>
    2fc8:	c9 f7       	brne	.-14     	; 0x2fbc <__ultoa_invert+0x5c>
    2fca:	f6 cf       	rjmp	.-20     	; 0x2fb8 <__ultoa_invert+0x58>
    2fcc:	46 2f       	mov	r20, r22
    2fce:	4f 70       	andi	r20, 0x0F	; 15
    2fd0:	40 5d       	subi	r20, 0xD0	; 208
    2fd2:	4a 33       	cpi	r20, 0x3A	; 58
    2fd4:	18 f0       	brcs	.+6      	; 0x2fdc <__ultoa_invert+0x7c>
    2fd6:	49 5d       	subi	r20, 0xD9	; 217
    2fd8:	31 fd       	sbrc	r19, 1
    2fda:	40 52       	subi	r20, 0x20	; 32
    2fdc:	41 93       	st	Z+, r20
    2fde:	02 d0       	rcall	.+4      	; 0x2fe4 <__ultoa_invert+0x84>
    2fe0:	a9 f7       	brne	.-22     	; 0x2fcc <__ultoa_invert+0x6c>
    2fe2:	ea cf       	rjmp	.-44     	; 0x2fb8 <__ultoa_invert+0x58>
    2fe4:	b4 e0       	ldi	r27, 0x04	; 4
    2fe6:	a6 95       	lsr	r26
    2fe8:	97 95       	ror	r25
    2fea:	87 95       	ror	r24
    2fec:	77 95       	ror	r23
    2fee:	67 95       	ror	r22
    2ff0:	ba 95       	dec	r27
    2ff2:	c9 f7       	brne	.-14     	; 0x2fe6 <__ultoa_invert+0x86>
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	61 05       	cpc	r22, r1
    2ff8:	71 05       	cpc	r23, r1
    2ffa:	08 95       	ret
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	0a 2e       	mov	r0, r26
    3002:	06 94       	lsr	r0
    3004:	57 95       	ror	r21
    3006:	47 95       	ror	r20
    3008:	37 95       	ror	r19
    300a:	27 95       	ror	r18
    300c:	ba 95       	dec	r27
    300e:	c9 f7       	brne	.-14     	; 0x3002 <__ultoa_invert+0xa2>
    3010:	62 0f       	add	r22, r18
    3012:	73 1f       	adc	r23, r19
    3014:	84 1f       	adc	r24, r20
    3016:	95 1f       	adc	r25, r21
    3018:	a0 1d       	adc	r26, r0
    301a:	08 95       	ret

0000301c <__prologue_saves__>:
    301c:	2f 92       	push	r2
    301e:	3f 92       	push	r3
    3020:	4f 92       	push	r4
    3022:	5f 92       	push	r5
    3024:	6f 92       	push	r6
    3026:	7f 92       	push	r7
    3028:	8f 92       	push	r8
    302a:	9f 92       	push	r9
    302c:	af 92       	push	r10
    302e:	bf 92       	push	r11
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	ca 1b       	sub	r28, r26
    3046:	db 0b       	sbc	r29, r27
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	09 94       	ijmp

00003054 <__epilogue_restores__>:
    3054:	2a 88       	ldd	r2, Y+18	; 0x12
    3056:	39 88       	ldd	r3, Y+17	; 0x11
    3058:	48 88       	ldd	r4, Y+16	; 0x10
    305a:	5f 84       	ldd	r5, Y+15	; 0x0f
    305c:	6e 84       	ldd	r6, Y+14	; 0x0e
    305e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3060:	8c 84       	ldd	r8, Y+12	; 0x0c
    3062:	9b 84       	ldd	r9, Y+11	; 0x0b
    3064:	aa 84       	ldd	r10, Y+10	; 0x0a
    3066:	b9 84       	ldd	r11, Y+9	; 0x09
    3068:	c8 84       	ldd	r12, Y+8	; 0x08
    306a:	df 80       	ldd	r13, Y+7	; 0x07
    306c:	ee 80       	ldd	r14, Y+6	; 0x06
    306e:	fd 80       	ldd	r15, Y+5	; 0x05
    3070:	0c 81       	ldd	r16, Y+4	; 0x04
    3072:	1b 81       	ldd	r17, Y+3	; 0x03
    3074:	aa 81       	ldd	r26, Y+2	; 0x02
    3076:	b9 81       	ldd	r27, Y+1	; 0x01
    3078:	ce 0f       	add	r28, r30
    307a:	d1 1d       	adc	r29, r1
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	ed 01       	movw	r28, r26
    3088:	08 95       	ret

0000308a <_exit>:
    308a:	f8 94       	cli

0000308c <__stop_program>:
    308c:	ff cf       	rjmp	.-2      	; 0x308c <__stop_program>
