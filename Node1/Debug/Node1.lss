
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00002d9c  00002e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  008002a4  008002a4  00002fd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000348  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003506  00000000  00000000  00003378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001358  00000000  00000000  0000687e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011ea  00000000  00000000  00007bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000930  00000000  00000000  00008dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a1d  00000000  00000000  000096f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002696  00000000  00000000  0000a10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_1>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_7>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__vector_10>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	ec e9       	ldi	r30, 0x9C	; 156
     702:	fd e2       	ldi	r31, 0x2D	; 45
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a4 3a       	cpi	r26, 0xA4	; 164
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a4 ea       	ldi	r26, 0xA4	; 164
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a1 3d       	cpi	r26, 0xD1	; 209
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 b7 0a 	call	0x156e	; 0x156e <main>
     724:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
	adcConversionRunning = 0;
}*/

#ifdef NODE_1
	void adc_init(){
		clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
	}
	uint8_t adc_read(char channel){
		volatile char *ext_adc = (char *) 0x1400; 
		if (channel == 'x'){
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
			*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'y'){
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
			*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'l'){
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
			*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'r'){
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
			*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
		}
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
		return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
}
     766:	08 95       	ret

00000768 <can_init>:
#include "can.h"
#include "settings.h"
#include "interrupts.h"
volatile int can_message_received = 0;

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	mcp_init();
     76c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <mcp_init>
	
	mcp_bit_modify(0x2B,0b00000011, 0b00000011); //enable receive msg interrupt
     770:	43 e0       	ldi	r20, 0x03	; 3
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	8b e2       	ldi	r24, 0x2B	; 43
     776:	0e 94 c8 06 	call	0xd90	; 0xd90 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     77a:	40 e6       	ldi	r20, 0x60	; 96
     77c:	60 e6       	ldi	r22, 0x60	; 96
     77e:	80 e6       	ldi	r24, 0x60	; 96
     780:	0e 94 c8 06 	call	0xd90	; 0xd90 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     784:	4c 2f       	mov	r20, r28
     786:	6f ef       	ldi	r22, 0xFF	; 255
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	0e 94 c8 06 	call	0xd90	; 0xd90 <mcp_bit_modify>
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
	
	#ifdef NODE_1
	//External interrupt
	MCUCR |= (1 << ISC01);
     78e:	85 b7       	in	r24, 0x35	; 53
     790:	82 60       	ori	r24, 0x02	; 2
     792:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     794:	8b b7       	in	r24, 0x3b	; 59
     796:	80 64       	ori	r24, 0x40	; 64
     798:	8b bf       	out	0x3b, r24	; 59
	#endif
}
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <can_transmit>:

void can_transmit(Msg msg){
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <can_transmit+0xe>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <can_transmit+0x10>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <can_transmit+0x12>
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	49 83       	std	Y+1, r20	; 0x01
     7b6:	5a 83       	std	Y+2, r21	; 0x02
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	7c 83       	std	Y+4, r23	; 0x04
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	09 81       	ldd	r16, Y+1	; 0x01
     7c2:	1a 81       	ldd	r17, Y+2	; 0x02
     7c4:	eb 80       	ldd	r14, Y+3	; 0x03
     7c6:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3, buffer = n - 1
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7c8:	b8 01       	movw	r22, r16
     7ca:	75 95       	asr	r23
     7cc:	67 95       	ror	r22
     7ce:	75 95       	asr	r23
     7d0:	67 95       	ror	r22
     7d2:	75 95       	asr	r23
     7d4:	67 95       	ror	r22
     7d6:	81 e5       	ldi	r24, 0x51	; 81
     7d8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7dc:	60 2f       	mov	r22, r16
     7de:	62 95       	swap	r22
     7e0:	66 0f       	add	r22, r22
     7e2:	60 7e       	andi	r22, 0xE0	; 224
     7e4:	82 e5       	ldi	r24, 0x52	; 82
     7e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7ea:	6e 2d       	mov	r22, r14
     7ec:	85 e5       	ldi	r24, 0x55	; 85
     7ee:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7f2:	1e 14       	cp	r1, r14
     7f4:	1f 04       	cpc	r1, r15
     7f6:	84 f4       	brge	.+32     	; 0x818 <can_transmit+0x7a>
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     7fc:	ed 81       	ldd	r30, Y+5	; 0x05
     7fe:	fe 81       	ldd	r31, Y+6	; 0x06
     800:	e0 0f       	add	r30, r16
     802:	f1 1f       	adc	r31, r17
     804:	60 81       	ld	r22, Z
     806:	86 e5       	ldi	r24, 0x56	; 86
     808:	80 0f       	add	r24, r16
     80a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	0e 15       	cp	r16, r14
     814:	1f 05       	cpc	r17, r15
     816:	91 f7       	brne	.-28     	; 0x7fc <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 b8 06 	call	0xd70	; 0xd70 <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     828:	26 96       	adiw	r28, 0x06	; 6
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	08 95       	ret

00000842 <can_receive>:

Msg can_receive(){
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	00 d0       	rcall	.+0      	; 0x85c <can_receive+0x1a>
     85c:	00 d0       	rcall	.+0      	; 0x85e <can_receive+0x1c>
     85e:	00 d0       	rcall	.+0      	; 0x860 <can_receive+0x1e>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2, buffer = n - 1
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	0e 94 97 06 	call	0xd2e	; 0xd2e <mcp_read>
     86a:	a8 2e       	mov	r10, r24
     86c:	82 e6       	ldi	r24, 0x62	; 98
     86e:	0e 94 97 06 	call	0xd2e	; 0xd2e <mcp_read>
     872:	82 95       	swap	r24
     874:	86 95       	lsr	r24
     876:	87 70       	andi	r24, 0x07	; 7
     878:	b1 2c       	mov	r11, r1
     87a:	aa 0c       	add	r10, r10
     87c:	bb 1c       	adc	r11, r11
     87e:	aa 0c       	add	r10, r10
     880:	bb 1c       	adc	r11, r11
     882:	aa 0c       	add	r10, r10
     884:	bb 1c       	adc	r11, r11
     886:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     888:	85 e6       	ldi	r24, 0x65	; 101
     88a:	0e 94 97 06 	call	0xd2e	; 0xd2e <mcp_read>
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	c8 2e       	mov	r12, r24
     892:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     894:	c6 01       	movw	r24, r12
     896:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
     89a:	98 2e       	mov	r9, r24
     89c:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     89e:	1c 14       	cp	r1, r12
     8a0:	1d 04       	cpc	r1, r13
     8a2:	84 f4       	brge	.+32     	; 0x8c4 <can_receive+0x82>
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f9 2e       	mov	r15, r25
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     8ac:	86 e6       	ldi	r24, 0x66	; 102
     8ae:	80 0f       	add	r24, r16
     8b0:	0e 94 97 06 	call	0xd2e	; 0xd2e <mcp_read>
     8b4:	f7 01       	movw	r30, r14
     8b6:	81 93       	st	Z+, r24
     8b8:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     8ba:	0f 5f       	subi	r16, 0xFF	; 255
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	0c 15       	cp	r16, r12
     8c0:	1d 05       	cpc	r17, r13
     8c2:	a4 f3       	brlt	.-24     	; 0x8ac <can_receive+0x6a>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RXnIF to 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	8c e2       	ldi	r24, 0x2C	; 44
     8ca:	0e 94 c8 06 	call	0xd90	; 0xd90 <mcp_bit_modify>
	return msg;
     8ce:	ba 82       	std	Y+2, r11	; 0x02
     8d0:	a9 82       	std	Y+1, r10	; 0x01
     8d2:	dc 82       	std	Y+4, r13	; 0x04
     8d4:	cb 82       	std	Y+3, r12	; 0x03
     8d6:	9d 82       	std	Y+5, r9	; 0x05
     8d8:	8e 82       	std	Y+6, r8	; 0x06
     8da:	2a 2d       	mov	r18, r10
     8dc:	3a 81       	ldd	r19, Y+2	; 0x02
     8de:	4c 2d       	mov	r20, r12
     8e0:	5c 81       	ldd	r21, Y+4	; 0x04
     8e2:	69 2d       	mov	r22, r9
     8e4:	78 2d       	mov	r23, r8
}
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	26 96       	adiw	r28, 0x06	; 6
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	af 90       	pop	r10
     90a:	9f 90       	pop	r9
     90c:	8f 90       	pop	r8
     90e:	08 95       	ret

00000910 <__vector_1>:
Msg can_construct_msg(int id, int length, char* data){
	Msg msg = {id,length,data};
	return msg;
} 

ISR(INT0_vect){
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
	can_message_received = 1;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 a5 02 	sts	0x02A5, r25
     926:	80 93 a4 02 	sts	0x02A4, r24
	//printf("ISR: %d\r\n", can_message_received);
}
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <joy_calibrate>:
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
	joy_calibrate();
}

void joy_calibrate(){
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
	xmean = adc_read('x');
     93e:	88 e7       	ldi	r24, 0x78	; 120
     940:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 0d 01 	sts	0x010D, r25
     94a:	80 93 0c 01 	sts	0x010C, r24
	ymean = adc_read('y');
     94e:	89 e7       	ldi	r24, 0x79	; 121
     950:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 09 01 	sts	0x0109, r25
     95a:	80 93 08 01 	sts	0x0108, r24
	xmax = 0;
     95e:	10 92 0b 01 	sts	0x010B, r1
     962:	10 92 0a 01 	sts	0x010A, r1
	xmin = 255;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 a9 02 	sts	0x02A9, r25
     96e:	80 93 a8 02 	sts	0x02A8, r24
	ymax = 0;
     972:	10 92 07 01 	sts	0x0107, r1
     976:	10 92 06 01 	sts	0x0106, r1
	ymin = 255;
     97a:	90 93 a7 02 	sts	0x02A7, r25
     97e:	80 93 a6 02 	sts	0x02A6, r24
	
	oled_print_string("Please calibrate joystick!",0,0,8,0);
     982:	00 e0       	ldi	r16, 0x00	; 0
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	28 e0       	ldi	r18, 0x08	; 8
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	83 eb       	ldi	r24, 0xB3	; 179
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
	oled_refresh();
     99a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <oled_refresh>
	
	while (z == 0){
		x = adc_read('x');
		y = adc_read('y');
		z = !test_bit(PINB, PB2);
     99e:	c1 e0       	ldi	r28, 0x01	; 1
	ymin = 255;
	
	oled_print_string("Please calibrate joystick!",0,0,8,0);
	oled_refresh();
	
	while (z == 0){
     9a0:	49 c0       	rjmp	.+146    	; 0xa34 <joy_calibrate+0xfc>
		x = adc_read('x');
     9a2:	88 e7       	ldi	r24, 0x78	; 120
     9a4:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	90 93 c4 02 	sts	0x02C4, r25
     9ae:	80 93 c3 02 	sts	0x02C3, r24
		y = adc_read('y');
     9b2:	89 e7       	ldi	r24, 0x79	; 121
     9b4:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	90 93 c6 02 	sts	0x02C6, r25
     9be:	80 93 c5 02 	sts	0x02C5, r24
		z = !test_bit(PINB, PB2);
     9c2:	26 b3       	in	r18, 0x16	; 22
     9c4:	26 95       	lsr	r18
     9c6:	26 95       	lsr	r18
     9c8:	2c 27       	eor	r18, r28
     9ca:	21 70       	andi	r18, 0x01	; 1
     9cc:	20 93 aa 02 	sts	0x02AA, r18
     9d0:	10 92 ab 02 	sts	0x02AB, r1
		
		if (x > xmax){
     9d4:	20 91 c3 02 	lds	r18, 0x02C3
     9d8:	30 91 c4 02 	lds	r19, 0x02C4
     9dc:	40 91 0a 01 	lds	r20, 0x010A
     9e0:	50 91 0b 01 	lds	r21, 0x010B
     9e4:	42 17       	cp	r20, r18
     9e6:	53 07       	cpc	r21, r19
     9e8:	24 f4       	brge	.+8      	; 0x9f2 <joy_calibrate+0xba>
			xmax = x;
     9ea:	30 93 0b 01 	sts	0x010B, r19
     9ee:	20 93 0a 01 	sts	0x010A, r18
		}
		if (y > ymax){
     9f2:	40 91 06 01 	lds	r20, 0x0106
     9f6:	50 91 07 01 	lds	r21, 0x0107
     9fa:	48 17       	cp	r20, r24
     9fc:	59 07       	cpc	r21, r25
     9fe:	24 f4       	brge	.+8      	; 0xa08 <joy_calibrate+0xd0>
			ymax = y;
     a00:	90 93 07 01 	sts	0x0107, r25
     a04:	80 93 06 01 	sts	0x0106, r24
		}
		if (x < xmin){
     a08:	40 91 a8 02 	lds	r20, 0x02A8
     a0c:	50 91 a9 02 	lds	r21, 0x02A9
     a10:	24 17       	cp	r18, r20
     a12:	35 07       	cpc	r19, r21
     a14:	24 f4       	brge	.+8      	; 0xa1e <joy_calibrate+0xe6>
			xmin = x;
     a16:	30 93 a9 02 	sts	0x02A9, r19
     a1a:	20 93 a8 02 	sts	0x02A8, r18
		}
		if (y < ymin){
     a1e:	20 91 a6 02 	lds	r18, 0x02A6
     a22:	30 91 a7 02 	lds	r19, 0x02A7
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	24 f4       	brge	.+8      	; 0xa34 <joy_calibrate+0xfc>
			ymin = y;
     a2c:	90 93 a7 02 	sts	0x02A7, r25
     a30:	80 93 a6 02 	sts	0x02A6, r24
	ymin = 255;
	
	oled_print_string("Please calibrate joystick!",0,0,8,0);
	oled_refresh();
	
	while (z == 0){
     a34:	80 91 aa 02 	lds	r24, 0x02AA
     a38:	90 91 ab 02 	lds	r25, 0x02AB
     a3c:	89 2b       	or	r24, r25
     a3e:	09 f4       	brne	.+2      	; 0xa42 <joy_calibrate+0x10a>
     a40:	b0 cf       	rjmp	.-160    	; 0x9a2 <joy_calibrate+0x6a>
		}
		if (y < ymin){
			ymin = y;
		}
	}
	oled_clear_screen();
     a42:	0e 94 76 0c 	call	0x18ec	; 0x18ec <oled_clear_screen>
	oled_print_string("Calibrated!",0,0,8,0);
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	28 e0       	ldi	r18, 0x08	; 8
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	8e ec       	ldi	r24, 0xCE	; 206
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
	oled_refresh();
     a5e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <oled_refresh>
}
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     a6a:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     a6c:	c2 9a       	sbi	0x18, 2	; 24
	joy_calibrate();
     a6e:	0e 94 9c 04 	call	0x938	; 0x938 <joy_calibrate>
     a72:	08 95       	ret

00000a74 <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	28 97       	sbiw	r28, 0x08	; 8
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
		x = adc_read('x');
     a94:	88 e7       	ldi	r24, 0x78	; 120
     a96:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	90 93 c4 02 	sts	0x02C4, r25
     aa0:	80 93 c3 02 	sts	0x02C3, r24
		y = adc_read('y');
     aa4:	89 e7       	ldi	r24, 0x79	; 121
     aa6:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     aaa:	28 2f       	mov	r18, r24
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	30 93 c6 02 	sts	0x02C6, r19
     ab2:	20 93 c5 02 	sts	0x02C5, r18
		z = !test_bit(PINB, PB2);
     ab6:	16 b3       	in	r17, 0x16	; 22
     ab8:	16 95       	lsr	r17
     aba:	16 95       	lsr	r17
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	18 27       	eor	r17, r24
     ac0:	11 70       	andi	r17, 0x01	; 1
     ac2:	00 e0       	ldi	r16, 0x00	; 0
     ac4:	10 93 aa 02 	sts	0x02AA, r17
     ac8:	00 93 ab 02 	sts	0x02AB, r16
		
		if (x > xmean){
     acc:	80 91 c3 02 	lds	r24, 0x02C3
     ad0:	90 91 c4 02 	lds	r25, 0x02C4
     ad4:	40 91 0c 01 	lds	r20, 0x010C
     ad8:	50 91 0d 01 	lds	r21, 0x010D
     adc:	48 17       	cp	r20, r24
     ade:	59 07       	cpc	r21, r25
     ae0:	b4 f4       	brge	.+44     	; 0xb0e <joy_get_position+0x9a>
			x = ((x - xmean) * 100) / (xmax - xmean);
     ae2:	bc 01       	movw	r22, r24
     ae4:	64 1b       	sub	r22, r20
     ae6:	75 0b       	sbc	r23, r21
     ae8:	e4 e6       	ldi	r30, 0x64	; 100
     aea:	e6 9f       	mul	r30, r22
     aec:	c0 01       	movw	r24, r0
     aee:	e7 9f       	mul	r30, r23
     af0:	90 0d       	add	r25, r0
     af2:	11 24       	eor	r1, r1
     af4:	60 91 0a 01 	lds	r22, 0x010A
     af8:	70 91 0b 01 	lds	r23, 0x010B
     afc:	64 1b       	sub	r22, r20
     afe:	75 0b       	sbc	r23, r21
     b00:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     b04:	70 93 c4 02 	sts	0x02C4, r23
     b08:	60 93 c3 02 	sts	0x02C3, r22
     b0c:	17 c0       	rjmp	.+46     	; 0xb3c <joy_get_position+0xc8>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     b0e:	bc 01       	movw	r22, r24
     b10:	64 1b       	sub	r22, r20
     b12:	75 0b       	sbc	r23, r21
     b14:	e4 e6       	ldi	r30, 0x64	; 100
     b16:	e6 9f       	mul	r30, r22
     b18:	c0 01       	movw	r24, r0
     b1a:	e7 9f       	mul	r30, r23
     b1c:	90 0d       	add	r25, r0
     b1e:	11 24       	eor	r1, r1
     b20:	60 91 a8 02 	lds	r22, 0x02A8
     b24:	70 91 a9 02 	lds	r23, 0x02A9
     b28:	fa 01       	movw	r30, r20
     b2a:	e6 1b       	sub	r30, r22
     b2c:	f7 0b       	sbc	r31, r23
     b2e:	bf 01       	movw	r22, r30
     b30:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     b34:	70 93 c4 02 	sts	0x02C4, r23
     b38:	60 93 c3 02 	sts	0x02C3, r22
		}
		if (y > ymean){
     b3c:	40 91 08 01 	lds	r20, 0x0108
     b40:	50 91 09 01 	lds	r21, 0x0109
     b44:	42 17       	cp	r20, r18
     b46:	53 07       	cpc	r21, r19
     b48:	ac f4       	brge	.+42     	; 0xb74 <joy_get_position+0x100>
			y = ((y - ymean) * 100) / (ymax - ymean);
     b4a:	24 1b       	sub	r18, r20
     b4c:	35 0b       	sbc	r19, r21
     b4e:	64 e6       	ldi	r22, 0x64	; 100
     b50:	62 9f       	mul	r22, r18
     b52:	c0 01       	movw	r24, r0
     b54:	63 9f       	mul	r22, r19
     b56:	90 0d       	add	r25, r0
     b58:	11 24       	eor	r1, r1
     b5a:	60 91 06 01 	lds	r22, 0x0106
     b5e:	70 91 07 01 	lds	r23, 0x0107
     b62:	64 1b       	sub	r22, r20
     b64:	75 0b       	sbc	r23, r21
     b66:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     b6a:	70 93 c6 02 	sts	0x02C6, r23
     b6e:	60 93 c5 02 	sts	0x02C5, r22
     b72:	15 c0       	rjmp	.+42     	; 0xb9e <joy_get_position+0x12a>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     b74:	24 1b       	sub	r18, r20
     b76:	35 0b       	sbc	r19, r21
     b78:	64 e6       	ldi	r22, 0x64	; 100
     b7a:	62 9f       	mul	r22, r18
     b7c:	c0 01       	movw	r24, r0
     b7e:	63 9f       	mul	r22, r19
     b80:	90 0d       	add	r25, r0
     b82:	11 24       	eor	r1, r1
     b84:	20 91 a6 02 	lds	r18, 0x02A6
     b88:	30 91 a7 02 	lds	r19, 0x02A7
     b8c:	ba 01       	movw	r22, r20
     b8e:	62 1b       	sub	r22, r18
     b90:	73 0b       	sbc	r23, r19
     b92:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     b96:	70 93 c6 02 	sts	0x02C6, r23
     b9a:	60 93 c5 02 	sts	0x02C5, r22
		}
		
		Position pos;
		pos.x = x;
     b9e:	e0 90 c3 02 	lds	r14, 0x02C3
     ba2:	c0 90 c4 02 	lds	r12, 0x02C4
		pos.y = y;
     ba6:	f0 90 c5 02 	lds	r15, 0x02C5
     baa:	d0 90 c6 02 	lds	r13, 0x02C6
		pos.z = z;
		pos.r_slider = adc_read('r');
     bae:	82 e7       	ldi	r24, 0x72	; 114
     bb0:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     bb4:	90 e0       	ldi	r25, 0x00	; 0
		
		if (x < 4 && x > -4)
     bb6:	60 91 c3 02 	lds	r22, 0x02C3
     bba:	70 91 c4 02 	lds	r23, 0x02C4
     bbe:	6d 5f       	subi	r22, 0xFD	; 253
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	67 30       	cpi	r22, 0x07	; 7
     bc4:	71 05       	cpc	r23, r1
     bc6:	10 f4       	brcc	.+4      	; 0xbcc <joy_get_position+0x158>
		{
			pos.x = 0;
     bc8:	e1 2c       	mov	r14, r1
     bca:	c1 2c       	mov	r12, r1
		}
		if (y < 4 && y > -4)
     bcc:	e0 91 c5 02 	lds	r30, 0x02C5
     bd0:	f0 91 c6 02 	lds	r31, 0x02C6
     bd4:	33 96       	adiw	r30, 0x03	; 3
     bd6:	37 97       	sbiw	r30, 0x07	; 7
     bd8:	10 f4       	brcc	.+4      	; 0xbde <joy_get_position+0x16a>
		{
			pos.y = 0;
     bda:	f1 2c       	mov	r15, r1
     bdc:	d1 2c       	mov	r13, r1
		}
		return pos;
     bde:	e9 82       	std	Y+1, r14	; 0x01
     be0:	ca 82       	std	Y+2, r12	; 0x02
     be2:	fb 82       	std	Y+3, r15	; 0x03
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	1d 83       	std	Y+5, r17	; 0x05
     be8:	0e 83       	std	Y+6, r16	; 0x06
     bea:	98 87       	std	Y+8, r25	; 0x08
     bec:	8f 83       	std	Y+7, r24	; 0x07
     bee:	2e 2d       	mov	r18, r14
     bf0:	3c 2d       	mov	r19, r12
     bf2:	4f 2d       	mov	r20, r15
     bf4:	5d 2d       	mov	r21, r13
     bf6:	61 2f       	mov	r22, r17
     bf8:	70 2f       	mov	r23, r16
}
     bfa:	98 85       	ldd	r25, Y+8	; 0x08
     bfc:	28 96       	adiw	r28, 0x08	; 8
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	08 95       	ret

00000c1a <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     c1a:	8f 92       	push	r8
     c1c:	9f 92       	push	r9
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	28 97       	sbiw	r28, 0x08	; 8
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
	Position pos_cart = joy_get_position();
     c3e:	0e 94 3a 05 	call	0xa74	; 0xa74 <joy_get_position>
     c42:	29 83       	std	Y+1, r18	; 0x01
     c44:	3a 83       	std	Y+2, r19	; 0x02
     c46:	4b 83       	std	Y+3, r20	; 0x03
     c48:	5c 83       	std	Y+4, r21	; 0x04
     c4a:	89 80       	ldd	r8, Y+1	; 0x01
     c4c:	9a 80       	ldd	r9, Y+2	; 0x02
     c4e:	ab 80       	ldd	r10, Y+3	; 0x03
     c50:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     c52:	b4 01       	movw	r22, r8
     c54:	88 27       	eor	r24, r24
     c56:	77 fd       	sbrc	r23, 7
     c58:	80 95       	com	r24
     c5a:	98 2f       	mov	r25, r24
     c5c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__floatsisf>
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
     c64:	b5 01       	movw	r22, r10
     c66:	88 27       	eor	r24, r24
     c68:	77 fd       	sbrc	r23, 7
     c6a:	80 95       	com	r24
     c6c:	98 2f       	mov	r25, r24
     c6e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__floatsisf>
     c72:	a7 01       	movw	r20, r14
     c74:	96 01       	movw	r18, r12
     c76:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <atan2>
     c7a:	6b 01       	movw	r12, r22
     c7c:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     c7e:	88 9c       	mul	r8, r8
     c80:	b0 01       	movw	r22, r0
     c82:	89 9c       	mul	r8, r9
     c84:	70 0d       	add	r23, r0
     c86:	70 0d       	add	r23, r0
     c88:	11 24       	eor	r1, r1
     c8a:	aa 9c       	mul	r10, r10
     c8c:	c0 01       	movw	r24, r0
     c8e:	ab 9c       	mul	r10, r11
     c90:	90 0d       	add	r25, r0
     c92:	90 0d       	add	r25, r0
     c94:	11 24       	eor	r1, r1
     c96:	68 0f       	add	r22, r24
     c98:	79 1f       	adc	r23, r25
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__floatunsisf>
     ca2:	0e 94 c0 10 	call	0x2180	; 0x2180 <sqrt>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     caa:	20 ee       	ldi	r18, 0xE0	; 224
     cac:	3e e2       	ldi	r19, 0x2E	; 46
     cae:	45 e6       	ldi	r20, 0x65	; 101
     cb0:	52 e4       	ldi	r21, 0x42	; 66
     cb2:	c7 01       	movw	r24, r14
     cb4:	b6 01       	movw	r22, r12
     cb6:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__mulsf3>
     cba:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     cbe:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
	return pos_pol;
     cc8:	7b 01       	movw	r14, r22
}
     cca:	c7 01       	movw	r24, r14
     ccc:	b6 01       	movw	r22, r12
     cce:	28 96       	adiw	r28, 0x08	; 8
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	08 95       	ret

00000cf0 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     cf0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <joy_get_position_polar>
     cf4:	9b 01       	movw	r18, r22
	if(pos_pol.amplitude > 80){
     cf6:	81 35       	cpi	r24, 0x51	; 81
     cf8:	91 05       	cpc	r25, r1
     cfa:	7c f0       	brlt	.+30     	; 0xd1a <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     cfc:	68 38       	cpi	r22, 0x88	; 136
     cfe:	71 05       	cpc	r23, r1
     d00:	74 f4       	brge	.+28     	; 0xd1e <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     d02:	6e 32       	cpi	r22, 0x2E	; 46
     d04:	71 05       	cpc	r23, r1
     d06:	6c f4       	brge	.+26     	; 0xd22 <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     d08:	24 3d       	cpi	r18, 0xD4	; 212
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	38 07       	cpc	r19, r24
     d0e:	5c f4       	brge	.+22     	; 0xd26 <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     d10:	2a 37       	cpi	r18, 0x7A	; 122
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	54 f0       	brlt	.+20     	; 0xd2a <joy_get_direction+0x3a>
			return DOWN;
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	08 95       	ret

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     d2a:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     d2c:	08 95       	ret

00000d2e <mcp_read>:
#include "settings.h"
#include "spi.h"
#include "mcp.h"

char mcp_read(char address){
     d2e:	cf 93       	push	r28
     d30:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, MCP_PIN);
     d32:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	spi_master_transmit(address);
     d3a:	8c 2f       	mov	r24, r28
     d3c:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     d46:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <mcp_write>:

void mcp_write(char address, char data){
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	d8 2f       	mov	r29, r24
     d52:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, MCP_PIN);
     d54:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	spi_master_transmit(address);
     d5c:	8d 2f       	mov	r24, r29
     d5e:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	spi_master_transmit(data);
     d62:	8c 2f       	mov	r24, r28
     d64:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     d68:	c4 9a       	sbi	0x18, 4	; 24
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, MCP_PIN);
     d70:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,MCP_PIN);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	48 2b       	or	r20, r24
     d7e:	59 2b       	or	r21, r25
     d80:	cb 01       	movw	r24, r22
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
	clear_bit(PORTB, MCP_PIN);
	spi_master_transmit(command);
     d86:	84 2b       	or	r24, r20
     d88:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     d8c:	c4 9a       	sbi	0x18, 4	; 24
     d8e:	08 95       	ret

00000d90 <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,MCP_PIN);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	18 2f       	mov	r17, r24
     d98:	d6 2f       	mov	r29, r22
     d9a:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, MCP_PIN);
     d9c:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     d9e:	85 e0       	ldi	r24, 0x05	; 5
     da0:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	spi_master_transmit(address);
     da4:	81 2f       	mov	r24, r17
     da6:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	spi_master_transmit(mask);
     daa:	8d 2f       	mov	r24, r29
     dac:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	spi_master_transmit(data);
     db0:	8c 2f       	mov	r24, r28
     db2:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     db6:	c4 9a       	sbi	0x18, 4	; 24
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	08 95       	ret

00000dc0 <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, MCP_PIN);
     dc0:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);
     dc2:	80 ec       	ldi	r24, 0xC0	; 192
     dc4:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     dc8:	c4 9a       	sbi	0x18, 4	; 24
     dca:	08 95       	ret

00000dcc <mcp_init>:
}
	
void mcp_init(){
	spi_master_init();
     dcc:	0e 94 03 07 	call	0xe06	; 0xe06 <spi_master_init>
	mcp_reset();
     dd0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <mcp_reset>
     dd4:	08 95       	ret

00000dd6 <pwm_change_freq>:
	}
	#endif
}

void pwm_change_freq(int freq){
	pwm_top = ((uint32_t)F_CPU/(uint16_t)(freq * 8) - 1);
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	9c 01       	movw	r18, r24
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	8b e4       	ldi	r24, 0x4B	; 75
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 2a 11 	call	0x2254	; 0x2254 <__udivmodsi4>
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	31 09       	sbc	r19, r1
     df8:	30 93 ad 02 	sts	0x02AD, r19
     dfc:	20 93 ac 02 	sts	0x02AC, r18
	ICR1 = pwm_top;
     e00:	35 bd       	out	0x25, r19	; 37
     e02:	24 bd       	out	0x24, r18	; 36
     e04:	08 95       	ret

00000e06 <spi_master_init>:
#include "spi.h"

void spi_master_init()
{
	#ifdef NODE_1
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
     e06:	87 b3       	in	r24, 0x17	; 23
     e08:	80 6b       	ori	r24, 0xB0	; 176
     e0a:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
     e0c:	be 98       	cbi	0x17, 6	; 23
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
     e0e:	81 e5       	ldi	r24, 0x51	; 81
     e10:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
     e12:	c4 9a       	sbi	0x18, 4	; 24
     e14:	08 95       	ret

00000e16 <spi_master_transmit>:
	#endif
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
     e16:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
     e18:	77 9b       	sbis	0x0e, 7	; 14
     e1a:	fe cf       	rjmp	.-4      	; 0xe18 <spi_master_transmit+0x2>
	return SPDR;
     e1c:	8f b1       	in	r24, 0x0f	; 15
     e1e:	08 95       	ret

00000e20 <uart_putchar>:
	#endif
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     e20:	5d 9b       	sbis	0x0b, 5	; 11
     e22:	fe cf       	rjmp	.-4      	; 0xe20 <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
     e24:	8c b9       	out	0x0c, r24	; 12
     e26:	08 95       	ret

00000e28 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     e28:	5f 9b       	sbis	0x0b, 7	; 11
     e2a:	fe cf       	rjmp	.-4      	; 0xe28 <uart_getchar>
	return UDR0;
     e2c:	8c b1       	in	r24, 0x0c	; 12
     e2e:	08 95       	ret

00000e30 <uart_init>:
#include <stdio.h>
#include "settings.h"
#include "uart.h"

void uart_init(int baudRate){
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     e30:	aa 27       	eor	r26, r26
     e32:	97 fd       	sbrc	r25, 7
     e34:	a0 95       	com	r26
     e36:	ba 2f       	mov	r27, r26
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	aa 1f       	adc	r26, r26
     e3e:	bb 1f       	adc	r27, r27
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	aa 1f       	adc	r26, r26
     e46:	bb 1f       	adc	r27, r27
     e48:	9c 01       	movw	r18, r24
     e4a:	ad 01       	movw	r20, r26
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	44 1f       	adc	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	8b e4       	ldi	r24, 0x4B	; 75
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 4c 11 	call	0x2298	; 0x2298 <__divmodsi4>
     e68:	21 50       	subi	r18, 0x01	; 1
     e6a:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     e6c:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
     e6e:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     e70:	88 e1       	ldi	r24, 0x18	; 24
     e72:	8a b9       	out	0x0a, r24	; 10
	
	#ifdef NODE_1
		UCSR0C = ((1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00));
     e74:	8e e8       	ldi	r24, 0x8E	; 142
     e76:	80 bd       	out	0x20, r24	; 32
	#else
		UCSR0C = ((1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	#endif
	fdevopen(uart_putchar, uart_getchar);
     e78:	64 e1       	ldi	r22, 0x14	; 20
     e7a:	77 e0       	ldi	r23, 0x07	; 7
     e7c:	80 e1       	ldi	r24, 0x10	; 16
     e7e:	97 e0       	ldi	r25, 0x07	; 7
     e80:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fdevopen>
     e84:	08 95       	ret

00000e86 <game_run>:
void game_init(){
	oled_clear_screen();
}
int tones[] = { 1898, 1690, 1500, 1420, 1265, 1194, 1126, 1063, 1001, 947, 893, 843, 795, 749, 710, 668, 630, 594 };

void game_run(){
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	67 97       	sbiw	r28, 0x17	; 23
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
	
	if (!initiated){
     ea6:	80 91 ae 02 	lds	r24, 0x02AE
     eaa:	90 91 af 02 	lds	r25, 0x02AF
     eae:	89 2b       	or	r24, r25
     eb0:	41 f4       	brne	.+16     	; 0xec2 <game_run+0x3c>
int deaths = 0;
int initiated = 0;
int game_time = -1;

void game_init(){
	oled_clear_screen();
     eb2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <oled_clear_screen>
	
	if (!initiated){
		game_init();
		//music_init(1);
		//music_start_song();
		initiated = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 af 02 	sts	0x02AF, r25
     ebe:	80 93 ae 02 	sts	0x02AE, r24
	}
	
	
	if(music_beat_flag == 1){
     ec2:	80 91 ba 02 	lds	r24, 0x02BA
     ec6:	90 91 bb 02 	lds	r25, 0x02BB
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	51 f4       	brne	.+20     	; 0xee2 <game_run+0x5c>
		music_play_song(tones, 15);
     ece:	6f e0       	ldi	r22, 0x0F	; 15
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	8e e0       	ldi	r24, 0x0E	; 14
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <music_play_song>
		music_beat_flag == 0;
     eda:	80 91 ba 02 	lds	r24, 0x02BA
     ede:	90 91 bb 02 	lds	r25, 0x02BB
	}
		//music_play_song(tones,15);
	if(game_time_passed == 1){
     ee2:	80 91 a9 01 	lds	r24, 0x01A9
     ee6:	90 91 aa 01 	lds	r25, 0x01AA
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	09 f0       	breq	.+2      	; 0xef0 <game_run+0x6a>
     eee:	56 c0       	rjmp	.+172    	; 0xf9c <game_run+0x116>
		game_time++;
     ef0:	80 91 32 01 	lds	r24, 0x0132
     ef4:	90 91 33 01 	lds	r25, 0x0133
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	90 93 33 01 	sts	0x0133, r25
     efe:	80 93 32 01 	sts	0x0132, r24
		char str[5];
		char hs[4];

		sprintf(str,"%5d",game_time);
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	85 e3       	ldi	r24, 0x35	; 53
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	7e 01       	movw	r14, r28
     f10:	8f e0       	ldi	r24, 0x0F	; 15
     f12:	e8 0e       	add	r14, r24
     f14:	f1 1c       	adc	r15, r1
     f16:	ff 92       	push	r15
     f18:	ef 92       	push	r14
     f1a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <sprintf>
		sprintf(hs,"%4d",1337);
     f1e:	85 e0       	ldi	r24, 0x05	; 5
     f20:	8f 93       	push	r24
     f22:	89 e3       	ldi	r24, 0x39	; 57
     f24:	8f 93       	push	r24
     f26:	89 e3       	ldi	r24, 0x39	; 57
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	6e 01       	movw	r12, r28
     f30:	94 e1       	ldi	r25, 0x14	; 20
     f32:	c9 0e       	add	r12, r25
     f34:	d1 1c       	adc	r13, r1
     f36:	df 92       	push	r13
     f38:	cf 92       	push	r12
     f3a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <sprintf>
		oled_clear_line(0);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 66 0c 	call	0x18cc	; 0x18cc <oled_clear_line>
		oled_print_string("HIGH SCORE:",0,0,5,0);
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	25 e0       	ldi	r18, 0x05	; 5
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	8d e3       	ldi	r24, 0x3D	; 61
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
		oled_print_string(hs,7*8,0,5,0);
     f58:	25 e0       	ldi	r18, 0x05	; 5
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	68 e3       	ldi	r22, 0x38	; 56
     f5e:	c6 01       	movw	r24, r12
     f60:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
		oled_clear_line(1);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 66 0c 	call	0x18cc	; 0x18cc <oled_clear_line>
		oled_print_string("SCORE:",0,1,5,0);
     f6c:	25 e0       	ldi	r18, 0x05	; 5
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	82 e4       	ldi	r24, 0x42	; 66
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
		oled_print_string(str,4*8,1,5,0);
     f7a:	25 e0       	ldi	r18, 0x05	; 5
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	60 e2       	ldi	r22, 0x20	; 32
     f80:	c7 01       	movw	r24, r14
     f82:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
		oled_refresh();
     f86:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <oled_refresh>
		game_time_passed = 0;
     f8a:	10 92 aa 01 	sts	0x01AA, r1
     f8e:	10 92 a9 01 	sts	0x01A9, r1
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
		
	}
	//SEND POSITION
	Position position = joy_get_position();
     f9c:	0e 94 3a 05 	call	0xa74	; 0xa74 <joy_get_position>
     fa0:	29 83       	std	Y+1, r18	; 0x01
     fa2:	3a 83       	std	Y+2, r19	; 0x02
     fa4:	4b 83       	std	Y+3, r20	; 0x03
     fa6:	5c 83       	std	Y+4, r21	; 0x04
     fa8:	6d 83       	std	Y+5, r22	; 0x05
     faa:	7e 83       	std	Y+6, r23	; 0x06
     fac:	8f 83       	std	Y+7, r24	; 0x07
     fae:	98 87       	std	Y+8, r25	; 0x08
	Msg msg;
	msg.id = 42;
     fb0:	8a e2       	ldi	r24, 0x2A	; 42
     fb2:	48 2f       	mov	r20, r24
     fb4:	89 87       	std	Y+9, r24	; 0x09
     fb6:	1a 86       	std	Y+10, r1	; 0x0a
	msg.length = sizeof(position);
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	68 2f       	mov	r22, r24
     fbc:	8b 87       	std	Y+11, r24	; 0x0b
     fbe:	1c 86       	std	Y+12, r1	; 0x0c
	msg.data = (char*) &position;
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	9e 87       	std	Y+14, r25	; 0x0e
     fc6:	8d 87       	std	Y+13, r24	; 0x0d
	can_transmit(msg);
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	0e 94 cf 03 	call	0x79e	; 0x79e <can_transmit>
	
	//GET SCORE
	if (game_occluded){
     fd2:	80 91 bf 02 	lds	r24, 0x02BF
     fd6:	90 91 c0 02 	lds	r25, 0x02C0
     fda:	89 2b       	or	r24, r25
     fdc:	59 f1       	breq	.+86     	; 0x1034 <game_run+0x1ae>
		char scr[5];
		deaths++;
     fde:	80 91 b0 02 	lds	r24, 0x02B0
     fe2:	90 91 b1 02 	lds	r25, 0x02B1
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	90 93 b1 02 	sts	0x02B1, r25
     fec:	80 93 b0 02 	sts	0x02B0, r24
		sprintf(scr,"%5d",deaths);
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	85 e3       	ldi	r24, 0x35	; 53
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	9f 93       	push	r25
     ffa:	8f 93       	push	r24
     ffc:	7e 01       	movw	r14, r28
     ffe:	9f e0       	ldi	r25, 0x0F	; 15
    1000:	e9 0e       	add	r14, r25
    1002:	f1 1c       	adc	r15, r1
    1004:	ff 92       	push	r15
    1006:	ef 92       	push	r14
    1008:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <sprintf>
		oled_print_string(scr,5,5,8,0);
    100c:	00 e0       	ldi	r16, 0x00	; 0
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	28 e0       	ldi	r18, 0x08	; 8
    1012:	45 e0       	ldi	r20, 0x05	; 5
    1014:	65 e0       	ldi	r22, 0x05	; 5
    1016:	c7 01       	movw	r24, r14
    1018:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
		oled_refresh();
    101c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <oled_refresh>
		game_occluded = 0;
    1020:	10 92 c0 02 	sts	0x02C0, r1
    1024:	10 92 bf 02 	sts	0x02BF, r1
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
		//TODO: stop game
	}
	//TODO: Create state-machine
	//TODO: Calibrate hardware (?)
}
    1034:	67 96       	adiw	r28, 0x17	; 23
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret

00001052 <action_run_game>:
	}
}

//Action functions
Menu* action_run_game(Menu* self){
	state = in_game;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 bc 02 	sts	0x02BC, r24
}
    1058:	08 95       	ret

0000105a <action_start_transition_right>:
Menu* action_start_transition_right(Menu* self){
		if (self->sub_menus[self->cursor]->num_of_entries != 0){
    105a:	dc 01       	movw	r26, r24
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	13 97       	sbiw	r26, 0x03	; 3
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	1a 96       	adiw	r26, 0x0a	; 10
    106a:	2d 91       	ld	r18, X+
    106c:	3c 91       	ld	r19, X
    106e:	1b 97       	sbiw	r26, 0x0b	; 11
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	01 90       	ld	r0, Z+
    1076:	f0 81       	ld	r31, Z
    1078:	e0 2d       	mov	r30, r0
    107a:	26 81       	ldd	r18, Z+6	; 0x06
    107c:	37 81       	ldd	r19, Z+7	; 0x07
    107e:	23 2b       	or	r18, r19
    1080:	59 f0       	breq	.+22     	; 0x1098 <action_start_transition_right+0x3e>
			self = self->sub_menus[self->cursor];
			joy_held = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	90 93 b3 02 	sts	0x02B3, r25
    108a:	80 93 b2 02 	sts	0x02B2, r24
			transition = 1;
    108e:	90 93 b7 02 	sts	0x02B7, r25
    1092:	80 93 b6 02 	sts	0x02B6, r24
Menu* action_run_game(Menu* self){
	state = in_game;
}
Menu* action_start_transition_right(Menu* self){
		if (self->sub_menus[self->cursor]->num_of_entries != 0){
			self = self->sub_menus[self->cursor];
    1096:	cf 01       	movw	r24, r30
			joy_held = 1;
			transition = 1;
		}
		return self;
}
    1098:	08 95       	ret

0000109a <action_toggle_name>:
Menu* action_toggle_name(Menu* self){	//TEST FOR CHECK BOXES IN OPTIONS
	self->sub_menus[self->cursor]->name= "Herman";
    109a:	dc 01       	movw	r26, r24
    109c:	12 96       	adiw	r26, 0x02	; 2
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	13 97       	sbiw	r26, 0x03	; 3
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	1a 96       	adiw	r26, 0x0a	; 10
    10aa:	2d 91       	ld	r18, X+
    10ac:	3c 91       	ld	r19, X
    10ae:	1b 97       	sbiw	r26, 0x0b	; 11
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	01 90       	ld	r0, Z+
    10b6:	f0 81       	ld	r31, Z
    10b8:	e0 2d       	mov	r30, r0
    10ba:	29 e4       	ldi	r18, 0x49	; 73
    10bc:	32 e0       	ldi	r19, 0x02	; 2
    10be:	31 83       	std	Z+1, r19	; 0x01
    10c0:	20 83       	st	Z, r18
	return self;
}
    10c2:	08 95       	ret

000010c4 <draw_list>:
			transition = 0;
		}
	}
	return self;
}
Menu* draw_list(Menu* self){
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	7c 01       	movw	r14, r24
	for(int i = 0; i < self->num_of_entries; i++){
    10d2:	dc 01       	movw	r26, r24
    10d4:	16 96       	adiw	r26, 0x06	; 6
    10d6:	8d 91       	ld	r24, X+
    10d8:	9c 91       	ld	r25, X
    10da:	17 97       	sbiw	r26, 0x07	; 7
    10dc:	18 16       	cp	r1, r24
    10de:	19 06       	cpc	r1, r25
    10e0:	fc f4       	brge	.+62     	; 0x1120 <draw_list+0x5c>
    10e2:	c0 e0       	ldi	r28, 0x00	; 0
    10e4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
    10e6:	ce 01       	movw	r24, r28
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	d7 01       	movw	r26, r14
    10ee:	1a 96       	adiw	r26, 0x0a	; 10
    10f0:	ed 91       	ld	r30, X+
    10f2:	fc 91       	ld	r31, X
    10f4:	1b 97       	sbiw	r26, 0x0b	; 11
    10f6:	e8 0f       	add	r30, r24
    10f8:	f9 1f       	adc	r31, r25
    10fa:	01 90       	ld	r0, Z+
    10fc:	f0 81       	ld	r31, Z
    10fe:	e0 2d       	mov	r30, r0
    1100:	00 e0       	ldi	r16, 0x00	; 0
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	25 e0       	ldi	r18, 0x05	; 5
    1106:	4c 2f       	mov	r20, r28
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
		}
	}
	return self;
}
Menu* draw_list(Menu* self){
	for(int i = 0; i < self->num_of_entries; i++){
    1112:	21 96       	adiw	r28, 0x01	; 1
    1114:	f7 01       	movw	r30, r14
    1116:	86 81       	ldd	r24, Z+6	; 0x06
    1118:	97 81       	ldd	r25, Z+7	; 0x07
    111a:	c8 17       	cp	r28, r24
    111c:	d9 07       	cpc	r29, r25
    111e:	1c f3       	brlt	.-58     	; 0x10e6 <draw_list+0x22>
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
	}
	//Where to go next
	Direction dir = joy_get_direction();
    1120:	0e 94 78 06 	call	0xcf0	; 0xcf0 <joy_get_direction>
	if((dir == LEFT) & (self->super_menu != NULL)){
		self = self->super_menu;
	}
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <add_sub_menu>:
		empty->num_of_entries = 0;
		add_sub_menu(menu, empty);
	}
}

void add_sub_menu(Menu* super, Menu* sub){
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    1140:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	9f 81       	ldd	r25, Y+7	; 0x07
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	9f 83       	std	Y+7, r25	; 0x07
    114a:	8e 83       	std	Y+6, r24	; 0x06
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    114c:	fb 01       	movw	r30, r22
    114e:	d1 87       	std	Z+9, r29	; 0x09
    1150:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    1152:	6e 81       	ldd	r22, Y+6	; 0x06
    1154:	7f 81       	ldd	r23, Y+7	; 0x07
    1156:	66 0f       	add	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 85       	ldd	r24, Y+10	; 0x0a
    115c:	9b 85       	ldd	r25, Y+11	; 0x0b
    115e:	0e 94 a6 12 	call	0x254c	; 0x254c <realloc>
    1162:	9b 87       	std	Y+11, r25	; 0x0b
    1164:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    1166:	ee 80       	ldd	r14, Y+6	; 0x06
    1168:	ff 80       	ldd	r15, Y+7	; 0x07
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	ef 1a       	sub	r14, r31
    116e:	f0 e8       	ldi	r31, 0x80	; 128
    1170:	ff 0a       	sbc	r15, r31
    1172:	ee 0c       	add	r14, r14
    1174:	ff 1c       	adc	r15, r15
    1176:	e8 0e       	add	r14, r24
    1178:	f9 1e       	adc	r15, r25
    117a:	80 e1       	ldi	r24, 0x10	; 16
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
    1182:	f7 01       	movw	r30, r14
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    1188:	ee 81       	ldd	r30, Y+6	; 0x06
    118a:	ff 81       	ldd	r31, Y+7	; 0x07
    118c:	e1 50       	subi	r30, 0x01	; 1
    118e:	f0 48       	sbci	r31, 0x80	; 128
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	8a 85       	ldd	r24, Y+10	; 0x0a
    1196:	9b 85       	ldd	r25, Y+11	; 0x0b
    1198:	e8 0f       	add	r30, r24
    119a:	f9 1f       	adc	r31, r25
    119c:	11 83       	std	Z+1, r17	; 0x01
    119e:	00 83       	st	Z, r16
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <menu_init>:

Menu* current_menu = &main_menu;

//The initializer - How the menus are related
void menu_init(){
	add_sub_menu(&main_menu, &play_game);
    11ae:	66 e3       	ldi	r22, 0x36	; 54
    11b0:	71 e0       	ldi	r23, 0x01	; 1
    11b2:	86 e9       	ldi	r24, 0x96	; 150
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 99 08 	call	0x1132	; 0x1132 <add_sub_menu>
	
	char* control_entr[3] = {"player1", "player2", "player3"};
	//add_list_entries(&control, control_entr, 3);
	add_sub_menu(&options, &control);
    11ba:	66 e6       	ldi	r22, 0x66	; 102
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	86 e8       	ldi	r24, 0x86	; 134
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 99 08 	call	0x1132	; 0x1132 <add_sub_menu>
	
	//char* contro_entr[4] = {"low", "medium", "high","ultra"};
	//add_list_entries(&contro, contro_entr, 4);
	add_sub_menu(&options, &contro);
    11c6:	66 e5       	ldi	r22, 0x56	; 86
    11c8:	71 e0       	ldi	r23, 0x01	; 1
    11ca:	86 e8       	ldi	r24, 0x86	; 134
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	0e 94 99 08 	call	0x1132	; 0x1132 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    11d2:	66 e8       	ldi	r22, 0x86	; 134
    11d4:	71 e0       	ldi	r23, 0x01	; 1
    11d6:	86 e9       	ldi	r24, 0x96	; 150
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 99 08 	call	0x1132	; 0x1132 <add_sub_menu>
	add_sub_menu(&main_menu, &toggle);
    11de:	66 e4       	ldi	r22, 0x46	; 70
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	86 e9       	ldi	r24, 0x96	; 150
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 99 08 	call	0x1132	; 0x1132 <add_sub_menu>
	//add_list_entries(&main_menu, diff_entr, 1);
	//add_sub_menu(&main_menu, &difficulty);
	
	char* high_entr[4] = {"1. herman","2. raoul","3. alle andre","-inf^inf. hans"};
	//add_list_entries(&highscore, high_entr,4);
	add_sub_menu(&main_menu, &highscore);
    11ea:	66 e7       	ldi	r22, 0x76	; 118
    11ec:	71 e0       	ldi	r23, 0x01	; 1
    11ee:	86 e9       	ldi	r24, 0x96	; 150
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 99 08 	call	0x1132	; 0x1132 <add_sub_menu>
    11f6:	08 95       	ret

000011f8 <menu_run_display>:
	return self;
}
//void action_animation(){}

void menu_run_display(){
	oled_clear_screen();
    11f8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    11fc:	80 91 34 01 	lds	r24, 0x0134
    1200:	90 91 35 01 	lds	r25, 0x0135
    1204:	dc 01       	movw	r26, r24
    1206:	1c 96       	adiw	r26, 0x0c	; 12
    1208:	ed 91       	ld	r30, X+
    120a:	fc 91       	ld	r31, X
    120c:	1d 97       	sbiw	r26, 0x0d	; 13
    120e:	09 95       	icall
    1210:	90 93 35 01 	sts	0x0135, r25
    1214:	80 93 34 01 	sts	0x0134, r24
	oled_refresh();
    1218:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <oled_refresh>
    121c:	08 95       	ret

0000121e <menu_transition>:
}
void menu_transition(Menu *self, Direction dir){
	//If done with transition
	if (transition_count == 8){
    121e:	20 91 b4 02 	lds	r18, 0x02B4
    1222:	30 91 b5 02 	lds	r19, 0x02B5
    1226:	28 30       	cpi	r18, 0x08	; 8
    1228:	31 05       	cpc	r19, r1
    122a:	09 f0       	breq	.+2      	; 0x122e <menu_transition+0x10>
    122c:	4a c0       	rjmp	.+148    	; 0x12c2 <menu_transition+0xa4>
		//wrapping
		if(transition_dir == UP){
    122e:	20 91 a6 01 	lds	r18, 0x01A6
    1232:	21 30       	cpi	r18, 0x01	; 1
    1234:	91 f4       	brne	.+36     	; 0x125a <menu_transition+0x3c>
			self->cursor--;
    1236:	fc 01       	movw	r30, r24
    1238:	22 81       	ldd	r18, Z+2	; 0x02
    123a:	33 81       	ldd	r19, Z+3	; 0x03
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	31 09       	sbc	r19, r1
    1240:	33 83       	std	Z+3, r19	; 0x03
    1242:	22 83       	std	Z+2, r18	; 0x02
			if(self->cursor == -1){
    1244:	2f 3f       	cpi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	e1 f4       	brne	.+56     	; 0x1282 <menu_transition+0x64>
				self->cursor = self->num_of_entries - 1;
    124a:	fc 01       	movw	r30, r24
    124c:	26 81       	ldd	r18, Z+6	; 0x06
    124e:	37 81       	ldd	r19, Z+7	; 0x07
    1250:	21 50       	subi	r18, 0x01	; 1
    1252:	31 09       	sbc	r19, r1
    1254:	33 83       	std	Z+3, r19	; 0x03
    1256:	22 83       	std	Z+2, r18	; 0x02
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <menu_transition+0x64>
			}
		}
		else if(transition_dir == DOWN){
    125a:	23 30       	cpi	r18, 0x03	; 3
    125c:	91 f4       	brne	.+36     	; 0x1282 <menu_transition+0x64>
			//wrapping
			if(self->cursor == self->num_of_entries - 1){
    125e:	fc 01       	movw	r30, r24
    1260:	22 81       	ldd	r18, Z+2	; 0x02
    1262:	33 81       	ldd	r19, Z+3	; 0x03
    1264:	46 81       	ldd	r20, Z+6	; 0x06
    1266:	57 81       	ldd	r21, Z+7	; 0x07
    1268:	41 50       	subi	r20, 0x01	; 1
    126a:	51 09       	sbc	r21, r1
    126c:	24 17       	cp	r18, r20
    126e:	35 07       	cpc	r19, r21
    1270:	19 f4       	brne	.+6      	; 0x1278 <menu_transition+0x5a>
				self->cursor = 0;
    1272:	13 82       	std	Z+3, r1	; 0x03
    1274:	12 82       	std	Z+2, r1	; 0x02
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <menu_transition+0x64>
			}
			else{
				self->cursor++;
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	fc 01       	movw	r30, r24
    127e:	33 83       	std	Z+3, r19	; 0x03
    1280:	22 83       	std	Z+2, r18	; 0x02
			}
		}
		transition_count = 0;
    1282:	10 92 b5 02 	sts	0x02B5, r1
    1286:	10 92 b4 02 	sts	0x02B4, r1
		transition_dir = NEUTRAL;
    128a:	2f ef       	ldi	r18, 0xFF	; 255
    128c:	20 93 a6 01 	sts	0x01A6, r18
		transition = 0;
    1290:	10 92 b7 02 	sts	0x02B7, r1
    1294:	10 92 b6 02 	sts	0x02B6, r1
		oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));//The final box
    1298:	fc 01       	movw	r30, r24
    129a:	22 81       	ldd	r18, Z+2	; 0x02
    129c:	33 81       	ldd	r19, Z+3	; 0x03
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	b9 01       	movw	r22, r18
    12b0:	68 50       	subi	r22, 0x08	; 8
    12b2:	71 09       	sbc	r23, r1
    12b4:	40 e4       	ldi	r20, 0x40	; 64
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <oled_invert_rectangle>
    12c0:	08 95       	ret
	}
	//Update the transition
	else if(transition == 1 && (transition_dir == UP || transition_dir == DOWN)){
    12c2:	40 91 b6 02 	lds	r20, 0x02B6
    12c6:	50 91 b7 02 	lds	r21, 0x02B7
    12ca:	41 30       	cpi	r20, 0x01	; 1
    12cc:	51 05       	cpc	r21, r1
    12ce:	89 f5       	brne	.+98     	; 0x1332 <menu_transition+0x114>
    12d0:	40 91 a6 01 	lds	r20, 0x01A6
    12d4:	41 30       	cpi	r20, 0x01	; 1
    12d6:	29 f0       	breq	.+10     	; 0x12e2 <menu_transition+0xc4>
    12d8:	43 30       	cpi	r20, 0x03	; 3
    12da:	59 f5       	brne	.+86     	; 0x1332 <menu_transition+0x114>
		int sign = 1;
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <menu_transition+0xc8>
		if(transition_dir == UP){
			sign = -1;
    12e2:	4f ef       	ldi	r20, 0xFF	; 255
    12e4:	5f ef       	ldi	r21, 0xFF	; 255
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    12e6:	fc 01       	movw	r30, r24
    12e8:	62 81       	ldd	r22, Z+2	; 0x02
    12ea:	73 81       	ldd	r23, Z+3	; 0x03
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	66 0f       	add	r22, r22
    12f6:	77 1f       	adc	r23, r23
    12f8:	42 9f       	mul	r20, r18
    12fa:	c0 01       	movw	r24, r0
    12fc:	43 9f       	mul	r20, r19
    12fe:	90 0d       	add	r25, r0
    1300:	52 9f       	mul	r21, r18
    1302:	90 0d       	add	r25, r0
    1304:	11 24       	eor	r1, r1
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
    1306:	9b 01       	movw	r18, r22
    1308:	28 5f       	subi	r18, 0xF8	; 248
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	28 0f       	add	r18, r24
    130e:	39 1f       	adc	r19, r25
		if(transition_dir == UP){
			sign = -1;
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    1310:	68 0f       	add	r22, r24
    1312:	79 1f       	adc	r23, r25
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
		
		oled_invert_rectangle(x1,y1,x2,y2);
    1314:	40 e4       	ldi	r20, 0x40	; 64
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <oled_invert_rectangle>
		transition_count++;
    1320:	80 91 b4 02 	lds	r24, 0x02B4
    1324:	90 91 b5 02 	lds	r25, 0x02B5
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	90 93 b5 02 	sts	0x02B5, r25
    132e:	80 93 b4 02 	sts	0x02B4, r24
    1332:	08 95       	ret

00001334 <draw_menu>:
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
	super->sub_menus[super->num_of_entries - 1] = sub;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	28 97       	sbiw	r28, 0x08	; 8
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	6c 01       	movw	r12, r24
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    1356:	dc 01       	movw	r26, r24
    1358:	16 96       	adiw	r26, 0x06	; 6
    135a:	8d 91       	ld	r24, X+
    135c:	9c 91       	ld	r25, X
    135e:	17 97       	sbiw	r26, 0x07	; 7
    1360:	18 16       	cp	r1, r24
    1362:	19 06       	cpc	r1, r25
    1364:	0c f5       	brge	.+66     	; 0x13a8 <draw_menu+0x74>
    1366:	e1 2c       	mov	r14, r1
    1368:	f1 2c       	mov	r15, r1
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
    136a:	c7 01       	movw	r24, r14
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	d6 01       	movw	r26, r12
    1372:	1a 96       	adiw	r26, 0x0a	; 10
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	1b 97       	sbiw	r26, 0x0b	; 11
    137a:	e8 0f       	add	r30, r24
    137c:	f9 1f       	adc	r31, r25
    137e:	01 90       	ld	r0, Z+
    1380:	f0 81       	ld	r31, Z
    1382:	e0 2d       	mov	r30, r0
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	25 e0       	ldi	r18, 0x05	; 5
    138a:	4e 2d       	mov	r20, r14
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	0e 94 0e 0c 	call	0x181c	; 0x181c <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    1396:	bf ef       	ldi	r27, 0xFF	; 255
    1398:	eb 1a       	sub	r14, r27
    139a:	fb 0a       	sbc	r15, r27
    139c:	f6 01       	movw	r30, r12
    139e:	86 81       	ldd	r24, Z+6	; 0x06
    13a0:	97 81       	ldd	r25, Z+7	; 0x07
    13a2:	e8 16       	cp	r14, r24
    13a4:	f9 06       	cpc	r15, r25
    13a6:	0c f3       	brlt	.-62     	; 0x136a <draw_menu+0x36>
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
	}
	if(transition == 0){
    13a8:	80 91 b6 02 	lds	r24, 0x02B6
    13ac:	90 91 b7 02 	lds	r25, 0x02B7
    13b0:	89 2b       	or	r24, r25
    13b2:	b1 f4       	brne	.+44     	; 0x13e0 <draw_menu+0xac>
		oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
    13b4:	d6 01       	movw	r26, r12
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	2d 91       	ld	r18, X+
    13ba:	3c 91       	ld	r19, X
    13bc:	13 97       	sbiw	r26, 0x03	; 3
    13be:	2f 5f       	subi	r18, 0xFF	; 255
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	b9 01       	movw	r22, r18
    13d0:	68 50       	subi	r22, 0x08	; 8
    13d2:	71 09       	sbc	r23, r1
    13d4:	40 e4       	ldi	r20, 0x40	; 64
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <oled_invert_rectangle>
	}
	//Where to go next
	Direction dir = joy_get_direction();
    13e0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <joy_get_direction>
    13e4:	18 2f       	mov	r17, r24
	Position pos = joy_get_position();
    13e6:	0e 94 3a 05 	call	0xa74	; 0xa74 <joy_get_position>
    13ea:	29 83       	std	Y+1, r18	; 0x01
    13ec:	3a 83       	std	Y+2, r19	; 0x02
    13ee:	4b 83       	std	Y+3, r20	; 0x03
    13f0:	5c 83       	std	Y+4, r21	; 0x04
    13f2:	6d 83       	std	Y+5, r22	; 0x05
    13f4:	7e 83       	std	Y+6, r23	; 0x06
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    13f8:	98 87       	std	Y+8, r25	; 0x08
	//THIS DOES NOT WORK IF THE JOYSTICK IS NOT WORKING
	if(transition == 0){
    13fa:	20 91 b6 02 	lds	r18, 0x02B6
    13fe:	30 91 b7 02 	lds	r19, 0x02B7
    1402:	23 2b       	or	r18, r19
    1404:	09 f0       	breq	.+2      	; 0x1408 <draw_menu+0xd4>
    1406:	54 c0       	rjmp	.+168    	; 0x14b0 <draw_menu+0x17c>
		switch(dir){
    1408:	11 30       	cpi	r17, 0x01	; 1
    140a:	59 f0       	breq	.+22     	; 0x1422 <draw_menu+0xee>
    140c:	2c f4       	brge	.+10     	; 0x1418 <draw_menu+0xe4>
    140e:	1f 3f       	cpi	r17, 0xFF	; 255
    1410:	91 f1       	breq	.+100    	; 0x1476 <draw_menu+0x142>
    1412:	11 23       	and	r17, r17
    1414:	59 f1       	breq	.+86     	; 0x146c <draw_menu+0x138>
    1416:	60 c0       	rjmp	.+192    	; 0x14d8 <draw_menu+0x1a4>
    1418:	12 30       	cpi	r17, 0x02	; 2
    141a:	b1 f0       	breq	.+44     	; 0x1448 <draw_menu+0x114>
    141c:	13 30       	cpi	r17, 0x03	; 3
    141e:	51 f0       	breq	.+20     	; 0x1434 <draw_menu+0x100>
    1420:	5b c0       	rjmp	.+182    	; 0x14d8 <draw_menu+0x1a4>
			case UP:
				transition = 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	90 93 b7 02 	sts	0x02B7, r25
    142a:	80 93 b6 02 	sts	0x02B6, r24
				transition_dir = UP;
    142e:	80 93 a6 01 	sts	0x01A6, r24
				break;
    1432:	52 c0       	rjmp	.+164    	; 0x14d8 <draw_menu+0x1a4>
			case DOWN:
				transition = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 b7 02 	sts	0x02B7, r25
    143c:	80 93 b6 02 	sts	0x02B6, r24
				transition_dir = DOWN;
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	80 93 a6 01 	sts	0x01A6, r24
				break;
    1446:	48 c0       	rjmp	.+144    	; 0x14d8 <draw_menu+0x1a4>
			case LEFT:
				if (self->super_menu != NULL){
    1448:	f6 01       	movw	r30, r12
    144a:	80 85       	ldd	r24, Z+8	; 0x08
    144c:	91 85       	ldd	r25, Z+9	; 0x09
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	09 f4       	brne	.+2      	; 0x1454 <draw_menu+0x120>
    1452:	42 c0       	rjmp	.+132    	; 0x14d8 <draw_menu+0x1a4>
					self = self->super_menu;
					joy_held = 1;
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	30 93 b3 02 	sts	0x02B3, r19
    145c:	20 93 b2 02 	sts	0x02B2, r18
					transition = 1;
    1460:	30 93 b7 02 	sts	0x02B7, r19
    1464:	20 93 b6 02 	sts	0x02B6, r18
				transition = 1;
				transition_dir = DOWN;
				break;
			case LEFT:
				if (self->super_menu != NULL){
					self = self->super_menu;
    1468:	6c 01       	movw	r12, r24
    146a:	36 c0       	rjmp	.+108    	; 0x14d8 <draw_menu+0x1a4>
					joy_held = 1;
					transition = 1;
				}
				break;
			case RIGHT:
				self = action_start_transition_right(self);
    146c:	c6 01       	movw	r24, r12
    146e:	0e 94 2d 08 	call	0x105a	; 0x105a <action_start_transition_right>
    1472:	6c 01       	movw	r12, r24
				break;
    1474:	31 c0       	rjmp	.+98     	; 0x14d8 <draw_menu+0x1a4>
			case NEUTRAL:
				if(pos.z  == 1 && self->sub_menus[self->cursor]->action != NULL){
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	69 f5       	brne	.+90     	; 0x14d8 <draw_menu+0x1a4>
    147e:	d6 01       	movw	r26, r12
    1480:	12 96       	adiw	r26, 0x02	; 2
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	13 97       	sbiw	r26, 0x03	; 3
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	1a 96       	adiw	r26, 0x0a	; 10
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	1b 97       	sbiw	r26, 0x0b	; 11
    1494:	e8 0f       	add	r30, r24
    1496:	f9 1f       	adc	r31, r25
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	06 84       	ldd	r0, Z+14	; 0x0e
    14a0:	f7 85       	ldd	r31, Z+15	; 0x0f
    14a2:	e0 2d       	mov	r30, r0
    14a4:	30 97       	sbiw	r30, 0x00	; 0
    14a6:	c1 f0       	breq	.+48     	; 0x14d8 <draw_menu+0x1a4>
					self = self->sub_menus[self->cursor]->action(self);
    14a8:	c6 01       	movw	r24, r12
    14aa:	09 95       	icall
    14ac:	6c 01       	movw	r12, r24
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <draw_menu+0x1a4>
				}
				break;
		}
	}
	else{
		if (transition_dir == UP || transition_dir == DOWN){
    14b0:	60 91 a6 01 	lds	r22, 0x01A6
    14b4:	86 2f       	mov	r24, r22
    14b6:	8d 7f       	andi	r24, 0xFD	; 253
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <draw_menu+0x190>
			menu_transition(self, transition_dir);
    14bc:	c6 01       	movw	r24, r12
    14be:	0e 94 0f 09 	call	0x121e	; 0x121e <menu_transition>
    14c2:	0a c0       	rjmp	.+20     	; 0x14d8 <draw_menu+0x1a4>
		}
		else if(dir == NEUTRAL){
    14c4:	1f 3f       	cpi	r17, 0xFF	; 255
    14c6:	41 f4       	brne	.+16     	; 0x14d8 <draw_menu+0x1a4>
			joy_held = 0;
    14c8:	10 92 b3 02 	sts	0x02B3, r1
    14cc:	10 92 b2 02 	sts	0x02B2, r1
			transition = 0;
    14d0:	10 92 b7 02 	sts	0x02B7, r1
    14d4:	10 92 b6 02 	sts	0x02B6, r1
		}
	}
	return self;
}
    14d8:	c6 01       	movw	r24, r12
    14da:	28 96       	adiw	r28, 0x08	; 8
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	08 95       	ret

000014f8 <music_play_song>:
	TCCR3B |= (1 << CS32);
}

//Mby have play song in interrupt for perfect timing?
void music_play_song(int song[], int length){
	if(song_count == length){
    14f8:	20 91 b8 02 	lds	r18, 0x02B8
    14fc:	30 91 b9 02 	lds	r19, 0x02B9
    1500:	26 17       	cp	r18, r22
    1502:	37 07       	cpc	r19, r23
    1504:	49 f4       	brne	.+18     	; 0x1518 <music_play_song+0x20>
		song_count = 0;
    1506:	10 92 b9 02 	sts	0x02B9, r1
    150a:	10 92 b8 02 	sts	0x02B8, r1
		TCCR3B &= ~(1 << CS32);
    150e:	ea e8       	ldi	r30, 0x8A	; 138
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	20 81       	ld	r18, Z
    1514:	2b 7f       	andi	r18, 0xFB	; 251
    1516:	20 83       	st	Z, r18
		//Stop interrupt timer
	}
	pwm_change_freq(song[song_count]);
    1518:	20 91 b8 02 	lds	r18, 0x02B8
    151c:	30 91 b9 02 	lds	r19, 0x02B9
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	fc 01       	movw	r30, r24
    1526:	e2 0f       	add	r30, r18
    1528:	f3 1f       	adc	r31, r19
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <pwm_change_freq>
	song_count++;
    1532:	80 91 b8 02 	lds	r24, 0x02B8
    1536:	90 91 b9 02 	lds	r25, 0x02B9
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	90 93 b9 02 	sts	0x02B9, r25
    1540:	80 93 b8 02 	sts	0x02B8, r24
    1544:	08 95       	ret

00001546 <__vector_7>:
}

//TODO: Change time for music interrupts 
//-Something weird happening

ISR(TIMER3_COMPA_vect){
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
	music_beat_flag = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	90 93 bb 02 	sts	0x02BB, r25
    155c:	80 93 ba 02 	sts	0x02BA, r24
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <main>:
volatile int oled_refresh_timer = 0;
volatile int game_interrupt_flag = 1;
State state = in_menu;

int main(void)
{
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	00 d0       	rcall	.+0      	; 0x1574 <main+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <main+0x8>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <main+0xa>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62

	MCUCR |= (1<<SRE);	//Enable external memory
    157c:	85 b7       	in	r24, 0x35	; 53
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); 
    1582:	80 b7       	in	r24, 0x30	; 48
    1584:	80 62       	ori	r24, 0x20	; 32
    1586:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600);
    1588:	80 e8       	ldi	r24, 0x80	; 128
    158a:	95 e2       	ldi	r25, 0x25	; 37
    158c:	0e 94 18 07 	call	0xe30	; 0xe30 <uart_init>
	can_init(MODE_NORMAL);
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	adc_init();
    1598:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
    159c:	0e 94 84 0c 	call	0x1908	; 0x1908 <oled_init>
	joy_init();
    15a0:	0e 94 35 05 	call	0xa6a	; 0xa6a <joy_init>
	touch_init();
    15a4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <touch_init>
	menu_init();
    15a8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <menu_init>
	sei();
    15ac:	78 94       	sei
				case OCCLUDED:
					game_occluded = 1;
					break;
				
				default:
					printf("ID unknown\r");
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f8 e9       	ldi	r31, 0x98	; 152
    15b2:	ef 2e       	mov	r14, r31
    15b4:	f2 e0       	ldi	r31, 0x02	; 2
    15b6:	ff 2e       	mov	r15, r31
    15b8:	f0 2d       	mov	r31, r0
		//joy_print();
		if (can_message_received){
			Msg msg_received =  can_receive();
			switch (msg_received.id){
				case OCCLUDED:
					game_occluded = 1;
    15ba:	01 e0       	ldi	r16, 0x01	; 1
    15bc:	10 e0       	ldi	r17, 0x00	; 0
	sei();
	//sram_test();
	while (1)
	{	
		//joy_print();
		if (can_message_received){
    15be:	80 91 a4 02 	lds	r24, 0x02A4
    15c2:	90 91 a5 02 	lds	r25, 0x02A5
    15c6:	89 2b       	or	r24, r25
    15c8:	f9 f0       	breq	.+62     	; 0x1608 <main+0x9a>
			Msg msg_received =  can_receive();
    15ca:	0e 94 21 04 	call	0x842	; 0x842 <can_receive>
    15ce:	29 83       	std	Y+1, r18	; 0x01
    15d0:	3a 83       	std	Y+2, r19	; 0x02
    15d2:	4b 83       	std	Y+3, r20	; 0x03
    15d4:	5c 83       	std	Y+4, r21	; 0x04
    15d6:	6d 83       	std	Y+5, r22	; 0x05
    15d8:	7e 83       	std	Y+6, r23	; 0x06
			switch (msg_received.id){
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	03 97       	sbiw	r24, 0x03	; 3
    15e0:	29 f4       	brne	.+10     	; 0x15ec <main+0x7e>
				case OCCLUDED:
					game_occluded = 1;
    15e2:	10 93 c0 02 	sts	0x02C0, r17
    15e6:	00 93 bf 02 	sts	0x02BF, r16
					break;
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <main+0x8a>
				
				default:
					printf("ID unknown\r");
    15ec:	ff 92       	push	r15
    15ee:	ef 92       	push	r14
    15f0:	0e 94 c4 13 	call	0x2788	; 0x2788 <printf>
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
			}
			free(msg_received.data);
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	0e 94 17 12 	call	0x242e	; 0x242e <free>
			can_message_received = 0;
    1600:	10 92 a5 02 	sts	0x02A5, r1
    1604:	10 92 a4 02 	sts	0x02A4, r1
		}
		
		switch (state){
    1608:	80 91 bc 02 	lds	r24, 0x02BC
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <main+0xa8>
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	71 f0       	breq	.+28     	; 0x1630 <main+0xc2>
    1614:	d4 cf       	rjmp	.-88     	; 0x15be <main+0x50>
			case in_menu:
				if(oled_refresh_timer == 1){
    1616:	80 91 bd 02 	lds	r24, 0x02BD
    161a:	90 91 be 02 	lds	r25, 0x02BE
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	71 f6       	brne	.-100    	; 0x15be <main+0x50>
					menu_run_display();
    1622:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <menu_run_display>
					oled_refresh_timer = 0;
    1626:	10 92 be 02 	sts	0x02BE, r1
    162a:	10 92 bd 02 	sts	0x02BD, r1
    162e:	c7 cf       	rjmp	.-114    	; 0x15be <main+0x50>
				}
				break;
			case in_game:		
				if(game_interrupt_flag == 1){
    1630:	80 91 a7 01 	lds	r24, 0x01A7
    1634:	90 91 a8 01 	lds	r25, 0x01A8
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	09 f6       	brne	.-126    	; 0x15be <main+0x50>
					game_run();
    163c:	0e 94 43 07 	call	0xe86	; 0xe86 <game_run>
    1640:	be cf       	rjmp	.-132    	; 0x15be <main+0x50>

00001642 <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    1642:	20 91 b1 01 	lds	r18, 0x01B1
    1646:	30 91 b2 01 	lds	r19, 0x01B2
    164a:	23 2b       	or	r18, r19
    164c:	d1 f0       	breq	.+52     	; 0x1682 <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    164e:	20 91 c1 02 	lds	r18, 0x02C1
    1652:	30 91 c2 02 	lds	r19, 0x02C2
    1656:	21 15       	cp	r18, r1
    1658:	94 e0       	ldi	r25, 0x04	; 4
    165a:	39 07       	cpc	r19, r25
    165c:	bc f4       	brge	.+46     	; 0x168c <oled_write_data+0x4a>
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    165e:	40 91 ad 01 	lds	r20, 0x01AD
    1662:	50 91 ae 01 	lds	r21, 0x01AE
    1666:	fa 01       	movw	r30, r20
    1668:	e2 0f       	add	r30, r18
    166a:	f3 1f       	adc	r31, r19
    166c:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    166e:	80 91 c1 02 	lds	r24, 0x02C1
    1672:	90 91 c2 02 	lds	r25, 0x02C2
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	90 93 c2 02 	sts	0x02C2, r25
    167c:	80 93 c1 02 	sts	0x02C1, r24
    1680:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    1682:	e0 91 ab 01 	lds	r30, 0x01AB
    1686:	f0 91 ac 01 	lds	r31, 0x01AC
    168a:	80 83       	st	Z, r24
    168c:	08 95       	ret

0000168e <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    169a:	68 30       	cpi	r22, 0x08	; 8
    169c:	59 f4       	brne	.+22     	; 0x16b4 <oled_print_char+0x26>
		font_address = &font8[character-' '];
    169e:	08 2f       	mov	r16, r24
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	00 0f       	add	r16, r16
    16a4:	11 1f       	adc	r17, r17
    16a6:	00 0f       	add	r16, r16
    16a8:	11 1f       	adc	r17, r17
    16aa:	00 0f       	add	r16, r16
    16ac:	11 1f       	adc	r17, r17
    16ae:	0b 50       	subi	r16, 0x0B	; 11
    16b0:	1d 4f       	sbci	r17, 0xFD	; 253
    16b2:	1a c0       	rjmp	.+52     	; 0x16e8 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    16b4:	65 30       	cpi	r22, 0x05	; 5
    16b6:	71 f4       	brne	.+28     	; 0x16d4 <oled_print_char+0x46>
		font_address = &font5[character-' '];
    16b8:	08 2f       	mov	r16, r24
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	00 52       	subi	r16, 0x20	; 32
    16be:	11 09       	sbc	r17, r1
    16c0:	c8 01       	movw	r24, r16
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	08 0f       	add	r16, r24
    16cc:	19 1f       	adc	r17, r25
    16ce:	06 5e       	subi	r16, 0xE6	; 230
    16d0:	1d 4f       	sbci	r17, 0xFD	; 253
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    16d4:	64 30       	cpi	r22, 0x04	; 4
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    16d8:	08 2f       	mov	r16, r24
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	00 0f       	add	r16, r16
    16de:	11 1f       	adc	r17, r17
    16e0:	00 0f       	add	r16, r16
    16e2:	11 1f       	adc	r17, r17
    16e4:	02 5e       	subi	r16, 0xE2	; 226
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    16e8:	45 2b       	or	r20, r21
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    16ec:	e6 2e       	mov	r14, r22
    16ee:	f1 2c       	mov	r15, r1
    16f0:	1e 14       	cp	r1, r14
    16f2:	1f 04       	cpc	r1, r15
    16f4:	9c f0       	brlt	.+38     	; 0x171c <oled_print_char+0x8e>
    16f6:	1f c0       	rjmp	.+62     	; 0x1736 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    16f8:	e6 2e       	mov	r14, r22
    16fa:	f1 2c       	mov	r15, r1
    16fc:	1e 14       	cp	r1, r14
    16fe:	1f 04       	cpc	r1, r15
    1700:	d4 f4       	brge	.+52     	; 0x1736 <oled_print_char+0xa8>
    1702:	c0 e0       	ldi	r28, 0x00	; 0
    1704:	d0 e0       	ldi	r29, 0x00	; 0
    1706:	fe 01       	movw	r30, r28
    1708:	e0 0f       	add	r30, r16
    170a:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    170c:	84 91       	lpm	r24, Z
    170e:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1712:	21 96       	adiw	r28, 0x01	; 1
    1714:	ce 15       	cp	r28, r14
    1716:	df 05       	cpc	r29, r15
    1718:	b4 f3       	brlt	.-20     	; 0x1706 <oled_print_char+0x78>
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    171c:	c0 e0       	ldi	r28, 0x00	; 0
    171e:	d0 e0       	ldi	r29, 0x00	; 0
    1720:	fe 01       	movw	r30, r28
    1722:	e0 0f       	add	r30, r16
    1724:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    1726:	84 91       	lpm	r24, Z
    1728:	80 95       	com	r24
    172a:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    172e:	21 96       	adiw	r28, 0x01	; 1
    1730:	ce 15       	cp	r28, r14
    1732:	df 05       	cpc	r29, r15
    1734:	ac f3       	brlt	.-22     	; 0x1720 <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	08 95       	ret

00001744 <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    1744:	80 91 b1 01 	lds	r24, 0x01B1
    1748:	90 91 b2 01 	lds	r25, 0x01B2
    174c:	89 2b       	or	r24, r25
    174e:	89 f0       	breq	.+34     	; 0x1772 <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    1750:	80 91 c1 02 	lds	r24, 0x02C1
    1754:	90 91 c2 02 	lds	r25, 0x02C2
    1758:	81 15       	cp	r24, r1
    175a:	24 e0       	ldi	r18, 0x04	; 4
    175c:	92 07       	cpc	r25, r18
    175e:	5c f4       	brge	.+22     	; 0x1776 <oled_read_data+0x32>
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    1760:	20 91 ad 01 	lds	r18, 0x01AD
    1764:	30 91 ae 01 	lds	r19, 0x01AE
    1768:	f9 01       	movw	r30, r18
    176a:	e8 0f       	add	r30, r24
    176c:	f9 1f       	adc	r31, r25
    176e:	80 81       	ld	r24, Z
    1770:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	08 95       	ret
}

char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			return 0x00;
    1776:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    1778:	08 95       	ret

0000177a <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    177a:	40 91 b1 01 	lds	r20, 0x01B1
    177e:	50 91 b2 01 	lds	r21, 0x01B2
    1782:	45 2b       	or	r20, r21
    1784:	d1 f0       	breq	.+52     	; 0x17ba <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    1786:	20 91 c1 02 	lds	r18, 0x02C1
    178a:	30 91 c2 02 	lds	r19, 0x02C2
    178e:	2f 77       	andi	r18, 0x7F	; 127
    1790:	30 78       	andi	r19, 0x80	; 128
    1792:	33 23       	and	r19, r19
    1794:	34 f4       	brge	.+12     	; 0x17a2 <oled_goto_line+0x28>
    1796:	21 50       	subi	r18, 0x01	; 1
    1798:	31 09       	sbc	r19, r1
    179a:	20 68       	ori	r18, 0x80	; 128
    179c:	3f 6f       	ori	r19, 0xFF	; 255
    179e:	2f 5f       	subi	r18, 0xFF	; 255
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	96 95       	lsr	r25
    17a4:	98 2f       	mov	r25, r24
    17a6:	88 27       	eor	r24, r24
    17a8:	97 95       	ror	r25
    17aa:	87 95       	ror	r24
    17ac:	28 0f       	add	r18, r24
    17ae:	39 1f       	adc	r19, r25
    17b0:	30 93 c2 02 	sts	0x02C2, r19
    17b4:	20 93 c1 02 	sts	0x02C1, r18
    17b8:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    17ba:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    17bc:	e0 91 af 01 	lds	r30, 0x01AF
    17c0:	f0 91 b0 01 	lds	r31, 0x01B0
    17c4:	80 83       	st	Z, r24
    17c6:	08 95       	ret

000017c8 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    17c8:	20 91 b1 01 	lds	r18, 0x01B1
    17cc:	30 91 b2 01 	lds	r19, 0x01B2
    17d0:	23 2b       	or	r18, r19
    17d2:	c1 f0       	breq	.+48     	; 0x1804 <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    17d4:	40 91 c1 02 	lds	r20, 0x02C1
    17d8:	50 91 c2 02 	lds	r21, 0x02C2
    17dc:	9a 01       	movw	r18, r20
    17de:	2f 77       	andi	r18, 0x7F	; 127
    17e0:	30 78       	andi	r19, 0x80	; 128
    17e2:	33 23       	and	r19, r19
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <oled_goto_column+0x2a>
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	31 09       	sbc	r19, r1
    17ea:	20 68       	ori	r18, 0x80	; 128
    17ec:	3f 6f       	ori	r19, 0xFF	; 255
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	42 1b       	sub	r20, r18
    17f4:	53 0b       	sbc	r21, r19
    17f6:	84 0f       	add	r24, r20
    17f8:	95 1f       	adc	r25, r21
    17fa:	90 93 c2 02 	sts	0x02C2, r25
    17fe:	80 93 c1 02 	sts	0x02C1, r24
    1802:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1804:	e0 91 af 01 	lds	r30, 0x01AF
    1808:	f0 91 b0 01 	lds	r31, 0x01B0
    180c:	10 82       	st	Z, r1
    180e:	e0 91 af 01 	lds	r30, 0x01AF
    1812:	f0 91 b0 01 	lds	r31, 0x01B0
    1816:	80 e1       	ldi	r24, 0x10	; 16
    1818:	80 83       	st	Z, r24
    181a:	08 95       	ret

0000181c <oled_print_string>:
	TIMSK = (1 << OCIE2);					
	int OCRA_num = (long)F_CPU/(refresh_rate*1024);
	OCR2 = OCRA_num; //Sets the value for the compare match to 80
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    181c:	6f 92       	push	r6
    181e:	7f 92       	push	r7
    1820:	8f 92       	push	r8
    1822:	9f 92       	push	r9
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	ec 01       	movw	r28, r24
    183a:	96 2e       	mov	r9, r22
    183c:	74 2e       	mov	r7, r20
    183e:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    1840:	86 2f       	mov	r24, r22
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_goto_column>
	oled_goto_line(line);
    1848:	87 2d       	mov	r24, r7
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
	
	int length = strlen(string);
    1850:	fe 01       	movw	r30, r28
    1852:	01 90       	ld	r0, Z+
    1854:	00 20       	and	r0, r0
    1856:	e9 f7       	brne	.-6      	; 0x1852 <oled_print_string+0x36>
    1858:	31 97       	sbiw	r30, 0x01	; 1
    185a:	6f 01       	movw	r12, r30
    185c:	cc 1a       	sub	r12, r28
    185e:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    1860:	1c 14       	cp	r1, r12
    1862:	1d 04       	cpc	r1, r13
    1864:	24 f5       	brge	.+72     	; 0x18ae <oled_print_string+0x92>
    1866:	7e 01       	movw	r14, r28
    1868:	c0 e0       	ldi	r28, 0x00	; 0
    186a:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    186c:	8f e7       	ldi	r24, 0x7F	; 127
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	5c 01       	movw	r10, r24
    1872:	a8 18       	sub	r10, r8
    1874:	b1 08       	sbc	r11, r1
			column = 0;
    1876:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    1878:	a8 01       	movw	r20, r16
    187a:	68 2d       	mov	r22, r8
    187c:	f7 01       	movw	r30, r14
    187e:	81 91       	ld	r24, Z+
    1880:	7f 01       	movw	r14, r30
    1882:	0e 94 47 0b 	call	0x168e	; 0x168e <oled_print_char>
		column = column + font_size;
    1886:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    1888:	89 2d       	mov	r24, r9
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a8 16       	cp	r10, r24
    188e:	b9 06       	cpc	r11, r25
    1890:	54 f4       	brge	.+20     	; 0x18a6 <oled_print_string+0x8a>
			column = 0;
			line++;
    1892:	73 94       	inc	r7
			oled_goto_column(column);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_goto_column>
			oled_goto_line(line);
    189c:	87 2d       	mov	r24, r7
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    18a4:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	cc 16       	cp	r12, r28
    18aa:	dd 06       	cpc	r13, r29
    18ac:	29 f7       	brne	.-54     	; 0x1878 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	9f 90       	pop	r9
    18c4:	8f 90       	pop	r8
    18c6:	7f 90       	pop	r7
    18c8:	6f 90       	pop	r6
    18ca:	08 95       	ret

000018cc <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    18cc:	cf 93       	push	r28
	oled_goto_line(line);
    18ce:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
	oled_goto_column(0);
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    18da:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    18e2:	cf 5f       	subi	r28, 0xFF	; 255
    18e4:	c0 38       	cpi	r28, 0x80	; 128
    18e6:	d1 f7       	brne	.-12     	; 0x18dc <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	c0 e0       	ldi	r28, 0x00	; 0
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    18f4:	ce 01       	movw	r24, r28
    18f6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <oled_clear_line>
    18fa:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    18fc:	c8 30       	cpi	r28, 0x08	; 8
    18fe:	d1 05       	cpc	r29, r1
    1900:	c9 f7       	brne	.-14     	; 0x18f4 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <oled_init>:

volatile uint8_t *oled_command = 0x1000;
volatile uint8_t *oled_back_buffer = 0x1800;
volatile uint8_t *oled_front_buffer = 0x1200;

void oled_init(){
    1908:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    190a:	e0 91 af 01 	lds	r30, 0x01AF
    190e:	f0 91 b0 01 	lds	r31, 0x01B0
    1912:	8e ea       	ldi	r24, 0xAE	; 174
    1914:	80 83       	st	Z, r24
    1916:	e0 91 af 01 	lds	r30, 0x01AF
    191a:	f0 91 b0 01 	lds	r31, 0x01B0
    191e:	81 ea       	ldi	r24, 0xA1	; 161
    1920:	80 83       	st	Z, r24
    1922:	e0 91 af 01 	lds	r30, 0x01AF
    1926:	f0 91 b0 01 	lds	r31, 0x01B0
    192a:	8a ed       	ldi	r24, 0xDA	; 218
    192c:	80 83       	st	Z, r24
    192e:	e0 91 af 01 	lds	r30, 0x01AF
    1932:	f0 91 b0 01 	lds	r31, 0x01B0
    1936:	82 e1       	ldi	r24, 0x12	; 18
    1938:	80 83       	st	Z, r24
    193a:	e0 91 af 01 	lds	r30, 0x01AF
    193e:	f0 91 b0 01 	lds	r31, 0x01B0
    1942:	88 ec       	ldi	r24, 0xC8	; 200
    1944:	80 83       	st	Z, r24
    1946:	e0 91 af 01 	lds	r30, 0x01AF
    194a:	f0 91 b0 01 	lds	r31, 0x01B0
    194e:	88 ea       	ldi	r24, 0xA8	; 168
    1950:	80 83       	st	Z, r24
    1952:	e0 91 af 01 	lds	r30, 0x01AF
    1956:	f0 91 b0 01 	lds	r31, 0x01B0
    195a:	8f e3       	ldi	r24, 0x3F	; 63
    195c:	80 83       	st	Z, r24
    195e:	e0 91 af 01 	lds	r30, 0x01AF
    1962:	f0 91 b0 01 	lds	r31, 0x01B0
    1966:	85 ed       	ldi	r24, 0xD5	; 213
    1968:	80 83       	st	Z, r24
    196a:	e0 91 af 01 	lds	r30, 0x01AF
    196e:	f0 91 b0 01 	lds	r31, 0x01B0
    1972:	80 e8       	ldi	r24, 0x80	; 128
    1974:	80 83       	st	Z, r24
    1976:	e0 91 af 01 	lds	r30, 0x01AF
    197a:	f0 91 b0 01 	lds	r31, 0x01B0
    197e:	81 e8       	ldi	r24, 0x81	; 129
    1980:	80 83       	st	Z, r24
    1982:	e0 91 af 01 	lds	r30, 0x01AF
    1986:	f0 91 b0 01 	lds	r31, 0x01B0
    198a:	c0 e5       	ldi	r28, 0x50	; 80
    198c:	c0 83       	st	Z, r28
    198e:	e0 91 af 01 	lds	r30, 0x01AF
    1992:	f0 91 b0 01 	lds	r31, 0x01B0
    1996:	89 ed       	ldi	r24, 0xD9	; 217
    1998:	80 83       	st	Z, r24
    199a:	e0 91 af 01 	lds	r30, 0x01AF
    199e:	f0 91 b0 01 	lds	r31, 0x01B0
    19a2:	81 e2       	ldi	r24, 0x21	; 33
    19a4:	80 83       	st	Z, r24
    19a6:	e0 91 af 01 	lds	r30, 0x01AF
    19aa:	f0 91 b0 01 	lds	r31, 0x01B0
    19ae:	80 e2       	ldi	r24, 0x20	; 32
    19b0:	80 83       	st	Z, r24
    19b2:	e0 91 af 01 	lds	r30, 0x01AF
    19b6:	f0 91 b0 01 	lds	r31, 0x01B0
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	80 83       	st	Z, r24
    19be:	e0 91 af 01 	lds	r30, 0x01AF
    19c2:	f0 91 b0 01 	lds	r31, 0x01B0
    19c6:	8b ed       	ldi	r24, 0xDB	; 219
    19c8:	80 83       	st	Z, r24
    19ca:	e0 91 af 01 	lds	r30, 0x01AF
    19ce:	f0 91 b0 01 	lds	r31, 0x01B0
    19d2:	80 e3       	ldi	r24, 0x30	; 48
    19d4:	80 83       	st	Z, r24
    19d6:	e0 91 af 01 	lds	r30, 0x01AF
    19da:	f0 91 b0 01 	lds	r31, 0x01B0
    19de:	8d ea       	ldi	r24, 0xAD	; 173
    19e0:	80 83       	st	Z, r24
    19e2:	e0 91 af 01 	lds	r30, 0x01AF
    19e6:	f0 91 b0 01 	lds	r31, 0x01B0
    19ea:	10 82       	st	Z, r1
    19ec:	e0 91 af 01 	lds	r30, 0x01AF
    19f0:	f0 91 b0 01 	lds	r31, 0x01B0
    19f4:	84 ea       	ldi	r24, 0xA4	; 164
    19f6:	80 83       	st	Z, r24
    19f8:	e0 91 af 01 	lds	r30, 0x01AF
    19fc:	f0 91 b0 01 	lds	r31, 0x01B0
    1a00:	86 ea       	ldi	r24, 0xA6	; 166
    1a02:	80 83       	st	Z, r24
    1a04:	e0 91 af 01 	lds	r30, 0x01AF
    1a08:	f0 91 b0 01 	lds	r31, 0x01B0
    1a0c:	8f ea       	ldi	r24, 0xAF	; 175
    1a0e:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen();	  //Sets all buffer data to 0
    1a10:	0e 94 76 0c 	call	0x18ec	; 0x18ec <oled_clear_screen>
	
	//Set up timer, enable timer/counter compare match interrupt for 60 FPS
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20) | (1 << WGM21);  //clock source to be used by the Timer/Counter clkI/O/1024 -  CTC mode
    1a14:	8f e0       	ldi	r24, 0x0F	; 15
    1a16:	87 bd       	out	0x27, r24	; 39
	TIMSK = (1 << OCIE2);					
    1a18:	80 e1       	ldi	r24, 0x10	; 16
    1a1a:	89 bf       	out	0x39, r24	; 57
	int OCRA_num = (long)F_CPU/(refresh_rate*1024);
	OCR2 = OCRA_num; //Sets the value for the compare match to 80
    1a1c:	c2 bd       	out	0x22, r28	; 34
}
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    1a22:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a24:	e0 91 af 01 	lds	r30, 0x01AF
    1a28:	f0 91 b0 01 	lds	r31, 0x01B0
    1a2c:	10 82       	st	Z, r1
    1a2e:	e0 91 af 01 	lds	r30, 0x01AF
    1a32:	f0 91 b0 01 	lds	r31, 0x01B0
    1a36:	80 e1       	ldi	r24, 0x10	; 16
    1a38:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    1a3a:	80 91 b1 01 	lds	r24, 0x01B1
    1a3e:	90 91 b2 01 	lds	r25, 0x01B2
    1a42:	89 2b       	or	r24, r25
    1a44:	21 f1       	breq	.+72     	; 0x1a8e <oled_refresh+0x6c>
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a4c:	c0 e0       	ldi	r28, 0x00	; 0
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a50:	e0 91 af 01 	lds	r30, 0x01AF
    1a54:	f0 91 b0 01 	lds	r31, 0x01B0
    1a58:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    1a5e:	e0 91 ab 01 	lds	r30, 0x01AB
    1a62:	f0 91 ac 01 	lds	r31, 0x01AC
    1a66:	9c 01       	movw	r18, r24
    1a68:	24 0f       	add	r18, r20
    1a6a:	35 1f       	adc	r19, r21
    1a6c:	a0 91 ad 01 	lds	r26, 0x01AD
    1a70:	b0 91 ae 01 	lds	r27, 0x01AE
    1a74:	a2 0f       	add	r26, r18
    1a76:	b3 1f       	adc	r27, r19
    1a78:	2c 91       	ld	r18, X
    1a7a:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	80 38       	cpi	r24, 0x80	; 128
    1a80:	91 05       	cpc	r25, r1
    1a82:	69 f7       	brne	.-38     	; 0x1a5e <oled_refresh+0x3c>
    1a84:	6f 5f       	subi	r22, 0xFF	; 255
    1a86:	40 58       	subi	r20, 0x80	; 128
    1a88:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1a8a:	68 3b       	cpi	r22, 0xB8	; 184
    1a8c:	09 f7       	brne	.-62     	; 0x1a50 <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <oled_invert_rectangle>:
	}
	
	//TODO: make it draw correctly in every direction
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1a92:	6f 92       	push	r6
    1a94:	7f 92       	push	r7
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	8c 01       	movw	r16, r24
    1ab0:	ea 01       	movw	r28, r20
	if(y1 > y2){
    1ab2:	26 17       	cp	r18, r22
    1ab4:	37 07       	cpc	r19, r23
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <oled_invert_rectangle+0x30>
    1ab8:	96 2f       	mov	r25, r22
    1aba:	87 2f       	mov	r24, r23
		int temp = y1;
		y1 = y2;
    1abc:	b9 01       	movw	r22, r18
		y2 = temp;
    1abe:	29 2f       	mov	r18, r25
    1ac0:	38 2f       	mov	r19, r24
	}
	
	if(x1 > x2){
    1ac2:	c0 17       	cp	r28, r16
    1ac4:	d1 07       	cpc	r29, r17
    1ac6:	14 f4       	brge	.+4      	; 0x1acc <oled_invert_rectangle+0x3a>
		int temp = x1;
		x1 = y2;
		x2 = temp;
    1ac8:	e8 01       	movw	r28, r16
		y2 = temp;
	}
	
	if(x1 > x2){
		int temp = x1;
		x1 = y2;
    1aca:	89 01       	movw	r16, r18
		x2 = temp;
	}
	int t = 255 << y1%8;		//Top line to be filled
    1acc:	cb 01       	movw	r24, r22
    1ace:	87 70       	andi	r24, 0x07	; 7
    1ad0:	90 78       	andi	r25, 0x80	; 128
    1ad2:	99 23       	and	r25, r25
    1ad4:	24 f4       	brge	.+8      	; 0x1ade <oled_invert_rectangle+0x4c>
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	88 6f       	ori	r24, 0xF8	; 248
    1ada:	9f 6f       	ori	r25, 0xFF	; 255
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	4f ef       	ldi	r20, 0xFF	; 255
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	6a 01       	movw	r12, r20
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <oled_invert_rectangle+0x58>
    1ae6:	cc 0c       	add	r12, r12
    1ae8:	dd 1c       	adc	r13, r13
    1aea:	8a 95       	dec	r24
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <oled_invert_rectangle+0x54>
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
    1aee:	c9 01       	movw	r24, r18
    1af0:	87 70       	andi	r24, 0x07	; 7
    1af2:	90 78       	andi	r25, 0x80	; 128
    1af4:	99 23       	and	r25, r25
    1af6:	24 f4       	brge	.+8      	; 0x1b00 <oled_invert_rectangle+0x6e>
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	88 6f       	ori	r24, 0xF8	; 248
    1afc:	9f 6f       	ori	r25, 0xFF	; 255
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	48 e0       	ldi	r20, 0x08	; 8
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	5a 01       	movw	r10, r20
    1b06:	a8 1a       	sub	r10, r24
    1b08:	b9 0a       	sbc	r11, r25
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	ac 01       	movw	r20, r24
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <oled_invert_rectangle+0x84>
    1b12:	55 95       	asr	r21
    1b14:	47 95       	ror	r20
    1b16:	aa 94       	dec	r10
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <oled_invert_rectangle+0x80>
    1b1a:	5a 01       	movw	r10, r20
	if(y1/8 != y2/8){			//Over several lines
    1b1c:	3b 01       	movw	r6, r22
    1b1e:	77 23       	and	r23, r23
    1b20:	1c f4       	brge	.+6      	; 0x1b28 <oled_invert_rectangle+0x96>
    1b22:	57 e0       	ldi	r21, 0x07	; 7
    1b24:	65 0e       	add	r6, r21
    1b26:	71 1c       	adc	r7, r1
    1b28:	75 94       	asr	r7
    1b2a:	67 94       	ror	r6
    1b2c:	75 94       	asr	r7
    1b2e:	67 94       	ror	r6
    1b30:	75 94       	asr	r7
    1b32:	67 94       	ror	r6
    1b34:	79 01       	movw	r14, r18
    1b36:	33 23       	and	r19, r19
    1b38:	1c f4       	brge	.+6      	; 0x1b40 <oled_invert_rectangle+0xae>
    1b3a:	87 e0       	ldi	r24, 0x07	; 7
    1b3c:	e8 0e       	add	r14, r24
    1b3e:	f1 1c       	adc	r15, r1
    1b40:	f5 94       	asr	r15
    1b42:	e7 94       	ror	r14
    1b44:	f5 94       	asr	r15
    1b46:	e7 94       	ror	r14
    1b48:	f5 94       	asr	r15
    1b4a:	e7 94       	ror	r14
    1b4c:	6e 14       	cp	r6, r14
    1b4e:	7f 04       	cpc	r7, r15
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <oled_invert_rectangle+0xc2>
    1b52:	4d c0       	rjmp	.+154    	; 0x1bee <oled_invert_rectangle+0x15c>
		//Filling top
		oled_goto_line(y1/8);
    1b54:	c3 01       	movw	r24, r6
    1b56:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1b5a:	0c 17       	cp	r16, r28
    1b5c:	1d 07       	cpc	r17, r29
    1b5e:	7c f4       	brge	.+30     	; 0x1b7e <oled_invert_rectangle+0xec>
    1b60:	48 01       	movw	r8, r16
			oled_goto_column(x);
    1b62:	c4 01       	movw	r24, r8
    1b64:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_goto_column>
			oled_write_data(t ^ oled_read_data());
    1b68:	0e 94 a2 0b 	call	0x1744	; 0x1744 <oled_read_data>
    1b6c:	8c 25       	eor	r24, r12
    1b6e:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
	int t = 255 << y1%8;		//Top line to be filled
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
	if(y1/8 != y2/8){			//Over several lines
		//Filling top
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1b72:	4f ef       	ldi	r20, 0xFF	; 255
    1b74:	84 1a       	sub	r8, r20
    1b76:	94 0a       	sbc	r9, r20
    1b78:	8c 16       	cp	r8, r28
    1b7a:	9d 06       	cpc	r9, r29
    1b7c:	94 f3       	brlt	.-28     	; 0x1b62 <oled_invert_rectangle+0xd0>
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1b7e:	5f ef       	ldi	r21, 0xFF	; 255
    1b80:	65 1a       	sub	r6, r21
    1b82:	75 0a       	sbc	r7, r21
    1b84:	6e 14       	cp	r6, r14
    1b86:	7f 04       	cpc	r7, r15
    1b88:	f4 f4       	brge	.+60     	; 0x1bc6 <oled_invert_rectangle+0x134>
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1b8a:	80 2e       	mov	r8, r16
    1b8c:	91 2e       	mov	r9, r17
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
    1b8e:	c3 01       	movw	r24, r6
    1b90:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
			for (int x = x1; x < x2; x++){
    1b94:	0c 17       	cp	r16, r28
    1b96:	1d 07       	cpc	r17, r29
    1b98:	84 f4       	brge	.+32     	; 0x1bba <oled_invert_rectangle+0x128>
    1b9a:	c8 2c       	mov	r12, r8
    1b9c:	d9 2c       	mov	r13, r9
				oled_goto_line(x);
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
				oled_write_data(255 ^ oled_read_data());
    1ba4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <oled_read_data>
    1ba8:	80 95       	com	r24
    1baa:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	c8 1a       	sub	r12, r24
    1bb2:	d8 0a       	sbc	r13, r24
    1bb4:	cc 16       	cp	r12, r28
    1bb6:	dd 06       	cpc	r13, r29
    1bb8:	94 f3       	brlt	.-28     	; 0x1b9e <oled_invert_rectangle+0x10c>
		for(int x = x1; x < x2; x++){
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1bba:	4f ef       	ldi	r20, 0xFF	; 255
    1bbc:	64 1a       	sub	r6, r20
    1bbe:	74 0a       	sbc	r7, r20
    1bc0:	6e 14       	cp	r6, r14
    1bc2:	7f 04       	cpc	r7, r15
    1bc4:	24 f3       	brlt	.-56     	; 0x1b8e <oled_invert_rectangle+0xfc>
				oled_goto_line(x);
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1bcc:	0c 17       	cp	r16, r28
    1bce:	1d 07       	cpc	r17, r29
    1bd0:	1c f5       	brge	.+70     	; 0x1c18 <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_goto_column>
			oled_write_data(b ^ oled_read_data());
    1bd8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <oled_read_data>
    1bdc:	8a 25       	eor	r24, r10
    1bde:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
		for(int x = x1; x < x2; x++){
    1be2:	0f 5f       	subi	r16, 0xFF	; 255
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	0c 17       	cp	r16, r28
    1be8:	1d 07       	cpc	r17, r29
    1bea:	9c f3       	brlt	.-26     	; 0x1bd2 <oled_invert_rectangle+0x140>
    1bec:	15 c0       	rjmp	.+42     	; 0x1c18 <oled_invert_rectangle+0x186>
			oled_goto_column(x);
			oled_write_data(b ^ oled_read_data());
		}
	}
	else{
		int m = t & b;
    1bee:	ca 20       	and	r12, r10
    1bf0:	db 20       	and	r13, r11
		oled_goto_line(y1/8);
    1bf2:	c3 01       	movw	r24, r6
    1bf4:	0e 94 bd 0b 	call	0x177a	; 0x177a <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1bf8:	0c 17       	cp	r16, r28
    1bfa:	1d 07       	cpc	r17, r29
    1bfc:	6c f4       	brge	.+26     	; 0x1c18 <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1bfe:	c8 01       	movw	r24, r16
    1c00:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_goto_column>
			oled_write_data(m ^ oled_read_data());
    1c04:	0e 94 a2 0b 	call	0x1744	; 0x1744 <oled_read_data>
    1c08:	8c 25       	eor	r24, r12
    1c0a:	0e 94 21 0b 	call	0x1642	; 0x1642 <oled_write_data>
		}
	}
	else{
		int m = t & b;
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1c0e:	0f 5f       	subi	r16, 0xFF	; 255
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	0c 17       	cp	r16, r28
    1c14:	1d 07       	cpc	r17, r29
    1c16:	9c f3       	brlt	.-26     	; 0x1bfe <oled_invert_rectangle+0x16c>
			oled_goto_column(x);
			oled_write_data(m ^ oled_read_data());
		}
	}
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	bf 90       	pop	r11
    1c2a:	af 90       	pop	r10
    1c2c:	9f 90       	pop	r9
    1c2e:	8f 90       	pop	r8
    1c30:	7f 90       	pop	r7
    1c32:	6f 90       	pop	r6
    1c34:	08 95       	ret

00001c36 <__vector_10>:

ISR(TIMER2_COMP_vect)
{
    1c36:	1f 92       	push	r1
    1c38:	0f 92       	push	r0
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	0f 92       	push	r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
	if(state == in_menu){
    1c44:	80 91 bc 02 	lds	r24, 0x02BC
    1c48:	81 11       	cpse	r24, r1
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <__vector_10+0x24>
		oled_refresh_timer = 1;	
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	90 93 be 02 	sts	0x02BE, r25
    1c54:	80 93 bd 02 	sts	0x02BD, r24
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <__vector_10+0x34>
	}
	else if(state == in_game){
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	31 f4       	brne	.+12     	; 0x1c6a <__vector_10+0x34>
		game_time_passed = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	90 93 aa 01 	sts	0x01AA, r25
    1c66:	80 93 a9 01 	sts	0x01A9, r24
	}
	
    1c6a:	9f 91       	pop	r25
    1c6c:	8f 91       	pop	r24
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <touch_init>:
#include "../lib/settings.h"
#include "touch.h"
#include "../lib/adc.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    1c78:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    1c7a:	b9 98       	cbi	0x17, 1	; 23
    1c7c:	08 95       	ret

00001c7e <__subsf3>:
    1c7e:	50 58       	subi	r21, 0x80	; 128

00001c80 <__addsf3>:
    1c80:	bb 27       	eor	r27, r27
    1c82:	aa 27       	eor	r26, r26
    1c84:	0e d0       	rcall	.+28     	; 0x1ca2 <__addsf3x>
    1c86:	d4 c1       	rjmp	.+936    	; 0x2030 <__fp_round>
    1c88:	c5 d1       	rcall	.+906    	; 0x2014 <__fp_pscA>
    1c8a:	30 f0       	brcs	.+12     	; 0x1c98 <__addsf3+0x18>
    1c8c:	ca d1       	rcall	.+916    	; 0x2022 <__fp_pscB>
    1c8e:	20 f0       	brcs	.+8      	; 0x1c98 <__addsf3+0x18>
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <__addsf3+0x1e>
    1c92:	9f 3f       	cpi	r25, 0xFF	; 255
    1c94:	11 f4       	brne	.+4      	; 0x1c9a <__addsf3+0x1a>
    1c96:	1e f4       	brtc	.+6      	; 0x1c9e <__addsf3+0x1e>
    1c98:	95 c1       	rjmp	.+810    	; 0x1fc4 <__fp_nan>
    1c9a:	0e f4       	brtc	.+2      	; 0x1c9e <__addsf3+0x1e>
    1c9c:	e0 95       	com	r30
    1c9e:	e7 fb       	bst	r30, 7
    1ca0:	8b c1       	rjmp	.+790    	; 0x1fb8 <__fp_inf>

00001ca2 <__addsf3x>:
    1ca2:	e9 2f       	mov	r30, r25
    1ca4:	d6 d1       	rcall	.+940    	; 0x2052 <__fp_split3>
    1ca6:	80 f3       	brcs	.-32     	; 0x1c88 <__addsf3+0x8>
    1ca8:	ba 17       	cp	r27, r26
    1caa:	62 07       	cpc	r22, r18
    1cac:	73 07       	cpc	r23, r19
    1cae:	84 07       	cpc	r24, r20
    1cb0:	95 07       	cpc	r25, r21
    1cb2:	18 f0       	brcs	.+6      	; 0x1cba <__addsf3x+0x18>
    1cb4:	71 f4       	brne	.+28     	; 0x1cd2 <__addsf3x+0x30>
    1cb6:	9e f5       	brtc	.+102    	; 0x1d1e <__addsf3x+0x7c>
    1cb8:	ee c1       	rjmp	.+988    	; 0x2096 <__fp_zero>
    1cba:	0e f4       	brtc	.+2      	; 0x1cbe <__addsf3x+0x1c>
    1cbc:	e0 95       	com	r30
    1cbe:	0b 2e       	mov	r0, r27
    1cc0:	ba 2f       	mov	r27, r26
    1cc2:	a0 2d       	mov	r26, r0
    1cc4:	0b 01       	movw	r0, r22
    1cc6:	b9 01       	movw	r22, r18
    1cc8:	90 01       	movw	r18, r0
    1cca:	0c 01       	movw	r0, r24
    1ccc:	ca 01       	movw	r24, r20
    1cce:	a0 01       	movw	r20, r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	ff 27       	eor	r31, r31
    1cd4:	59 1b       	sub	r21, r25
    1cd6:	99 f0       	breq	.+38     	; 0x1cfe <__addsf3x+0x5c>
    1cd8:	59 3f       	cpi	r21, 0xF9	; 249
    1cda:	50 f4       	brcc	.+20     	; 0x1cf0 <__addsf3x+0x4e>
    1cdc:	50 3e       	cpi	r21, 0xE0	; 224
    1cde:	68 f1       	brcs	.+90     	; 0x1d3a <__addsf3x+0x98>
    1ce0:	1a 16       	cp	r1, r26
    1ce2:	f0 40       	sbci	r31, 0x00	; 0
    1ce4:	a2 2f       	mov	r26, r18
    1ce6:	23 2f       	mov	r18, r19
    1ce8:	34 2f       	mov	r19, r20
    1cea:	44 27       	eor	r20, r20
    1cec:	58 5f       	subi	r21, 0xF8	; 248
    1cee:	f3 cf       	rjmp	.-26     	; 0x1cd6 <__addsf3x+0x34>
    1cf0:	46 95       	lsr	r20
    1cf2:	37 95       	ror	r19
    1cf4:	27 95       	ror	r18
    1cf6:	a7 95       	ror	r26
    1cf8:	f0 40       	sbci	r31, 0x00	; 0
    1cfa:	53 95       	inc	r21
    1cfc:	c9 f7       	brne	.-14     	; 0x1cf0 <__addsf3x+0x4e>
    1cfe:	7e f4       	brtc	.+30     	; 0x1d1e <__addsf3x+0x7c>
    1d00:	1f 16       	cp	r1, r31
    1d02:	ba 0b       	sbc	r27, r26
    1d04:	62 0b       	sbc	r22, r18
    1d06:	73 0b       	sbc	r23, r19
    1d08:	84 0b       	sbc	r24, r20
    1d0a:	ba f0       	brmi	.+46     	; 0x1d3a <__addsf3x+0x98>
    1d0c:	91 50       	subi	r25, 0x01	; 1
    1d0e:	a1 f0       	breq	.+40     	; 0x1d38 <__addsf3x+0x96>
    1d10:	ff 0f       	add	r31, r31
    1d12:	bb 1f       	adc	r27, r27
    1d14:	66 1f       	adc	r22, r22
    1d16:	77 1f       	adc	r23, r23
    1d18:	88 1f       	adc	r24, r24
    1d1a:	c2 f7       	brpl	.-16     	; 0x1d0c <__addsf3x+0x6a>
    1d1c:	0e c0       	rjmp	.+28     	; 0x1d3a <__addsf3x+0x98>
    1d1e:	ba 0f       	add	r27, r26
    1d20:	62 1f       	adc	r22, r18
    1d22:	73 1f       	adc	r23, r19
    1d24:	84 1f       	adc	r24, r20
    1d26:	48 f4       	brcc	.+18     	; 0x1d3a <__addsf3x+0x98>
    1d28:	87 95       	ror	r24
    1d2a:	77 95       	ror	r23
    1d2c:	67 95       	ror	r22
    1d2e:	b7 95       	ror	r27
    1d30:	f7 95       	ror	r31
    1d32:	9e 3f       	cpi	r25, 0xFE	; 254
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <__addsf3x+0x96>
    1d36:	b3 cf       	rjmp	.-154    	; 0x1c9e <__addsf3+0x1e>
    1d38:	93 95       	inc	r25
    1d3a:	88 0f       	add	r24, r24
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <__addsf3x+0x9e>
    1d3e:	99 27       	eor	r25, r25
    1d40:	ee 0f       	add	r30, r30
    1d42:	97 95       	ror	r25
    1d44:	87 95       	ror	r24
    1d46:	08 95       	ret
    1d48:	65 d1       	rcall	.+714    	; 0x2014 <__fp_pscA>
    1d4a:	58 f0       	brcs	.+22     	; 0x1d62 <__addsf3x+0xc0>
    1d4c:	80 e8       	ldi	r24, 0x80	; 128
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <__addsf3x+0xb2>
    1d52:	9e ef       	ldi	r25, 0xFE	; 254
    1d54:	66 d1       	rcall	.+716    	; 0x2022 <__fp_pscB>
    1d56:	28 f0       	brcs	.+10     	; 0x1d62 <__addsf3x+0xc0>
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	51 e0       	ldi	r21, 0x01	; 1
    1d5c:	59 f4       	brne	.+22     	; 0x1d74 <atan2+0xe>
    1d5e:	5e ef       	ldi	r21, 0xFE	; 254
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <atan2+0xe>
    1d62:	30 c1       	rjmp	.+608    	; 0x1fc4 <__fp_nan>
    1d64:	98 c1       	rjmp	.+816    	; 0x2096 <__fp_zero>

00001d66 <atan2>:
    1d66:	e9 2f       	mov	r30, r25
    1d68:	e0 78       	andi	r30, 0x80	; 128
    1d6a:	73 d1       	rcall	.+742    	; 0x2052 <__fp_split3>
    1d6c:	68 f3       	brcs	.-38     	; 0x1d48 <__addsf3x+0xa6>
    1d6e:	09 2e       	mov	r0, r25
    1d70:	05 2a       	or	r0, r21
    1d72:	c1 f3       	breq	.-16     	; 0x1d64 <__addsf3x+0xc2>
    1d74:	26 17       	cp	r18, r22
    1d76:	37 07       	cpc	r19, r23
    1d78:	48 07       	cpc	r20, r24
    1d7a:	59 07       	cpc	r21, r25
    1d7c:	38 f0       	brcs	.+14     	; 0x1d8c <atan2+0x26>
    1d7e:	0e 2e       	mov	r0, r30
    1d80:	07 f8       	bld	r0, 7
    1d82:	e0 25       	eor	r30, r0
    1d84:	69 f0       	breq	.+26     	; 0x1da0 <atan2+0x3a>
    1d86:	e0 25       	eor	r30, r0
    1d88:	e0 64       	ori	r30, 0x40	; 64
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <atan2+0x3a>
    1d8c:	ef 63       	ori	r30, 0x3F	; 63
    1d8e:	07 f8       	bld	r0, 7
    1d90:	00 94       	com	r0
    1d92:	07 fa       	bst	r0, 7
    1d94:	db 01       	movw	r26, r22
    1d96:	b9 01       	movw	r22, r18
    1d98:	9d 01       	movw	r18, r26
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	ad 01       	movw	r20, r26
    1da0:	ef 93       	push	r30
    1da2:	43 d0       	rcall	.+134    	; 0x1e2a <__divsf3_pse>
    1da4:	45 d1       	rcall	.+650    	; 0x2030 <__fp_round>
    1da6:	0a d0       	rcall	.+20     	; 0x1dbc <atan>
    1da8:	5f 91       	pop	r21
    1daa:	55 23       	and	r21, r21
    1dac:	31 f0       	breq	.+12     	; 0x1dba <atan2+0x54>
    1dae:	2b ed       	ldi	r18, 0xDB	; 219
    1db0:	3f e0       	ldi	r19, 0x0F	; 15
    1db2:	49 e4       	ldi	r20, 0x49	; 73
    1db4:	50 fd       	sbrc	r21, 0
    1db6:	49 ec       	ldi	r20, 0xC9	; 201
    1db8:	63 cf       	rjmp	.-314    	; 0x1c80 <__addsf3>
    1dba:	08 95       	ret

00001dbc <atan>:
    1dbc:	df 93       	push	r29
    1dbe:	dd 27       	eor	r29, r29
    1dc0:	b9 2f       	mov	r27, r25
    1dc2:	bf 77       	andi	r27, 0x7F	; 127
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	16 16       	cp	r1, r22
    1dca:	17 06       	cpc	r1, r23
    1dcc:	48 07       	cpc	r20, r24
    1dce:	5b 07       	cpc	r21, r27
    1dd0:	10 f4       	brcc	.+4      	; 0x1dd6 <atan+0x1a>
    1dd2:	d9 2f       	mov	r29, r25
    1dd4:	67 d1       	rcall	.+718    	; 0x20a4 <inverse>
    1dd6:	9f 93       	push	r25
    1dd8:	8f 93       	push	r24
    1dda:	7f 93       	push	r23
    1ddc:	6f 93       	push	r22
    1dde:	0e d2       	rcall	.+1052   	; 0x21fc <square>
    1de0:	e0 e7       	ldi	r30, 0x70	; 112
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	f2 d0       	rcall	.+484    	; 0x1fca <__fp_powser>
    1de6:	24 d1       	rcall	.+584    	; 0x2030 <__fp_round>
    1de8:	2f 91       	pop	r18
    1dea:	3f 91       	pop	r19
    1dec:	4f 91       	pop	r20
    1dee:	5f 91       	pop	r21
    1df0:	6c d1       	rcall	.+728    	; 0x20ca <__mulsf3x>
    1df2:	dd 23       	and	r29, r29
    1df4:	49 f0       	breq	.+18     	; 0x1e08 <atan+0x4c>
    1df6:	90 58       	subi	r25, 0x80	; 128
    1df8:	a2 ea       	ldi	r26, 0xA2	; 162
    1dfa:	2a ed       	ldi	r18, 0xDA	; 218
    1dfc:	3f e0       	ldi	r19, 0x0F	; 15
    1dfe:	49 ec       	ldi	r20, 0xC9	; 201
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	d0 78       	andi	r29, 0x80	; 128
    1e04:	5d 27       	eor	r21, r29
    1e06:	4d df       	rcall	.-358    	; 0x1ca2 <__addsf3x>
    1e08:	df 91       	pop	r29
    1e0a:	12 c1       	rjmp	.+548    	; 0x2030 <__fp_round>

00001e0c <__divsf3>:
    1e0c:	0c d0       	rcall	.+24     	; 0x1e26 <__divsf3x>
    1e0e:	10 c1       	rjmp	.+544    	; 0x2030 <__fp_round>
    1e10:	08 d1       	rcall	.+528    	; 0x2022 <__fp_pscB>
    1e12:	40 f0       	brcs	.+16     	; 0x1e24 <__divsf3+0x18>
    1e14:	ff d0       	rcall	.+510    	; 0x2014 <__fp_pscA>
    1e16:	30 f0       	brcs	.+12     	; 0x1e24 <__divsf3+0x18>
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <__divsf3+0x16>
    1e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1c:	19 f0       	breq	.+6      	; 0x1e24 <__divsf3+0x18>
    1e1e:	cc c0       	rjmp	.+408    	; 0x1fb8 <__fp_inf>
    1e20:	51 11       	cpse	r21, r1
    1e22:	3a c1       	rjmp	.+628    	; 0x2098 <__fp_szero>
    1e24:	cf c0       	rjmp	.+414    	; 0x1fc4 <__fp_nan>

00001e26 <__divsf3x>:
    1e26:	15 d1       	rcall	.+554    	; 0x2052 <__fp_split3>
    1e28:	98 f3       	brcs	.-26     	; 0x1e10 <__divsf3+0x4>

00001e2a <__divsf3_pse>:
    1e2a:	99 23       	and	r25, r25
    1e2c:	c9 f3       	breq	.-14     	; 0x1e20 <__divsf3+0x14>
    1e2e:	55 23       	and	r21, r21
    1e30:	b1 f3       	breq	.-20     	; 0x1e1e <__divsf3+0x12>
    1e32:	95 1b       	sub	r25, r21
    1e34:	55 0b       	sbc	r21, r21
    1e36:	bb 27       	eor	r27, r27
    1e38:	aa 27       	eor	r26, r26
    1e3a:	62 17       	cp	r22, r18
    1e3c:	73 07       	cpc	r23, r19
    1e3e:	84 07       	cpc	r24, r20
    1e40:	38 f0       	brcs	.+14     	; 0x1e50 <__divsf3_pse+0x26>
    1e42:	9f 5f       	subi	r25, 0xFF	; 255
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	44 1f       	adc	r20, r20
    1e4c:	aa 1f       	adc	r26, r26
    1e4e:	a9 f3       	breq	.-22     	; 0x1e3a <__divsf3_pse+0x10>
    1e50:	33 d0       	rcall	.+102    	; 0x1eb8 <__divsf3_pse+0x8e>
    1e52:	0e 2e       	mov	r0, r30
    1e54:	3a f0       	brmi	.+14     	; 0x1e64 <__divsf3_pse+0x3a>
    1e56:	e0 e8       	ldi	r30, 0x80	; 128
    1e58:	30 d0       	rcall	.+96     	; 0x1eba <__divsf3_pse+0x90>
    1e5a:	91 50       	subi	r25, 0x01	; 1
    1e5c:	50 40       	sbci	r21, 0x00	; 0
    1e5e:	e6 95       	lsr	r30
    1e60:	00 1c       	adc	r0, r0
    1e62:	ca f7       	brpl	.-14     	; 0x1e56 <__divsf3_pse+0x2c>
    1e64:	29 d0       	rcall	.+82     	; 0x1eb8 <__divsf3_pse+0x8e>
    1e66:	fe 2f       	mov	r31, r30
    1e68:	27 d0       	rcall	.+78     	; 0x1eb8 <__divsf3_pse+0x8e>
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	bb 1f       	adc	r27, r27
    1e72:	26 17       	cp	r18, r22
    1e74:	37 07       	cpc	r19, r23
    1e76:	48 07       	cpc	r20, r24
    1e78:	ab 07       	cpc	r26, r27
    1e7a:	b0 e8       	ldi	r27, 0x80	; 128
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <__divsf3_pse+0x56>
    1e7e:	bb 0b       	sbc	r27, r27
    1e80:	80 2d       	mov	r24, r0
    1e82:	bf 01       	movw	r22, r30
    1e84:	ff 27       	eor	r31, r31
    1e86:	93 58       	subi	r25, 0x83	; 131
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	2a f0       	brmi	.+10     	; 0x1e96 <__divsf3_pse+0x6c>
    1e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8e:	51 05       	cpc	r21, r1
    1e90:	68 f0       	brcs	.+26     	; 0x1eac <__divsf3_pse+0x82>
    1e92:	92 c0       	rjmp	.+292    	; 0x1fb8 <__fp_inf>
    1e94:	01 c1       	rjmp	.+514    	; 0x2098 <__fp_szero>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	ec f3       	brlt	.-6      	; 0x1e94 <__divsf3_pse+0x6a>
    1e9a:	98 3e       	cpi	r25, 0xE8	; 232
    1e9c:	dc f3       	brlt	.-10     	; 0x1e94 <__divsf3_pse+0x6a>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f7 95       	ror	r31
    1ea8:	9f 5f       	subi	r25, 0xFF	; 255
    1eaa:	c9 f7       	brne	.-14     	; 0x1e9e <__divsf3_pse+0x74>
    1eac:	88 0f       	add	r24, r24
    1eae:	91 1d       	adc	r25, r1
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret
    1eb8:	e1 e0       	ldi	r30, 0x01	; 1
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	62 17       	cp	r22, r18
    1ec4:	73 07       	cpc	r23, r19
    1ec6:	84 07       	cpc	r24, r20
    1ec8:	ba 07       	cpc	r27, r26
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <__divsf3_pse+0xaa>
    1ecc:	62 1b       	sub	r22, r18
    1ece:	73 0b       	sbc	r23, r19
    1ed0:	84 0b       	sbc	r24, r20
    1ed2:	ba 0b       	sbc	r27, r26
    1ed4:	ee 1f       	adc	r30, r30
    1ed6:	88 f7       	brcc	.-30     	; 0x1eba <__divsf3_pse+0x90>
    1ed8:	e0 95       	com	r30
    1eda:	08 95       	ret

00001edc <__fixsfsi>:
    1edc:	04 d0       	rcall	.+8      	; 0x1ee6 <__fixunssfsi>
    1ede:	68 94       	set
    1ee0:	b1 11       	cpse	r27, r1
    1ee2:	da c0       	rjmp	.+436    	; 0x2098 <__fp_szero>
    1ee4:	08 95       	ret

00001ee6 <__fixunssfsi>:
    1ee6:	bd d0       	rcall	.+378    	; 0x2062 <__fp_splitA>
    1ee8:	88 f0       	brcs	.+34     	; 0x1f0c <__fixunssfsi+0x26>
    1eea:	9f 57       	subi	r25, 0x7F	; 127
    1eec:	90 f0       	brcs	.+36     	; 0x1f12 <__fixunssfsi+0x2c>
    1eee:	b9 2f       	mov	r27, r25
    1ef0:	99 27       	eor	r25, r25
    1ef2:	b7 51       	subi	r27, 0x17	; 23
    1ef4:	a0 f0       	brcs	.+40     	; 0x1f1e <__fixunssfsi+0x38>
    1ef6:	d1 f0       	breq	.+52     	; 0x1f2c <__fixunssfsi+0x46>
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	88 1f       	adc	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	1a f0       	brmi	.+6      	; 0x1f08 <__fixunssfsi+0x22>
    1f02:	ba 95       	dec	r27
    1f04:	c9 f7       	brne	.-14     	; 0x1ef8 <__fixunssfsi+0x12>
    1f06:	12 c0       	rjmp	.+36     	; 0x1f2c <__fixunssfsi+0x46>
    1f08:	b1 30       	cpi	r27, 0x01	; 1
    1f0a:	81 f0       	breq	.+32     	; 0x1f2c <__fixunssfsi+0x46>
    1f0c:	c4 d0       	rcall	.+392    	; 0x2096 <__fp_zero>
    1f0e:	b1 e0       	ldi	r27, 0x01	; 1
    1f10:	08 95       	ret
    1f12:	c1 c0       	rjmp	.+386    	; 0x2096 <__fp_zero>
    1f14:	67 2f       	mov	r22, r23
    1f16:	78 2f       	mov	r23, r24
    1f18:	88 27       	eor	r24, r24
    1f1a:	b8 5f       	subi	r27, 0xF8	; 248
    1f1c:	39 f0       	breq	.+14     	; 0x1f2c <__fixunssfsi+0x46>
    1f1e:	b9 3f       	cpi	r27, 0xF9	; 249
    1f20:	cc f3       	brlt	.-14     	; 0x1f14 <__fixunssfsi+0x2e>
    1f22:	86 95       	lsr	r24
    1f24:	77 95       	ror	r23
    1f26:	67 95       	ror	r22
    1f28:	b3 95       	inc	r27
    1f2a:	d9 f7       	brne	.-10     	; 0x1f22 <__fixunssfsi+0x3c>
    1f2c:	3e f4       	brtc	.+14     	; 0x1f3c <__fixunssfsi+0x56>
    1f2e:	90 95       	com	r25
    1f30:	80 95       	com	r24
    1f32:	70 95       	com	r23
    1f34:	61 95       	neg	r22
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3c:	08 95       	ret

00001f3e <__floatunsisf>:
    1f3e:	e8 94       	clt
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <__floatsisf+0x12>

00001f42 <__floatsisf>:
    1f42:	97 fb       	bst	r25, 7
    1f44:	3e f4       	brtc	.+14     	; 0x1f54 <__floatsisf+0x12>
    1f46:	90 95       	com	r25
    1f48:	80 95       	com	r24
    1f4a:	70 95       	com	r23
    1f4c:	61 95       	neg	r22
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	8f 4f       	sbci	r24, 0xFF	; 255
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	99 23       	and	r25, r25
    1f56:	a9 f0       	breq	.+42     	; 0x1f82 <__floatsisf+0x40>
    1f58:	f9 2f       	mov	r31, r25
    1f5a:	96 e9       	ldi	r25, 0x96	; 150
    1f5c:	bb 27       	eor	r27, r27
    1f5e:	93 95       	inc	r25
    1f60:	f6 95       	lsr	r31
    1f62:	87 95       	ror	r24
    1f64:	77 95       	ror	r23
    1f66:	67 95       	ror	r22
    1f68:	b7 95       	ror	r27
    1f6a:	f1 11       	cpse	r31, r1
    1f6c:	f8 cf       	rjmp	.-16     	; 0x1f5e <__floatsisf+0x1c>
    1f6e:	fa f4       	brpl	.+62     	; 0x1fae <__floatsisf+0x6c>
    1f70:	bb 0f       	add	r27, r27
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__floatsisf+0x36>
    1f74:	60 ff       	sbrs	r22, 0
    1f76:	1b c0       	rjmp	.+54     	; 0x1fae <__floatsisf+0x6c>
    1f78:	6f 5f       	subi	r22, 0xFF	; 255
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	16 c0       	rjmp	.+44     	; 0x1fae <__floatsisf+0x6c>
    1f82:	88 23       	and	r24, r24
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <__floatsisf+0x48>
    1f86:	96 e9       	ldi	r25, 0x96	; 150
    1f88:	11 c0       	rjmp	.+34     	; 0x1fac <__floatsisf+0x6a>
    1f8a:	77 23       	and	r23, r23
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <__floatsisf+0x54>
    1f8e:	9e e8       	ldi	r25, 0x8E	; 142
    1f90:	87 2f       	mov	r24, r23
    1f92:	76 2f       	mov	r23, r22
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <__floatsisf+0x5e>
    1f96:	66 23       	and	r22, r22
    1f98:	71 f0       	breq	.+28     	; 0x1fb6 <__floatsisf+0x74>
    1f9a:	96 e8       	ldi	r25, 0x86	; 134
    1f9c:	86 2f       	mov	r24, r22
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	2a f0       	brmi	.+10     	; 0x1fae <__floatsisf+0x6c>
    1fa4:	9a 95       	dec	r25
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	88 1f       	adc	r24, r24
    1fac:	da f7       	brpl	.-10     	; 0x1fa4 <__floatsisf+0x62>
    1fae:	88 0f       	add	r24, r24
    1fb0:	96 95       	lsr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	08 95       	ret

00001fb8 <__fp_inf>:
    1fb8:	97 f9       	bld	r25, 7
    1fba:	9f 67       	ori	r25, 0x7F	; 127
    1fbc:	80 e8       	ldi	r24, 0x80	; 128
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	08 95       	ret

00001fc4 <__fp_nan>:
    1fc4:	9f ef       	ldi	r25, 0xFF	; 255
    1fc6:	80 ec       	ldi	r24, 0xC0	; 192
    1fc8:	08 95       	ret

00001fca <__fp_powser>:
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	1f 93       	push	r17
    1fd0:	0f 93       	push	r16
    1fd2:	ff 92       	push	r15
    1fd4:	ef 92       	push	r14
    1fd6:	df 92       	push	r13
    1fd8:	7b 01       	movw	r14, r22
    1fda:	8c 01       	movw	r16, r24
    1fdc:	68 94       	set
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <__fp_powser+0x20>
    1fe0:	da 2e       	mov	r13, r26
    1fe2:	ef 01       	movw	r28, r30
    1fe4:	72 d0       	rcall	.+228    	; 0x20ca <__mulsf3x>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e8 94       	clt
    1fea:	a5 91       	lpm	r26, Z+
    1fec:	25 91       	lpm	r18, Z+
    1fee:	35 91       	lpm	r19, Z+
    1ff0:	45 91       	lpm	r20, Z+
    1ff2:	55 91       	lpm	r21, Z+
    1ff4:	ae f3       	brts	.-22     	; 0x1fe0 <__fp_powser+0x16>
    1ff6:	ef 01       	movw	r28, r30
    1ff8:	54 de       	rcall	.-856    	; 0x1ca2 <__addsf3x>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	97 01       	movw	r18, r14
    1ffe:	a8 01       	movw	r20, r16
    2000:	da 94       	dec	r13
    2002:	79 f7       	brne	.-34     	; 0x1fe2 <__fp_powser+0x18>
    2004:	df 90       	pop	r13
    2006:	ef 90       	pop	r14
    2008:	ff 90       	pop	r15
    200a:	0f 91       	pop	r16
    200c:	1f 91       	pop	r17
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <__fp_pscA>:
    2014:	00 24       	eor	r0, r0
    2016:	0a 94       	dec	r0
    2018:	16 16       	cp	r1, r22
    201a:	17 06       	cpc	r1, r23
    201c:	18 06       	cpc	r1, r24
    201e:	09 06       	cpc	r0, r25
    2020:	08 95       	ret

00002022 <__fp_pscB>:
    2022:	00 24       	eor	r0, r0
    2024:	0a 94       	dec	r0
    2026:	12 16       	cp	r1, r18
    2028:	13 06       	cpc	r1, r19
    202a:	14 06       	cpc	r1, r20
    202c:	05 06       	cpc	r0, r21
    202e:	08 95       	ret

00002030 <__fp_round>:
    2030:	09 2e       	mov	r0, r25
    2032:	03 94       	inc	r0
    2034:	00 0c       	add	r0, r0
    2036:	11 f4       	brne	.+4      	; 0x203c <__fp_round+0xc>
    2038:	88 23       	and	r24, r24
    203a:	52 f0       	brmi	.+20     	; 0x2050 <__fp_round+0x20>
    203c:	bb 0f       	add	r27, r27
    203e:	40 f4       	brcc	.+16     	; 0x2050 <__fp_round+0x20>
    2040:	bf 2b       	or	r27, r31
    2042:	11 f4       	brne	.+4      	; 0x2048 <__fp_round+0x18>
    2044:	60 ff       	sbrs	r22, 0
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__fp_round+0x20>
    2048:	6f 5f       	subi	r22, 0xFF	; 255
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	8f 4f       	sbci	r24, 0xFF	; 255
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	08 95       	ret

00002052 <__fp_split3>:
    2052:	57 fd       	sbrc	r21, 7
    2054:	90 58       	subi	r25, 0x80	; 128
    2056:	44 0f       	add	r20, r20
    2058:	55 1f       	adc	r21, r21
    205a:	59 f0       	breq	.+22     	; 0x2072 <__fp_splitA+0x10>
    205c:	5f 3f       	cpi	r21, 0xFF	; 255
    205e:	71 f0       	breq	.+28     	; 0x207c <__fp_splitA+0x1a>
    2060:	47 95       	ror	r20

00002062 <__fp_splitA>:
    2062:	88 0f       	add	r24, r24
    2064:	97 fb       	bst	r25, 7
    2066:	99 1f       	adc	r25, r25
    2068:	61 f0       	breq	.+24     	; 0x2082 <__fp_splitA+0x20>
    206a:	9f 3f       	cpi	r25, 0xFF	; 255
    206c:	79 f0       	breq	.+30     	; 0x208c <__fp_splitA+0x2a>
    206e:	87 95       	ror	r24
    2070:	08 95       	ret
    2072:	12 16       	cp	r1, r18
    2074:	13 06       	cpc	r1, r19
    2076:	14 06       	cpc	r1, r20
    2078:	55 1f       	adc	r21, r21
    207a:	f2 cf       	rjmp	.-28     	; 0x2060 <__fp_split3+0xe>
    207c:	46 95       	lsr	r20
    207e:	f1 df       	rcall	.-30     	; 0x2062 <__fp_splitA>
    2080:	08 c0       	rjmp	.+16     	; 0x2092 <__fp_splitA+0x30>
    2082:	16 16       	cp	r1, r22
    2084:	17 06       	cpc	r1, r23
    2086:	18 06       	cpc	r1, r24
    2088:	99 1f       	adc	r25, r25
    208a:	f1 cf       	rjmp	.-30     	; 0x206e <__fp_splitA+0xc>
    208c:	86 95       	lsr	r24
    208e:	71 05       	cpc	r23, r1
    2090:	61 05       	cpc	r22, r1
    2092:	08 94       	sec
    2094:	08 95       	ret

00002096 <__fp_zero>:
    2096:	e8 94       	clt

00002098 <__fp_szero>:
    2098:	bb 27       	eor	r27, r27
    209a:	66 27       	eor	r22, r22
    209c:	77 27       	eor	r23, r23
    209e:	cb 01       	movw	r24, r22
    20a0:	97 f9       	bld	r25, 7
    20a2:	08 95       	ret

000020a4 <inverse>:
    20a4:	9b 01       	movw	r18, r22
    20a6:	ac 01       	movw	r20, r24
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	80 e8       	ldi	r24, 0x80	; 128
    20ae:	9f e3       	ldi	r25, 0x3F	; 63
    20b0:	ad ce       	rjmp	.-678    	; 0x1e0c <__divsf3>

000020b2 <__mulsf3>:
    20b2:	0b d0       	rcall	.+22     	; 0x20ca <__mulsf3x>
    20b4:	bd cf       	rjmp	.-134    	; 0x2030 <__fp_round>
    20b6:	ae df       	rcall	.-164    	; 0x2014 <__fp_pscA>
    20b8:	28 f0       	brcs	.+10     	; 0x20c4 <__mulsf3+0x12>
    20ba:	b3 df       	rcall	.-154    	; 0x2022 <__fp_pscB>
    20bc:	18 f0       	brcs	.+6      	; 0x20c4 <__mulsf3+0x12>
    20be:	95 23       	and	r25, r21
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <__mulsf3+0x12>
    20c2:	7a cf       	rjmp	.-268    	; 0x1fb8 <__fp_inf>
    20c4:	7f cf       	rjmp	.-258    	; 0x1fc4 <__fp_nan>
    20c6:	11 24       	eor	r1, r1
    20c8:	e7 cf       	rjmp	.-50     	; 0x2098 <__fp_szero>

000020ca <__mulsf3x>:
    20ca:	c3 df       	rcall	.-122    	; 0x2052 <__fp_split3>
    20cc:	a0 f3       	brcs	.-24     	; 0x20b6 <__mulsf3+0x4>

000020ce <__mulsf3_pse>:
    20ce:	95 9f       	mul	r25, r21
    20d0:	d1 f3       	breq	.-12     	; 0x20c6 <__mulsf3+0x14>
    20d2:	95 0f       	add	r25, r21
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	55 1f       	adc	r21, r21
    20d8:	62 9f       	mul	r22, r18
    20da:	f0 01       	movw	r30, r0
    20dc:	72 9f       	mul	r23, r18
    20de:	bb 27       	eor	r27, r27
    20e0:	f0 0d       	add	r31, r0
    20e2:	b1 1d       	adc	r27, r1
    20e4:	63 9f       	mul	r22, r19
    20e6:	aa 27       	eor	r26, r26
    20e8:	f0 0d       	add	r31, r0
    20ea:	b1 1d       	adc	r27, r1
    20ec:	aa 1f       	adc	r26, r26
    20ee:	64 9f       	mul	r22, r20
    20f0:	66 27       	eor	r22, r22
    20f2:	b0 0d       	add	r27, r0
    20f4:	a1 1d       	adc	r26, r1
    20f6:	66 1f       	adc	r22, r22
    20f8:	82 9f       	mul	r24, r18
    20fa:	22 27       	eor	r18, r18
    20fc:	b0 0d       	add	r27, r0
    20fe:	a1 1d       	adc	r26, r1
    2100:	62 1f       	adc	r22, r18
    2102:	73 9f       	mul	r23, r19
    2104:	b0 0d       	add	r27, r0
    2106:	a1 1d       	adc	r26, r1
    2108:	62 1f       	adc	r22, r18
    210a:	83 9f       	mul	r24, r19
    210c:	a0 0d       	add	r26, r0
    210e:	61 1d       	adc	r22, r1
    2110:	22 1f       	adc	r18, r18
    2112:	74 9f       	mul	r23, r20
    2114:	33 27       	eor	r19, r19
    2116:	a0 0d       	add	r26, r0
    2118:	61 1d       	adc	r22, r1
    211a:	23 1f       	adc	r18, r19
    211c:	84 9f       	mul	r24, r20
    211e:	60 0d       	add	r22, r0
    2120:	21 1d       	adc	r18, r1
    2122:	82 2f       	mov	r24, r18
    2124:	76 2f       	mov	r23, r22
    2126:	6a 2f       	mov	r22, r26
    2128:	11 24       	eor	r1, r1
    212a:	9f 57       	subi	r25, 0x7F	; 127
    212c:	50 40       	sbci	r21, 0x00	; 0
    212e:	8a f0       	brmi	.+34     	; 0x2152 <__mulsf3_pse+0x84>
    2130:	e1 f0       	breq	.+56     	; 0x216a <__mulsf3_pse+0x9c>
    2132:	88 23       	and	r24, r24
    2134:	4a f0       	brmi	.+18     	; 0x2148 <__mulsf3_pse+0x7a>
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	bb 1f       	adc	r27, r27
    213c:	66 1f       	adc	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	88 1f       	adc	r24, r24
    2142:	91 50       	subi	r25, 0x01	; 1
    2144:	50 40       	sbci	r21, 0x00	; 0
    2146:	a9 f7       	brne	.-22     	; 0x2132 <__mulsf3_pse+0x64>
    2148:	9e 3f       	cpi	r25, 0xFE	; 254
    214a:	51 05       	cpc	r21, r1
    214c:	70 f0       	brcs	.+28     	; 0x216a <__mulsf3_pse+0x9c>
    214e:	34 cf       	rjmp	.-408    	; 0x1fb8 <__fp_inf>
    2150:	a3 cf       	rjmp	.-186    	; 0x2098 <__fp_szero>
    2152:	5f 3f       	cpi	r21, 0xFF	; 255
    2154:	ec f3       	brlt	.-6      	; 0x2150 <__mulsf3_pse+0x82>
    2156:	98 3e       	cpi	r25, 0xE8	; 232
    2158:	dc f3       	brlt	.-10     	; 0x2150 <__mulsf3_pse+0x82>
    215a:	86 95       	lsr	r24
    215c:	77 95       	ror	r23
    215e:	67 95       	ror	r22
    2160:	b7 95       	ror	r27
    2162:	f7 95       	ror	r31
    2164:	e7 95       	ror	r30
    2166:	9f 5f       	subi	r25, 0xFF	; 255
    2168:	c1 f7       	brne	.-16     	; 0x215a <__mulsf3_pse+0x8c>
    216a:	fe 2b       	or	r31, r30
    216c:	88 0f       	add	r24, r24
    216e:	91 1d       	adc	r25, r1
    2170:	96 95       	lsr	r25
    2172:	87 95       	ror	r24
    2174:	97 f9       	bld	r25, 7
    2176:	08 95       	ret
    2178:	11 f4       	brne	.+4      	; 0x217e <__mulsf3_pse+0xb0>
    217a:	0e f4       	brtc	.+2      	; 0x217e <__mulsf3_pse+0xb0>
    217c:	23 cf       	rjmp	.-442    	; 0x1fc4 <__fp_nan>
    217e:	41 c0       	rjmp	.+130    	; 0x2202 <__fp_mpack>

00002180 <sqrt>:
    2180:	70 df       	rcall	.-288    	; 0x2062 <__fp_splitA>
    2182:	d0 f3       	brcs	.-12     	; 0x2178 <__mulsf3_pse+0xaa>
    2184:	99 23       	and	r25, r25
    2186:	d9 f3       	breq	.-10     	; 0x217e <__mulsf3_pse+0xb0>
    2188:	ce f3       	brts	.-14     	; 0x217c <__mulsf3_pse+0xae>
    218a:	9f 57       	subi	r25, 0x7F	; 127
    218c:	55 0b       	sbc	r21, r21
    218e:	87 ff       	sbrs	r24, 7
    2190:	46 d0       	rcall	.+140    	; 0x221e <__fp_norm2>
    2192:	00 24       	eor	r0, r0
    2194:	a0 e6       	ldi	r26, 0x60	; 96
    2196:	40 ea       	ldi	r20, 0xA0	; 160
    2198:	90 01       	movw	r18, r0
    219a:	80 58       	subi	r24, 0x80	; 128
    219c:	56 95       	lsr	r21
    219e:	97 95       	ror	r25
    21a0:	28 f4       	brcc	.+10     	; 0x21ac <sqrt+0x2c>
    21a2:	80 5c       	subi	r24, 0xC0	; 192
    21a4:	66 0f       	add	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	20 f0       	brcs	.+8      	; 0x21b4 <sqrt+0x34>
    21ac:	26 17       	cp	r18, r22
    21ae:	37 07       	cpc	r19, r23
    21b0:	48 07       	cpc	r20, r24
    21b2:	30 f4       	brcc	.+12     	; 0x21c0 <sqrt+0x40>
    21b4:	62 1b       	sub	r22, r18
    21b6:	73 0b       	sbc	r23, r19
    21b8:	84 0b       	sbc	r24, r20
    21ba:	20 29       	or	r18, r0
    21bc:	31 29       	or	r19, r1
    21be:	4a 2b       	or	r20, r26
    21c0:	a6 95       	lsr	r26
    21c2:	17 94       	ror	r1
    21c4:	07 94       	ror	r0
    21c6:	20 25       	eor	r18, r0
    21c8:	31 25       	eor	r19, r1
    21ca:	4a 27       	eor	r20, r26
    21cc:	58 f7       	brcc	.-42     	; 0x21a4 <sqrt+0x24>
    21ce:	66 0f       	add	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	20 f0       	brcs	.+8      	; 0x21de <sqrt+0x5e>
    21d6:	26 17       	cp	r18, r22
    21d8:	37 07       	cpc	r19, r23
    21da:	48 07       	cpc	r20, r24
    21dc:	30 f4       	brcc	.+12     	; 0x21ea <sqrt+0x6a>
    21de:	62 0b       	sbc	r22, r18
    21e0:	73 0b       	sbc	r23, r19
    21e2:	84 0b       	sbc	r24, r20
    21e4:	20 0d       	add	r18, r0
    21e6:	31 1d       	adc	r19, r1
    21e8:	41 1d       	adc	r20, r1
    21ea:	a0 95       	com	r26
    21ec:	81 f7       	brne	.-32     	; 0x21ce <sqrt+0x4e>
    21ee:	b9 01       	movw	r22, r18
    21f0:	84 2f       	mov	r24, r20
    21f2:	91 58       	subi	r25, 0x81	; 129
    21f4:	88 0f       	add	r24, r24
    21f6:	96 95       	lsr	r25
    21f8:	87 95       	ror	r24
    21fa:	08 95       	ret

000021fc <square>:
    21fc:	9b 01       	movw	r18, r22
    21fe:	ac 01       	movw	r20, r24
    2200:	58 cf       	rjmp	.-336    	; 0x20b2 <__mulsf3>

00002202 <__fp_mpack>:
    2202:	9f 3f       	cpi	r25, 0xFF	; 255
    2204:	31 f0       	breq	.+12     	; 0x2212 <__fp_mpack_finite+0xc>

00002206 <__fp_mpack_finite>:
    2206:	91 50       	subi	r25, 0x01	; 1
    2208:	20 f4       	brcc	.+8      	; 0x2212 <__fp_mpack_finite+0xc>
    220a:	87 95       	ror	r24
    220c:	77 95       	ror	r23
    220e:	67 95       	ror	r22
    2210:	b7 95       	ror	r27
    2212:	88 0f       	add	r24, r24
    2214:	91 1d       	adc	r25, r1
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	97 f9       	bld	r25, 7
    221c:	08 95       	ret

0000221e <__fp_norm2>:
    221e:	91 50       	subi	r25, 0x01	; 1
    2220:	50 40       	sbci	r21, 0x00	; 0
    2222:	66 0f       	add	r22, r22
    2224:	77 1f       	adc	r23, r23
    2226:	88 1f       	adc	r24, r24
    2228:	d2 f7       	brpl	.-12     	; 0x221e <__fp_norm2>
    222a:	08 95       	ret

0000222c <__divmodhi4>:
    222c:	97 fb       	bst	r25, 7
    222e:	07 2e       	mov	r0, r23
    2230:	16 f4       	brtc	.+4      	; 0x2236 <__divmodhi4+0xa>
    2232:	00 94       	com	r0
    2234:	07 d0       	rcall	.+14     	; 0x2244 <__divmodhi4_neg1>
    2236:	77 fd       	sbrc	r23, 7
    2238:	09 d0       	rcall	.+18     	; 0x224c <__divmodhi4_neg2>
    223a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__udivmodhi4>
    223e:	07 fc       	sbrc	r0, 7
    2240:	05 d0       	rcall	.+10     	; 0x224c <__divmodhi4_neg2>
    2242:	3e f4       	brtc	.+14     	; 0x2252 <__divmodhi4_exit>

00002244 <__divmodhi4_neg1>:
    2244:	90 95       	com	r25
    2246:	81 95       	neg	r24
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	08 95       	ret

0000224c <__divmodhi4_neg2>:
    224c:	70 95       	com	r23
    224e:	61 95       	neg	r22
    2250:	7f 4f       	sbci	r23, 0xFF	; 255

00002252 <__divmodhi4_exit>:
    2252:	08 95       	ret

00002254 <__udivmodsi4>:
    2254:	a1 e2       	ldi	r26, 0x21	; 33
    2256:	1a 2e       	mov	r1, r26
    2258:	aa 1b       	sub	r26, r26
    225a:	bb 1b       	sub	r27, r27
    225c:	fd 01       	movw	r30, r26
    225e:	0d c0       	rjmp	.+26     	; 0x227a <__udivmodsi4_ep>

00002260 <__udivmodsi4_loop>:
    2260:	aa 1f       	adc	r26, r26
    2262:	bb 1f       	adc	r27, r27
    2264:	ee 1f       	adc	r30, r30
    2266:	ff 1f       	adc	r31, r31
    2268:	a2 17       	cp	r26, r18
    226a:	b3 07       	cpc	r27, r19
    226c:	e4 07       	cpc	r30, r20
    226e:	f5 07       	cpc	r31, r21
    2270:	20 f0       	brcs	.+8      	; 0x227a <__udivmodsi4_ep>
    2272:	a2 1b       	sub	r26, r18
    2274:	b3 0b       	sbc	r27, r19
    2276:	e4 0b       	sbc	r30, r20
    2278:	f5 0b       	sbc	r31, r21

0000227a <__udivmodsi4_ep>:
    227a:	66 1f       	adc	r22, r22
    227c:	77 1f       	adc	r23, r23
    227e:	88 1f       	adc	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	1a 94       	dec	r1
    2284:	69 f7       	brne	.-38     	; 0x2260 <__udivmodsi4_loop>
    2286:	60 95       	com	r22
    2288:	70 95       	com	r23
    228a:	80 95       	com	r24
    228c:	90 95       	com	r25
    228e:	9b 01       	movw	r18, r22
    2290:	ac 01       	movw	r20, r24
    2292:	bd 01       	movw	r22, r26
    2294:	cf 01       	movw	r24, r30
    2296:	08 95       	ret

00002298 <__divmodsi4>:
    2298:	05 2e       	mov	r0, r21
    229a:	97 fb       	bst	r25, 7
    229c:	1e f4       	brtc	.+6      	; 0x22a4 <__divmodsi4+0xc>
    229e:	00 94       	com	r0
    22a0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__negsi2>
    22a4:	57 fd       	sbrc	r21, 7
    22a6:	07 d0       	rcall	.+14     	; 0x22b6 <__divmodsi4_neg2>
    22a8:	0e 94 2a 11 	call	0x2254	; 0x2254 <__udivmodsi4>
    22ac:	07 fc       	sbrc	r0, 7
    22ae:	03 d0       	rcall	.+6      	; 0x22b6 <__divmodsi4_neg2>
    22b0:	4e f4       	brtc	.+18     	; 0x22c4 <__divmodsi4_exit>
    22b2:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__negsi2>

000022b6 <__divmodsi4_neg2>:
    22b6:	50 95       	com	r21
    22b8:	40 95       	com	r20
    22ba:	30 95       	com	r19
    22bc:	21 95       	neg	r18
    22be:	3f 4f       	sbci	r19, 0xFF	; 255
    22c0:	4f 4f       	sbci	r20, 0xFF	; 255
    22c2:	5f 4f       	sbci	r21, 0xFF	; 255

000022c4 <__divmodsi4_exit>:
    22c4:	08 95       	ret

000022c6 <__negsi2>:
    22c6:	90 95       	com	r25
    22c8:	80 95       	com	r24
    22ca:	70 95       	com	r23
    22cc:	61 95       	neg	r22
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	8f 4f       	sbci	r24, 0xFF	; 255
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	08 95       	ret

000022d6 <__udivmodhi4>:
    22d6:	aa 1b       	sub	r26, r26
    22d8:	bb 1b       	sub	r27, r27
    22da:	51 e1       	ldi	r21, 0x11	; 17
    22dc:	07 c0       	rjmp	.+14     	; 0x22ec <__udivmodhi4_ep>

000022de <__udivmodhi4_loop>:
    22de:	aa 1f       	adc	r26, r26
    22e0:	bb 1f       	adc	r27, r27
    22e2:	a6 17       	cp	r26, r22
    22e4:	b7 07       	cpc	r27, r23
    22e6:	10 f0       	brcs	.+4      	; 0x22ec <__udivmodhi4_ep>
    22e8:	a6 1b       	sub	r26, r22
    22ea:	b7 0b       	sbc	r27, r23

000022ec <__udivmodhi4_ep>:
    22ec:	88 1f       	adc	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	5a 95       	dec	r21
    22f2:	a9 f7       	brne	.-22     	; 0x22de <__udivmodhi4_loop>
    22f4:	80 95       	com	r24
    22f6:	90 95       	com	r25
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	08 95       	ret

000022fe <malloc>:
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	82 30       	cpi	r24, 0x02	; 2
    2304:	91 05       	cpc	r25, r1
    2306:	10 f4       	brcc	.+4      	; 0x230c <malloc+0xe>
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	e0 91 c9 02 	lds	r30, 0x02C9
    2310:	f0 91 ca 02 	lds	r31, 0x02CA
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	a0 e0       	ldi	r26, 0x00	; 0
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	30 97       	sbiw	r30, 0x00	; 0
    231e:	39 f1       	breq	.+78     	; 0x236e <malloc+0x70>
    2320:	40 81       	ld	r20, Z
    2322:	51 81       	ldd	r21, Z+1	; 0x01
    2324:	48 17       	cp	r20, r24
    2326:	59 07       	cpc	r21, r25
    2328:	b8 f0       	brcs	.+46     	; 0x2358 <malloc+0x5a>
    232a:	48 17       	cp	r20, r24
    232c:	59 07       	cpc	r21, r25
    232e:	71 f4       	brne	.+28     	; 0x234c <malloc+0x4e>
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	10 97       	sbiw	r26, 0x00	; 0
    2336:	29 f0       	breq	.+10     	; 0x2342 <malloc+0x44>
    2338:	13 96       	adiw	r26, 0x03	; 3
    233a:	9c 93       	st	X, r25
    233c:	8e 93       	st	-X, r24
    233e:	12 97       	sbiw	r26, 0x02	; 2
    2340:	2c c0       	rjmp	.+88     	; 0x239a <malloc+0x9c>
    2342:	90 93 ca 02 	sts	0x02CA, r25
    2346:	80 93 c9 02 	sts	0x02C9, r24
    234a:	27 c0       	rjmp	.+78     	; 0x239a <malloc+0x9c>
    234c:	21 15       	cp	r18, r1
    234e:	31 05       	cpc	r19, r1
    2350:	31 f0       	breq	.+12     	; 0x235e <malloc+0x60>
    2352:	42 17       	cp	r20, r18
    2354:	53 07       	cpc	r21, r19
    2356:	18 f0       	brcs	.+6      	; 0x235e <malloc+0x60>
    2358:	a9 01       	movw	r20, r18
    235a:	db 01       	movw	r26, r22
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <malloc+0x62>
    235e:	ef 01       	movw	r28, r30
    2360:	9a 01       	movw	r18, r20
    2362:	bd 01       	movw	r22, r26
    2364:	df 01       	movw	r26, r30
    2366:	02 80       	ldd	r0, Z+2	; 0x02
    2368:	f3 81       	ldd	r31, Z+3	; 0x03
    236a:	e0 2d       	mov	r30, r0
    236c:	d7 cf       	rjmp	.-82     	; 0x231c <malloc+0x1e>
    236e:	21 15       	cp	r18, r1
    2370:	31 05       	cpc	r19, r1
    2372:	f9 f0       	breq	.+62     	; 0x23b2 <malloc+0xb4>
    2374:	28 1b       	sub	r18, r24
    2376:	39 0b       	sbc	r19, r25
    2378:	24 30       	cpi	r18, 0x04	; 4
    237a:	31 05       	cpc	r19, r1
    237c:	80 f4       	brcc	.+32     	; 0x239e <malloc+0xa0>
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	61 15       	cp	r22, r1
    2384:	71 05       	cpc	r23, r1
    2386:	21 f0       	breq	.+8      	; 0x2390 <malloc+0x92>
    2388:	fb 01       	movw	r30, r22
    238a:	93 83       	std	Z+3, r25	; 0x03
    238c:	82 83       	std	Z+2, r24	; 0x02
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <malloc+0x9a>
    2390:	90 93 ca 02 	sts	0x02CA, r25
    2394:	80 93 c9 02 	sts	0x02C9, r24
    2398:	fe 01       	movw	r30, r28
    239a:	32 96       	adiw	r30, 0x02	; 2
    239c:	44 c0       	rjmp	.+136    	; 0x2426 <malloc+0x128>
    239e:	fe 01       	movw	r30, r28
    23a0:	e2 0f       	add	r30, r18
    23a2:	f3 1f       	adc	r31, r19
    23a4:	81 93       	st	Z+, r24
    23a6:	91 93       	st	Z+, r25
    23a8:	22 50       	subi	r18, 0x02	; 2
    23aa:	31 09       	sbc	r19, r1
    23ac:	39 83       	std	Y+1, r19	; 0x01
    23ae:	28 83       	st	Y, r18
    23b0:	3a c0       	rjmp	.+116    	; 0x2426 <malloc+0x128>
    23b2:	20 91 c7 02 	lds	r18, 0x02C7
    23b6:	30 91 c8 02 	lds	r19, 0x02C8
    23ba:	23 2b       	or	r18, r19
    23bc:	41 f4       	brne	.+16     	; 0x23ce <malloc+0xd0>
    23be:	20 91 02 01 	lds	r18, 0x0102
    23c2:	30 91 03 01 	lds	r19, 0x0103
    23c6:	30 93 c8 02 	sts	0x02C8, r19
    23ca:	20 93 c7 02 	sts	0x02C7, r18
    23ce:	20 91 00 01 	lds	r18, 0x0100
    23d2:	30 91 01 01 	lds	r19, 0x0101
    23d6:	21 15       	cp	r18, r1
    23d8:	31 05       	cpc	r19, r1
    23da:	41 f4       	brne	.+16     	; 0x23ec <malloc+0xee>
    23dc:	2d b7       	in	r18, 0x3d	; 61
    23de:	3e b7       	in	r19, 0x3e	; 62
    23e0:	40 91 04 01 	lds	r20, 0x0104
    23e4:	50 91 05 01 	lds	r21, 0x0105
    23e8:	24 1b       	sub	r18, r20
    23ea:	35 0b       	sbc	r19, r21
    23ec:	e0 91 c7 02 	lds	r30, 0x02C7
    23f0:	f0 91 c8 02 	lds	r31, 0x02C8
    23f4:	e2 17       	cp	r30, r18
    23f6:	f3 07       	cpc	r31, r19
    23f8:	a0 f4       	brcc	.+40     	; 0x2422 <malloc+0x124>
    23fa:	2e 1b       	sub	r18, r30
    23fc:	3f 0b       	sbc	r19, r31
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	78 f0       	brcs	.+30     	; 0x2422 <malloc+0x124>
    2404:	ac 01       	movw	r20, r24
    2406:	4e 5f       	subi	r20, 0xFE	; 254
    2408:	5f 4f       	sbci	r21, 0xFF	; 255
    240a:	24 17       	cp	r18, r20
    240c:	35 07       	cpc	r19, r21
    240e:	48 f0       	brcs	.+18     	; 0x2422 <malloc+0x124>
    2410:	4e 0f       	add	r20, r30
    2412:	5f 1f       	adc	r21, r31
    2414:	50 93 c8 02 	sts	0x02C8, r21
    2418:	40 93 c7 02 	sts	0x02C7, r20
    241c:	81 93       	st	Z+, r24
    241e:	91 93       	st	Z+, r25
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <malloc+0x128>
    2422:	e0 e0       	ldi	r30, 0x00	; 0
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	cf 01       	movw	r24, r30
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <free>:
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	09 f4       	brne	.+2      	; 0x2438 <free+0xa>
    2436:	87 c0       	rjmp	.+270    	; 0x2546 <free+0x118>
    2438:	fc 01       	movw	r30, r24
    243a:	32 97       	sbiw	r30, 0x02	; 2
    243c:	13 82       	std	Z+3, r1	; 0x03
    243e:	12 82       	std	Z+2, r1	; 0x02
    2440:	c0 91 c9 02 	lds	r28, 0x02C9
    2444:	d0 91 ca 02 	lds	r29, 0x02CA
    2448:	20 97       	sbiw	r28, 0x00	; 0
    244a:	81 f4       	brne	.+32     	; 0x246c <free+0x3e>
    244c:	20 81       	ld	r18, Z
    244e:	31 81       	ldd	r19, Z+1	; 0x01
    2450:	28 0f       	add	r18, r24
    2452:	39 1f       	adc	r19, r25
    2454:	80 91 c7 02 	lds	r24, 0x02C7
    2458:	90 91 c8 02 	lds	r25, 0x02C8
    245c:	82 17       	cp	r24, r18
    245e:	93 07       	cpc	r25, r19
    2460:	79 f5       	brne	.+94     	; 0x24c0 <free+0x92>
    2462:	f0 93 c8 02 	sts	0x02C8, r31
    2466:	e0 93 c7 02 	sts	0x02C7, r30
    246a:	6d c0       	rjmp	.+218    	; 0x2546 <free+0x118>
    246c:	de 01       	movw	r26, r28
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	ae 17       	cp	r26, r30
    2474:	bf 07       	cpc	r27, r31
    2476:	50 f4       	brcc	.+20     	; 0x248c <free+0x5e>
    2478:	12 96       	adiw	r26, 0x02	; 2
    247a:	4d 91       	ld	r20, X+
    247c:	5c 91       	ld	r21, X
    247e:	13 97       	sbiw	r26, 0x03	; 3
    2480:	9d 01       	movw	r18, r26
    2482:	41 15       	cp	r20, r1
    2484:	51 05       	cpc	r21, r1
    2486:	09 f1       	breq	.+66     	; 0x24ca <free+0x9c>
    2488:	da 01       	movw	r26, r20
    248a:	f3 cf       	rjmp	.-26     	; 0x2472 <free+0x44>
    248c:	b3 83       	std	Z+3, r27	; 0x03
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	40 81       	ld	r20, Z
    2492:	51 81       	ldd	r21, Z+1	; 0x01
    2494:	84 0f       	add	r24, r20
    2496:	95 1f       	adc	r25, r21
    2498:	8a 17       	cp	r24, r26
    249a:	9b 07       	cpc	r25, r27
    249c:	71 f4       	brne	.+28     	; 0x24ba <free+0x8c>
    249e:	8d 91       	ld	r24, X+
    24a0:	9c 91       	ld	r25, X
    24a2:	11 97       	sbiw	r26, 0x01	; 1
    24a4:	84 0f       	add	r24, r20
    24a6:	95 1f       	adc	r25, r21
    24a8:	02 96       	adiw	r24, 0x02	; 2
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
    24ae:	12 96       	adiw	r26, 0x02	; 2
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	13 97       	sbiw	r26, 0x03	; 3
    24b6:	93 83       	std	Z+3, r25	; 0x03
    24b8:	82 83       	std	Z+2, r24	; 0x02
    24ba:	21 15       	cp	r18, r1
    24bc:	31 05       	cpc	r19, r1
    24be:	29 f4       	brne	.+10     	; 0x24ca <free+0x9c>
    24c0:	f0 93 ca 02 	sts	0x02CA, r31
    24c4:	e0 93 c9 02 	sts	0x02C9, r30
    24c8:	3e c0       	rjmp	.+124    	; 0x2546 <free+0x118>
    24ca:	d9 01       	movw	r26, r18
    24cc:	13 96       	adiw	r26, 0x03	; 3
    24ce:	fc 93       	st	X, r31
    24d0:	ee 93       	st	-X, r30
    24d2:	12 97       	sbiw	r26, 0x02	; 2
    24d4:	4d 91       	ld	r20, X+
    24d6:	5d 91       	ld	r21, X+
    24d8:	a4 0f       	add	r26, r20
    24da:	b5 1f       	adc	r27, r21
    24dc:	ea 17       	cp	r30, r26
    24de:	fb 07       	cpc	r31, r27
    24e0:	79 f4       	brne	.+30     	; 0x2500 <free+0xd2>
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	84 0f       	add	r24, r20
    24e8:	95 1f       	adc	r25, r21
    24ea:	02 96       	adiw	r24, 0x02	; 2
    24ec:	d9 01       	movw	r26, r18
    24ee:	11 96       	adiw	r26, 0x01	; 1
    24f0:	9c 93       	st	X, r25
    24f2:	8e 93       	st	-X, r24
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	13 96       	adiw	r26, 0x03	; 3
    24fa:	9c 93       	st	X, r25
    24fc:	8e 93       	st	-X, r24
    24fe:	12 97       	sbiw	r26, 0x02	; 2
    2500:	e0 e0       	ldi	r30, 0x00	; 0
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	19 f0       	breq	.+6      	; 0x2512 <free+0xe4>
    250c:	fe 01       	movw	r30, r28
    250e:	ec 01       	movw	r28, r24
    2510:	f9 cf       	rjmp	.-14     	; 0x2504 <free+0xd6>
    2512:	ce 01       	movw	r24, r28
    2514:	02 96       	adiw	r24, 0x02	; 2
    2516:	28 81       	ld	r18, Y
    2518:	39 81       	ldd	r19, Y+1	; 0x01
    251a:	82 0f       	add	r24, r18
    251c:	93 1f       	adc	r25, r19
    251e:	20 91 c7 02 	lds	r18, 0x02C7
    2522:	30 91 c8 02 	lds	r19, 0x02C8
    2526:	28 17       	cp	r18, r24
    2528:	39 07       	cpc	r19, r25
    252a:	69 f4       	brne	.+26     	; 0x2546 <free+0x118>
    252c:	30 97       	sbiw	r30, 0x00	; 0
    252e:	29 f4       	brne	.+10     	; 0x253a <free+0x10c>
    2530:	10 92 ca 02 	sts	0x02CA, r1
    2534:	10 92 c9 02 	sts	0x02C9, r1
    2538:	02 c0       	rjmp	.+4      	; 0x253e <free+0x110>
    253a:	13 82       	std	Z+3, r1	; 0x03
    253c:	12 82       	std	Z+2, r1	; 0x02
    253e:	d0 93 c8 02 	sts	0x02C8, r29
    2542:	c0 93 c7 02 	sts	0x02C7, r28
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <realloc>:
    254c:	a0 e0       	ldi	r26, 0x00	; 0
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ec ea       	ldi	r30, 0xAC	; 172
    2552:	f2 e1       	ldi	r31, 0x12	; 18
    2554:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x8>
    2558:	ec 01       	movw	r28, r24
    255a:	cb 01       	movw	r24, r22
    255c:	20 97       	sbiw	r28, 0x00	; 0
    255e:	19 f4       	brne	.+6      	; 0x2566 <realloc+0x1a>
    2560:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
    2564:	b8 c0       	rjmp	.+368    	; 0x26d6 <realloc+0x18a>
    2566:	fe 01       	movw	r30, r28
    2568:	e6 0f       	add	r30, r22
    256a:	f7 1f       	adc	r31, r23
    256c:	9e 01       	movw	r18, r28
    256e:	22 50       	subi	r18, 0x02	; 2
    2570:	31 09       	sbc	r19, r1
    2572:	e2 17       	cp	r30, r18
    2574:	f3 07       	cpc	r31, r19
    2576:	08 f4       	brcc	.+2      	; 0x257a <realloc+0x2e>
    2578:	ac c0       	rjmp	.+344    	; 0x26d2 <realloc+0x186>
    257a:	d9 01       	movw	r26, r18
    257c:	0d 91       	ld	r16, X+
    257e:	1c 91       	ld	r17, X
    2580:	11 97       	sbiw	r26, 0x01	; 1
    2582:	06 17       	cp	r16, r22
    2584:	17 07       	cpc	r17, r23
    2586:	b8 f0       	brcs	.+46     	; 0x25b6 <realloc+0x6a>
    2588:	05 30       	cpi	r16, 0x05	; 5
    258a:	11 05       	cpc	r17, r1
    258c:	08 f4       	brcc	.+2      	; 0x2590 <realloc+0x44>
    258e:	9f c0       	rjmp	.+318    	; 0x26ce <realloc+0x182>
    2590:	a8 01       	movw	r20, r16
    2592:	44 50       	subi	r20, 0x04	; 4
    2594:	51 09       	sbc	r21, r1
    2596:	46 17       	cp	r20, r22
    2598:	57 07       	cpc	r21, r23
    259a:	08 f4       	brcc	.+2      	; 0x259e <realloc+0x52>
    259c:	98 c0       	rjmp	.+304    	; 0x26ce <realloc+0x182>
    259e:	02 50       	subi	r16, 0x02	; 2
    25a0:	11 09       	sbc	r17, r1
    25a2:	06 1b       	sub	r16, r22
    25a4:	17 0b       	sbc	r17, r23
    25a6:	01 93       	st	Z+, r16
    25a8:	11 93       	st	Z+, r17
    25aa:	6d 93       	st	X+, r22
    25ac:	7c 93       	st	X, r23
    25ae:	cf 01       	movw	r24, r30
    25b0:	0e 94 17 12 	call	0x242e	; 0x242e <free>
    25b4:	8c c0       	rjmp	.+280    	; 0x26ce <realloc+0x182>
    25b6:	5b 01       	movw	r10, r22
    25b8:	a0 1a       	sub	r10, r16
    25ba:	b1 0a       	sbc	r11, r17
    25bc:	4e 01       	movw	r8, r28
    25be:	80 0e       	add	r8, r16
    25c0:	91 1e       	adc	r9, r17
    25c2:	a0 91 c9 02 	lds	r26, 0x02C9
    25c6:	b0 91 ca 02 	lds	r27, 0x02CA
    25ca:	61 2c       	mov	r6, r1
    25cc:	71 2c       	mov	r7, r1
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	10 97       	sbiw	r26, 0x00	; 0
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <realloc+0x8c>
    25d6:	49 c0       	rjmp	.+146    	; 0x266a <realloc+0x11e>
    25d8:	a8 15       	cp	r26, r8
    25da:	b9 05       	cpc	r27, r9
    25dc:	c9 f5       	brne	.+114    	; 0x2650 <realloc+0x104>
    25de:	ed 90       	ld	r14, X+
    25e0:	fc 90       	ld	r15, X
    25e2:	11 97       	sbiw	r26, 0x01	; 1
    25e4:	67 01       	movw	r12, r14
    25e6:	42 e0       	ldi	r20, 0x02	; 2
    25e8:	c4 0e       	add	r12, r20
    25ea:	d1 1c       	adc	r13, r1
    25ec:	ca 14       	cp	r12, r10
    25ee:	db 04       	cpc	r13, r11
    25f0:	78 f1       	brcs	.+94     	; 0x2650 <realloc+0x104>
    25f2:	47 01       	movw	r8, r14
    25f4:	8a 18       	sub	r8, r10
    25f6:	9b 08       	sbc	r9, r11
    25f8:	64 01       	movw	r12, r8
    25fa:	42 e0       	ldi	r20, 0x02	; 2
    25fc:	c4 0e       	add	r12, r20
    25fe:	d1 1c       	adc	r13, r1
    2600:	12 96       	adiw	r26, 0x02	; 2
    2602:	bc 90       	ld	r11, X
    2604:	12 97       	sbiw	r26, 0x02	; 2
    2606:	13 96       	adiw	r26, 0x03	; 3
    2608:	ac 91       	ld	r26, X
    260a:	b5 e0       	ldi	r27, 0x05	; 5
    260c:	cb 16       	cp	r12, r27
    260e:	d1 04       	cpc	r13, r1
    2610:	40 f0       	brcs	.+16     	; 0x2622 <realloc+0xd6>
    2612:	b2 82       	std	Z+2, r11	; 0x02
    2614:	a3 83       	std	Z+3, r26	; 0x03
    2616:	91 82       	std	Z+1, r9	; 0x01
    2618:	80 82       	st	Z, r8
    261a:	d9 01       	movw	r26, r18
    261c:	8d 93       	st	X+, r24
    261e:	9c 93       	st	X, r25
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <realloc+0xe8>
    2622:	0e 5f       	subi	r16, 0xFE	; 254
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	0e 0d       	add	r16, r14
    2628:	1f 1d       	adc	r17, r15
    262a:	f9 01       	movw	r30, r18
    262c:	11 83       	std	Z+1, r17	; 0x01
    262e:	00 83       	st	Z, r16
    2630:	eb 2d       	mov	r30, r11
    2632:	fa 2f       	mov	r31, r26
    2634:	61 15       	cp	r22, r1
    2636:	71 05       	cpc	r23, r1
    2638:	31 f0       	breq	.+12     	; 0x2646 <realloc+0xfa>
    263a:	db 01       	movw	r26, r22
    263c:	13 96       	adiw	r26, 0x03	; 3
    263e:	fc 93       	st	X, r31
    2640:	ee 93       	st	-X, r30
    2642:	12 97       	sbiw	r26, 0x02	; 2
    2644:	44 c0       	rjmp	.+136    	; 0x26ce <realloc+0x182>
    2646:	f0 93 ca 02 	sts	0x02CA, r31
    264a:	e0 93 c9 02 	sts	0x02C9, r30
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <realloc+0x182>
    2650:	6d 91       	ld	r22, X+
    2652:	7c 91       	ld	r23, X
    2654:	11 97       	sbiw	r26, 0x01	; 1
    2656:	66 16       	cp	r6, r22
    2658:	77 06       	cpc	r7, r23
    265a:	08 f4       	brcc	.+2      	; 0x265e <realloc+0x112>
    265c:	3b 01       	movw	r6, r22
    265e:	bd 01       	movw	r22, r26
    2660:	12 96       	adiw	r26, 0x02	; 2
    2662:	0d 90       	ld	r0, X+
    2664:	bc 91       	ld	r27, X
    2666:	a0 2d       	mov	r26, r0
    2668:	b4 cf       	rjmp	.-152    	; 0x25d2 <realloc+0x86>
    266a:	60 91 c7 02 	lds	r22, 0x02C7
    266e:	70 91 c8 02 	lds	r23, 0x02C8
    2672:	68 15       	cp	r22, r8
    2674:	79 05       	cpc	r23, r9
    2676:	e9 f4       	brne	.+58     	; 0x26b2 <realloc+0x166>
    2678:	68 16       	cp	r6, r24
    267a:	79 06       	cpc	r7, r25
    267c:	d0 f4       	brcc	.+52     	; 0x26b2 <realloc+0x166>
    267e:	40 91 00 01 	lds	r20, 0x0100
    2682:	50 91 01 01 	lds	r21, 0x0101
    2686:	41 15       	cp	r20, r1
    2688:	51 05       	cpc	r21, r1
    268a:	41 f4       	brne	.+16     	; 0x269c <realloc+0x150>
    268c:	4d b7       	in	r20, 0x3d	; 61
    268e:	5e b7       	in	r21, 0x3e	; 62
    2690:	60 91 04 01 	lds	r22, 0x0104
    2694:	70 91 05 01 	lds	r23, 0x0105
    2698:	46 1b       	sub	r20, r22
    269a:	57 0b       	sbc	r21, r23
    269c:	e4 17       	cp	r30, r20
    269e:	f5 07       	cpc	r31, r21
    26a0:	c0 f4       	brcc	.+48     	; 0x26d2 <realloc+0x186>
    26a2:	f0 93 c8 02 	sts	0x02C8, r31
    26a6:	e0 93 c7 02 	sts	0x02C7, r30
    26aa:	f9 01       	movw	r30, r18
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	0e c0       	rjmp	.+28     	; 0x26ce <realloc+0x182>
    26b2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
    26b6:	7c 01       	movw	r14, r24
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	59 f0       	breq	.+22     	; 0x26d2 <realloc+0x186>
    26bc:	a8 01       	movw	r20, r16
    26be:	be 01       	movw	r22, r28
    26c0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <memcpy>
    26c4:	ce 01       	movw	r24, r28
    26c6:	0e 94 17 12 	call	0x242e	; 0x242e <free>
    26ca:	c7 01       	movw	r24, r14
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <realloc+0x18a>
    26ce:	ce 01       	movw	r24, r28
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <realloc+0x18a>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	ee e0       	ldi	r30, 0x0E	; 14
    26dc:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x8>

000026e0 <memcpy>:
    26e0:	fb 01       	movw	r30, r22
    26e2:	dc 01       	movw	r26, r24
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <memcpy+0xa>
    26e6:	01 90       	ld	r0, Z+
    26e8:	0d 92       	st	X+, r0
    26ea:	41 50       	subi	r20, 0x01	; 1
    26ec:	50 40       	sbci	r21, 0x00	; 0
    26ee:	d8 f7       	brcc	.-10     	; 0x26e6 <memcpy+0x6>
    26f0:	08 95       	ret

000026f2 <fdevopen>:
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	ec 01       	movw	r28, r24
    26fc:	8b 01       	movw	r16, r22
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	31 f4       	brne	.+12     	; 0x270e <fdevopen+0x1c>
    2702:	61 15       	cp	r22, r1
    2704:	71 05       	cpc	r23, r1
    2706:	19 f4       	brne	.+6      	; 0x270e <fdevopen+0x1c>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	38 c0       	rjmp	.+112    	; 0x277e <fdevopen+0x8c>
    270e:	6e e0       	ldi	r22, 0x0E	; 14
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <calloc>
    271a:	fc 01       	movw	r30, r24
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	a1 f3       	breq	.-24     	; 0x2708 <fdevopen+0x16>
    2720:	80 e8       	ldi	r24, 0x80	; 128
    2722:	83 83       	std	Z+3, r24	; 0x03
    2724:	01 15       	cp	r16, r1
    2726:	11 05       	cpc	r17, r1
    2728:	71 f0       	breq	.+28     	; 0x2746 <fdevopen+0x54>
    272a:	13 87       	std	Z+11, r17	; 0x0b
    272c:	02 87       	std	Z+10, r16	; 0x0a
    272e:	81 e8       	ldi	r24, 0x81	; 129
    2730:	83 83       	std	Z+3, r24	; 0x03
    2732:	80 91 cb 02 	lds	r24, 0x02CB
    2736:	90 91 cc 02 	lds	r25, 0x02CC
    273a:	89 2b       	or	r24, r25
    273c:	21 f4       	brne	.+8      	; 0x2746 <fdevopen+0x54>
    273e:	f0 93 cc 02 	sts	0x02CC, r31
    2742:	e0 93 cb 02 	sts	0x02CB, r30
    2746:	20 97       	sbiw	r28, 0x00	; 0
    2748:	c9 f0       	breq	.+50     	; 0x277c <fdevopen+0x8a>
    274a:	d1 87       	std	Z+9, r29	; 0x09
    274c:	c0 87       	std	Z+8, r28	; 0x08
    274e:	83 81       	ldd	r24, Z+3	; 0x03
    2750:	82 60       	ori	r24, 0x02	; 2
    2752:	83 83       	std	Z+3, r24	; 0x03
    2754:	80 91 cd 02 	lds	r24, 0x02CD
    2758:	90 91 ce 02 	lds	r25, 0x02CE
    275c:	89 2b       	or	r24, r25
    275e:	71 f4       	brne	.+28     	; 0x277c <fdevopen+0x8a>
    2760:	f0 93 ce 02 	sts	0x02CE, r31
    2764:	e0 93 cd 02 	sts	0x02CD, r30
    2768:	80 91 cf 02 	lds	r24, 0x02CF
    276c:	90 91 d0 02 	lds	r25, 0x02D0
    2770:	89 2b       	or	r24, r25
    2772:	21 f4       	brne	.+8      	; 0x277c <fdevopen+0x8a>
    2774:	f0 93 d0 02 	sts	0x02D0, r31
    2778:	e0 93 cf 02 	sts	0x02CF, r30
    277c:	cf 01       	movw	r24, r30
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	1f 91       	pop	r17
    2784:	0f 91       	pop	r16
    2786:	08 95       	ret

00002788 <printf>:
    2788:	a0 e0       	ldi	r26, 0x00	; 0
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	ea ec       	ldi	r30, 0xCA	; 202
    278e:	f3 e1       	ldi	r31, 0x13	; 19
    2790:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__+0x20>
    2794:	fe 01       	movw	r30, r28
    2796:	35 96       	adiw	r30, 0x05	; 5
    2798:	61 91       	ld	r22, Z+
    279a:	71 91       	ld	r23, Z+
    279c:	af 01       	movw	r20, r30
    279e:	80 91 cd 02 	lds	r24, 0x02CD
    27a2:	90 91 ce 02 	lds	r25, 0x02CE
    27a6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <vfprintf>
    27aa:	e2 e0       	ldi	r30, 0x02	; 2
    27ac:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__+0x20>

000027b0 <sprintf>:
    27b0:	ae e0       	ldi	r26, 0x0E	; 14
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ee ed       	ldi	r30, 0xDE	; 222
    27b6:	f3 e1       	ldi	r31, 0x13	; 19
    27b8:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x1c>
    27bc:	0d 89       	ldd	r16, Y+21	; 0x15
    27be:	1e 89       	ldd	r17, Y+22	; 0x16
    27c0:	86 e0       	ldi	r24, 0x06	; 6
    27c2:	8c 83       	std	Y+4, r24	; 0x04
    27c4:	1a 83       	std	Y+2, r17	; 0x02
    27c6:	09 83       	std	Y+1, r16	; 0x01
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	9f e7       	ldi	r25, 0x7F	; 127
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	ae 01       	movw	r20, r28
    27d2:	47 5e       	subi	r20, 0xE7	; 231
    27d4:	5f 4f       	sbci	r21, 0xFF	; 255
    27d6:	6f 89       	ldd	r22, Y+23	; 0x17
    27d8:	78 8d       	ldd	r23, Y+24	; 0x18
    27da:	ce 01       	movw	r24, r28
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <vfprintf>
    27e2:	ef 81       	ldd	r30, Y+7	; 0x07
    27e4:	f8 85       	ldd	r31, Y+8	; 0x08
    27e6:	e0 0f       	add	r30, r16
    27e8:	f1 1f       	adc	r31, r17
    27ea:	10 82       	st	Z, r1
    27ec:	2e 96       	adiw	r28, 0x0e	; 14
    27ee:	e4 e0       	ldi	r30, 0x04	; 4
    27f0:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x1c>

000027f4 <vfprintf>:
    27f4:	ac e0       	ldi	r26, 0x0C	; 12
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e0 e0       	ldi	r30, 0x00	; 0
    27fa:	f4 e1       	ldi	r31, 0x14	; 20
    27fc:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
    2800:	7c 01       	movw	r14, r24
    2802:	6b 01       	movw	r12, r22
    2804:	8a 01       	movw	r16, r20
    2806:	fc 01       	movw	r30, r24
    2808:	17 82       	std	Z+7, r1	; 0x07
    280a:	16 82       	std	Z+6, r1	; 0x06
    280c:	83 81       	ldd	r24, Z+3	; 0x03
    280e:	81 ff       	sbrs	r24, 1
    2810:	bd c1       	rjmp	.+890    	; 0x2b8c <vfprintf+0x398>
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	4c 01       	movw	r8, r24
    2818:	f7 01       	movw	r30, r14
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	f6 01       	movw	r30, r12
    281e:	93 fd       	sbrc	r25, 3
    2820:	85 91       	lpm	r24, Z+
    2822:	93 ff       	sbrs	r25, 3
    2824:	81 91       	ld	r24, Z+
    2826:	6f 01       	movw	r12, r30
    2828:	88 23       	and	r24, r24
    282a:	09 f4       	brne	.+2      	; 0x282e <vfprintf+0x3a>
    282c:	ab c1       	rjmp	.+854    	; 0x2b84 <vfprintf+0x390>
    282e:	85 32       	cpi	r24, 0x25	; 37
    2830:	39 f4       	brne	.+14     	; 0x2840 <vfprintf+0x4c>
    2832:	93 fd       	sbrc	r25, 3
    2834:	85 91       	lpm	r24, Z+
    2836:	93 ff       	sbrs	r25, 3
    2838:	81 91       	ld	r24, Z+
    283a:	6f 01       	movw	r12, r30
    283c:	85 32       	cpi	r24, 0x25	; 37
    283e:	29 f4       	brne	.+10     	; 0x284a <vfprintf+0x56>
    2840:	b7 01       	movw	r22, r14
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2848:	e7 cf       	rjmp	.-50     	; 0x2818 <vfprintf+0x24>
    284a:	51 2c       	mov	r5, r1
    284c:	31 2c       	mov	r3, r1
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	20 32       	cpi	r18, 0x20	; 32
    2852:	a0 f4       	brcc	.+40     	; 0x287c <vfprintf+0x88>
    2854:	8b 32       	cpi	r24, 0x2B	; 43
    2856:	69 f0       	breq	.+26     	; 0x2872 <vfprintf+0x7e>
    2858:	30 f4       	brcc	.+12     	; 0x2866 <vfprintf+0x72>
    285a:	80 32       	cpi	r24, 0x20	; 32
    285c:	59 f0       	breq	.+22     	; 0x2874 <vfprintf+0x80>
    285e:	83 32       	cpi	r24, 0x23	; 35
    2860:	69 f4       	brne	.+26     	; 0x287c <vfprintf+0x88>
    2862:	20 61       	ori	r18, 0x10	; 16
    2864:	2c c0       	rjmp	.+88     	; 0x28be <vfprintf+0xca>
    2866:	8d 32       	cpi	r24, 0x2D	; 45
    2868:	39 f0       	breq	.+14     	; 0x2878 <vfprintf+0x84>
    286a:	80 33       	cpi	r24, 0x30	; 48
    286c:	39 f4       	brne	.+14     	; 0x287c <vfprintf+0x88>
    286e:	21 60       	ori	r18, 0x01	; 1
    2870:	26 c0       	rjmp	.+76     	; 0x28be <vfprintf+0xca>
    2872:	22 60       	ori	r18, 0x02	; 2
    2874:	24 60       	ori	r18, 0x04	; 4
    2876:	23 c0       	rjmp	.+70     	; 0x28be <vfprintf+0xca>
    2878:	28 60       	ori	r18, 0x08	; 8
    287a:	21 c0       	rjmp	.+66     	; 0x28be <vfprintf+0xca>
    287c:	27 fd       	sbrc	r18, 7
    287e:	27 c0       	rjmp	.+78     	; 0x28ce <vfprintf+0xda>
    2880:	30 ed       	ldi	r19, 0xD0	; 208
    2882:	38 0f       	add	r19, r24
    2884:	3a 30       	cpi	r19, 0x0A	; 10
    2886:	78 f4       	brcc	.+30     	; 0x28a6 <vfprintf+0xb2>
    2888:	26 ff       	sbrs	r18, 6
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <vfprintf+0xa4>
    288c:	fa e0       	ldi	r31, 0x0A	; 10
    288e:	5f 9e       	mul	r5, r31
    2890:	30 0d       	add	r19, r0
    2892:	11 24       	eor	r1, r1
    2894:	53 2e       	mov	r5, r19
    2896:	13 c0       	rjmp	.+38     	; 0x28be <vfprintf+0xca>
    2898:	8a e0       	ldi	r24, 0x0A	; 10
    289a:	38 9e       	mul	r3, r24
    289c:	30 0d       	add	r19, r0
    289e:	11 24       	eor	r1, r1
    28a0:	33 2e       	mov	r3, r19
    28a2:	20 62       	ori	r18, 0x20	; 32
    28a4:	0c c0       	rjmp	.+24     	; 0x28be <vfprintf+0xca>
    28a6:	8e 32       	cpi	r24, 0x2E	; 46
    28a8:	21 f4       	brne	.+8      	; 0x28b2 <vfprintf+0xbe>
    28aa:	26 fd       	sbrc	r18, 6
    28ac:	6b c1       	rjmp	.+726    	; 0x2b84 <vfprintf+0x390>
    28ae:	20 64       	ori	r18, 0x40	; 64
    28b0:	06 c0       	rjmp	.+12     	; 0x28be <vfprintf+0xca>
    28b2:	8c 36       	cpi	r24, 0x6C	; 108
    28b4:	11 f4       	brne	.+4      	; 0x28ba <vfprintf+0xc6>
    28b6:	20 68       	ori	r18, 0x80	; 128
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <vfprintf+0xca>
    28ba:	88 36       	cpi	r24, 0x68	; 104
    28bc:	41 f4       	brne	.+16     	; 0x28ce <vfprintf+0xda>
    28be:	f6 01       	movw	r30, r12
    28c0:	93 fd       	sbrc	r25, 3
    28c2:	85 91       	lpm	r24, Z+
    28c4:	93 ff       	sbrs	r25, 3
    28c6:	81 91       	ld	r24, Z+
    28c8:	6f 01       	movw	r12, r30
    28ca:	81 11       	cpse	r24, r1
    28cc:	c1 cf       	rjmp	.-126    	; 0x2850 <vfprintf+0x5c>
    28ce:	98 2f       	mov	r25, r24
    28d0:	9f 7d       	andi	r25, 0xDF	; 223
    28d2:	95 54       	subi	r25, 0x45	; 69
    28d4:	93 30       	cpi	r25, 0x03	; 3
    28d6:	28 f4       	brcc	.+10     	; 0x28e2 <vfprintf+0xee>
    28d8:	0c 5f       	subi	r16, 0xFC	; 252
    28da:	1f 4f       	sbci	r17, 0xFF	; 255
    28dc:	ff e3       	ldi	r31, 0x3F	; 63
    28de:	f9 83       	std	Y+1, r31	; 0x01
    28e0:	0d c0       	rjmp	.+26     	; 0x28fc <vfprintf+0x108>
    28e2:	83 36       	cpi	r24, 0x63	; 99
    28e4:	31 f0       	breq	.+12     	; 0x28f2 <vfprintf+0xfe>
    28e6:	83 37       	cpi	r24, 0x73	; 115
    28e8:	71 f0       	breq	.+28     	; 0x2906 <vfprintf+0x112>
    28ea:	83 35       	cpi	r24, 0x53	; 83
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <vfprintf+0xfc>
    28ee:	5b c0       	rjmp	.+182    	; 0x29a6 <vfprintf+0x1b2>
    28f0:	22 c0       	rjmp	.+68     	; 0x2936 <vfprintf+0x142>
    28f2:	f8 01       	movw	r30, r16
    28f4:	80 81       	ld	r24, Z
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	0e 5f       	subi	r16, 0xFE	; 254
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	44 24       	eor	r4, r4
    28fe:	43 94       	inc	r4
    2900:	51 2c       	mov	r5, r1
    2902:	54 01       	movw	r10, r8
    2904:	15 c0       	rjmp	.+42     	; 0x2930 <vfprintf+0x13c>
    2906:	38 01       	movw	r6, r16
    2908:	f2 e0       	ldi	r31, 0x02	; 2
    290a:	6f 0e       	add	r6, r31
    290c:	71 1c       	adc	r7, r1
    290e:	f8 01       	movw	r30, r16
    2910:	a0 80       	ld	r10, Z
    2912:	b1 80       	ldd	r11, Z+1	; 0x01
    2914:	26 ff       	sbrs	r18, 6
    2916:	03 c0       	rjmp	.+6      	; 0x291e <vfprintf+0x12a>
    2918:	65 2d       	mov	r22, r5
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <vfprintf+0x12e>
    291e:	6f ef       	ldi	r22, 0xFF	; 255
    2920:	7f ef       	ldi	r23, 0xFF	; 255
    2922:	c5 01       	movw	r24, r10
    2924:	2c 87       	std	Y+12, r18	; 0x0c
    2926:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <strnlen>
    292a:	2c 01       	movw	r4, r24
    292c:	83 01       	movw	r16, r6
    292e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2930:	2f 77       	andi	r18, 0x7F	; 127
    2932:	22 2e       	mov	r2, r18
    2934:	17 c0       	rjmp	.+46     	; 0x2964 <vfprintf+0x170>
    2936:	38 01       	movw	r6, r16
    2938:	f2 e0       	ldi	r31, 0x02	; 2
    293a:	6f 0e       	add	r6, r31
    293c:	71 1c       	adc	r7, r1
    293e:	f8 01       	movw	r30, r16
    2940:	a0 80       	ld	r10, Z
    2942:	b1 80       	ldd	r11, Z+1	; 0x01
    2944:	26 ff       	sbrs	r18, 6
    2946:	03 c0       	rjmp	.+6      	; 0x294e <vfprintf+0x15a>
    2948:	65 2d       	mov	r22, r5
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <vfprintf+0x15e>
    294e:	6f ef       	ldi	r22, 0xFF	; 255
    2950:	7f ef       	ldi	r23, 0xFF	; 255
    2952:	c5 01       	movw	r24, r10
    2954:	2c 87       	std	Y+12, r18	; 0x0c
    2956:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <strnlen_P>
    295a:	2c 01       	movw	r4, r24
    295c:	2c 85       	ldd	r18, Y+12	; 0x0c
    295e:	20 68       	ori	r18, 0x80	; 128
    2960:	22 2e       	mov	r2, r18
    2962:	83 01       	movw	r16, r6
    2964:	23 fc       	sbrc	r2, 3
    2966:	1b c0       	rjmp	.+54     	; 0x299e <vfprintf+0x1aa>
    2968:	83 2d       	mov	r24, r3
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	48 16       	cp	r4, r24
    296e:	59 06       	cpc	r5, r25
    2970:	b0 f4       	brcc	.+44     	; 0x299e <vfprintf+0x1aa>
    2972:	b7 01       	movw	r22, r14
    2974:	80 e2       	ldi	r24, 0x20	; 32
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    297c:	3a 94       	dec	r3
    297e:	f4 cf       	rjmp	.-24     	; 0x2968 <vfprintf+0x174>
    2980:	f5 01       	movw	r30, r10
    2982:	27 fc       	sbrc	r2, 7
    2984:	85 91       	lpm	r24, Z+
    2986:	27 fe       	sbrs	r2, 7
    2988:	81 91       	ld	r24, Z+
    298a:	5f 01       	movw	r10, r30
    298c:	b7 01       	movw	r22, r14
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2994:	31 10       	cpse	r3, r1
    2996:	3a 94       	dec	r3
    2998:	f1 e0       	ldi	r31, 0x01	; 1
    299a:	4f 1a       	sub	r4, r31
    299c:	51 08       	sbc	r5, r1
    299e:	41 14       	cp	r4, r1
    29a0:	51 04       	cpc	r5, r1
    29a2:	71 f7       	brne	.-36     	; 0x2980 <vfprintf+0x18c>
    29a4:	e5 c0       	rjmp	.+458    	; 0x2b70 <vfprintf+0x37c>
    29a6:	84 36       	cpi	r24, 0x64	; 100
    29a8:	11 f0       	breq	.+4      	; 0x29ae <vfprintf+0x1ba>
    29aa:	89 36       	cpi	r24, 0x69	; 105
    29ac:	39 f5       	brne	.+78     	; 0x29fc <vfprintf+0x208>
    29ae:	f8 01       	movw	r30, r16
    29b0:	27 ff       	sbrs	r18, 7
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <vfprintf+0x1ce>
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	0c 5f       	subi	r16, 0xFC	; 252
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	08 c0       	rjmp	.+16     	; 0x29d2 <vfprintf+0x1de>
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	88 27       	eor	r24, r24
    29c8:	77 fd       	sbrc	r23, 7
    29ca:	80 95       	com	r24
    29cc:	98 2f       	mov	r25, r24
    29ce:	0e 5f       	subi	r16, 0xFE	; 254
    29d0:	1f 4f       	sbci	r17, 0xFF	; 255
    29d2:	2f 76       	andi	r18, 0x6F	; 111
    29d4:	b2 2e       	mov	r11, r18
    29d6:	97 ff       	sbrs	r25, 7
    29d8:	09 c0       	rjmp	.+18     	; 0x29ec <vfprintf+0x1f8>
    29da:	90 95       	com	r25
    29dc:	80 95       	com	r24
    29de:	70 95       	com	r23
    29e0:	61 95       	neg	r22
    29e2:	7f 4f       	sbci	r23, 0xFF	; 255
    29e4:	8f 4f       	sbci	r24, 0xFF	; 255
    29e6:	9f 4f       	sbci	r25, 0xFF	; 255
    29e8:	20 68       	ori	r18, 0x80	; 128
    29ea:	b2 2e       	mov	r11, r18
    29ec:	2a e0       	ldi	r18, 0x0A	; 10
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	a4 01       	movw	r20, r8
    29f2:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__ultoa_invert>
    29f6:	a8 2e       	mov	r10, r24
    29f8:	a8 18       	sub	r10, r8
    29fa:	44 c0       	rjmp	.+136    	; 0x2a84 <vfprintf+0x290>
    29fc:	85 37       	cpi	r24, 0x75	; 117
    29fe:	29 f4       	brne	.+10     	; 0x2a0a <vfprintf+0x216>
    2a00:	2f 7e       	andi	r18, 0xEF	; 239
    2a02:	b2 2e       	mov	r11, r18
    2a04:	2a e0       	ldi	r18, 0x0A	; 10
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	25 c0       	rjmp	.+74     	; 0x2a54 <vfprintf+0x260>
    2a0a:	f2 2f       	mov	r31, r18
    2a0c:	f9 7f       	andi	r31, 0xF9	; 249
    2a0e:	bf 2e       	mov	r11, r31
    2a10:	8f 36       	cpi	r24, 0x6F	; 111
    2a12:	c1 f0       	breq	.+48     	; 0x2a44 <vfprintf+0x250>
    2a14:	18 f4       	brcc	.+6      	; 0x2a1c <vfprintf+0x228>
    2a16:	88 35       	cpi	r24, 0x58	; 88
    2a18:	79 f0       	breq	.+30     	; 0x2a38 <vfprintf+0x244>
    2a1a:	b4 c0       	rjmp	.+360    	; 0x2b84 <vfprintf+0x390>
    2a1c:	80 37       	cpi	r24, 0x70	; 112
    2a1e:	19 f0       	breq	.+6      	; 0x2a26 <vfprintf+0x232>
    2a20:	88 37       	cpi	r24, 0x78	; 120
    2a22:	21 f0       	breq	.+8      	; 0x2a2c <vfprintf+0x238>
    2a24:	af c0       	rjmp	.+350    	; 0x2b84 <vfprintf+0x390>
    2a26:	2f 2f       	mov	r18, r31
    2a28:	20 61       	ori	r18, 0x10	; 16
    2a2a:	b2 2e       	mov	r11, r18
    2a2c:	b4 fe       	sbrs	r11, 4
    2a2e:	0d c0       	rjmp	.+26     	; 0x2a4a <vfprintf+0x256>
    2a30:	8b 2d       	mov	r24, r11
    2a32:	84 60       	ori	r24, 0x04	; 4
    2a34:	b8 2e       	mov	r11, r24
    2a36:	09 c0       	rjmp	.+18     	; 0x2a4a <vfprintf+0x256>
    2a38:	24 ff       	sbrs	r18, 4
    2a3a:	0a c0       	rjmp	.+20     	; 0x2a50 <vfprintf+0x25c>
    2a3c:	9f 2f       	mov	r25, r31
    2a3e:	96 60       	ori	r25, 0x06	; 6
    2a40:	b9 2e       	mov	r11, r25
    2a42:	06 c0       	rjmp	.+12     	; 0x2a50 <vfprintf+0x25c>
    2a44:	28 e0       	ldi	r18, 0x08	; 8
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	05 c0       	rjmp	.+10     	; 0x2a54 <vfprintf+0x260>
    2a4a:	20 e1       	ldi	r18, 0x10	; 16
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <vfprintf+0x260>
    2a50:	20 e1       	ldi	r18, 0x10	; 16
    2a52:	32 e0       	ldi	r19, 0x02	; 2
    2a54:	f8 01       	movw	r30, r16
    2a56:	b7 fe       	sbrs	r11, 7
    2a58:	07 c0       	rjmp	.+14     	; 0x2a68 <vfprintf+0x274>
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	0c 5f       	subi	r16, 0xFC	; 252
    2a64:	1f 4f       	sbci	r17, 0xFF	; 255
    2a66:	06 c0       	rjmp	.+12     	; 0x2a74 <vfprintf+0x280>
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 5f       	subi	r16, 0xFE	; 254
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	a4 01       	movw	r20, r8
    2a76:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__ultoa_invert>
    2a7a:	a8 2e       	mov	r10, r24
    2a7c:	a8 18       	sub	r10, r8
    2a7e:	fb 2d       	mov	r31, r11
    2a80:	ff 77       	andi	r31, 0x7F	; 127
    2a82:	bf 2e       	mov	r11, r31
    2a84:	b6 fe       	sbrs	r11, 6
    2a86:	0b c0       	rjmp	.+22     	; 0x2a9e <vfprintf+0x2aa>
    2a88:	2b 2d       	mov	r18, r11
    2a8a:	2e 7f       	andi	r18, 0xFE	; 254
    2a8c:	a5 14       	cp	r10, r5
    2a8e:	50 f4       	brcc	.+20     	; 0x2aa4 <vfprintf+0x2b0>
    2a90:	b4 fe       	sbrs	r11, 4
    2a92:	0a c0       	rjmp	.+20     	; 0x2aa8 <vfprintf+0x2b4>
    2a94:	b2 fc       	sbrc	r11, 2
    2a96:	08 c0       	rjmp	.+16     	; 0x2aa8 <vfprintf+0x2b4>
    2a98:	2b 2d       	mov	r18, r11
    2a9a:	2e 7e       	andi	r18, 0xEE	; 238
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <vfprintf+0x2b4>
    2a9e:	7a 2c       	mov	r7, r10
    2aa0:	2b 2d       	mov	r18, r11
    2aa2:	03 c0       	rjmp	.+6      	; 0x2aaa <vfprintf+0x2b6>
    2aa4:	7a 2c       	mov	r7, r10
    2aa6:	01 c0       	rjmp	.+2      	; 0x2aaa <vfprintf+0x2b6>
    2aa8:	75 2c       	mov	r7, r5
    2aaa:	24 ff       	sbrs	r18, 4
    2aac:	0d c0       	rjmp	.+26     	; 0x2ac8 <vfprintf+0x2d4>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ea 0d       	add	r30, r10
    2ab2:	f1 1d       	adc	r31, r1
    2ab4:	80 81       	ld	r24, Z
    2ab6:	80 33       	cpi	r24, 0x30	; 48
    2ab8:	11 f4       	brne	.+4      	; 0x2abe <vfprintf+0x2ca>
    2aba:	29 7e       	andi	r18, 0xE9	; 233
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <vfprintf+0x2dc>
    2abe:	22 ff       	sbrs	r18, 2
    2ac0:	06 c0       	rjmp	.+12     	; 0x2ace <vfprintf+0x2da>
    2ac2:	73 94       	inc	r7
    2ac4:	73 94       	inc	r7
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <vfprintf+0x2dc>
    2ac8:	82 2f       	mov	r24, r18
    2aca:	86 78       	andi	r24, 0x86	; 134
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <vfprintf+0x2dc>
    2ace:	73 94       	inc	r7
    2ad0:	23 fd       	sbrc	r18, 3
    2ad2:	13 c0       	rjmp	.+38     	; 0x2afa <vfprintf+0x306>
    2ad4:	20 ff       	sbrs	r18, 0
    2ad6:	06 c0       	rjmp	.+12     	; 0x2ae4 <vfprintf+0x2f0>
    2ad8:	5a 2c       	mov	r5, r10
    2ada:	73 14       	cp	r7, r3
    2adc:	18 f4       	brcc	.+6      	; 0x2ae4 <vfprintf+0x2f0>
    2ade:	53 0c       	add	r5, r3
    2ae0:	57 18       	sub	r5, r7
    2ae2:	73 2c       	mov	r7, r3
    2ae4:	73 14       	cp	r7, r3
    2ae6:	68 f4       	brcc	.+26     	; 0x2b02 <vfprintf+0x30e>
    2ae8:	b7 01       	movw	r22, r14
    2aea:	80 e2       	ldi	r24, 0x20	; 32
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	2c 87       	std	Y+12, r18	; 0x0c
    2af0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2af4:	73 94       	inc	r7
    2af6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2af8:	f5 cf       	rjmp	.-22     	; 0x2ae4 <vfprintf+0x2f0>
    2afa:	73 14       	cp	r7, r3
    2afc:	10 f4       	brcc	.+4      	; 0x2b02 <vfprintf+0x30e>
    2afe:	37 18       	sub	r3, r7
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <vfprintf+0x310>
    2b02:	31 2c       	mov	r3, r1
    2b04:	24 ff       	sbrs	r18, 4
    2b06:	12 c0       	rjmp	.+36     	; 0x2b2c <vfprintf+0x338>
    2b08:	b7 01       	movw	r22, r14
    2b0a:	80 e3       	ldi	r24, 0x30	; 48
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	2c 87       	std	Y+12, r18	; 0x0c
    2b10:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2b14:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b16:	22 ff       	sbrs	r18, 2
    2b18:	17 c0       	rjmp	.+46     	; 0x2b48 <vfprintf+0x354>
    2b1a:	21 ff       	sbrs	r18, 1
    2b1c:	03 c0       	rjmp	.+6      	; 0x2b24 <vfprintf+0x330>
    2b1e:	88 e5       	ldi	r24, 0x58	; 88
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <vfprintf+0x334>
    2b24:	88 e7       	ldi	r24, 0x78	; 120
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	b7 01       	movw	r22, r14
    2b2a:	0c c0       	rjmp	.+24     	; 0x2b44 <vfprintf+0x350>
    2b2c:	82 2f       	mov	r24, r18
    2b2e:	86 78       	andi	r24, 0x86	; 134
    2b30:	59 f0       	breq	.+22     	; 0x2b48 <vfprintf+0x354>
    2b32:	21 fd       	sbrc	r18, 1
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <vfprintf+0x346>
    2b36:	80 e2       	ldi	r24, 0x20	; 32
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <vfprintf+0x348>
    2b3a:	8b e2       	ldi	r24, 0x2B	; 43
    2b3c:	27 fd       	sbrc	r18, 7
    2b3e:	8d e2       	ldi	r24, 0x2D	; 45
    2b40:	b7 01       	movw	r22, r14
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2b48:	a5 14       	cp	r10, r5
    2b4a:	38 f4       	brcc	.+14     	; 0x2b5a <vfprintf+0x366>
    2b4c:	b7 01       	movw	r22, r14
    2b4e:	80 e3       	ldi	r24, 0x30	; 48
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2b56:	5a 94       	dec	r5
    2b58:	f7 cf       	rjmp	.-18     	; 0x2b48 <vfprintf+0x354>
    2b5a:	aa 94       	dec	r10
    2b5c:	f4 01       	movw	r30, r8
    2b5e:	ea 0d       	add	r30, r10
    2b60:	f1 1d       	adc	r31, r1
    2b62:	80 81       	ld	r24, Z
    2b64:	b7 01       	movw	r22, r14
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2b6c:	a1 10       	cpse	r10, r1
    2b6e:	f5 cf       	rjmp	.-22     	; 0x2b5a <vfprintf+0x366>
    2b70:	33 20       	and	r3, r3
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <vfprintf+0x382>
    2b74:	51 ce       	rjmp	.-862    	; 0x2818 <vfprintf+0x24>
    2b76:	b7 01       	movw	r22, r14
    2b78:	80 e2       	ldi	r24, 0x20	; 32
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <fputc>
    2b80:	3a 94       	dec	r3
    2b82:	f6 cf       	rjmp	.-20     	; 0x2b70 <vfprintf+0x37c>
    2b84:	f7 01       	movw	r30, r14
    2b86:	86 81       	ldd	r24, Z+6	; 0x06
    2b88:	97 81       	ldd	r25, Z+7	; 0x07
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <vfprintf+0x39c>
    2b8c:	8f ef       	ldi	r24, 0xFF	; 255
    2b8e:	9f ef       	ldi	r25, 0xFF	; 255
    2b90:	2c 96       	adiw	r28, 0x0c	; 12
    2b92:	e2 e1       	ldi	r30, 0x12	; 18
    2b94:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00002b98 <calloc>:
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	86 9f       	mul	r24, r22
    2ba2:	80 01       	movw	r16, r0
    2ba4:	87 9f       	mul	r24, r23
    2ba6:	10 0d       	add	r17, r0
    2ba8:	96 9f       	mul	r25, r22
    2baa:	10 0d       	add	r17, r0
    2bac:	11 24       	eor	r1, r1
    2bae:	c8 01       	movw	r24, r16
    2bb0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
    2bb4:	ec 01       	movw	r28, r24
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	29 f0       	breq	.+10     	; 0x2bc4 <calloc+0x2c>
    2bba:	a8 01       	movw	r20, r16
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <memset>
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <strnlen_P>:
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	05 90       	lpm	r0, Z+
    2bd4:	61 50       	subi	r22, 0x01	; 1
    2bd6:	70 40       	sbci	r23, 0x00	; 0
    2bd8:	01 10       	cpse	r0, r1
    2bda:	d8 f7       	brcc	.-10     	; 0x2bd2 <strnlen_P+0x2>
    2bdc:	80 95       	com	r24
    2bde:	90 95       	com	r25
    2be0:	8e 0f       	add	r24, r30
    2be2:	9f 1f       	adc	r25, r31
    2be4:	08 95       	ret

00002be6 <memset>:
    2be6:	dc 01       	movw	r26, r24
    2be8:	01 c0       	rjmp	.+2      	; 0x2bec <memset+0x6>
    2bea:	6d 93       	st	X+, r22
    2bec:	41 50       	subi	r20, 0x01	; 1
    2bee:	50 40       	sbci	r21, 0x00	; 0
    2bf0:	e0 f7       	brcc	.-8      	; 0x2bea <memset+0x4>
    2bf2:	08 95       	ret

00002bf4 <strnlen>:
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	61 50       	subi	r22, 0x01	; 1
    2bf8:	70 40       	sbci	r23, 0x00	; 0
    2bfa:	01 90       	ld	r0, Z+
    2bfc:	01 10       	cpse	r0, r1
    2bfe:	d8 f7       	brcc	.-10     	; 0x2bf6 <strnlen+0x2>
    2c00:	80 95       	com	r24
    2c02:	90 95       	com	r25
    2c04:	8e 0f       	add	r24, r30
    2c06:	9f 1f       	adc	r25, r31
    2c08:	08 95       	ret

00002c0a <fputc>:
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	18 2f       	mov	r17, r24
    2c14:	09 2f       	mov	r16, r25
    2c16:	eb 01       	movw	r28, r22
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	81 fd       	sbrc	r24, 1
    2c1c:	03 c0       	rjmp	.+6      	; 0x2c24 <fputc+0x1a>
    2c1e:	8f ef       	ldi	r24, 0xFF	; 255
    2c20:	9f ef       	ldi	r25, 0xFF	; 255
    2c22:	20 c0       	rjmp	.+64     	; 0x2c64 <fputc+0x5a>
    2c24:	82 ff       	sbrs	r24, 2
    2c26:	10 c0       	rjmp	.+32     	; 0x2c48 <fputc+0x3e>
    2c28:	4e 81       	ldd	r20, Y+6	; 0x06
    2c2a:	5f 81       	ldd	r21, Y+7	; 0x07
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c30:	42 17       	cp	r20, r18
    2c32:	53 07       	cpc	r21, r19
    2c34:	7c f4       	brge	.+30     	; 0x2c54 <fputc+0x4a>
    2c36:	e8 81       	ld	r30, Y
    2c38:	f9 81       	ldd	r31, Y+1	; 0x01
    2c3a:	9f 01       	movw	r18, r30
    2c3c:	2f 5f       	subi	r18, 0xFF	; 255
    2c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c40:	39 83       	std	Y+1, r19	; 0x01
    2c42:	28 83       	st	Y, r18
    2c44:	10 83       	st	Z, r17
    2c46:	06 c0       	rjmp	.+12     	; 0x2c54 <fputc+0x4a>
    2c48:	e8 85       	ldd	r30, Y+8	; 0x08
    2c4a:	f9 85       	ldd	r31, Y+9	; 0x09
    2c4c:	81 2f       	mov	r24, r17
    2c4e:	09 95       	icall
    2c50:	89 2b       	or	r24, r25
    2c52:	29 f7       	brne	.-54     	; 0x2c1e <fputc+0x14>
    2c54:	2e 81       	ldd	r18, Y+6	; 0x06
    2c56:	3f 81       	ldd	r19, Y+7	; 0x07
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	3f 83       	std	Y+7, r19	; 0x07
    2c5e:	2e 83       	std	Y+6, r18	; 0x06
    2c60:	81 2f       	mov	r24, r17
    2c62:	90 2f       	mov	r25, r16
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	08 95       	ret

00002c6e <__ultoa_invert>:
    2c6e:	fa 01       	movw	r30, r20
    2c70:	aa 27       	eor	r26, r26
    2c72:	28 30       	cpi	r18, 0x08	; 8
    2c74:	51 f1       	breq	.+84     	; 0x2cca <__ultoa_invert+0x5c>
    2c76:	20 31       	cpi	r18, 0x10	; 16
    2c78:	81 f1       	breq	.+96     	; 0x2cda <__ultoa_invert+0x6c>
    2c7a:	e8 94       	clt
    2c7c:	6f 93       	push	r22
    2c7e:	6e 7f       	andi	r22, 0xFE	; 254
    2c80:	6e 5f       	subi	r22, 0xFE	; 254
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255
    2c84:	8f 4f       	sbci	r24, 0xFF	; 255
    2c86:	9f 4f       	sbci	r25, 0xFF	; 255
    2c88:	af 4f       	sbci	r26, 0xFF	; 255
    2c8a:	b1 e0       	ldi	r27, 0x01	; 1
    2c8c:	3e d0       	rcall	.+124    	; 0x2d0a <__ultoa_invert+0x9c>
    2c8e:	b4 e0       	ldi	r27, 0x04	; 4
    2c90:	3c d0       	rcall	.+120    	; 0x2d0a <__ultoa_invert+0x9c>
    2c92:	67 0f       	add	r22, r23
    2c94:	78 1f       	adc	r23, r24
    2c96:	89 1f       	adc	r24, r25
    2c98:	9a 1f       	adc	r25, r26
    2c9a:	a1 1d       	adc	r26, r1
    2c9c:	68 0f       	add	r22, r24
    2c9e:	79 1f       	adc	r23, r25
    2ca0:	8a 1f       	adc	r24, r26
    2ca2:	91 1d       	adc	r25, r1
    2ca4:	a1 1d       	adc	r26, r1
    2ca6:	6a 0f       	add	r22, r26
    2ca8:	71 1d       	adc	r23, r1
    2caa:	81 1d       	adc	r24, r1
    2cac:	91 1d       	adc	r25, r1
    2cae:	a1 1d       	adc	r26, r1
    2cb0:	20 d0       	rcall	.+64     	; 0x2cf2 <__ultoa_invert+0x84>
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <__ultoa_invert+0x48>
    2cb4:	68 94       	set
    2cb6:	3f 91       	pop	r19
    2cb8:	2a e0       	ldi	r18, 0x0A	; 10
    2cba:	26 9f       	mul	r18, r22
    2cbc:	11 24       	eor	r1, r1
    2cbe:	30 19       	sub	r19, r0
    2cc0:	30 5d       	subi	r19, 0xD0	; 208
    2cc2:	31 93       	st	Z+, r19
    2cc4:	de f6       	brtc	.-74     	; 0x2c7c <__ultoa_invert+0xe>
    2cc6:	cf 01       	movw	r24, r30
    2cc8:	08 95       	ret
    2cca:	46 2f       	mov	r20, r22
    2ccc:	47 70       	andi	r20, 0x07	; 7
    2cce:	40 5d       	subi	r20, 0xD0	; 208
    2cd0:	41 93       	st	Z+, r20
    2cd2:	b3 e0       	ldi	r27, 0x03	; 3
    2cd4:	0f d0       	rcall	.+30     	; 0x2cf4 <__ultoa_invert+0x86>
    2cd6:	c9 f7       	brne	.-14     	; 0x2cca <__ultoa_invert+0x5c>
    2cd8:	f6 cf       	rjmp	.-20     	; 0x2cc6 <__ultoa_invert+0x58>
    2cda:	46 2f       	mov	r20, r22
    2cdc:	4f 70       	andi	r20, 0x0F	; 15
    2cde:	40 5d       	subi	r20, 0xD0	; 208
    2ce0:	4a 33       	cpi	r20, 0x3A	; 58
    2ce2:	18 f0       	brcs	.+6      	; 0x2cea <__ultoa_invert+0x7c>
    2ce4:	49 5d       	subi	r20, 0xD9	; 217
    2ce6:	31 fd       	sbrc	r19, 1
    2ce8:	40 52       	subi	r20, 0x20	; 32
    2cea:	41 93       	st	Z+, r20
    2cec:	02 d0       	rcall	.+4      	; 0x2cf2 <__ultoa_invert+0x84>
    2cee:	a9 f7       	brne	.-22     	; 0x2cda <__ultoa_invert+0x6c>
    2cf0:	ea cf       	rjmp	.-44     	; 0x2cc6 <__ultoa_invert+0x58>
    2cf2:	b4 e0       	ldi	r27, 0x04	; 4
    2cf4:	a6 95       	lsr	r26
    2cf6:	97 95       	ror	r25
    2cf8:	87 95       	ror	r24
    2cfa:	77 95       	ror	r23
    2cfc:	67 95       	ror	r22
    2cfe:	ba 95       	dec	r27
    2d00:	c9 f7       	brne	.-14     	; 0x2cf4 <__ultoa_invert+0x86>
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	61 05       	cpc	r22, r1
    2d06:	71 05       	cpc	r23, r1
    2d08:	08 95       	ret
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	0a 2e       	mov	r0, r26
    2d10:	06 94       	lsr	r0
    2d12:	57 95       	ror	r21
    2d14:	47 95       	ror	r20
    2d16:	37 95       	ror	r19
    2d18:	27 95       	ror	r18
    2d1a:	ba 95       	dec	r27
    2d1c:	c9 f7       	brne	.-14     	; 0x2d10 <__ultoa_invert+0xa2>
    2d1e:	62 0f       	add	r22, r18
    2d20:	73 1f       	adc	r23, r19
    2d22:	84 1f       	adc	r24, r20
    2d24:	95 1f       	adc	r25, r21
    2d26:	a0 1d       	adc	r26, r0
    2d28:	08 95       	ret

00002d2a <__prologue_saves__>:
    2d2a:	2f 92       	push	r2
    2d2c:	3f 92       	push	r3
    2d2e:	4f 92       	push	r4
    2d30:	5f 92       	push	r5
    2d32:	6f 92       	push	r6
    2d34:	7f 92       	push	r7
    2d36:	8f 92       	push	r8
    2d38:	9f 92       	push	r9
    2d3a:	af 92       	push	r10
    2d3c:	bf 92       	push	r11
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	ca 1b       	sub	r28, r26
    2d54:	db 0b       	sbc	r29, r27
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	09 94       	ijmp

00002d62 <__epilogue_restores__>:
    2d62:	2a 88       	ldd	r2, Y+18	; 0x12
    2d64:	39 88       	ldd	r3, Y+17	; 0x11
    2d66:	48 88       	ldd	r4, Y+16	; 0x10
    2d68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d74:	b9 84       	ldd	r11, Y+9	; 0x09
    2d76:	c8 84       	ldd	r12, Y+8	; 0x08
    2d78:	df 80       	ldd	r13, Y+7	; 0x07
    2d7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d80:	1b 81       	ldd	r17, Y+3	; 0x03
    2d82:	aa 81       	ldd	r26, Y+2	; 0x02
    2d84:	b9 81       	ldd	r27, Y+1	; 0x01
    2d86:	ce 0f       	add	r28, r30
    2d88:	d1 1d       	adc	r29, r1
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	ed 01       	movw	r28, r26
    2d96:	08 95       	ret

00002d98 <_exit>:
    2d98:	f8 94       	cli

00002d9a <__stop_program>:
    2d9a:	ff cf       	rjmp	.-2      	; 0x2d9a <__stop_program>
