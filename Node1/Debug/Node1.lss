
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00002cd2  00002d66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080028c  0080028c  00002ef2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e8  00000000  00000000  00002f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030bb  00000000  00000000  00003236  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000111d  00000000  00000000  000062f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ff3  00000000  00000000  0000740e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008c8  00000000  00000000  00008404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000096b  00000000  00000000  00008ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025bb  00000000  00000000  00009637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  0000bbf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_1>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_7>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_13>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e2 ed       	ldi	r30, 0xD2	; 210
     702:	fc e2       	ldi	r31, 0x2C	; 44
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	ac 38       	cpi	r26, 0x8C	; 140
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	ac e8       	ldi	r26, 0x8C	; 140
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a7 3b       	cpi	r26, 0xB7	; 183
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 cd 0a 	call	0x159a	; 0x159a <main>
     724:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
	adcConversionRunning = 0;
}*/

#ifdef NODE_1
	void adc_init(){
		clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
	}
	uint8_t adc_read(char channel){
		volatile char *ext_adc = (char *) 0x1400; 
		if (channel == 'x'){
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
			*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'y'){
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
			*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'l'){
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
			*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'r'){
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
			*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
		}
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
		return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
}
     766:	08 95       	ret

00000768 <can_init>:
#include "can.h"
#include "settings.h"
#include "interrupt_flags.h"
volatile int can_message_received = 0;

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	mcp_init();
     76c:	0e 94 4b 06 	call	0xc96	; 0xc96 <mcp_init>
	
	mcp_bit_modify(0x2B,0b00000011, 0b00000011); //enable receive msg interrupt
     770:	43 e0       	ldi	r20, 0x03	; 3
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	8b e2       	ldi	r24, 0x2B	; 43
     776:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     77a:	40 e6       	ldi	r20, 0x60	; 96
     77c:	60 e6       	ldi	r22, 0x60	; 96
     77e:	80 e6       	ldi	r24, 0x60	; 96
     780:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     784:	4c 2f       	mov	r20, r28
     786:	6f ef       	ldi	r22, 0xFF	; 255
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	//TODO: Filter initialization
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
	
	#ifdef NODE_1
	MCUCR |= (1 << ISC01);
     78e:	85 b7       	in	r24, 0x35	; 53
     790:	82 60       	ori	r24, 0x02	; 2
     792:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     794:	8b b7       	in	r24, 0x3b	; 59
     796:	80 64       	ori	r24, 0x40	; 64
     798:	8b bf       	out	0x3b, r24	; 59
	#endif
}
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <can_transmit>:

void can_transmit(Msg msg){
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <can_transmit+0xe>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <can_transmit+0x10>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <can_transmit+0x12>
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	49 83       	std	Y+1, r20	; 0x01
     7b6:	5a 83       	std	Y+2, r21	; 0x02
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	7c 83       	std	Y+4, r23	; 0x04
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	09 81       	ldd	r16, Y+1	; 0x01
     7c2:	1a 81       	ldd	r17, Y+2	; 0x02
     7c4:	eb 80       	ldd	r14, Y+3	; 0x03
     7c6:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3, buffer = n - 1
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7c8:	b8 01       	movw	r22, r16
     7ca:	75 95       	asr	r23
     7cc:	67 95       	ror	r22
     7ce:	75 95       	asr	r23
     7d0:	67 95       	ror	r22
     7d2:	75 95       	asr	r23
     7d4:	67 95       	ror	r22
     7d6:	81 e5       	ldi	r24, 0x51	; 81
     7d8:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7dc:	60 2f       	mov	r22, r16
     7de:	62 95       	swap	r22
     7e0:	66 0f       	add	r22, r22
     7e2:	60 7e       	andi	r22, 0xE0	; 224
     7e4:	82 e5       	ldi	r24, 0x52	; 82
     7e6:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7ea:	6e 2d       	mov	r22, r14
     7ec:	85 e5       	ldi	r24, 0x55	; 85
     7ee:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7f2:	1e 14       	cp	r1, r14
     7f4:	1f 04       	cpc	r1, r15
     7f6:	84 f4       	brge	.+32     	; 0x818 <can_transmit+0x7a>
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     7fc:	ed 81       	ldd	r30, Y+5	; 0x05
     7fe:	fe 81       	ldd	r31, Y+6	; 0x06
     800:	e0 0f       	add	r30, r16
     802:	f1 1f       	adc	r31, r17
     804:	60 81       	ld	r22, Z
     806:	86 e5       	ldi	r24, 0x56	; 86
     808:	80 0f       	add	r24, r16
     80a:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	0e 15       	cp	r16, r14
     814:	1f 05       	cpc	r17, r15
     816:	91 f7       	brne	.-28     	; 0x7fc <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 1d 06 	call	0xc3a	; 0xc3a <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     828:	26 96       	adiw	r28, 0x06	; 6
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	08 95       	ret

00000842 <can_receive>:

Msg can_receive(){
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	00 d0       	rcall	.+0      	; 0x85c <can_receive+0x1a>
     85c:	00 d0       	rcall	.+0      	; 0x85e <can_receive+0x1c>
     85e:	00 d0       	rcall	.+0      	; 0x860 <can_receive+0x1e>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2, buffer = n - 1
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     86a:	a8 2e       	mov	r10, r24
     86c:	82 e6       	ldi	r24, 0x62	; 98
     86e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     872:	82 95       	swap	r24
     874:	86 95       	lsr	r24
     876:	87 70       	andi	r24, 0x07	; 7
     878:	b1 2c       	mov	r11, r1
     87a:	aa 0c       	add	r10, r10
     87c:	bb 1c       	adc	r11, r11
     87e:	aa 0c       	add	r10, r10
     880:	bb 1c       	adc	r11, r11
     882:	aa 0c       	add	r10, r10
     884:	bb 1c       	adc	r11, r11
     886:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     888:	85 e6       	ldi	r24, 0x65	; 101
     88a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	c8 2e       	mov	r12, r24
     892:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     894:	c6 01       	movw	r24, r12
     896:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
     89a:	98 2e       	mov	r9, r24
     89c:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     89e:	1c 14       	cp	r1, r12
     8a0:	1d 04       	cpc	r1, r13
     8a2:	84 f4       	brge	.+32     	; 0x8c4 <can_receive+0x82>
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f9 2e       	mov	r15, r25
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     8ac:	86 e6       	ldi	r24, 0x66	; 102
     8ae:	80 0f       	add	r24, r16
     8b0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     8b4:	f7 01       	movw	r30, r14
     8b6:	81 93       	st	Z+, r24
     8b8:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     8ba:	0f 5f       	subi	r16, 0xFF	; 255
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	0c 15       	cp	r16, r12
     8c0:	1d 05       	cpc	r17, r13
     8c2:	a4 f3       	brlt	.-24     	; 0x8ac <can_receive+0x6a>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RXnIF to 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	8c e2       	ldi	r24, 0x2C	; 44
     8ca:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	return msg;
     8ce:	ba 82       	std	Y+2, r11	; 0x02
     8d0:	a9 82       	std	Y+1, r10	; 0x01
     8d2:	dc 82       	std	Y+4, r13	; 0x04
     8d4:	cb 82       	std	Y+3, r12	; 0x03
     8d6:	9d 82       	std	Y+5, r9	; 0x05
     8d8:	8e 82       	std	Y+6, r8	; 0x06
     8da:	2a 2d       	mov	r18, r10
     8dc:	3a 81       	ldd	r19, Y+2	; 0x02
     8de:	4c 2d       	mov	r20, r12
     8e0:	5c 81       	ldd	r21, Y+4	; 0x04
     8e2:	69 2d       	mov	r22, r9
     8e4:	78 2d       	mov	r23, r8
}
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	26 96       	adiw	r28, 0x06	; 6
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	af 90       	pop	r10
     90a:	9f 90       	pop	r9
     90c:	8f 90       	pop	r8
     90e:	08 95       	ret

00000910 <__vector_1>:
Msg can_construct_msg(int id, int length, char* data){
	Msg msg = {id,length,data};
	return msg;
} 

ISR(INT0_vect){
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
	can_message_received = 1;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 8d 02 	sts	0x028D, r25
     926:	80 93 8c 02 	sts	0x028C, r24
	//printf("ISR: %d\r\n", can_message_received);
}
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     938:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     93a:	c2 9a       	sbi	0x18, 2	; 24
     93c:	08 95       	ret

0000093e <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	28 97       	sbiw	r28, 0x08	; 8
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
		x = adc_read('x');
     95e:	88 e7       	ldi	r24, 0x78	; 120
     960:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 aa 02 	sts	0x02AA, r25
     96a:	80 93 a9 02 	sts	0x02A9, r24
		y = adc_read('y');
     96e:	89 e7       	ldi	r24, 0x79	; 121
     970:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     974:	28 2f       	mov	r18, r24
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	30 93 ac 02 	sts	0x02AC, r19
     97c:	20 93 ab 02 	sts	0x02AB, r18
		z = !test_bit(PINB, PB2);
     980:	16 b3       	in	r17, 0x16	; 22
     982:	16 95       	lsr	r17
     984:	16 95       	lsr	r17
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	18 27       	eor	r17, r24
     98a:	11 70       	andi	r17, 0x01	; 1
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	10 93 92 02 	sts	0x0292, r17
     992:	00 93 93 02 	sts	0x0293, r16
		
		if (x > xmean){
     996:	80 91 a9 02 	lds	r24, 0x02A9
     99a:	90 91 aa 02 	lds	r25, 0x02AA
     99e:	40 91 0c 01 	lds	r20, 0x010C
     9a2:	50 91 0d 01 	lds	r21, 0x010D
     9a6:	48 17       	cp	r20, r24
     9a8:	59 07       	cpc	r21, r25
     9aa:	b4 f4       	brge	.+44     	; 0x9d8 <joy_get_position+0x9a>
			x = ((x - xmean) * 100) / (xmax - xmean);
     9ac:	bc 01       	movw	r22, r24
     9ae:	64 1b       	sub	r22, r20
     9b0:	75 0b       	sbc	r23, r21
     9b2:	e4 e6       	ldi	r30, 0x64	; 100
     9b4:	e6 9f       	mul	r30, r22
     9b6:	c0 01       	movw	r24, r0
     9b8:	e7 9f       	mul	r30, r23
     9ba:	90 0d       	add	r25, r0
     9bc:	11 24       	eor	r1, r1
     9be:	60 91 0a 01 	lds	r22, 0x010A
     9c2:	70 91 0b 01 	lds	r23, 0x010B
     9c6:	64 1b       	sub	r22, r20
     9c8:	75 0b       	sbc	r23, r21
     9ca:	0e 94 b1 10 	call	0x2162	; 0x2162 <__divmodhi4>
     9ce:	70 93 aa 02 	sts	0x02AA, r23
     9d2:	60 93 a9 02 	sts	0x02A9, r22
     9d6:	17 c0       	rjmp	.+46     	; 0xa06 <joy_get_position+0xc8>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     9d8:	bc 01       	movw	r22, r24
     9da:	64 1b       	sub	r22, r20
     9dc:	75 0b       	sbc	r23, r21
     9de:	e4 e6       	ldi	r30, 0x64	; 100
     9e0:	e6 9f       	mul	r30, r22
     9e2:	c0 01       	movw	r24, r0
     9e4:	e7 9f       	mul	r30, r23
     9e6:	90 0d       	add	r25, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	60 91 90 02 	lds	r22, 0x0290
     9ee:	70 91 91 02 	lds	r23, 0x0291
     9f2:	fa 01       	movw	r30, r20
     9f4:	e6 1b       	sub	r30, r22
     9f6:	f7 0b       	sbc	r31, r23
     9f8:	bf 01       	movw	r22, r30
     9fa:	0e 94 b1 10 	call	0x2162	; 0x2162 <__divmodhi4>
     9fe:	70 93 aa 02 	sts	0x02AA, r23
     a02:	60 93 a9 02 	sts	0x02A9, r22
		}
		if (y > ymean){
     a06:	40 91 08 01 	lds	r20, 0x0108
     a0a:	50 91 09 01 	lds	r21, 0x0109
     a0e:	42 17       	cp	r20, r18
     a10:	53 07       	cpc	r21, r19
     a12:	ac f4       	brge	.+42     	; 0xa3e <joy_get_position+0x100>
			y = ((y - ymean) * 100) / (ymax - ymean);
     a14:	24 1b       	sub	r18, r20
     a16:	35 0b       	sbc	r19, r21
     a18:	64 e6       	ldi	r22, 0x64	; 100
     a1a:	62 9f       	mul	r22, r18
     a1c:	c0 01       	movw	r24, r0
     a1e:	63 9f       	mul	r22, r19
     a20:	90 0d       	add	r25, r0
     a22:	11 24       	eor	r1, r1
     a24:	60 91 06 01 	lds	r22, 0x0106
     a28:	70 91 07 01 	lds	r23, 0x0107
     a2c:	64 1b       	sub	r22, r20
     a2e:	75 0b       	sbc	r23, r21
     a30:	0e 94 b1 10 	call	0x2162	; 0x2162 <__divmodhi4>
     a34:	70 93 ac 02 	sts	0x02AC, r23
     a38:	60 93 ab 02 	sts	0x02AB, r22
     a3c:	15 c0       	rjmp	.+42     	; 0xa68 <joy_get_position+0x12a>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     a3e:	24 1b       	sub	r18, r20
     a40:	35 0b       	sbc	r19, r21
     a42:	64 e6       	ldi	r22, 0x64	; 100
     a44:	62 9f       	mul	r22, r18
     a46:	c0 01       	movw	r24, r0
     a48:	63 9f       	mul	r22, r19
     a4a:	90 0d       	add	r25, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	20 91 8e 02 	lds	r18, 0x028E
     a52:	30 91 8f 02 	lds	r19, 0x028F
     a56:	ba 01       	movw	r22, r20
     a58:	62 1b       	sub	r22, r18
     a5a:	73 0b       	sbc	r23, r19
     a5c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__divmodhi4>
     a60:	70 93 ac 02 	sts	0x02AC, r23
     a64:	60 93 ab 02 	sts	0x02AB, r22
		}
		
		Position pos;
		pos.x = x;
     a68:	e0 90 a9 02 	lds	r14, 0x02A9
     a6c:	c0 90 aa 02 	lds	r12, 0x02AA
		pos.y = y;
     a70:	f0 90 ab 02 	lds	r15, 0x02AB
     a74:	d0 90 ac 02 	lds	r13, 0x02AC
		pos.z = z;
		pos.r_slider = adc_read('r');
     a78:	82 e7       	ldi	r24, 0x72	; 114
     a7a:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     a7e:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%d\r\n",pos.r_slider);
		
		if (x < 4 && x > -4)
     a80:	60 91 a9 02 	lds	r22, 0x02A9
     a84:	70 91 aa 02 	lds	r23, 0x02AA
     a88:	6d 5f       	subi	r22, 0xFD	; 253
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
     a8c:	67 30       	cpi	r22, 0x07	; 7
     a8e:	71 05       	cpc	r23, r1
     a90:	10 f4       	brcc	.+4      	; 0xa96 <joy_get_position+0x158>
		{
			pos.x = 0;
     a92:	e1 2c       	mov	r14, r1
     a94:	c1 2c       	mov	r12, r1
		}
		if (y < 4 && y > -4)
     a96:	e0 91 ab 02 	lds	r30, 0x02AB
     a9a:	f0 91 ac 02 	lds	r31, 0x02AC
     a9e:	33 96       	adiw	r30, 0x03	; 3
     aa0:	37 97       	sbiw	r30, 0x07	; 7
     aa2:	10 f4       	brcc	.+4      	; 0xaa8 <joy_get_position+0x16a>
		{
			pos.y = 0;
     aa4:	f1 2c       	mov	r15, r1
     aa6:	d1 2c       	mov	r13, r1
		}
		return pos;
     aa8:	e9 82       	std	Y+1, r14	; 0x01
     aaa:	ca 82       	std	Y+2, r12	; 0x02
     aac:	fb 82       	std	Y+3, r15	; 0x03
     aae:	dc 82       	std	Y+4, r13	; 0x04
     ab0:	1d 83       	std	Y+5, r17	; 0x05
     ab2:	0e 83       	std	Y+6, r16	; 0x06
     ab4:	98 87       	std	Y+8, r25	; 0x08
     ab6:	8f 83       	std	Y+7, r24	; 0x07
     ab8:	2e 2d       	mov	r18, r14
     aba:	3c 2d       	mov	r19, r12
     abc:	4f 2d       	mov	r20, r15
     abe:	5d 2d       	mov	r21, r13
     ac0:	61 2f       	mov	r22, r17
     ac2:	70 2f       	mov	r23, r16
}
     ac4:	98 85       	ldd	r25, Y+8	; 0x08
     ac6:	28 96       	adiw	r28, 0x08	; 8
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	08 95       	ret

00000ae4 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	28 97       	sbiw	r28, 0x08	; 8
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
	Position pos_cart = joy_get_position();
     b08:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_get_position>
     b0c:	29 83       	std	Y+1, r18	; 0x01
     b0e:	3a 83       	std	Y+2, r19	; 0x02
     b10:	4b 83       	std	Y+3, r20	; 0x03
     b12:	5c 83       	std	Y+4, r21	; 0x04
     b14:	89 80       	ldd	r8, Y+1	; 0x01
     b16:	9a 80       	ldd	r9, Y+2	; 0x02
     b18:	ab 80       	ldd	r10, Y+3	; 0x03
     b1a:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     b1c:	b4 01       	movw	r22, r8
     b1e:	88 27       	eor	r24, r24
     b20:	77 fd       	sbrc	r23, 7
     b22:	80 95       	com	r24
     b24:	98 2f       	mov	r25, r24
     b26:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__floatsisf>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
     b2e:	b5 01       	movw	r22, r10
     b30:	88 27       	eor	r24, r24
     b32:	77 fd       	sbrc	r23, 7
     b34:	80 95       	com	r24
     b36:	98 2f       	mov	r25, r24
     b38:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__floatsisf>
     b3c:	a7 01       	movw	r20, r14
     b3e:	96 01       	movw	r18, r12
     b40:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <atan2>
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b48:	88 9c       	mul	r8, r8
     b4a:	b0 01       	movw	r22, r0
     b4c:	89 9c       	mul	r8, r9
     b4e:	70 0d       	add	r23, r0
     b50:	70 0d       	add	r23, r0
     b52:	11 24       	eor	r1, r1
     b54:	aa 9c       	mul	r10, r10
     b56:	c0 01       	movw	r24, r0
     b58:	ab 9c       	mul	r10, r11
     b5a:	90 0d       	add	r25, r0
     b5c:	90 0d       	add	r25, r0
     b5e:	11 24       	eor	r1, r1
     b60:	68 0f       	add	r22, r24
     b62:	79 1f       	adc	r23, r25
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__floatunsisf>
     b6c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <sqrt>
     b70:	4b 01       	movw	r8, r22
     b72:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     b74:	20 ee       	ldi	r18, 0xE0	; 224
     b76:	3e e2       	ldi	r19, 0x2E	; 46
     b78:	45 e6       	ldi	r20, 0x65	; 101
     b7a:	52 e4       	ldi	r21, 0x42	; 66
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__mulsf3>
     b84:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     b88:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__fixsfsi>
	return pos_pol;
     b92:	7b 01       	movw	r14, r22
}
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	28 96       	adiw	r28, 0x08	; 8
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	08 95       	ret

00000bba <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     bba:	0e 94 72 05 	call	0xae4	; 0xae4 <joy_get_position_polar>
     bbe:	9b 01       	movw	r18, r22
	if(pos_pol.amplitude > 80){
     bc0:	81 35       	cpi	r24, 0x51	; 81
     bc2:	91 05       	cpc	r25, r1
     bc4:	7c f0       	brlt	.+30     	; 0xbe4 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     bc6:	68 38       	cpi	r22, 0x88	; 136
     bc8:	71 05       	cpc	r23, r1
     bca:	74 f4       	brge	.+28     	; 0xbe8 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     bcc:	6e 32       	cpi	r22, 0x2E	; 46
     bce:	71 05       	cpc	r23, r1
     bd0:	6c f4       	brge	.+26     	; 0xbec <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     bd2:	24 3d       	cpi	r18, 0xD4	; 212
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	38 07       	cpc	r19, r24
     bd8:	5c f4       	brge	.+22     	; 0xbf0 <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     bda:	2a 37       	cpi	r18, 0x7A	; 122
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	54 f0       	brlt	.+20     	; 0xbf4 <joy_get_direction+0x3a>
			return DOWN;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	08 95       	ret

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     bf4:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     bf6:	08 95       	ret

00000bf8 <mcp_read>:
#include "settings.h"
#include "spi.h"
#include "mcp.h"

char mcp_read(char address){
     bf8:	cf 93       	push	r28
     bfa:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, MCP_PIN);
     bfc:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(address);
     c04:	8c 2f       	mov	r24, r28
     c06:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     c10:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <mcp_write>:

void mcp_write(char address, char data){
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	d8 2f       	mov	r29, r24
     c1c:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, MCP_PIN);
     c1e:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(address);
     c26:	8d 2f       	mov	r24, r29
     c28:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(data);
     c2c:	8c 2f       	mov	r24, r28
     c2e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     c32:	c4 9a       	sbi	0x18, 4	; 24
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, MCP_PIN);
     c3a:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,MCP_PIN);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	48 2b       	or	r20, r24
     c48:	59 2b       	or	r21, r25
     c4a:	cb 01       	movw	r24, r22
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
	clear_bit(PORTB, MCP_PIN);
	spi_master_transmit(command);
     c50:	84 2b       	or	r24, r20
     c52:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c56:	c4 9a       	sbi	0x18, 4	; 24
     c58:	08 95       	ret

00000c5a <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,MCP_PIN);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	18 2f       	mov	r17, r24
     c62:	d6 2f       	mov	r29, r22
     c64:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, MCP_PIN);
     c66:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(address);
     c6e:	81 2f       	mov	r24, r17
     c70:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(mask);
     c74:	8d 2f       	mov	r24, r29
     c76:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(data);
     c7a:	8c 2f       	mov	r24, r28
     c7c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c80:	c4 9a       	sbi	0x18, 4	; 24
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	08 95       	ret

00000c8a <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, MCP_PIN);
     c8a:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);
     c8c:	80 ec       	ldi	r24, 0xC0	; 192
     c8e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c92:	c4 9a       	sbi	0x18, 4	; 24
     c94:	08 95       	ret

00000c96 <mcp_init>:
}
	
void mcp_init(){
	spi_master_init();
     c96:	0e 94 50 06 	call	0xca0	; 0xca0 <spi_master_init>
	mcp_reset();
     c9a:	0e 94 45 06 	call	0xc8a	; 0xc8a <mcp_reset>
     c9e:	08 95       	ret

00000ca0 <spi_master_init>:
#include "spi.h"

void spi_master_init()
{
	#ifdef NODE_1
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
     ca0:	87 b3       	in	r24, 0x17	; 23
     ca2:	80 6b       	ori	r24, 0xB0	; 176
     ca4:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
     ca6:	be 98       	cbi	0x17, 6	; 23
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
     ca8:	81 e5       	ldi	r24, 0x51	; 81
     caa:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
     cac:	c4 9a       	sbi	0x18, 4	; 24
     cae:	08 95       	ret

00000cb0 <spi_master_transmit>:
	#endif
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
     cb0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
     cb2:	77 9b       	sbis	0x0e, 7	; 14
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <spi_master_transmit+0x2>
	return SPDR;
     cb6:	8f b1       	in	r24, 0x0f	; 15
}
     cb8:	08 95       	ret

00000cba <uart_putchar>:
	#endif
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     cba:	5d 9b       	sbis	0x0b, 5	; 11
     cbc:	fe cf       	rjmp	.-4      	; 0xcba <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
     cbe:	8c b9       	out	0x0c, r24	; 12
     cc0:	08 95       	ret

00000cc2 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     cc2:	5f 9b       	sbis	0x0b, 7	; 11
     cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <uart_getchar>
	return UDR0;
     cc6:	8c b1       	in	r24, 0x0c	; 12
     cc8:	08 95       	ret

00000cca <uart_init>:
#include <stdio.h>
#include "settings.h"
#include "uart.h"

void uart_init(int baudRate){
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     cca:	aa 27       	eor	r26, r26
     ccc:	97 fd       	sbrc	r25, 7
     cce:	a0 95       	com	r26
     cd0:	ba 2f       	mov	r27, r26
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	9c 01       	movw	r18, r24
     ce4:	ad 01       	movw	r20, r26
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	44 1f       	adc	r20, r20
     cec:	55 1f       	adc	r21, r21
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	8b e4       	ldi	r24, 0x4B	; 75
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 c5 10 	call	0x218a	; 0x218a <__divmodsi4>
     d02:	21 50       	subi	r18, 0x01	; 1
     d04:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     d06:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
     d08:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     d0a:	88 e1       	ldi	r24, 0x18	; 24
     d0c:	8a b9       	out	0x0a, r24	; 10
	
	#ifdef NODE_1
		UCSR0C = ((1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00));
     d0e:	8e e8       	ldi	r24, 0x8E	; 142
     d10:	80 bd       	out	0x20, r24	; 32
	#else
		UCSR0C = ((1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	#endif
	fdevopen(uart_putchar, uart_getchar);
     d12:	61 e6       	ldi	r22, 0x61	; 97
     d14:	76 e0       	ldi	r23, 0x06	; 6
     d16:	8d e5       	ldi	r24, 0x5D	; 93
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	0e 94 14 13 	call	0x2628	; 0x2628 <fdevopen>
     d1e:	08 95       	ret

00000d20 <game_init>:
		free(msg_received.data);	
	}
	*/
	
	int OCRA_num = (long)F_CPU/(256);						//Prescale with 256 to get seconds
	OCR3AH = OCRA_num >> 8;
     d20:	8b e4       	ldi	r24, 0x4B	; 75
     d22:	80 93 87 00 	sts	0x0087, r24
	OCR3AL = OCRA_num;									//Sets the value for the compare match to 10240
     d26:	10 92 86 00 	sts	0x0086, r1
	TCCR3A = (1 << WGM31) | (1 << WGM30);				//Compare match mode
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS32); //clock source to be used by the Timer/Counter clkI/O/8
     d30:	8c e1       	ldi	r24, 0x1C	; 28
     d32:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = (1 << OCIE3A);								//Interrupt on compare match
     d36:	80 e1       	ldi	r24, 0x10	; 16
     d38:	80 93 7d 00 	sts	0x007D, r24
     d3c:	08 95       	ret

00000d3e <game_run>:
}

void game_run(){
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	63 97       	sbiw	r28, 0x13	; 19
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
	if (!initiated){
     d5a:	80 91 96 02 	lds	r24, 0x0296
     d5e:	90 91 97 02 	lds	r25, 0x0297
     d62:	89 2b       	or	r24, r25
     d64:	41 f4       	brne	.+16     	; 0xd76 <game_run+0x38>
		game_init();
     d66:	0e 94 90 06 	call	0xd20	; 0xd20 <game_init>
		initiated = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 97 02 	sts	0x0297, r25
     d72:	80 93 96 02 	sts	0x0296, r24
	}
	   
	if(game_second_passed == 1){
     d76:	80 91 a3 02 	lds	r24, 0x02A3
     d7a:	90 91 a4 02 	lds	r25, 0x02A4
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	91 f5       	brne	.+100    	; 0xde6 <game_run+0xa8>
		game_time++;
     d82:	80 91 94 02 	lds	r24, 0x0294
     d86:	90 91 95 02 	lds	r25, 0x0295
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	90 93 95 02 	sts	0x0295, r25
     d90:	80 93 94 02 	sts	0x0294, r24
		char str[5];
		sprintf(str,"%5d",game_time);
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	89 eb       	ldi	r24, 0xB9	; 185
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
     da0:	7e 01       	movw	r14, r28
     da2:	8f e0       	ldi	r24, 0x0F	; 15
     da4:	e8 0e       	add	r14, r24
     da6:	f1 1c       	adc	r15, r1
     da8:	ff 92       	push	r15
     daa:	ef 92       	push	r14
     dac:	0e 94 73 13 	call	0x26e6	; 0x26e6 <sprintf>
		//oled_clear_line(1);
		oled_print_string(str,0,0,8,0);
     db0:	00 e0       	ldi	r16, 0x00	; 0
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	28 e0       	ldi	r18, 0x08	; 8
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	c7 01       	movw	r24, r14
     dbc:	0e 94 24 0c 	call	0x1848	; 0x1848 <oled_print_string>
		oled_print_string("herms er best",0,1,8,0);
     dc0:	28 e0       	ldi	r18, 0x08	; 8
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	8d eb       	ldi	r24, 0xBD	; 189
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 24 0c 	call	0x1848	; 0x1848 <oled_print_string>
		oled_refresh();
     dce:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <oled_refresh>
		game_second_passed = 0;
     dd2:	10 92 a4 02 	sts	0x02A4, r1
     dd6:	10 92 a3 02 	sts	0x02A3, r1
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
		
	}
	//SEND POSITION
	Position position = joy_get_position();
     de6:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_get_position>
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03
     df0:	5c 83       	std	Y+4, r21	; 0x04
     df2:	6d 83       	std	Y+5, r22	; 0x05
     df4:	7e 83       	std	Y+6, r23	; 0x06
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
	Msg msg;
	msg.id = 42;
     dfa:	8a e2       	ldi	r24, 0x2A	; 42
     dfc:	48 2f       	mov	r20, r24
     dfe:	89 87       	std	Y+9, r24	; 0x09
     e00:	1a 86       	std	Y+10, r1	; 0x0a
	msg.length = sizeof(position);
	msg.data = (char*) &position;
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 87       	std	Y+13, r24	; 0x0d
	can_transmit(msg);
     e0a:	98 e0       	ldi	r25, 0x08	; 8
     e0c:	69 2f       	mov	r22, r25
     e0e:	9b 87       	std	Y+11, r25	; 0x0b
     e10:	1c 86       	std	Y+12, r1	; 0x0c
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	0e 94 cf 03 	call	0x79e	; 0x79e <can_transmit>
	
	printf("l = %d\r\n",msg.length);
     e1c:	1f 92       	push	r1
     e1e:	88 e0       	ldi	r24, 0x08	; 8
     e20:	8f 93       	push	r24
     e22:	8b ec       	ldi	r24, 0xCB	; 203
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	0e 94 5f 13 	call	0x26be	; 0x26be <printf>
	//can_transmit(can_construct_msg(42, sizeof(position), (char*) &position));
	
	//GET SCORE
	if (game_occluded){
     e2e:	80 91 a5 02 	lds	r24, 0x02A5
     e32:	90 91 a6 02 	lds	r25, 0x02A6
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	89 2b       	or	r24, r25
     e40:	59 f1       	breq	.+86     	; 0xe98 <game_run+0x15a>
		score++;
     e42:	80 91 98 02 	lds	r24, 0x0298
     e46:	90 91 99 02 	lds	r25, 0x0299
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	90 93 99 02 	sts	0x0299, r25
     e50:	80 93 98 02 	sts	0x0298, r24
		char scr[5];
		sprintf(scr,"%5d",score);
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	89 eb       	ldi	r24, 0xB9	; 185
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	7e 01       	movw	r14, r28
     e62:	8f e0       	ldi	r24, 0x0F	; 15
     e64:	e8 0e       	add	r14, r24
     e66:	f1 1c       	adc	r15, r1
     e68:	ff 92       	push	r15
     e6a:	ef 92       	push	r14
     e6c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <sprintf>
		oled_print_string(scr,5,5,8,0);
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	28 e0       	ldi	r18, 0x08	; 8
     e76:	45 e0       	ldi	r20, 0x05	; 5
     e78:	65 e0       	ldi	r22, 0x05	; 5
     e7a:	c7 01       	movw	r24, r14
     e7c:	0e 94 24 0c 	call	0x1848	; 0x1848 <oled_print_string>
		oled_refresh();
     e80:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <oled_refresh>
		game_occluded = 0;
     e84:	10 92 a6 02 	sts	0x02A6, r1
     e88:	10 92 a5 02 	sts	0x02A5, r1
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
		}
		free(msg_received.data);
	}
	can_message_received = 0;
	*/
}
     e98:	63 96       	adiw	r28, 0x13	; 19
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	08 95       	ret

00000eb2 <__vector_7>:

ISR(TIMER3_COMPA_vect){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	8f 93       	push	r24
     ebe:	9f 93       	push	r25
	game_second_passed = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 a4 02 	sts	0x02A4, r25
     ec8:	80 93 a3 02 	sts	0x02A3, r24
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <action_run_game>:
	}
}

//Action functions
void action_run_game(Menu* self){
	state = in_game;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 a0 02 	sts	0x02A0, r24
     ee0:	08 95       	ret

00000ee2 <action_start_transition_right>:
}
void action_start_transition_right(Menu* self){
	joy_held = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	90 93 9b 02 	sts	0x029B, r25
     eea:	80 93 9a 02 	sts	0x029A, r24
	transition = 1;
     eee:	90 93 9f 02 	sts	0x029F, r25
     ef2:	80 93 9e 02 	sts	0x029E, r24
     ef6:	08 95       	ret

00000ef8 <action_toggle_name>:
}
void action_toggle_name(Menu* self){	//TEST FOR CHECK BOXES IN OPTIONS
	self->entries[self->cursor]= "Herman";
     ef8:	dc 01       	movw	r26, r24
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	13 97       	sbiw	r26, 0x03	; 3
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	14 96       	adiw	r26, 0x04	; 4
     f08:	8d 91       	ld	r24, X+
     f0a:	9c 91       	ld	r25, X
     f0c:	15 97       	sbiw	r26, 0x05	; 5
     f0e:	e8 0f       	add	r30, r24
     f10:	f9 1f       	adc	r31, r25
     f12:	8f e0       	ldi	r24, 0x0F	; 15
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
     f1a:	08 95       	ret

00000f1c <draw_list>:
			joy_held = 0;
			transition = 0;
		}
	}
}
void draw_list(Menu* self){
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     f2a:	dc 01       	movw	r26, r24
     f2c:	16 96       	adiw	r26, 0x06	; 6
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	17 97       	sbiw	r26, 0x07	; 7
     f34:	18 16       	cp	r1, r24
     f36:	19 06       	cpc	r1, r25
     f38:	e4 f4       	brge	.+56     	; 0xf72 <draw_list+0x56>
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
     f3c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     f3e:	ce 01       	movw	r24, r28
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	d7 01       	movw	r26, r14
     f46:	14 96       	adiw	r26, 0x04	; 4
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	15 97       	sbiw	r26, 0x05	; 5
     f4e:	e8 0f       	add	r30, r24
     f50:	f9 1f       	adc	r31, r25
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	25 e0       	ldi	r18, 0x05	; 5
     f58:	4c 2f       	mov	r20, r28
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	0e 94 24 0c 	call	0x1848	; 0x1848 <oled_print_string>
		}
	}
}
void draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     f64:	21 96       	adiw	r28, 0x01	; 1
     f66:	f7 01       	movw	r30, r14
     f68:	86 81       	ldd	r24, Z+6	; 0x06
     f6a:	97 81       	ldd	r25, Z+7	; 0x07
     f6c:	c8 17       	cp	r28, r24
     f6e:	d9 07       	cpc	r29, r25
     f70:	34 f3       	brlt	.-52     	; 0xf3e <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	//Where to go next
	Direction dir = joy_get_direction();
     f72:	0e 94 dd 05 	call	0xbba	; 0xbba <joy_get_direction>
	if((dir == LEFT) & (self->super_menu != NULL)){
		self = self->super_menu;
	}
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <add_list_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS POINT----------

//Functions for adding entries and nodes
void add_list_entries(Menu* menu, char* entries[], int num_of_new_entries){
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	8c 01       	movw	r16, r24
     f9e:	d6 2f       	mov	r29, r22
     fa0:	c7 2f       	mov	r28, r23
     fa2:	5a 01       	movw	r10, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
     fa4:	6a 01       	movw	r12, r20
     fa6:	cc 0c       	add	r12, r12
     fa8:	dd 1c       	adc	r13, r13
     faa:	c6 01       	movw	r24, r12
     fac:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
     fb0:	d8 01       	movw	r26, r16
     fb2:	15 96       	adiw	r26, 0x05	; 5
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	14 97       	sbiw	r26, 0x04	; 4
	
	for(int i = 0; i < num_of_new_entries; i++){
     fba:	1a 14       	cp	r1, r10
     fbc:	1b 04       	cpc	r1, r11
     fbe:	54 f5       	brge	.+84     	; 0x1014 <add_list_entries+0x90>
     fc0:	8d 2e       	mov	r8, r29
     fc2:	9c 2e       	mov	r9, r28
     fc4:	c0 e0       	ldi	r28, 0x00	; 0
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
     fc8:	f8 01       	movw	r30, r16
     fca:	e4 80       	ldd	r14, Z+4	; 0x04
     fcc:	f5 80       	ldd	r15, Z+5	; 0x05
     fce:	ec 0e       	add	r14, r28
     fd0:	fd 1e       	adc	r15, r29
     fd2:	d4 01       	movw	r26, r8
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	df 01       	movw	r26, r30
     fda:	0d 90       	ld	r0, X+
     fdc:	00 20       	and	r0, r0
     fde:	e9 f7       	brne	.-6      	; 0xfda <add_list_entries+0x56>
     fe0:	cd 01       	movw	r24, r26
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	8e 1b       	sub	r24, r30
     fe6:	9f 0b       	sbc	r25, r31
     fe8:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
     fec:	f7 01       	movw	r30, r14
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
		menu->entries[i] =  entries[i];								  //Adds each string
     ff2:	d4 01       	movw	r26, r8
     ff4:	8d 91       	ld	r24, X+
     ff6:	9d 91       	ld	r25, X+
     ff8:	4d 01       	movw	r8, r26
     ffa:	d8 01       	movw	r26, r16
     ffc:	14 96       	adiw	r26, 0x04	; 4
     ffe:	ed 91       	ld	r30, X+
    1000:	fc 91       	ld	r31, X
    1002:	15 97       	sbiw	r26, 0x05	; 5
    1004:	ec 0f       	add	r30, r28
    1006:	fd 1f       	adc	r31, r29
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
    100c:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_list_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
    100e:	cc 16       	cp	r12, r28
    1010:	dd 06       	cpc	r13, r29
    1012:	d1 f6       	brne	.-76     	; 0xfc8 <add_list_entries+0x44>
		////empty->name = malloc(strlen(entries[i]) * sizeof(char));
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		//menu->num_of_entries+=1;
	}
	menu->num_of_entries = num_of_new_entries;
    1014:	f8 01       	movw	r30, r16
    1016:	b7 82       	std	Z+7, r11	; 0x07
    1018:	a6 82       	std	Z+6, r10	; 0x06
	menu->cursor = 0; //To make sure the cursor is not something else
    101a:	13 82       	std	Z+3, r1	; 0x03
    101c:	12 82       	std	Z+2, r1	; 0x02
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	08 95       	ret

00001038 <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	9f 81       	ldd	r25, Y+7	; 0x07
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	9f 83       	std	Y+7, r25	; 0x07
    1050:	8e 83       	std	Y+6, r24	; 0x06
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    1052:	fb 01       	movw	r30, r22
    1054:	d1 87       	std	Z+9, r29	; 0x09
    1056:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    1058:	6e 81       	ldd	r22, Y+6	; 0x06
    105a:	7f 81       	ldd	r23, Y+7	; 0x07
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	8a 85       	ldd	r24, Y+10	; 0x0a
    1062:	9b 85       	ldd	r25, Y+11	; 0x0b
    1064:	0e 94 41 12 	call	0x2482	; 0x2482 <realloc>
    1068:	9b 87       	std	Y+11, r25	; 0x0b
    106a:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    106c:	ee 80       	ldd	r14, Y+6	; 0x06
    106e:	ff 80       	ldd	r15, Y+7	; 0x07
    1070:	f1 e0       	ldi	r31, 0x01	; 1
    1072:	ef 1a       	sub	r14, r31
    1074:	f0 e8       	ldi	r31, 0x80	; 128
    1076:	ff 0a       	sbc	r15, r31
    1078:	ee 0c       	add	r14, r14
    107a:	ff 1c       	adc	r15, r15
    107c:	e8 0e       	add	r14, r24
    107e:	f9 1e       	adc	r15, r25
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
    1088:	f7 01       	movw	r30, r14
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    108e:	ee 81       	ldd	r30, Y+6	; 0x06
    1090:	ff 81       	ldd	r31, Y+7	; 0x07
    1092:	e1 50       	subi	r30, 0x01	; 1
    1094:	f0 48       	sbci	r31, 0x80	; 128
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	8a 85       	ldd	r24, Y+10	; 0x0a
    109c:	9b 85       	ldd	r25, Y+11	; 0x0b
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	11 83       	std	Z+1, r17	; 0x01
    10a4:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
    10a6:	6e 81       	ldd	r22, Y+6	; 0x06
    10a8:	7f 81       	ldd	r23, Y+7	; 0x07
    10aa:	66 0f       	add	r22, r22
    10ac:	77 1f       	adc	r23, r23
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	0e 94 41 12 	call	0x2482	; 0x2482 <realloc>
    10b6:	9d 83       	std	Y+5, r25	; 0x05
    10b8:	8c 83       	std	Y+4, r24	; 0x04
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
    10ba:	ee 80       	ldd	r14, Y+6	; 0x06
    10bc:	ff 80       	ldd	r15, Y+7	; 0x07
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	ef 1a       	sub	r14, r31
    10c2:	f0 e8       	ldi	r31, 0x80	; 128
    10c4:	ff 0a       	sbc	r15, r31
    10c6:	ee 0c       	add	r14, r14
    10c8:	ff 1c       	adc	r15, r15
    10ca:	e8 0e       	add	r14, r24
    10cc:	f9 1e       	adc	r15, r25
    10ce:	f8 01       	movw	r30, r16
    10d0:	a0 81       	ld	r26, Z
    10d2:	b1 81       	ldd	r27, Z+1	; 0x01
    10d4:	fd 01       	movw	r30, r26
    10d6:	01 90       	ld	r0, Z+
    10d8:	00 20       	and	r0, r0
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <add_sub_menu+0x9e>
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	cf 01       	movw	r24, r30
    10e0:	8a 1b       	sub	r24, r26
    10e2:	9b 0b       	sbc	r25, r27
    10e4:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
    10e8:	f7 01       	movw	r30, r14
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
    10ee:	f8 01       	movw	r30, r16
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	ee 81       	ldd	r30, Y+6	; 0x06
    10f6:	ff 81       	ldd	r31, Y+7	; 0x07
    10f8:	e1 50       	subi	r30, 0x01	; 1
    10fa:	f0 48       	sbci	r31, 0x80	; 128
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	3d 81       	ldd	r19, Y+5	; 0x05
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	08 95       	ret

0000111a <menu_init>:


Menu* current_menu = &main_menu;

//The initializer - How the menus are related
void menu_init(){
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	6c 97       	sbiw	r28, 0x1c	; 28
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
	add_sub_menu(&main_menu, &play_game);
    112e:	60 e1       	ldi	r22, 0x10	; 16
    1130:	71 e0       	ldi	r23, 0x01	; 1
    1132:	80 e8       	ldi	r24, 0x80	; 128
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    113a:	86 e0       	ldi	r24, 0x06	; 6
    113c:	ed e9       	ldi	r30, 0x9D	; 157
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	de 01       	movw	r26, r28
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	01 90       	ld	r0, Z+
    1146:	0d 92       	st	X+, r0
    1148:	8a 95       	dec	r24
    114a:	e1 f7       	brne	.-8      	; 0x1144 <menu_init+0x2a>
	add_list_entries(&control, control_entr, 3);
    114c:	43 e0       	ldi	r20, 0x03	; 3
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 c2 07 	call	0xf84	; 0xf84 <add_list_entries>
	add_sub_menu(&options, &control);
    115e:	60 e4       	ldi	r22, 0x40	; 64
    1160:	71 e0       	ldi	r23, 0x01	; 1
    1162:	80 e6       	ldi	r24, 0x60	; 96
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    116a:	88 e0       	ldi	r24, 0x08	; 8
    116c:	e3 ea       	ldi	r30, 0xA3	; 163
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	de 01       	movw	r26, r28
    1172:	17 96       	adiw	r26, 0x07	; 7
    1174:	01 90       	ld	r0, Z+
    1176:	0d 92       	st	X+, r0
    1178:	8a 95       	dec	r24
    117a:	e1 f7       	brne	.-8      	; 0x1174 <menu_init+0x5a>
	add_list_entries(&contro, contro_entr, 4);
    117c:	44 e0       	ldi	r20, 0x04	; 4
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	be 01       	movw	r22, r28
    1182:	69 5f       	subi	r22, 0xF9	; 249
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	80 e3       	ldi	r24, 0x30	; 48
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0e 94 c2 07 	call	0xf84	; 0xf84 <add_list_entries>
	add_sub_menu(&options, &contro);
    118e:	60 e3       	ldi	r22, 0x30	; 48
    1190:	71 e0       	ldi	r23, 0x01	; 1
    1192:	80 e6       	ldi	r24, 0x60	; 96
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    119a:	60 e6       	ldi	r22, 0x60	; 96
    119c:	71 e0       	ldi	r23, 0x01	; 1
    119e:	80 e8       	ldi	r24, 0x80	; 128
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	add_sub_menu(&main_menu, &toggle);
    11a6:	60 e2       	ldi	r22, 0x20	; 32
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	eb ea       	ldi	r30, 0xAB	; 171
    11b6:	f1 e0       	ldi	r31, 0x01	; 1
    11b8:	de 01       	movw	r26, r28
    11ba:	1f 96       	adiw	r26, 0x0f	; 15
    11bc:	01 90       	ld	r0, Z+
    11be:	0d 92       	st	X+, r0
    11c0:	8a 95       	dec	r24
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <menu_init+0xa2>
	add_list_entries(&difficulty, diff_entr, 3);
    11c4:	43 e0       	ldi	r20, 0x03	; 3
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	be 01       	movw	r22, r28
    11ca:	61 5f       	subi	r22, 0xF1	; 241
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	80 e7       	ldi	r24, 0x70	; 112
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 c2 07 	call	0xf84	; 0xf84 <add_list_entries>
	add_sub_menu(&main_menu, &difficulty);
    11d6:	60 e7       	ldi	r22, 0x70	; 112
    11d8:	71 e0       	ldi	r23, 0x01	; 1
    11da:	80 e8       	ldi	r24, 0x80	; 128
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	
	char* high_entr[4] = {"1. Herman","2. Raoul","3. Alle andre","-inf^inf. Hans"};
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	e1 eb       	ldi	r30, 0xB1	; 177
    11e6:	f1 e0       	ldi	r31, 0x01	; 1
    11e8:	de 01       	movw	r26, r28
    11ea:	55 96       	adiw	r26, 0x15	; 21
    11ec:	01 90       	ld	r0, Z+
    11ee:	0d 92       	st	X+, r0
    11f0:	8a 95       	dec	r24
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <menu_init+0xd2>
	add_list_entries(&highscore, high_entr,4);
    11f4:	44 e0       	ldi	r20, 0x04	; 4
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	be 01       	movw	r22, r28
    11fa:	6b 5e       	subi	r22, 0xEB	; 235
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	80 e5       	ldi	r24, 0x50	; 80
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 c2 07 	call	0xf84	; 0xf84 <add_list_entries>
	add_sub_menu(&main_menu, &highscore);
    1206:	60 e5       	ldi	r22, 0x50	; 80
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 1c 08 	call	0x1038	; 0x1038 <add_sub_menu>
	
}
    1212:	6c 96       	adiw	r28, 0x1c	; 28
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <menu_run_display>:
	
}
//void action_animation(){}

void menu_run_display(){
	oled_clear_screen();
    1224:	0e 94 8c 0c 	call	0x1918	; 0x1918 <oled_clear_screen>
	current_menu->draw(current_menu);
    1228:	80 91 0e 01 	lds	r24, 0x010E
    122c:	90 91 0f 01 	lds	r25, 0x010F
    1230:	dc 01       	movw	r26, r24
    1232:	1c 96       	adiw	r26, 0x0c	; 12
    1234:	ed 91       	ld	r30, X+
    1236:	fc 91       	ld	r31, X
    1238:	1d 97       	sbiw	r26, 0x0d	; 13
    123a:	09 95       	icall
	printf(current_menu->name);
    123c:	e0 91 0e 01 	lds	r30, 0x010E
    1240:	f0 91 0f 01 	lds	r31, 0x010F
    1244:	81 81       	ldd	r24, Z+1	; 0x01
    1246:	8f 93       	push	r24
    1248:	80 81       	ld	r24, Z
    124a:	8f 93       	push	r24
    124c:	0e 94 5f 13 	call	0x26be	; 0x26be <printf>
	oled_refresh();
    1250:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <oled_refresh>
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	08 95       	ret

0000125a <menu_transition>:
}
void menu_transition(Menu *self, Direction dir){
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
	//If done with transition
	if (transition_count == 8){
    1262:	40 91 9c 02 	lds	r20, 0x029C
    1266:	50 91 9d 02 	lds	r21, 0x029D
    126a:	48 30       	cpi	r20, 0x08	; 8
    126c:	51 05       	cpc	r21, r1
    126e:	a9 f5       	brne	.+106    	; 0x12da <menu_transition+0x80>
		//wrapping
		if(transition_dir == UP){
    1270:	20 91 92 01 	lds	r18, 0x0192
    1274:	21 30       	cpi	r18, 0x01	; 1
    1276:	99 f4       	brne	.+38     	; 0x129e <menu_transition+0x44>
			if(self->cursor == -1){
    1278:	fc 01       	movw	r30, r24
    127a:	22 81       	ldd	r18, Z+2	; 0x02
    127c:	33 81       	ldd	r19, Z+3	; 0x03
    127e:	2f 3f       	cpi	r18, 0xFF	; 255
    1280:	ff ef       	ldi	r31, 0xFF	; 255
    1282:	3f 07       	cpc	r19, r31
    1284:	31 f4       	brne	.+12     	; 0x1292 <menu_transition+0x38>
				self->cursor = 4;
    1286:	24 e0       	ldi	r18, 0x04	; 4
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	fc 01       	movw	r30, r24
    128c:	33 83       	std	Z+3, r19	; 0x03
    128e:	22 83       	std	Z+2, r18	; 0x02
    1290:	18 c0       	rjmp	.+48     	; 0x12c2 <menu_transition+0x68>
			}
			else{
				self->cursor--;
    1292:	21 50       	subi	r18, 0x01	; 1
    1294:	31 09       	sbc	r19, r1
    1296:	fc 01       	movw	r30, r24
    1298:	33 83       	std	Z+3, r19	; 0x03
    129a:	22 83       	std	Z+2, r18	; 0x02
    129c:	12 c0       	rjmp	.+36     	; 0x12c2 <menu_transition+0x68>
			}
		}
		else if(transition_dir == DOWN){
    129e:	23 30       	cpi	r18, 0x03	; 3
    12a0:	81 f4       	brne	.+32     	; 0x12c2 <menu_transition+0x68>
			//wrapping
			if(self->cursor == self->num_of_entries){
    12a2:	fc 01       	movw	r30, r24
    12a4:	22 81       	ldd	r18, Z+2	; 0x02
    12a6:	33 81       	ldd	r19, Z+3	; 0x03
    12a8:	46 81       	ldd	r20, Z+6	; 0x06
    12aa:	57 81       	ldd	r21, Z+7	; 0x07
    12ac:	24 17       	cp	r18, r20
    12ae:	35 07       	cpc	r19, r21
    12b0:	19 f4       	brne	.+6      	; 0x12b8 <menu_transition+0x5e>
				self->cursor = 0;
    12b2:	13 82       	std	Z+3, r1	; 0x03
    12b4:	12 82       	std	Z+2, r1	; 0x02
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <menu_transition+0x68>
			}
			else{
				self->cursor++;
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	33 83       	std	Z+3, r19	; 0x03
    12c0:	22 83       	std	Z+2, r18	; 0x02
			}
		}
		transition_count = 0;
    12c2:	10 92 9d 02 	sts	0x029D, r1
    12c6:	10 92 9c 02 	sts	0x029C, r1
		transition_dir = NEUTRAL;
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	80 93 92 01 	sts	0x0192, r24
		transition = 0;
    12d0:	10 92 9f 02 	sts	0x029F, r1
    12d4:	10 92 9e 02 	sts	0x029E, r1
    12d8:	6d c0       	rjmp	.+218    	; 0x13b4 <menu_transition+0x15a>
	}
	//Update the transition
	else if(transition == 1 && (transition_dir == UP || transition_dir == DOWN)){
    12da:	20 91 9e 02 	lds	r18, 0x029E
    12de:	30 91 9f 02 	lds	r19, 0x029F
    12e2:	21 30       	cpi	r18, 0x01	; 1
    12e4:	31 05       	cpc	r19, r1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <menu_transition+0x90>
    12e8:	65 c0       	rjmp	.+202    	; 0x13b4 <menu_transition+0x15a>
    12ea:	20 91 92 01 	lds	r18, 0x0192
    12ee:	21 30       	cpi	r18, 0x01	; 1
    12f0:	71 f0       	breq	.+28     	; 0x130e <menu_transition+0xb4>
    12f2:	23 30       	cpi	r18, 0x03	; 3
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <menu_transition+0x9e>
    12f6:	5e c0       	rjmp	.+188    	; 0x13b4 <menu_transition+0x15a>
    12f8:	33 c0       	rjmp	.+102    	; 0x1360 <menu_transition+0x106>
		else{
			oled_invert_rectangle(x1,y1,x2,y2);
			oled_invert_rectangle(x1,y11,x2,y22);
			
		}
		transition_count++;
    12fa:	80 91 9c 02 	lds	r24, 0x029C
    12fe:	90 91 9d 02 	lds	r25, 0x029D
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	90 93 9d 02 	sts	0x029D, r25
    1308:	80 93 9c 02 	sts	0x029C, r24
    130c:	53 c0       	rjmp	.+166    	; 0x13b4 <menu_transition+0x15a>
			sign = -1;
		}
		
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    130e:	fc 01       	movw	r30, r24
    1310:	02 81       	ldd	r16, Z+2	; 0x02
    1312:	13 81       	ldd	r17, Z+3	; 0x03
    1314:	00 0f       	add	r16, r16
    1316:	11 1f       	adc	r17, r17
    1318:	00 0f       	add	r16, r16
    131a:	11 1f       	adc	r17, r17
    131c:	00 0f       	add	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	e8 01       	movw	r28, r16
    1322:	c4 1b       	sub	r28, r20
    1324:	d5 0b       	sbc	r29, r21
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
    1326:	08 5f       	subi	r16, 0xF8	; 248
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	04 1b       	sub	r16, r20
    132c:	15 0b       	sbc	r17, r21
		int y11= y1 + sign*transition_step;
    132e:	80 91 90 01 	lds	r24, 0x0190
    1332:	90 91 91 01 	lds	r25, 0x0191
		int y22= y2 + sign*transition_step;
    1336:	98 01       	movw	r18, r16
    1338:	28 1b       	sub	r18, r24
    133a:	39 0b       	sbc	r19, r25
		
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
		int y11= y1 + sign*transition_step;
    133c:	be 01       	movw	r22, r28
    133e:	68 1b       	sub	r22, r24
    1340:	79 0b       	sbc	r23, r25
		int y22= y2 + sign*transition_step;
		
		if (transition_dir == UP){
			oled_invert_rectangle(x1,y11,x2,y22);
    1342:	40 e4       	ldi	r20, 0x40	; 64
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <oled_invert_rectangle>
			oled_invert_rectangle(x1,y1,x2,y2);
    134e:	98 01       	movw	r18, r16
    1350:	40 e4       	ldi	r20, 0x40	; 64
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	be 01       	movw	r22, r28
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <oled_invert_rectangle>
    135e:	cd cf       	rjmp	.-102    	; 0x12fa <menu_transition+0xa0>
			sign = -1;
		}
		
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    1360:	fc 01       	movw	r30, r24
    1362:	22 81       	ldd	r18, Z+2	; 0x02
    1364:	33 81       	ldd	r19, Z+3	; 0x03
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	22 0f       	add	r18, r18
    1370:	33 1f       	adc	r19, r19
    1372:	ba 01       	movw	r22, r20
    1374:	62 0f       	add	r22, r18
    1376:	73 1f       	adc	r23, r19
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
    1378:	28 5f       	subi	r18, 0xF8	; 248
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	42 0f       	add	r20, r18
    137e:	53 1f       	adc	r21, r19
		int y11= y1 + sign*transition_step;
    1380:	20 91 90 01 	lds	r18, 0x0190
    1384:	30 91 91 01 	lds	r19, 0x0191
    1388:	eb 01       	movw	r28, r22
    138a:	c2 0f       	add	r28, r18
    138c:	d3 1f       	adc	r29, r19
		int y22= y2 + sign*transition_step;
    138e:	8a 01       	movw	r16, r20
    1390:	02 0f       	add	r16, r18
    1392:	13 1f       	adc	r17, r19
			oled_invert_rectangle(x1,y11,x2,y22);
			oled_invert_rectangle(x1,y1,x2,y2);
			
		}
		else{
			oled_invert_rectangle(x1,y1,x2,y2);
    1394:	9a 01       	movw	r18, r20
    1396:	40 e4       	ldi	r20, 0x40	; 64
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <oled_invert_rectangle>
			oled_invert_rectangle(x1,y11,x2,y22);
    13a2:	98 01       	movw	r18, r16
    13a4:	40 e4       	ldi	r20, 0x40	; 64
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	be 01       	movw	r22, r28
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <oled_invert_rectangle>
    13b2:	a3 cf       	rjmp	.-186    	; 0x12fa <menu_transition+0xa0>
			
		}
		transition_count++;
	}
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
void draw_menu(Menu* self){
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	28 97       	sbiw	r28, 0x08	; 8
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	6c 01       	movw	r12, r24
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    13e0:	dc 01       	movw	r26, r24
    13e2:	16 96       	adiw	r26, 0x06	; 6
    13e4:	8d 91       	ld	r24, X+
    13e6:	9c 91       	ld	r25, X
    13e8:	17 97       	sbiw	r26, 0x07	; 7
    13ea:	18 16       	cp	r1, r24
    13ec:	19 06       	cpc	r1, r25
    13ee:	f4 f4       	brge	.+60     	; 0x142c <draw_menu+0x6e>
    13f0:	e1 2c       	mov	r14, r1
    13f2:	f1 2c       	mov	r15, r1
		oled_print_string(self->entries[i],0,i,5,0);
    13f4:	c7 01       	movw	r24, r14
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	d6 01       	movw	r26, r12
    13fc:	14 96       	adiw	r26, 0x04	; 4
    13fe:	ed 91       	ld	r30, X+
    1400:	fc 91       	ld	r31, X
    1402:	15 97       	sbiw	r26, 0x05	; 5
    1404:	e8 0f       	add	r30, r24
    1406:	f9 1f       	adc	r31, r25
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	25 e0       	ldi	r18, 0x05	; 5
    140e:	4e 2d       	mov	r20, r14
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	91 81       	ldd	r25, Z+1	; 0x01
    1416:	0e 94 24 0c 	call	0x1848	; 0x1848 <oled_print_string>
}

//Drawing functions (change to update?)
void draw_menu(Menu* self){
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    141a:	bf ef       	ldi	r27, 0xFF	; 255
    141c:	eb 1a       	sub	r14, r27
    141e:	fb 0a       	sbc	r15, r27
    1420:	f6 01       	movw	r30, r12
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	97 81       	ldd	r25, Z+7	; 0x07
    1426:	e8 16       	cp	r14, r24
    1428:	f9 06       	cpc	r15, r25
    142a:	24 f3       	brlt	.-56     	; 0x13f4 <draw_menu+0x36>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
    142c:	d6 01       	movw	r26, r12
    142e:	12 96       	adiw	r26, 0x02	; 2
    1430:	2d 91       	ld	r18, X+
    1432:	3c 91       	ld	r19, X
    1434:	13 97       	sbiw	r26, 0x03	; 3
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	22 0f       	add	r18, r18
    143c:	33 1f       	adc	r19, r19
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	b9 01       	movw	r22, r18
    1448:	68 50       	subi	r22, 0x08	; 8
    144a:	71 09       	sbc	r23, r1
    144c:	40 e4       	ldi	r20, 0x40	; 64
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
    1458:	0e 94 dd 05 	call	0xbba	; 0xbba <joy_get_direction>
    145c:	18 2f       	mov	r17, r24
	Position pos = joy_get_position();
    145e:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_get_position>
    1462:	29 83       	std	Y+1, r18	; 0x01
    1464:	3a 83       	std	Y+2, r19	; 0x02
    1466:	4b 83       	std	Y+3, r20	; 0x03
    1468:	5c 83       	std	Y+4, r21	; 0x04
    146a:	6d 83       	std	Y+5, r22	; 0x05
    146c:	7e 83       	std	Y+6, r23	; 0x06
    146e:	8f 83       	std	Y+7, r24	; 0x07
    1470:	98 87       	std	Y+8, r25	; 0x08
	if(transition == 0){
    1472:	20 91 9e 02 	lds	r18, 0x029E
    1476:	30 91 9f 02 	lds	r19, 0x029F
    147a:	23 2b       	or	r18, r19
    147c:	09 f0       	breq	.+2      	; 0x1480 <draw_menu+0xc2>
    147e:	6a c0       	rjmp	.+212    	; 0x1554 <draw_menu+0x196>
		switch(dir){
    1480:	11 30       	cpi	r17, 0x01	; 1
    1482:	61 f0       	breq	.+24     	; 0x149c <draw_menu+0xde>
    1484:	34 f4       	brge	.+12     	; 0x1492 <draw_menu+0xd4>
    1486:	1f 3f       	cpi	r17, 0xFF	; 255
    1488:	09 f4       	brne	.+2      	; 0x148c <draw_menu+0xce>
    148a:	4b c0       	rjmp	.+150    	; 0x1522 <draw_menu+0x164>
    148c:	11 23       	and	r17, r17
    148e:	51 f1       	breq	.+84     	; 0x14e4 <draw_menu+0x126>
    1490:	75 c0       	rjmp	.+234    	; 0x157c <draw_menu+0x1be>
    1492:	12 30       	cpi	r17, 0x02	; 2
    1494:	b1 f0       	breq	.+44     	; 0x14c2 <draw_menu+0x104>
    1496:	13 30       	cpi	r17, 0x03	; 3
    1498:	51 f0       	breq	.+20     	; 0x14ae <draw_menu+0xf0>
    149a:	70 c0       	rjmp	.+224    	; 0x157c <draw_menu+0x1be>
			case UP:
				transition = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	90 93 9f 02 	sts	0x029F, r25
    14a4:	80 93 9e 02 	sts	0x029E, r24
				transition_dir = UP;
    14a8:	80 93 92 01 	sts	0x0192, r24
				break;
    14ac:	67 c0       	rjmp	.+206    	; 0x157c <draw_menu+0x1be>
			case DOWN:
				transition = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	90 93 9f 02 	sts	0x029F, r25
    14b6:	80 93 9e 02 	sts	0x029E, r24
				transition_dir = DOWN;
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	80 93 92 01 	sts	0x0192, r24
				break;
    14c0:	5d c0       	rjmp	.+186    	; 0x157c <draw_menu+0x1be>
			case LEFT:
				if (self->super_menu != NULL){
    14c2:	f6 01       	movw	r30, r12
    14c4:	80 85       	ldd	r24, Z+8	; 0x08
    14c6:	91 85       	ldd	r25, Z+9	; 0x09
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f4       	brne	.+2      	; 0x14ce <draw_menu+0x110>
    14cc:	57 c0       	rjmp	.+174    	; 0x157c <draw_menu+0x1be>
					self = self->super_menu;
					joy_held = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	90 93 9b 02 	sts	0x029B, r25
    14d6:	80 93 9a 02 	sts	0x029A, r24
					transition = 1;
    14da:	90 93 9f 02 	sts	0x029F, r25
    14de:	80 93 9e 02 	sts	0x029E, r24
    14e2:	4c c0       	rjmp	.+152    	; 0x157c <draw_menu+0x1be>
				}
				break;
			case RIGHT:
				if (self->sub_menus[self->cursor]->num_of_entries != 0){
    14e4:	d6 01       	movw	r26, r12
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	8d 91       	ld	r24, X+
    14ea:	9c 91       	ld	r25, X
    14ec:	13 97       	sbiw	r26, 0x03	; 3
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	1a 96       	adiw	r26, 0x0a	; 10
    14f4:	ed 91       	ld	r30, X+
    14f6:	fc 91       	ld	r31, X
    14f8:	1b 97       	sbiw	r26, 0x0b	; 11
    14fa:	e8 0f       	add	r30, r24
    14fc:	f9 1f       	adc	r31, r25
    14fe:	01 90       	ld	r0, Z+
    1500:	f0 81       	ld	r31, Z
    1502:	e0 2d       	mov	r30, r0
    1504:	86 81       	ldd	r24, Z+6	; 0x06
    1506:	97 81       	ldd	r25, Z+7	; 0x07
    1508:	89 2b       	or	r24, r25
    150a:	c1 f1       	breq	.+112    	; 0x157c <draw_menu+0x1be>
					self = self->sub_menus[self->cursor];
					joy_held = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 9b 02 	sts	0x029B, r25
    1514:	80 93 9a 02 	sts	0x029A, r24
					transition = 1;
    1518:	90 93 9f 02 	sts	0x029F, r25
    151c:	80 93 9e 02 	sts	0x029E, r24
    1520:	2d c0       	rjmp	.+90     	; 0x157c <draw_menu+0x1be>
				}
				break;
			case NEUTRAL:
				if(pos.z  == 1 && self->sub_menus[self->cursor]->action != NULL){
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	49 f5       	brne	.+82     	; 0x157c <draw_menu+0x1be>
    152a:	f6 01       	movw	r30, r12
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	02 84       	ldd	r0, Z+10	; 0x0a
    1536:	f3 85       	ldd	r31, Z+11	; 0x0b
    1538:	e0 2d       	mov	r30, r0
    153a:	e8 0f       	add	r30, r24
    153c:	f9 1f       	adc	r31, r25
    153e:	01 90       	ld	r0, Z+
    1540:	f0 81       	ld	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	06 84       	ldd	r0, Z+14	; 0x0e
    1546:	f7 85       	ldd	r31, Z+15	; 0x0f
    1548:	e0 2d       	mov	r30, r0
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	b9 f0       	breq	.+46     	; 0x157c <draw_menu+0x1be>
					self->sub_menus[self->cursor]->action(self);
    154e:	c6 01       	movw	r24, r12
    1550:	09 95       	icall
    1552:	14 c0       	rjmp	.+40     	; 0x157c <draw_menu+0x1be>
				}
				break;
		}
	}
	else{
		if (transition_dir == UP || transition_dir == DOWN){
    1554:	60 91 92 01 	lds	r22, 0x0192
    1558:	86 2f       	mov	r24, r22
    155a:	8d 7f       	andi	r24, 0xFD	; 253
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	21 f4       	brne	.+8      	; 0x1568 <draw_menu+0x1aa>
			menu_transition(self, transition_dir);
    1560:	c6 01       	movw	r24, r12
    1562:	0e 94 2d 09 	call	0x125a	; 0x125a <menu_transition>
    1566:	0a c0       	rjmp	.+20     	; 0x157c <draw_menu+0x1be>
		}
		else if(dir == NEUTRAL){
    1568:	1f 3f       	cpi	r17, 0xFF	; 255
    156a:	41 f4       	brne	.+16     	; 0x157c <draw_menu+0x1be>
			joy_held = 0;
    156c:	10 92 9b 02 	sts	0x029B, r1
    1570:	10 92 9a 02 	sts	0x029A, r1
			transition = 0;
    1574:	10 92 9f 02 	sts	0x029F, r1
    1578:	10 92 9e 02 	sts	0x029E, r1
		}
	}
}
    157c:	28 96       	adiw	r28, 0x08	; 8
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	08 95       	ret

0000159a <main>:
volatile int oled_refresh_timer = 0;
volatile int game_interrupt_flag = 1;
State state = in_menu;

int main(void)
{
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <main+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <main+0x8>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <main+0xa>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	
	MCUCR |= (1<<SRE);	//Enable external memory
    15a8:	85 b7       	in	r24, 0x35	; 53
    15aa:	80 68       	ori	r24, 0x80	; 128
    15ac:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); 
    15ae:	80 b7       	in	r24, 0x30	; 48
    15b0:	80 62       	ori	r24, 0x20	; 32
    15b2:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600);
    15b4:	80 e8       	ldi	r24, 0x80	; 128
    15b6:	95 e2       	ldi	r25, 0x25	; 37
    15b8:	0e 94 65 06 	call	0xcca	; 0xcca <uart_init>
	can_init(MODE_NORMAL);
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	adc_init();
    15c4:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
    15c8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <oled_init>
	joy_init();
    15cc:	0e 94 9c 04 	call	0x938	; 0x938 <joy_init>
	touch_init();
    15d0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <touch_init>
	menu_init();
    15d4:	0e 94 8d 08 	call	0x111a	; 0x111a <menu_init>
	sei();
    15d8:	78 94       	sei
				case OCCLUDED:
					game_occluded = 1;
					break;
				
				default:
					printf("ID unknown\r");
    15da:	0f 2e       	mov	r0, r31
    15dc:	ff e7       	ldi	r31, 0x7F	; 127
    15de:	ef 2e       	mov	r14, r31
    15e0:	f2 e0       	ldi	r31, 0x02	; 2
    15e2:	ff 2e       	mov	r15, r31
    15e4:	f0 2d       	mov	r31, r0
		//joy_print();
		if (can_message_received){
			Msg msg_received =  can_receive();
			switch (msg_received.id){
				case OCCLUDED:
					game_occluded = 1;
    15e6:	01 e0       	ldi	r16, 0x01	; 1
    15e8:	10 e0       	ldi	r17, 0x00	; 0
	sei();
	//sram_test();
	while (1)
	{
		//joy_print();
		if (can_message_received){
    15ea:	80 91 8c 02 	lds	r24, 0x028C
    15ee:	90 91 8d 02 	lds	r25, 0x028D
    15f2:	89 2b       	or	r24, r25
    15f4:	f9 f0       	breq	.+62     	; 0x1634 <main+0x9a>
			Msg msg_received =  can_receive();
    15f6:	0e 94 21 04 	call	0x842	; 0x842 <can_receive>
    15fa:	29 83       	std	Y+1, r18	; 0x01
    15fc:	3a 83       	std	Y+2, r19	; 0x02
    15fe:	4b 83       	std	Y+3, r20	; 0x03
    1600:	5c 83       	std	Y+4, r21	; 0x04
    1602:	6d 83       	std	Y+5, r22	; 0x05
    1604:	7e 83       	std	Y+6, r23	; 0x06
			switch (msg_received.id){
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	03 97       	sbiw	r24, 0x03	; 3
    160c:	29 f4       	brne	.+10     	; 0x1618 <main+0x7e>
				case OCCLUDED:
					game_occluded = 1;
    160e:	10 93 a6 02 	sts	0x02A6, r17
    1612:	00 93 a5 02 	sts	0x02A5, r16
					break;
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <main+0x8a>
				
				default:
					printf("ID unknown\r");
    1618:	ff 92       	push	r15
    161a:	ef 92       	push	r14
    161c:	0e 94 5f 13 	call	0x26be	; 0x26be <printf>
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
			}
			free(msg_received.data);
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	0e 94 b2 11 	call	0x2364	; 0x2364 <free>
			can_message_received = 0;
    162c:	10 92 8d 02 	sts	0x028D, r1
    1630:	10 92 8c 02 	sts	0x028C, r1
		}
		
		switch (state){
    1634:	80 91 a0 02 	lds	r24, 0x02A0
    1638:	88 23       	and	r24, r24
    163a:	19 f0       	breq	.+6      	; 0x1642 <main+0xa8>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	71 f0       	breq	.+28     	; 0x165c <main+0xc2>
    1640:	d4 cf       	rjmp	.-88     	; 0x15ea <main+0x50>
			case in_menu:
				if(oled_refresh_timer == 1){
    1642:	80 91 a1 02 	lds	r24, 0x02A1
    1646:	90 91 a2 02 	lds	r25, 0x02A2
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	71 f6       	brne	.-100    	; 0x15ea <main+0x50>
					menu_run_display();
    164e:	0e 94 12 09 	call	0x1224	; 0x1224 <menu_run_display>
					oled_refresh_timer = 0;
    1652:	10 92 a2 02 	sts	0x02A2, r1
    1656:	10 92 a1 02 	sts	0x02A1, r1
    165a:	c7 cf       	rjmp	.-114    	; 0x15ea <main+0x50>
				}
				break;
			case in_game:		
				if(game_interrupt_flag == 1){
    165c:	80 91 93 01 	lds	r24, 0x0193
    1660:	90 91 94 01 	lds	r25, 0x0194
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	09 f6       	brne	.-126    	; 0x15ea <main+0x50>
					game_run();
    1668:	0e 94 9f 06 	call	0xd3e	; 0xd3e <game_run>
    166c:	be cf       	rjmp	.-132    	; 0x15ea <main+0x50>

0000166e <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    166e:	20 91 9b 01 	lds	r18, 0x019B
    1672:	30 91 9c 01 	lds	r19, 0x019C
    1676:	23 2b       	or	r18, r19
    1678:	d1 f0       	breq	.+52     	; 0x16ae <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    167a:	20 91 a7 02 	lds	r18, 0x02A7
    167e:	30 91 a8 02 	lds	r19, 0x02A8
    1682:	21 15       	cp	r18, r1
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	39 07       	cpc	r19, r25
    1688:	bc f4       	brge	.+46     	; 0x16b8 <oled_write_data+0x4a>
			//printf("Outside of screen!\n");
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    168a:	40 91 97 01 	lds	r20, 0x0197
    168e:	50 91 98 01 	lds	r21, 0x0198
    1692:	fa 01       	movw	r30, r20
    1694:	e2 0f       	add	r30, r18
    1696:	f3 1f       	adc	r31, r19
    1698:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    169a:	80 91 a7 02 	lds	r24, 0x02A7
    169e:	90 91 a8 02 	lds	r25, 0x02A8
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	90 93 a8 02 	sts	0x02A8, r25
    16a8:	80 93 a7 02 	sts	0x02A7, r24
    16ac:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    16ae:	e0 91 95 01 	lds	r30, 0x0195
    16b2:	f0 91 96 01 	lds	r31, 0x0196
    16b6:	80 83       	st	Z, r24
    16b8:	08 95       	ret

000016ba <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    16c6:	68 30       	cpi	r22, 0x08	; 8
    16c8:	59 f4       	brne	.+22     	; 0x16e0 <oled_print_char+0x26>
		font_address = &font8[character-' '];
    16ca:	08 2f       	mov	r16, r24
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	00 0f       	add	r16, r16
    16d0:	11 1f       	adc	r17, r17
    16d2:	00 0f       	add	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	00 0f       	add	r16, r16
    16d8:	11 1f       	adc	r17, r17
    16da:	0b 50       	subi	r16, 0x0B	; 11
    16dc:	1d 4f       	sbci	r17, 0xFD	; 253
    16de:	1a c0       	rjmp	.+52     	; 0x1714 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    16e0:	65 30       	cpi	r22, 0x05	; 5
    16e2:	71 f4       	brne	.+28     	; 0x1700 <oled_print_char+0x46>
		font_address = &font5[character-' '];
    16e4:	08 2f       	mov	r16, r24
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	00 52       	subi	r16, 0x20	; 32
    16ea:	11 09       	sbc	r17, r1
    16ec:	c8 01       	movw	r24, r16
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	08 0f       	add	r16, r24
    16f8:	19 1f       	adc	r17, r25
    16fa:	06 5e       	subi	r16, 0xE6	; 230
    16fc:	1d 4f       	sbci	r17, 0xFD	; 253
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    1700:	64 30       	cpi	r22, 0x04	; 4
    1702:	41 f4       	brne	.+16     	; 0x1714 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    1704:	08 2f       	mov	r16, r24
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	00 0f       	add	r16, r16
    170a:	11 1f       	adc	r17, r17
    170c:	00 0f       	add	r16, r16
    170e:	11 1f       	adc	r17, r17
    1710:	02 5e       	subi	r16, 0xE2	; 226
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    1714:	45 2b       	or	r20, r21
    1716:	31 f0       	breq	.+12     	; 0x1724 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1718:	e6 2e       	mov	r14, r22
    171a:	f1 2c       	mov	r15, r1
    171c:	1e 14       	cp	r1, r14
    171e:	1f 04       	cpc	r1, r15
    1720:	9c f0       	brlt	.+38     	; 0x1748 <oled_print_char+0x8e>
    1722:	1f c0       	rjmp	.+62     	; 0x1762 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1724:	e6 2e       	mov	r14, r22
    1726:	f1 2c       	mov	r15, r1
    1728:	1e 14       	cp	r1, r14
    172a:	1f 04       	cpc	r1, r15
    172c:	d4 f4       	brge	.+52     	; 0x1762 <oled_print_char+0xa8>
    172e:	c0 e0       	ldi	r28, 0x00	; 0
    1730:	d0 e0       	ldi	r29, 0x00	; 0
    1732:	fe 01       	movw	r30, r28
    1734:	e0 0f       	add	r30, r16
    1736:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    1738:	84 91       	lpm	r24, Z
    173a:	0e 94 37 0b 	call	0x166e	; 0x166e <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    173e:	21 96       	adiw	r28, 0x01	; 1
    1740:	ce 15       	cp	r28, r14
    1742:	df 05       	cpc	r29, r15
    1744:	b4 f3       	brlt	.-20     	; 0x1732 <oled_print_char+0x78>
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1748:	c0 e0       	ldi	r28, 0x00	; 0
    174a:	d0 e0       	ldi	r29, 0x00	; 0
    174c:	fe 01       	movw	r30, r28
    174e:	e0 0f       	add	r30, r16
    1750:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    1752:	84 91       	lpm	r24, Z
    1754:	80 95       	com	r24
    1756:	0e 94 37 0b 	call	0x166e	; 0x166e <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    175a:	21 96       	adiw	r28, 0x01	; 1
    175c:	ce 15       	cp	r28, r14
    175e:	df 05       	cpc	r29, r15
    1760:	ac f3       	brlt	.-22     	; 0x174c <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	08 95       	ret

00001770 <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    1770:	80 91 9b 01 	lds	r24, 0x019B
    1774:	90 91 9c 01 	lds	r25, 0x019C
    1778:	89 2b       	or	r24, r25
    177a:	89 f0       	breq	.+34     	; 0x179e <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    177c:	80 91 a7 02 	lds	r24, 0x02A7
    1780:	90 91 a8 02 	lds	r25, 0x02A8
    1784:	81 15       	cp	r24, r1
    1786:	24 e0       	ldi	r18, 0x04	; 4
    1788:	92 07       	cpc	r25, r18
    178a:	5c f4       	brge	.+22     	; 0x17a2 <oled_read_data+0x32>
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    178c:	20 91 97 01 	lds	r18, 0x0197
    1790:	30 91 98 01 	lds	r19, 0x0198
    1794:	f9 01       	movw	r30, r18
    1796:	e8 0f       	add	r30, r24
    1798:	f9 1f       	adc	r31, r25
    179a:	80 81       	ld	r24, Z
    179c:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	08 95       	ret
char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
    17a2:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    17a4:	08 95       	ret

000017a6 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    17a6:	40 91 9b 01 	lds	r20, 0x019B
    17aa:	50 91 9c 01 	lds	r21, 0x019C
    17ae:	45 2b       	or	r20, r21
    17b0:	d1 f0       	breq	.+52     	; 0x17e6 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    17b2:	20 91 a7 02 	lds	r18, 0x02A7
    17b6:	30 91 a8 02 	lds	r19, 0x02A8
    17ba:	2f 77       	andi	r18, 0x7F	; 127
    17bc:	30 78       	andi	r19, 0x80	; 128
    17be:	33 23       	and	r19, r19
    17c0:	34 f4       	brge	.+12     	; 0x17ce <oled_goto_line+0x28>
    17c2:	21 50       	subi	r18, 0x01	; 1
    17c4:	31 09       	sbc	r19, r1
    17c6:	20 68       	ori	r18, 0x80	; 128
    17c8:	3f 6f       	ori	r19, 0xFF	; 255
    17ca:	2f 5f       	subi	r18, 0xFF	; 255
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	96 95       	lsr	r25
    17d0:	98 2f       	mov	r25, r24
    17d2:	88 27       	eor	r24, r24
    17d4:	97 95       	ror	r25
    17d6:	87 95       	ror	r24
    17d8:	28 0f       	add	r18, r24
    17da:	39 1f       	adc	r19, r25
    17dc:	30 93 a8 02 	sts	0x02A8, r19
    17e0:	20 93 a7 02 	sts	0x02A7, r18
    17e4:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    17e6:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    17e8:	e0 91 99 01 	lds	r30, 0x0199
    17ec:	f0 91 9a 01 	lds	r31, 0x019A
    17f0:	80 83       	st	Z, r24
    17f2:	08 95       	ret

000017f4 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    17f4:	20 91 9b 01 	lds	r18, 0x019B
    17f8:	30 91 9c 01 	lds	r19, 0x019C
    17fc:	23 2b       	or	r18, r19
    17fe:	c1 f0       	breq	.+48     	; 0x1830 <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    1800:	40 91 a7 02 	lds	r20, 0x02A7
    1804:	50 91 a8 02 	lds	r21, 0x02A8
    1808:	9a 01       	movw	r18, r20
    180a:	2f 77       	andi	r18, 0x7F	; 127
    180c:	30 78       	andi	r19, 0x80	; 128
    180e:	33 23       	and	r19, r19
    1810:	34 f4       	brge	.+12     	; 0x181e <oled_goto_column+0x2a>
    1812:	21 50       	subi	r18, 0x01	; 1
    1814:	31 09       	sbc	r19, r1
    1816:	20 68       	ori	r18, 0x80	; 128
    1818:	3f 6f       	ori	r19, 0xFF	; 255
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	42 1b       	sub	r20, r18
    1820:	53 0b       	sbc	r21, r19
    1822:	84 0f       	add	r24, r20
    1824:	95 1f       	adc	r25, r21
    1826:	90 93 a8 02 	sts	0x02A8, r25
    182a:	80 93 a7 02 	sts	0x02A7, r24
    182e:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1830:	e0 91 99 01 	lds	r30, 0x0199
    1834:	f0 91 9a 01 	lds	r31, 0x019A
    1838:	10 82       	st	Z, r1
    183a:	e0 91 99 01 	lds	r30, 0x0199
    183e:	f0 91 9a 01 	lds	r31, 0x019A
    1842:	80 e1       	ldi	r24, 0x10	; 16
    1844:	80 83       	st	Z, r24
    1846:	08 95       	ret

00001848 <oled_print_string>:
		
	OCR1AH = OCRA_num >> 8;
	OCR1AL = OCRA_num; //Sets the value for the compare match to 10240
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    1848:	6f 92       	push	r6
    184a:	7f 92       	push	r7
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	ec 01       	movw	r28, r24
    1866:	96 2e       	mov	r9, r22
    1868:	74 2e       	mov	r7, r20
    186a:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    186c:	86 2f       	mov	r24, r22
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <oled_goto_column>
	oled_goto_line(line);
    1874:	87 2d       	mov	r24, r7
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <oled_goto_line>
	
	int length = strlen(string);
    187c:	fe 01       	movw	r30, r28
    187e:	01 90       	ld	r0, Z+
    1880:	00 20       	and	r0, r0
    1882:	e9 f7       	brne	.-6      	; 0x187e <oled_print_string+0x36>
    1884:	31 97       	sbiw	r30, 0x01	; 1
    1886:	6f 01       	movw	r12, r30
    1888:	cc 1a       	sub	r12, r28
    188a:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    188c:	1c 14       	cp	r1, r12
    188e:	1d 04       	cpc	r1, r13
    1890:	24 f5       	brge	.+72     	; 0x18da <oled_print_string+0x92>
    1892:	7e 01       	movw	r14, r28
    1894:	c0 e0       	ldi	r28, 0x00	; 0
    1896:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    1898:	8f e7       	ldi	r24, 0x7F	; 127
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	5c 01       	movw	r10, r24
    189e:	a8 18       	sub	r10, r8
    18a0:	b1 08       	sbc	r11, r1
			column = 0;
    18a2:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    18a4:	a8 01       	movw	r20, r16
    18a6:	68 2d       	mov	r22, r8
    18a8:	f7 01       	movw	r30, r14
    18aa:	81 91       	ld	r24, Z+
    18ac:	7f 01       	movw	r14, r30
    18ae:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <oled_print_char>
		column = column + font_size;
    18b2:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    18b4:	89 2d       	mov	r24, r9
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a8 16       	cp	r10, r24
    18ba:	b9 06       	cpc	r11, r25
    18bc:	54 f4       	brge	.+20     	; 0x18d2 <oled_print_string+0x8a>
			column = 0;
			line++;
    18be:	73 94       	inc	r7
			oled_goto_column(column);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <oled_goto_column>
			oled_goto_line(line);
    18c8:	87 2d       	mov	r24, r7
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    18d0:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    18d2:	21 96       	adiw	r28, 0x01	; 1
    18d4:	cc 16       	cp	r12, r28
    18d6:	dd 06       	cpc	r13, r29
    18d8:	29 f7       	brne	.-54     	; 0x18a4 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	bf 90       	pop	r11
    18ec:	af 90       	pop	r10
    18ee:	9f 90       	pop	r9
    18f0:	8f 90       	pop	r8
    18f2:	7f 90       	pop	r7
    18f4:	6f 90       	pop	r6
    18f6:	08 95       	ret

000018f8 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    18f8:	cf 93       	push	r28
	oled_goto_line(line);
    18fa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <oled_goto_line>
	oled_goto_column(0);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    1906:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	0e 94 37 0b 	call	0x166e	; 0x166e <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    190e:	cf 5f       	subi	r28, 0xFF	; 255
    1910:	c0 38       	cpi	r28, 0x80	; 128
    1912:	d1 f7       	brne	.-12     	; 0x1908 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	c0 e0       	ldi	r28, 0x00	; 0
    191e:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    1920:	ce 01       	movw	r24, r28
    1922:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <oled_clear_line>
    1926:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    1928:	c8 30       	cpi	r28, 0x08	; 8
    192a:	d1 05       	cpc	r29, r1
    192c:	c9 f7       	brne	.-14     	; 0x1920 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1934:	e0 91 99 01 	lds	r30, 0x0199
    1938:	f0 91 9a 01 	lds	r31, 0x019A
    193c:	8e ea       	ldi	r24, 0xAE	; 174
    193e:	80 83       	st	Z, r24
    1940:	e0 91 99 01 	lds	r30, 0x0199
    1944:	f0 91 9a 01 	lds	r31, 0x019A
    1948:	81 ea       	ldi	r24, 0xA1	; 161
    194a:	80 83       	st	Z, r24
    194c:	e0 91 99 01 	lds	r30, 0x0199
    1950:	f0 91 9a 01 	lds	r31, 0x019A
    1954:	8a ed       	ldi	r24, 0xDA	; 218
    1956:	80 83       	st	Z, r24
    1958:	e0 91 99 01 	lds	r30, 0x0199
    195c:	f0 91 9a 01 	lds	r31, 0x019A
    1960:	82 e1       	ldi	r24, 0x12	; 18
    1962:	80 83       	st	Z, r24
    1964:	e0 91 99 01 	lds	r30, 0x0199
    1968:	f0 91 9a 01 	lds	r31, 0x019A
    196c:	88 ec       	ldi	r24, 0xC8	; 200
    196e:	80 83       	st	Z, r24
    1970:	e0 91 99 01 	lds	r30, 0x0199
    1974:	f0 91 9a 01 	lds	r31, 0x019A
    1978:	88 ea       	ldi	r24, 0xA8	; 168
    197a:	80 83       	st	Z, r24
    197c:	e0 91 99 01 	lds	r30, 0x0199
    1980:	f0 91 9a 01 	lds	r31, 0x019A
    1984:	8f e3       	ldi	r24, 0x3F	; 63
    1986:	80 83       	st	Z, r24
    1988:	e0 91 99 01 	lds	r30, 0x0199
    198c:	f0 91 9a 01 	lds	r31, 0x019A
    1990:	85 ed       	ldi	r24, 0xD5	; 213
    1992:	80 83       	st	Z, r24
    1994:	e0 91 99 01 	lds	r30, 0x0199
    1998:	f0 91 9a 01 	lds	r31, 0x019A
    199c:	80 e8       	ldi	r24, 0x80	; 128
    199e:	80 83       	st	Z, r24
    19a0:	e0 91 99 01 	lds	r30, 0x0199
    19a4:	f0 91 9a 01 	lds	r31, 0x019A
    19a8:	81 e8       	ldi	r24, 0x81	; 129
    19aa:	80 83       	st	Z, r24
    19ac:	e0 91 99 01 	lds	r30, 0x0199
    19b0:	f0 91 9a 01 	lds	r31, 0x019A
    19b4:	80 e5       	ldi	r24, 0x50	; 80
    19b6:	80 83       	st	Z, r24
    19b8:	e0 91 99 01 	lds	r30, 0x0199
    19bc:	f0 91 9a 01 	lds	r31, 0x019A
    19c0:	89 ed       	ldi	r24, 0xD9	; 217
    19c2:	80 83       	st	Z, r24
    19c4:	e0 91 99 01 	lds	r30, 0x0199
    19c8:	f0 91 9a 01 	lds	r31, 0x019A
    19cc:	81 e2       	ldi	r24, 0x21	; 33
    19ce:	80 83       	st	Z, r24
    19d0:	e0 91 99 01 	lds	r30, 0x0199
    19d4:	f0 91 9a 01 	lds	r31, 0x019A
    19d8:	80 e2       	ldi	r24, 0x20	; 32
    19da:	80 83       	st	Z, r24
    19dc:	e0 91 99 01 	lds	r30, 0x0199
    19e0:	f0 91 9a 01 	lds	r31, 0x019A
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	80 83       	st	Z, r24
    19e8:	e0 91 99 01 	lds	r30, 0x0199
    19ec:	f0 91 9a 01 	lds	r31, 0x019A
    19f0:	8b ed       	ldi	r24, 0xDB	; 219
    19f2:	80 83       	st	Z, r24
    19f4:	e0 91 99 01 	lds	r30, 0x0199
    19f8:	f0 91 9a 01 	lds	r31, 0x019A
    19fc:	80 e3       	ldi	r24, 0x30	; 48
    19fe:	80 83       	st	Z, r24
    1a00:	e0 91 99 01 	lds	r30, 0x0199
    1a04:	f0 91 9a 01 	lds	r31, 0x019A
    1a08:	8d ea       	ldi	r24, 0xAD	; 173
    1a0a:	80 83       	st	Z, r24
    1a0c:	e0 91 99 01 	lds	r30, 0x0199
    1a10:	f0 91 9a 01 	lds	r31, 0x019A
    1a14:	10 82       	st	Z, r1
    1a16:	e0 91 99 01 	lds	r30, 0x0199
    1a1a:	f0 91 9a 01 	lds	r31, 0x019A
    1a1e:	84 ea       	ldi	r24, 0xA4	; 164
    1a20:	80 83       	st	Z, r24
    1a22:	e0 91 99 01 	lds	r30, 0x0199
    1a26:	f0 91 9a 01 	lds	r31, 0x019A
    1a2a:	86 ea       	ldi	r24, 0xA6	; 166
    1a2c:	80 83       	st	Z, r24
    1a2e:	e0 91 99 01 	lds	r30, 0x0199
    1a32:	f0 91 9a 01 	lds	r31, 0x019A
    1a36:	8f ea       	ldi	r24, 0xAF	; 175
    1a38:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    1a3a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <oled_clear_screen>
	
	//Set up timer, enable timer/counter compare match interrupt for 60 FPS
	TCCR1A = (1 << WGM11) | (1 << WGM10);				//Compare match mode
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); //clock source to be used by the Timer/Counter clkI/O/8
    1a42:	8a e1       	ldi	r24, 0x1A	; 26
    1a44:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1A);								//Interrupt on compare match
    1a46:	80 e4       	ldi	r24, 0x40	; 64
    1a48:	89 bf       	out	0x39, r24	; 57
	int OCRA_num = (long)F_CPU/(refresh_rate*8);
		
	OCR1AH = OCRA_num >> 8;
    1a4a:	88 e2       	ldi	r24, 0x28	; 40
    1a4c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = OCRA_num; //Sets the value for the compare match to 10240
    1a4e:	1a bc       	out	0x2a, r1	; 42
    1a50:	08 95       	ret

00001a52 <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    1a52:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a54:	e0 91 99 01 	lds	r30, 0x0199
    1a58:	f0 91 9a 01 	lds	r31, 0x019A
    1a5c:	10 82       	st	Z, r1
    1a5e:	e0 91 99 01 	lds	r30, 0x0199
    1a62:	f0 91 9a 01 	lds	r31, 0x019A
    1a66:	80 e1       	ldi	r24, 0x10	; 16
    1a68:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    1a6a:	80 91 9b 01 	lds	r24, 0x019B
    1a6e:	90 91 9c 01 	lds	r25, 0x019C
    1a72:	89 2b       	or	r24, r25
    1a74:	21 f1       	breq	.+72     	; 0x1abe <oled_refresh+0x6c>
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a7c:	c0 e0       	ldi	r28, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a80:	e0 91 99 01 	lds	r30, 0x0199
    1a84:	f0 91 9a 01 	lds	r31, 0x019A
    1a88:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a8a:	8c 2f       	mov	r24, r28
    1a8c:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    1a8e:	e0 91 95 01 	lds	r30, 0x0195
    1a92:	f0 91 96 01 	lds	r31, 0x0196
    1a96:	9c 01       	movw	r18, r24
    1a98:	24 0f       	add	r18, r20
    1a9a:	35 1f       	adc	r19, r21
    1a9c:	a0 91 97 01 	lds	r26, 0x0197
    1aa0:	b0 91 98 01 	lds	r27, 0x0198
    1aa4:	a2 0f       	add	r26, r18
    1aa6:	b3 1f       	adc	r27, r19
    1aa8:	2c 91       	ld	r18, X
    1aaa:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	80 38       	cpi	r24, 0x80	; 128
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <oled_refresh+0x3c>
    1ab4:	6f 5f       	subi	r22, 0xFF	; 255
    1ab6:	40 58       	subi	r20, 0x80	; 128
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1aba:	68 3b       	cpi	r22, 0xB8	; 184
    1abc:	09 f7       	brne	.-62     	; 0x1a80 <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <oled_invert_pixel>:
	oled_goto_column(x);
	oled_goto_line(y/8);
	oled_write_data(~(1 << (y % 8)) & oled_read_data());
}

void oled_invert_pixel(int x, int y){
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    1ac8:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <oled_goto_column>
	oled_goto_line(y/8);
    1acc:	ce 01       	movw	r24, r28
    1ace:	dd 23       	and	r29, r29
    1ad0:	0c f4       	brge	.+2      	; 0x1ad4 <oled_invert_pixel+0x12>
    1ad2:	07 96       	adiw	r24, 0x07	; 7
    1ad4:	95 95       	asr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	95 95       	asr	r25
    1ada:	87 95       	ror	r24
    1adc:	95 95       	asr	r25
    1ade:	87 95       	ror	r24
    1ae0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <oled_goto_line>
	oled_write_data((1 << (y % 8)) ^ oled_read_data()); //exclusive or
    1ae4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <oled_read_data>
    1ae8:	be 01       	movw	r22, r28
    1aea:	67 70       	andi	r22, 0x07	; 7
    1aec:	70 78       	andi	r23, 0x80	; 128
    1aee:	77 23       	and	r23, r23
    1af0:	34 f4       	brge	.+12     	; 0x1afe <oled_invert_pixel+0x3c>
    1af2:	61 50       	subi	r22, 0x01	; 1
    1af4:	71 09       	sbc	r23, r1
    1af6:	68 6f       	ori	r22, 0xF8	; 248
    1af8:	7f 6f       	ori	r23, 0xFF	; 255
    1afa:	6f 5f       	subi	r22, 0xFF	; 255
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	a9 01       	movw	r20, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <oled_invert_pixel+0x48>
    1b06:	44 0f       	add	r20, r20
    1b08:	55 1f       	adc	r21, r21
    1b0a:	6a 95       	dec	r22
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <oled_invert_pixel+0x44>
    1b0e:	84 27       	eor	r24, r20
    1b10:	0e 94 37 0b 	call	0x166e	; 0x166e <oled_write_data>
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	08 95       	ret

00001b1a <oled_invert_rectangle>:
	}
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1b1a:	8f 92       	push	r8
    1b1c:	9f 92       	push	r9
    1b1e:	af 92       	push	r10
    1b20:	bf 92       	push	r11
    1b22:	cf 92       	push	r12
    1b24:	df 92       	push	r13
    1b26:	ef 92       	push	r14
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	8c 01       	movw	r16, r24
    1b34:	6b 01       	movw	r12, r22
    1b36:	5a 01       	movw	r10, r20
    1b38:	79 01       	movw	r14, r18
	for (int x = x1; x < x2; x++){
    1b3a:	84 17       	cp	r24, r20
    1b3c:	95 07       	cpc	r25, r21
    1b3e:	b4 f4       	brge	.+44     	; 0x1b6c <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    1b40:	86 2e       	mov	r8, r22
    1b42:	9d 2c       	mov	r9, r13
    1b44:	0d c0       	rjmp	.+26     	; 0x1b60 <oled_invert_rectangle+0x46>
			oled_invert_pixel(x, y);
    1b46:	be 01       	movw	r22, r28
    1b48:	c8 01       	movw	r24, r16
    1b4a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <oled_invert_pixel>
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
		for (int y = y1; y < y2; y++){
    1b4e:	21 96       	adiw	r28, 0x01	; 1
    1b50:	ce 15       	cp	r28, r14
    1b52:	df 05       	cpc	r29, r15
    1b54:	c4 f3       	brlt	.-16     	; 0x1b46 <oled_invert_rectangle+0x2c>
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
    1b56:	0f 5f       	subi	r16, 0xFF	; 255
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	0a 15       	cp	r16, r10
    1b5c:	1b 05       	cpc	r17, r11
    1b5e:	34 f4       	brge	.+12     	; 0x1b6c <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    1b60:	ce 14       	cp	r12, r14
    1b62:	df 04       	cpc	r13, r15
    1b64:	c4 f7       	brge	.-16     	; 0x1b56 <oled_invert_rectangle+0x3c>
    1b66:	c8 2d       	mov	r28, r8
    1b68:	d9 2d       	mov	r29, r9
    1b6a:	ed cf       	rjmp	.-38     	; 0x1b46 <oled_invert_rectangle+0x2c>
			oled_invert_pixel(x, y);
		}
	}
}
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	9f 90       	pop	r9
    1b82:	8f 90       	pop	r8
    1b84:	08 95       	ret

00001b86 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	8f 93       	push	r24
    1b92:	9f 93       	push	r25
	oled_refresh_timer = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	90 93 a2 02 	sts	0x02A2, r25
    1b9c:	80 93 a1 02 	sts	0x02A1, r24
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <touch_init>:
#include "../lib/settings.h"
#include "touch.h"
#include "../lib/adc.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    1bae:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    1bb0:	b9 98       	cbi	0x17, 1	; 23
    1bb2:	08 95       	ret

00001bb4 <__subsf3>:
    1bb4:	50 58       	subi	r21, 0x80	; 128

00001bb6 <__addsf3>:
    1bb6:	bb 27       	eor	r27, r27
    1bb8:	aa 27       	eor	r26, r26
    1bba:	0e d0       	rcall	.+28     	; 0x1bd8 <__addsf3x>
    1bbc:	d4 c1       	rjmp	.+936    	; 0x1f66 <__fp_round>
    1bbe:	c5 d1       	rcall	.+906    	; 0x1f4a <__fp_pscA>
    1bc0:	30 f0       	brcs	.+12     	; 0x1bce <__addsf3+0x18>
    1bc2:	ca d1       	rcall	.+916    	; 0x1f58 <__fp_pscB>
    1bc4:	20 f0       	brcs	.+8      	; 0x1bce <__addsf3+0x18>
    1bc6:	31 f4       	brne	.+12     	; 0x1bd4 <__addsf3+0x1e>
    1bc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <__addsf3+0x1a>
    1bcc:	1e f4       	brtc	.+6      	; 0x1bd4 <__addsf3+0x1e>
    1bce:	95 c1       	rjmp	.+810    	; 0x1efa <__fp_nan>
    1bd0:	0e f4       	brtc	.+2      	; 0x1bd4 <__addsf3+0x1e>
    1bd2:	e0 95       	com	r30
    1bd4:	e7 fb       	bst	r30, 7
    1bd6:	8b c1       	rjmp	.+790    	; 0x1eee <__fp_inf>

00001bd8 <__addsf3x>:
    1bd8:	e9 2f       	mov	r30, r25
    1bda:	d6 d1       	rcall	.+940    	; 0x1f88 <__fp_split3>
    1bdc:	80 f3       	brcs	.-32     	; 0x1bbe <__addsf3+0x8>
    1bde:	ba 17       	cp	r27, r26
    1be0:	62 07       	cpc	r22, r18
    1be2:	73 07       	cpc	r23, r19
    1be4:	84 07       	cpc	r24, r20
    1be6:	95 07       	cpc	r25, r21
    1be8:	18 f0       	brcs	.+6      	; 0x1bf0 <__addsf3x+0x18>
    1bea:	71 f4       	brne	.+28     	; 0x1c08 <__addsf3x+0x30>
    1bec:	9e f5       	brtc	.+102    	; 0x1c54 <__addsf3x+0x7c>
    1bee:	ee c1       	rjmp	.+988    	; 0x1fcc <__fp_zero>
    1bf0:	0e f4       	brtc	.+2      	; 0x1bf4 <__addsf3x+0x1c>
    1bf2:	e0 95       	com	r30
    1bf4:	0b 2e       	mov	r0, r27
    1bf6:	ba 2f       	mov	r27, r26
    1bf8:	a0 2d       	mov	r26, r0
    1bfa:	0b 01       	movw	r0, r22
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	90 01       	movw	r18, r0
    1c00:	0c 01       	movw	r0, r24
    1c02:	ca 01       	movw	r24, r20
    1c04:	a0 01       	movw	r20, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	ff 27       	eor	r31, r31
    1c0a:	59 1b       	sub	r21, r25
    1c0c:	99 f0       	breq	.+38     	; 0x1c34 <__addsf3x+0x5c>
    1c0e:	59 3f       	cpi	r21, 0xF9	; 249
    1c10:	50 f4       	brcc	.+20     	; 0x1c26 <__addsf3x+0x4e>
    1c12:	50 3e       	cpi	r21, 0xE0	; 224
    1c14:	68 f1       	brcs	.+90     	; 0x1c70 <__addsf3x+0x98>
    1c16:	1a 16       	cp	r1, r26
    1c18:	f0 40       	sbci	r31, 0x00	; 0
    1c1a:	a2 2f       	mov	r26, r18
    1c1c:	23 2f       	mov	r18, r19
    1c1e:	34 2f       	mov	r19, r20
    1c20:	44 27       	eor	r20, r20
    1c22:	58 5f       	subi	r21, 0xF8	; 248
    1c24:	f3 cf       	rjmp	.-26     	; 0x1c0c <__addsf3x+0x34>
    1c26:	46 95       	lsr	r20
    1c28:	37 95       	ror	r19
    1c2a:	27 95       	ror	r18
    1c2c:	a7 95       	ror	r26
    1c2e:	f0 40       	sbci	r31, 0x00	; 0
    1c30:	53 95       	inc	r21
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__addsf3x+0x4e>
    1c34:	7e f4       	brtc	.+30     	; 0x1c54 <__addsf3x+0x7c>
    1c36:	1f 16       	cp	r1, r31
    1c38:	ba 0b       	sbc	r27, r26
    1c3a:	62 0b       	sbc	r22, r18
    1c3c:	73 0b       	sbc	r23, r19
    1c3e:	84 0b       	sbc	r24, r20
    1c40:	ba f0       	brmi	.+46     	; 0x1c70 <__addsf3x+0x98>
    1c42:	91 50       	subi	r25, 0x01	; 1
    1c44:	a1 f0       	breq	.+40     	; 0x1c6e <__addsf3x+0x96>
    1c46:	ff 0f       	add	r31, r31
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	66 1f       	adc	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	c2 f7       	brpl	.-16     	; 0x1c42 <__addsf3x+0x6a>
    1c52:	0e c0       	rjmp	.+28     	; 0x1c70 <__addsf3x+0x98>
    1c54:	ba 0f       	add	r27, r26
    1c56:	62 1f       	adc	r22, r18
    1c58:	73 1f       	adc	r23, r19
    1c5a:	84 1f       	adc	r24, r20
    1c5c:	48 f4       	brcc	.+18     	; 0x1c70 <__addsf3x+0x98>
    1c5e:	87 95       	ror	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b7 95       	ror	r27
    1c66:	f7 95       	ror	r31
    1c68:	9e 3f       	cpi	r25, 0xFE	; 254
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <__addsf3x+0x96>
    1c6c:	b3 cf       	rjmp	.-154    	; 0x1bd4 <__addsf3+0x1e>
    1c6e:	93 95       	inc	r25
    1c70:	88 0f       	add	r24, r24
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <__addsf3x+0x9e>
    1c74:	99 27       	eor	r25, r25
    1c76:	ee 0f       	add	r30, r30
    1c78:	97 95       	ror	r25
    1c7a:	87 95       	ror	r24
    1c7c:	08 95       	ret
    1c7e:	65 d1       	rcall	.+714    	; 0x1f4a <__fp_pscA>
    1c80:	58 f0       	brcs	.+22     	; 0x1c98 <__addsf3x+0xc0>
    1c82:	80 e8       	ldi	r24, 0x80	; 128
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <__addsf3x+0xb2>
    1c88:	9e ef       	ldi	r25, 0xFE	; 254
    1c8a:	66 d1       	rcall	.+716    	; 0x1f58 <__fp_pscB>
    1c8c:	28 f0       	brcs	.+10     	; 0x1c98 <__addsf3x+0xc0>
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	51 e0       	ldi	r21, 0x01	; 1
    1c92:	59 f4       	brne	.+22     	; 0x1caa <atan2+0xe>
    1c94:	5e ef       	ldi	r21, 0xFE	; 254
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <atan2+0xe>
    1c98:	30 c1       	rjmp	.+608    	; 0x1efa <__fp_nan>
    1c9a:	98 c1       	rjmp	.+816    	; 0x1fcc <__fp_zero>

00001c9c <atan2>:
    1c9c:	e9 2f       	mov	r30, r25
    1c9e:	e0 78       	andi	r30, 0x80	; 128
    1ca0:	73 d1       	rcall	.+742    	; 0x1f88 <__fp_split3>
    1ca2:	68 f3       	brcs	.-38     	; 0x1c7e <__addsf3x+0xa6>
    1ca4:	09 2e       	mov	r0, r25
    1ca6:	05 2a       	or	r0, r21
    1ca8:	c1 f3       	breq	.-16     	; 0x1c9a <__addsf3x+0xc2>
    1caa:	26 17       	cp	r18, r22
    1cac:	37 07       	cpc	r19, r23
    1cae:	48 07       	cpc	r20, r24
    1cb0:	59 07       	cpc	r21, r25
    1cb2:	38 f0       	brcs	.+14     	; 0x1cc2 <atan2+0x26>
    1cb4:	0e 2e       	mov	r0, r30
    1cb6:	07 f8       	bld	r0, 7
    1cb8:	e0 25       	eor	r30, r0
    1cba:	69 f0       	breq	.+26     	; 0x1cd6 <atan2+0x3a>
    1cbc:	e0 25       	eor	r30, r0
    1cbe:	e0 64       	ori	r30, 0x40	; 64
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <atan2+0x3a>
    1cc2:	ef 63       	ori	r30, 0x3F	; 63
    1cc4:	07 f8       	bld	r0, 7
    1cc6:	00 94       	com	r0
    1cc8:	07 fa       	bst	r0, 7
    1cca:	db 01       	movw	r26, r22
    1ccc:	b9 01       	movw	r22, r18
    1cce:	9d 01       	movw	r18, r26
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	ad 01       	movw	r20, r26
    1cd6:	ef 93       	push	r30
    1cd8:	43 d0       	rcall	.+134    	; 0x1d60 <__divsf3_pse>
    1cda:	45 d1       	rcall	.+650    	; 0x1f66 <__fp_round>
    1cdc:	0a d0       	rcall	.+20     	; 0x1cf2 <atan>
    1cde:	5f 91       	pop	r21
    1ce0:	55 23       	and	r21, r21
    1ce2:	31 f0       	breq	.+12     	; 0x1cf0 <atan2+0x54>
    1ce4:	2b ed       	ldi	r18, 0xDB	; 219
    1ce6:	3f e0       	ldi	r19, 0x0F	; 15
    1ce8:	49 e4       	ldi	r20, 0x49	; 73
    1cea:	50 fd       	sbrc	r21, 0
    1cec:	49 ec       	ldi	r20, 0xC9	; 201
    1cee:	63 cf       	rjmp	.-314    	; 0x1bb6 <__addsf3>
    1cf0:	08 95       	ret

00001cf2 <atan>:
    1cf2:	df 93       	push	r29
    1cf4:	dd 27       	eor	r29, r29
    1cf6:	b9 2f       	mov	r27, r25
    1cf8:	bf 77       	andi	r27, 0x7F	; 127
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	16 16       	cp	r1, r22
    1d00:	17 06       	cpc	r1, r23
    1d02:	48 07       	cpc	r20, r24
    1d04:	5b 07       	cpc	r21, r27
    1d06:	10 f4       	brcc	.+4      	; 0x1d0c <atan+0x1a>
    1d08:	d9 2f       	mov	r29, r25
    1d0a:	67 d1       	rcall	.+718    	; 0x1fda <inverse>
    1d0c:	9f 93       	push	r25
    1d0e:	8f 93       	push	r24
    1d10:	7f 93       	push	r23
    1d12:	6f 93       	push	r22
    1d14:	0e d2       	rcall	.+1052   	; 0x2132 <square>
    1d16:	e0 e7       	ldi	r30, 0x70	; 112
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	f2 d0       	rcall	.+484    	; 0x1f00 <__fp_powser>
    1d1c:	24 d1       	rcall	.+584    	; 0x1f66 <__fp_round>
    1d1e:	2f 91       	pop	r18
    1d20:	3f 91       	pop	r19
    1d22:	4f 91       	pop	r20
    1d24:	5f 91       	pop	r21
    1d26:	6c d1       	rcall	.+728    	; 0x2000 <__mulsf3x>
    1d28:	dd 23       	and	r29, r29
    1d2a:	49 f0       	breq	.+18     	; 0x1d3e <atan+0x4c>
    1d2c:	90 58       	subi	r25, 0x80	; 128
    1d2e:	a2 ea       	ldi	r26, 0xA2	; 162
    1d30:	2a ed       	ldi	r18, 0xDA	; 218
    1d32:	3f e0       	ldi	r19, 0x0F	; 15
    1d34:	49 ec       	ldi	r20, 0xC9	; 201
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	d0 78       	andi	r29, 0x80	; 128
    1d3a:	5d 27       	eor	r21, r29
    1d3c:	4d df       	rcall	.-358    	; 0x1bd8 <__addsf3x>
    1d3e:	df 91       	pop	r29
    1d40:	12 c1       	rjmp	.+548    	; 0x1f66 <__fp_round>

00001d42 <__divsf3>:
    1d42:	0c d0       	rcall	.+24     	; 0x1d5c <__divsf3x>
    1d44:	10 c1       	rjmp	.+544    	; 0x1f66 <__fp_round>
    1d46:	08 d1       	rcall	.+528    	; 0x1f58 <__fp_pscB>
    1d48:	40 f0       	brcs	.+16     	; 0x1d5a <__divsf3+0x18>
    1d4a:	ff d0       	rcall	.+510    	; 0x1f4a <__fp_pscA>
    1d4c:	30 f0       	brcs	.+12     	; 0x1d5a <__divsf3+0x18>
    1d4e:	21 f4       	brne	.+8      	; 0x1d58 <__divsf3+0x16>
    1d50:	5f 3f       	cpi	r21, 0xFF	; 255
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <__divsf3+0x18>
    1d54:	cc c0       	rjmp	.+408    	; 0x1eee <__fp_inf>
    1d56:	51 11       	cpse	r21, r1
    1d58:	3a c1       	rjmp	.+628    	; 0x1fce <__fp_szero>
    1d5a:	cf c0       	rjmp	.+414    	; 0x1efa <__fp_nan>

00001d5c <__divsf3x>:
    1d5c:	15 d1       	rcall	.+554    	; 0x1f88 <__fp_split3>
    1d5e:	98 f3       	brcs	.-26     	; 0x1d46 <__divsf3+0x4>

00001d60 <__divsf3_pse>:
    1d60:	99 23       	and	r25, r25
    1d62:	c9 f3       	breq	.-14     	; 0x1d56 <__divsf3+0x14>
    1d64:	55 23       	and	r21, r21
    1d66:	b1 f3       	breq	.-20     	; 0x1d54 <__divsf3+0x12>
    1d68:	95 1b       	sub	r25, r21
    1d6a:	55 0b       	sbc	r21, r21
    1d6c:	bb 27       	eor	r27, r27
    1d6e:	aa 27       	eor	r26, r26
    1d70:	62 17       	cp	r22, r18
    1d72:	73 07       	cpc	r23, r19
    1d74:	84 07       	cpc	r24, r20
    1d76:	38 f0       	brcs	.+14     	; 0x1d86 <__divsf3_pse+0x26>
    1d78:	9f 5f       	subi	r25, 0xFF	; 255
    1d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	44 1f       	adc	r20, r20
    1d82:	aa 1f       	adc	r26, r26
    1d84:	a9 f3       	breq	.-22     	; 0x1d70 <__divsf3_pse+0x10>
    1d86:	33 d0       	rcall	.+102    	; 0x1dee <__divsf3_pse+0x8e>
    1d88:	0e 2e       	mov	r0, r30
    1d8a:	3a f0       	brmi	.+14     	; 0x1d9a <__divsf3_pse+0x3a>
    1d8c:	e0 e8       	ldi	r30, 0x80	; 128
    1d8e:	30 d0       	rcall	.+96     	; 0x1df0 <__divsf3_pse+0x90>
    1d90:	91 50       	subi	r25, 0x01	; 1
    1d92:	50 40       	sbci	r21, 0x00	; 0
    1d94:	e6 95       	lsr	r30
    1d96:	00 1c       	adc	r0, r0
    1d98:	ca f7       	brpl	.-14     	; 0x1d8c <__divsf3_pse+0x2c>
    1d9a:	29 d0       	rcall	.+82     	; 0x1dee <__divsf3_pse+0x8e>
    1d9c:	fe 2f       	mov	r31, r30
    1d9e:	27 d0       	rcall	.+78     	; 0x1dee <__divsf3_pse+0x8e>
    1da0:	66 0f       	add	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	bb 1f       	adc	r27, r27
    1da8:	26 17       	cp	r18, r22
    1daa:	37 07       	cpc	r19, r23
    1dac:	48 07       	cpc	r20, r24
    1dae:	ab 07       	cpc	r26, r27
    1db0:	b0 e8       	ldi	r27, 0x80	; 128
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <__divsf3_pse+0x56>
    1db4:	bb 0b       	sbc	r27, r27
    1db6:	80 2d       	mov	r24, r0
    1db8:	bf 01       	movw	r22, r30
    1dba:	ff 27       	eor	r31, r31
    1dbc:	93 58       	subi	r25, 0x83	; 131
    1dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc0:	2a f0       	brmi	.+10     	; 0x1dcc <__divsf3_pse+0x6c>
    1dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	68 f0       	brcs	.+26     	; 0x1de2 <__divsf3_pse+0x82>
    1dc8:	92 c0       	rjmp	.+292    	; 0x1eee <__fp_inf>
    1dca:	01 c1       	rjmp	.+514    	; 0x1fce <__fp_szero>
    1dcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dce:	ec f3       	brlt	.-6      	; 0x1dca <__divsf3_pse+0x6a>
    1dd0:	98 3e       	cpi	r25, 0xE8	; 232
    1dd2:	dc f3       	brlt	.-10     	; 0x1dca <__divsf3_pse+0x6a>
    1dd4:	86 95       	lsr	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b7 95       	ror	r27
    1ddc:	f7 95       	ror	r31
    1dde:	9f 5f       	subi	r25, 0xFF	; 255
    1de0:	c9 f7       	brne	.-14     	; 0x1dd4 <__divsf3_pse+0x74>
    1de2:	88 0f       	add	r24, r24
    1de4:	91 1d       	adc	r25, r1
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	97 f9       	bld	r25, 7
    1dec:	08 95       	ret
    1dee:	e1 e0       	ldi	r30, 0x01	; 1
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	bb 1f       	adc	r27, r27
    1df8:	62 17       	cp	r22, r18
    1dfa:	73 07       	cpc	r23, r19
    1dfc:	84 07       	cpc	r24, r20
    1dfe:	ba 07       	cpc	r27, r26
    1e00:	20 f0       	brcs	.+8      	; 0x1e0a <__divsf3_pse+0xaa>
    1e02:	62 1b       	sub	r22, r18
    1e04:	73 0b       	sbc	r23, r19
    1e06:	84 0b       	sbc	r24, r20
    1e08:	ba 0b       	sbc	r27, r26
    1e0a:	ee 1f       	adc	r30, r30
    1e0c:	88 f7       	brcc	.-30     	; 0x1df0 <__divsf3_pse+0x90>
    1e0e:	e0 95       	com	r30
    1e10:	08 95       	ret

00001e12 <__fixsfsi>:
    1e12:	04 d0       	rcall	.+8      	; 0x1e1c <__fixunssfsi>
    1e14:	68 94       	set
    1e16:	b1 11       	cpse	r27, r1
    1e18:	da c0       	rjmp	.+436    	; 0x1fce <__fp_szero>
    1e1a:	08 95       	ret

00001e1c <__fixunssfsi>:
    1e1c:	bd d0       	rcall	.+378    	; 0x1f98 <__fp_splitA>
    1e1e:	88 f0       	brcs	.+34     	; 0x1e42 <__fixunssfsi+0x26>
    1e20:	9f 57       	subi	r25, 0x7F	; 127
    1e22:	90 f0       	brcs	.+36     	; 0x1e48 <__fixunssfsi+0x2c>
    1e24:	b9 2f       	mov	r27, r25
    1e26:	99 27       	eor	r25, r25
    1e28:	b7 51       	subi	r27, 0x17	; 23
    1e2a:	a0 f0       	brcs	.+40     	; 0x1e54 <__fixunssfsi+0x38>
    1e2c:	d1 f0       	breq	.+52     	; 0x1e62 <__fixunssfsi+0x46>
    1e2e:	66 0f       	add	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	88 1f       	adc	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	1a f0       	brmi	.+6      	; 0x1e3e <__fixunssfsi+0x22>
    1e38:	ba 95       	dec	r27
    1e3a:	c9 f7       	brne	.-14     	; 0x1e2e <__fixunssfsi+0x12>
    1e3c:	12 c0       	rjmp	.+36     	; 0x1e62 <__fixunssfsi+0x46>
    1e3e:	b1 30       	cpi	r27, 0x01	; 1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <__fixunssfsi+0x46>
    1e42:	c4 d0       	rcall	.+392    	; 0x1fcc <__fp_zero>
    1e44:	b1 e0       	ldi	r27, 0x01	; 1
    1e46:	08 95       	ret
    1e48:	c1 c0       	rjmp	.+386    	; 0x1fcc <__fp_zero>
    1e4a:	67 2f       	mov	r22, r23
    1e4c:	78 2f       	mov	r23, r24
    1e4e:	88 27       	eor	r24, r24
    1e50:	b8 5f       	subi	r27, 0xF8	; 248
    1e52:	39 f0       	breq	.+14     	; 0x1e62 <__fixunssfsi+0x46>
    1e54:	b9 3f       	cpi	r27, 0xF9	; 249
    1e56:	cc f3       	brlt	.-14     	; 0x1e4a <__fixunssfsi+0x2e>
    1e58:	86 95       	lsr	r24
    1e5a:	77 95       	ror	r23
    1e5c:	67 95       	ror	r22
    1e5e:	b3 95       	inc	r27
    1e60:	d9 f7       	brne	.-10     	; 0x1e58 <__fixunssfsi+0x3c>
    1e62:	3e f4       	brtc	.+14     	; 0x1e72 <__fixunssfsi+0x56>
    1e64:	90 95       	com	r25
    1e66:	80 95       	com	r24
    1e68:	70 95       	com	r23
    1e6a:	61 95       	neg	r22
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e70:	9f 4f       	sbci	r25, 0xFF	; 255
    1e72:	08 95       	ret

00001e74 <__floatunsisf>:
    1e74:	e8 94       	clt
    1e76:	09 c0       	rjmp	.+18     	; 0x1e8a <__floatsisf+0x12>

00001e78 <__floatsisf>:
    1e78:	97 fb       	bst	r25, 7
    1e7a:	3e f4       	brtc	.+14     	; 0x1e8a <__floatsisf+0x12>
    1e7c:	90 95       	com	r25
    1e7e:	80 95       	com	r24
    1e80:	70 95       	com	r23
    1e82:	61 95       	neg	r22
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	99 23       	and	r25, r25
    1e8c:	a9 f0       	breq	.+42     	; 0x1eb8 <__floatsisf+0x40>
    1e8e:	f9 2f       	mov	r31, r25
    1e90:	96 e9       	ldi	r25, 0x96	; 150
    1e92:	bb 27       	eor	r27, r27
    1e94:	93 95       	inc	r25
    1e96:	f6 95       	lsr	r31
    1e98:	87 95       	ror	r24
    1e9a:	77 95       	ror	r23
    1e9c:	67 95       	ror	r22
    1e9e:	b7 95       	ror	r27
    1ea0:	f1 11       	cpse	r31, r1
    1ea2:	f8 cf       	rjmp	.-16     	; 0x1e94 <__floatsisf+0x1c>
    1ea4:	fa f4       	brpl	.+62     	; 0x1ee4 <__floatsisf+0x6c>
    1ea6:	bb 0f       	add	r27, r27
    1ea8:	11 f4       	brne	.+4      	; 0x1eae <__floatsisf+0x36>
    1eaa:	60 ff       	sbrs	r22, 0
    1eac:	1b c0       	rjmp	.+54     	; 0x1ee4 <__floatsisf+0x6c>
    1eae:	6f 5f       	subi	r22, 0xFF	; 255
    1eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb6:	16 c0       	rjmp	.+44     	; 0x1ee4 <__floatsisf+0x6c>
    1eb8:	88 23       	and	r24, r24
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <__floatsisf+0x48>
    1ebc:	96 e9       	ldi	r25, 0x96	; 150
    1ebe:	11 c0       	rjmp	.+34     	; 0x1ee2 <__floatsisf+0x6a>
    1ec0:	77 23       	and	r23, r23
    1ec2:	21 f0       	breq	.+8      	; 0x1ecc <__floatsisf+0x54>
    1ec4:	9e e8       	ldi	r25, 0x8E	; 142
    1ec6:	87 2f       	mov	r24, r23
    1ec8:	76 2f       	mov	r23, r22
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <__floatsisf+0x5e>
    1ecc:	66 23       	and	r22, r22
    1ece:	71 f0       	breq	.+28     	; 0x1eec <__floatsisf+0x74>
    1ed0:	96 e8       	ldi	r25, 0x86	; 134
    1ed2:	86 2f       	mov	r24, r22
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	2a f0       	brmi	.+10     	; 0x1ee4 <__floatsisf+0x6c>
    1eda:	9a 95       	dec	r25
    1edc:	66 0f       	add	r22, r22
    1ede:	77 1f       	adc	r23, r23
    1ee0:	88 1f       	adc	r24, r24
    1ee2:	da f7       	brpl	.-10     	; 0x1eda <__floatsisf+0x62>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	97 f9       	bld	r25, 7
    1eec:	08 95       	ret

00001eee <__fp_inf>:
    1eee:	97 f9       	bld	r25, 7
    1ef0:	9f 67       	ori	r25, 0x7F	; 127
    1ef2:	80 e8       	ldi	r24, 0x80	; 128
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	08 95       	ret

00001efa <__fp_nan>:
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	80 ec       	ldi	r24, 0xC0	; 192
    1efe:	08 95       	ret

00001f00 <__fp_powser>:
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	1f 93       	push	r17
    1f06:	0f 93       	push	r16
    1f08:	ff 92       	push	r15
    1f0a:	ef 92       	push	r14
    1f0c:	df 92       	push	r13
    1f0e:	7b 01       	movw	r14, r22
    1f10:	8c 01       	movw	r16, r24
    1f12:	68 94       	set
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <__fp_powser+0x20>
    1f16:	da 2e       	mov	r13, r26
    1f18:	ef 01       	movw	r28, r30
    1f1a:	72 d0       	rcall	.+228    	; 0x2000 <__mulsf3x>
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e8 94       	clt
    1f20:	a5 91       	lpm	r26, Z+
    1f22:	25 91       	lpm	r18, Z+
    1f24:	35 91       	lpm	r19, Z+
    1f26:	45 91       	lpm	r20, Z+
    1f28:	55 91       	lpm	r21, Z+
    1f2a:	ae f3       	brts	.-22     	; 0x1f16 <__fp_powser+0x16>
    1f2c:	ef 01       	movw	r28, r30
    1f2e:	54 de       	rcall	.-856    	; 0x1bd8 <__addsf3x>
    1f30:	fe 01       	movw	r30, r28
    1f32:	97 01       	movw	r18, r14
    1f34:	a8 01       	movw	r20, r16
    1f36:	da 94       	dec	r13
    1f38:	79 f7       	brne	.-34     	; 0x1f18 <__fp_powser+0x18>
    1f3a:	df 90       	pop	r13
    1f3c:	ef 90       	pop	r14
    1f3e:	ff 90       	pop	r15
    1f40:	0f 91       	pop	r16
    1f42:	1f 91       	pop	r17
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <__fp_pscA>:
    1f4a:	00 24       	eor	r0, r0
    1f4c:	0a 94       	dec	r0
    1f4e:	16 16       	cp	r1, r22
    1f50:	17 06       	cpc	r1, r23
    1f52:	18 06       	cpc	r1, r24
    1f54:	09 06       	cpc	r0, r25
    1f56:	08 95       	ret

00001f58 <__fp_pscB>:
    1f58:	00 24       	eor	r0, r0
    1f5a:	0a 94       	dec	r0
    1f5c:	12 16       	cp	r1, r18
    1f5e:	13 06       	cpc	r1, r19
    1f60:	14 06       	cpc	r1, r20
    1f62:	05 06       	cpc	r0, r21
    1f64:	08 95       	ret

00001f66 <__fp_round>:
    1f66:	09 2e       	mov	r0, r25
    1f68:	03 94       	inc	r0
    1f6a:	00 0c       	add	r0, r0
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <__fp_round+0xc>
    1f6e:	88 23       	and	r24, r24
    1f70:	52 f0       	brmi	.+20     	; 0x1f86 <__fp_round+0x20>
    1f72:	bb 0f       	add	r27, r27
    1f74:	40 f4       	brcc	.+16     	; 0x1f86 <__fp_round+0x20>
    1f76:	bf 2b       	or	r27, r31
    1f78:	11 f4       	brne	.+4      	; 0x1f7e <__fp_round+0x18>
    1f7a:	60 ff       	sbrs	r22, 0
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <__fp_round+0x20>
    1f7e:	6f 5f       	subi	r22, 0xFF	; 255
    1f80:	7f 4f       	sbci	r23, 0xFF	; 255
    1f82:	8f 4f       	sbci	r24, 0xFF	; 255
    1f84:	9f 4f       	sbci	r25, 0xFF	; 255
    1f86:	08 95       	ret

00001f88 <__fp_split3>:
    1f88:	57 fd       	sbrc	r21, 7
    1f8a:	90 58       	subi	r25, 0x80	; 128
    1f8c:	44 0f       	add	r20, r20
    1f8e:	55 1f       	adc	r21, r21
    1f90:	59 f0       	breq	.+22     	; 0x1fa8 <__fp_splitA+0x10>
    1f92:	5f 3f       	cpi	r21, 0xFF	; 255
    1f94:	71 f0       	breq	.+28     	; 0x1fb2 <__fp_splitA+0x1a>
    1f96:	47 95       	ror	r20

00001f98 <__fp_splitA>:
    1f98:	88 0f       	add	r24, r24
    1f9a:	97 fb       	bst	r25, 7
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	61 f0       	breq	.+24     	; 0x1fb8 <__fp_splitA+0x20>
    1fa0:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa2:	79 f0       	breq	.+30     	; 0x1fc2 <__fp_splitA+0x2a>
    1fa4:	87 95       	ror	r24
    1fa6:	08 95       	ret
    1fa8:	12 16       	cp	r1, r18
    1faa:	13 06       	cpc	r1, r19
    1fac:	14 06       	cpc	r1, r20
    1fae:	55 1f       	adc	r21, r21
    1fb0:	f2 cf       	rjmp	.-28     	; 0x1f96 <__fp_split3+0xe>
    1fb2:	46 95       	lsr	r20
    1fb4:	f1 df       	rcall	.-30     	; 0x1f98 <__fp_splitA>
    1fb6:	08 c0       	rjmp	.+16     	; 0x1fc8 <__fp_splitA+0x30>
    1fb8:	16 16       	cp	r1, r22
    1fba:	17 06       	cpc	r1, r23
    1fbc:	18 06       	cpc	r1, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	f1 cf       	rjmp	.-30     	; 0x1fa4 <__fp_splitA+0xc>
    1fc2:	86 95       	lsr	r24
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	61 05       	cpc	r22, r1
    1fc8:	08 94       	sec
    1fca:	08 95       	ret

00001fcc <__fp_zero>:
    1fcc:	e8 94       	clt

00001fce <__fp_szero>:
    1fce:	bb 27       	eor	r27, r27
    1fd0:	66 27       	eor	r22, r22
    1fd2:	77 27       	eor	r23, r23
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	97 f9       	bld	r25, 7
    1fd8:	08 95       	ret

00001fda <inverse>:
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	80 e8       	ldi	r24, 0x80	; 128
    1fe4:	9f e3       	ldi	r25, 0x3F	; 63
    1fe6:	ad ce       	rjmp	.-678    	; 0x1d42 <__divsf3>

00001fe8 <__mulsf3>:
    1fe8:	0b d0       	rcall	.+22     	; 0x2000 <__mulsf3x>
    1fea:	bd cf       	rjmp	.-134    	; 0x1f66 <__fp_round>
    1fec:	ae df       	rcall	.-164    	; 0x1f4a <__fp_pscA>
    1fee:	28 f0       	brcs	.+10     	; 0x1ffa <__mulsf3+0x12>
    1ff0:	b3 df       	rcall	.-154    	; 0x1f58 <__fp_pscB>
    1ff2:	18 f0       	brcs	.+6      	; 0x1ffa <__mulsf3+0x12>
    1ff4:	95 23       	and	r25, r21
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <__mulsf3+0x12>
    1ff8:	7a cf       	rjmp	.-268    	; 0x1eee <__fp_inf>
    1ffa:	7f cf       	rjmp	.-258    	; 0x1efa <__fp_nan>
    1ffc:	11 24       	eor	r1, r1
    1ffe:	e7 cf       	rjmp	.-50     	; 0x1fce <__fp_szero>

00002000 <__mulsf3x>:
    2000:	c3 df       	rcall	.-122    	; 0x1f88 <__fp_split3>
    2002:	a0 f3       	brcs	.-24     	; 0x1fec <__mulsf3+0x4>

00002004 <__mulsf3_pse>:
    2004:	95 9f       	mul	r25, r21
    2006:	d1 f3       	breq	.-12     	; 0x1ffc <__mulsf3+0x14>
    2008:	95 0f       	add	r25, r21
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	55 1f       	adc	r21, r21
    200e:	62 9f       	mul	r22, r18
    2010:	f0 01       	movw	r30, r0
    2012:	72 9f       	mul	r23, r18
    2014:	bb 27       	eor	r27, r27
    2016:	f0 0d       	add	r31, r0
    2018:	b1 1d       	adc	r27, r1
    201a:	63 9f       	mul	r22, r19
    201c:	aa 27       	eor	r26, r26
    201e:	f0 0d       	add	r31, r0
    2020:	b1 1d       	adc	r27, r1
    2022:	aa 1f       	adc	r26, r26
    2024:	64 9f       	mul	r22, r20
    2026:	66 27       	eor	r22, r22
    2028:	b0 0d       	add	r27, r0
    202a:	a1 1d       	adc	r26, r1
    202c:	66 1f       	adc	r22, r22
    202e:	82 9f       	mul	r24, r18
    2030:	22 27       	eor	r18, r18
    2032:	b0 0d       	add	r27, r0
    2034:	a1 1d       	adc	r26, r1
    2036:	62 1f       	adc	r22, r18
    2038:	73 9f       	mul	r23, r19
    203a:	b0 0d       	add	r27, r0
    203c:	a1 1d       	adc	r26, r1
    203e:	62 1f       	adc	r22, r18
    2040:	83 9f       	mul	r24, r19
    2042:	a0 0d       	add	r26, r0
    2044:	61 1d       	adc	r22, r1
    2046:	22 1f       	adc	r18, r18
    2048:	74 9f       	mul	r23, r20
    204a:	33 27       	eor	r19, r19
    204c:	a0 0d       	add	r26, r0
    204e:	61 1d       	adc	r22, r1
    2050:	23 1f       	adc	r18, r19
    2052:	84 9f       	mul	r24, r20
    2054:	60 0d       	add	r22, r0
    2056:	21 1d       	adc	r18, r1
    2058:	82 2f       	mov	r24, r18
    205a:	76 2f       	mov	r23, r22
    205c:	6a 2f       	mov	r22, r26
    205e:	11 24       	eor	r1, r1
    2060:	9f 57       	subi	r25, 0x7F	; 127
    2062:	50 40       	sbci	r21, 0x00	; 0
    2064:	8a f0       	brmi	.+34     	; 0x2088 <__mulsf3_pse+0x84>
    2066:	e1 f0       	breq	.+56     	; 0x20a0 <__mulsf3_pse+0x9c>
    2068:	88 23       	and	r24, r24
    206a:	4a f0       	brmi	.+18     	; 0x207e <__mulsf3_pse+0x7a>
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	bb 1f       	adc	r27, r27
    2072:	66 1f       	adc	r22, r22
    2074:	77 1f       	adc	r23, r23
    2076:	88 1f       	adc	r24, r24
    2078:	91 50       	subi	r25, 0x01	; 1
    207a:	50 40       	sbci	r21, 0x00	; 0
    207c:	a9 f7       	brne	.-22     	; 0x2068 <__mulsf3_pse+0x64>
    207e:	9e 3f       	cpi	r25, 0xFE	; 254
    2080:	51 05       	cpc	r21, r1
    2082:	70 f0       	brcs	.+28     	; 0x20a0 <__mulsf3_pse+0x9c>
    2084:	34 cf       	rjmp	.-408    	; 0x1eee <__fp_inf>
    2086:	a3 cf       	rjmp	.-186    	; 0x1fce <__fp_szero>
    2088:	5f 3f       	cpi	r21, 0xFF	; 255
    208a:	ec f3       	brlt	.-6      	; 0x2086 <__mulsf3_pse+0x82>
    208c:	98 3e       	cpi	r25, 0xE8	; 232
    208e:	dc f3       	brlt	.-10     	; 0x2086 <__mulsf3_pse+0x82>
    2090:	86 95       	lsr	r24
    2092:	77 95       	ror	r23
    2094:	67 95       	ror	r22
    2096:	b7 95       	ror	r27
    2098:	f7 95       	ror	r31
    209a:	e7 95       	ror	r30
    209c:	9f 5f       	subi	r25, 0xFF	; 255
    209e:	c1 f7       	brne	.-16     	; 0x2090 <__mulsf3_pse+0x8c>
    20a0:	fe 2b       	or	r31, r30
    20a2:	88 0f       	add	r24, r24
    20a4:	91 1d       	adc	r25, r1
    20a6:	96 95       	lsr	r25
    20a8:	87 95       	ror	r24
    20aa:	97 f9       	bld	r25, 7
    20ac:	08 95       	ret
    20ae:	11 f4       	brne	.+4      	; 0x20b4 <__mulsf3_pse+0xb0>
    20b0:	0e f4       	brtc	.+2      	; 0x20b4 <__mulsf3_pse+0xb0>
    20b2:	23 cf       	rjmp	.-442    	; 0x1efa <__fp_nan>
    20b4:	41 c0       	rjmp	.+130    	; 0x2138 <__fp_mpack>

000020b6 <sqrt>:
    20b6:	70 df       	rcall	.-288    	; 0x1f98 <__fp_splitA>
    20b8:	d0 f3       	brcs	.-12     	; 0x20ae <__mulsf3_pse+0xaa>
    20ba:	99 23       	and	r25, r25
    20bc:	d9 f3       	breq	.-10     	; 0x20b4 <__mulsf3_pse+0xb0>
    20be:	ce f3       	brts	.-14     	; 0x20b2 <__mulsf3_pse+0xae>
    20c0:	9f 57       	subi	r25, 0x7F	; 127
    20c2:	55 0b       	sbc	r21, r21
    20c4:	87 ff       	sbrs	r24, 7
    20c6:	46 d0       	rcall	.+140    	; 0x2154 <__fp_norm2>
    20c8:	00 24       	eor	r0, r0
    20ca:	a0 e6       	ldi	r26, 0x60	; 96
    20cc:	40 ea       	ldi	r20, 0xA0	; 160
    20ce:	90 01       	movw	r18, r0
    20d0:	80 58       	subi	r24, 0x80	; 128
    20d2:	56 95       	lsr	r21
    20d4:	97 95       	ror	r25
    20d6:	28 f4       	brcc	.+10     	; 0x20e2 <sqrt+0x2c>
    20d8:	80 5c       	subi	r24, 0xC0	; 192
    20da:	66 0f       	add	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	20 f0       	brcs	.+8      	; 0x20ea <sqrt+0x34>
    20e2:	26 17       	cp	r18, r22
    20e4:	37 07       	cpc	r19, r23
    20e6:	48 07       	cpc	r20, r24
    20e8:	30 f4       	brcc	.+12     	; 0x20f6 <sqrt+0x40>
    20ea:	62 1b       	sub	r22, r18
    20ec:	73 0b       	sbc	r23, r19
    20ee:	84 0b       	sbc	r24, r20
    20f0:	20 29       	or	r18, r0
    20f2:	31 29       	or	r19, r1
    20f4:	4a 2b       	or	r20, r26
    20f6:	a6 95       	lsr	r26
    20f8:	17 94       	ror	r1
    20fa:	07 94       	ror	r0
    20fc:	20 25       	eor	r18, r0
    20fe:	31 25       	eor	r19, r1
    2100:	4a 27       	eor	r20, r26
    2102:	58 f7       	brcc	.-42     	; 0x20da <sqrt+0x24>
    2104:	66 0f       	add	r22, r22
    2106:	77 1f       	adc	r23, r23
    2108:	88 1f       	adc	r24, r24
    210a:	20 f0       	brcs	.+8      	; 0x2114 <sqrt+0x5e>
    210c:	26 17       	cp	r18, r22
    210e:	37 07       	cpc	r19, r23
    2110:	48 07       	cpc	r20, r24
    2112:	30 f4       	brcc	.+12     	; 0x2120 <sqrt+0x6a>
    2114:	62 0b       	sbc	r22, r18
    2116:	73 0b       	sbc	r23, r19
    2118:	84 0b       	sbc	r24, r20
    211a:	20 0d       	add	r18, r0
    211c:	31 1d       	adc	r19, r1
    211e:	41 1d       	adc	r20, r1
    2120:	a0 95       	com	r26
    2122:	81 f7       	brne	.-32     	; 0x2104 <sqrt+0x4e>
    2124:	b9 01       	movw	r22, r18
    2126:	84 2f       	mov	r24, r20
    2128:	91 58       	subi	r25, 0x81	; 129
    212a:	88 0f       	add	r24, r24
    212c:	96 95       	lsr	r25
    212e:	87 95       	ror	r24
    2130:	08 95       	ret

00002132 <square>:
    2132:	9b 01       	movw	r18, r22
    2134:	ac 01       	movw	r20, r24
    2136:	58 cf       	rjmp	.-336    	; 0x1fe8 <__mulsf3>

00002138 <__fp_mpack>:
    2138:	9f 3f       	cpi	r25, 0xFF	; 255
    213a:	31 f0       	breq	.+12     	; 0x2148 <__fp_mpack_finite+0xc>

0000213c <__fp_mpack_finite>:
    213c:	91 50       	subi	r25, 0x01	; 1
    213e:	20 f4       	brcc	.+8      	; 0x2148 <__fp_mpack_finite+0xc>
    2140:	87 95       	ror	r24
    2142:	77 95       	ror	r23
    2144:	67 95       	ror	r22
    2146:	b7 95       	ror	r27
    2148:	88 0f       	add	r24, r24
    214a:	91 1d       	adc	r25, r1
    214c:	96 95       	lsr	r25
    214e:	87 95       	ror	r24
    2150:	97 f9       	bld	r25, 7
    2152:	08 95       	ret

00002154 <__fp_norm2>:
    2154:	91 50       	subi	r25, 0x01	; 1
    2156:	50 40       	sbci	r21, 0x00	; 0
    2158:	66 0f       	add	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	d2 f7       	brpl	.-12     	; 0x2154 <__fp_norm2>
    2160:	08 95       	ret

00002162 <__divmodhi4>:
    2162:	97 fb       	bst	r25, 7
    2164:	07 2e       	mov	r0, r23
    2166:	16 f4       	brtc	.+4      	; 0x216c <__divmodhi4+0xa>
    2168:	00 94       	com	r0
    216a:	07 d0       	rcall	.+14     	; 0x217a <__divmodhi4_neg1>
    216c:	77 fd       	sbrc	r23, 7
    216e:	09 d0       	rcall	.+18     	; 0x2182 <__divmodhi4_neg2>
    2170:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__udivmodhi4>
    2174:	07 fc       	sbrc	r0, 7
    2176:	05 d0       	rcall	.+10     	; 0x2182 <__divmodhi4_neg2>
    2178:	3e f4       	brtc	.+14     	; 0x2188 <__divmodhi4_exit>

0000217a <__divmodhi4_neg1>:
    217a:	90 95       	com	r25
    217c:	81 95       	neg	r24
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	08 95       	ret

00002182 <__divmodhi4_neg2>:
    2182:	70 95       	com	r23
    2184:	61 95       	neg	r22
    2186:	7f 4f       	sbci	r23, 0xFF	; 255

00002188 <__divmodhi4_exit>:
    2188:	08 95       	ret

0000218a <__divmodsi4>:
    218a:	05 2e       	mov	r0, r21
    218c:	97 fb       	bst	r25, 7
    218e:	1e f4       	brtc	.+6      	; 0x2196 <__divmodsi4+0xc>
    2190:	00 94       	com	r0
    2192:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__negsi2>
    2196:	57 fd       	sbrc	r21, 7
    2198:	07 d0       	rcall	.+14     	; 0x21a8 <__divmodsi4_neg2>
    219a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__udivmodsi4>
    219e:	07 fc       	sbrc	r0, 7
    21a0:	03 d0       	rcall	.+6      	; 0x21a8 <__divmodsi4_neg2>
    21a2:	4e f4       	brtc	.+18     	; 0x21b6 <__divmodsi4_exit>
    21a4:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__negsi2>

000021a8 <__divmodsi4_neg2>:
    21a8:	50 95       	com	r21
    21aa:	40 95       	com	r20
    21ac:	30 95       	com	r19
    21ae:	21 95       	neg	r18
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	4f 4f       	sbci	r20, 0xFF	; 255
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255

000021b6 <__divmodsi4_exit>:
    21b6:	08 95       	ret

000021b8 <__negsi2>:
    21b8:	90 95       	com	r25
    21ba:	80 95       	com	r24
    21bc:	70 95       	com	r23
    21be:	61 95       	neg	r22
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	8f 4f       	sbci	r24, 0xFF	; 255
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	08 95       	ret

000021c8 <__udivmodhi4>:
    21c8:	aa 1b       	sub	r26, r26
    21ca:	bb 1b       	sub	r27, r27
    21cc:	51 e1       	ldi	r21, 0x11	; 17
    21ce:	07 c0       	rjmp	.+14     	; 0x21de <__udivmodhi4_ep>

000021d0 <__udivmodhi4_loop>:
    21d0:	aa 1f       	adc	r26, r26
    21d2:	bb 1f       	adc	r27, r27
    21d4:	a6 17       	cp	r26, r22
    21d6:	b7 07       	cpc	r27, r23
    21d8:	10 f0       	brcs	.+4      	; 0x21de <__udivmodhi4_ep>
    21da:	a6 1b       	sub	r26, r22
    21dc:	b7 0b       	sbc	r27, r23

000021de <__udivmodhi4_ep>:
    21de:	88 1f       	adc	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	5a 95       	dec	r21
    21e4:	a9 f7       	brne	.-22     	; 0x21d0 <__udivmodhi4_loop>
    21e6:	80 95       	com	r24
    21e8:	90 95       	com	r25
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	08 95       	ret

000021f0 <__udivmodsi4>:
    21f0:	a1 e2       	ldi	r26, 0x21	; 33
    21f2:	1a 2e       	mov	r1, r26
    21f4:	aa 1b       	sub	r26, r26
    21f6:	bb 1b       	sub	r27, r27
    21f8:	fd 01       	movw	r30, r26
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <__udivmodsi4_ep>

000021fc <__udivmodsi4_loop>:
    21fc:	aa 1f       	adc	r26, r26
    21fe:	bb 1f       	adc	r27, r27
    2200:	ee 1f       	adc	r30, r30
    2202:	ff 1f       	adc	r31, r31
    2204:	a2 17       	cp	r26, r18
    2206:	b3 07       	cpc	r27, r19
    2208:	e4 07       	cpc	r30, r20
    220a:	f5 07       	cpc	r31, r21
    220c:	20 f0       	brcs	.+8      	; 0x2216 <__udivmodsi4_ep>
    220e:	a2 1b       	sub	r26, r18
    2210:	b3 0b       	sbc	r27, r19
    2212:	e4 0b       	sbc	r30, r20
    2214:	f5 0b       	sbc	r31, r21

00002216 <__udivmodsi4_ep>:
    2216:	66 1f       	adc	r22, r22
    2218:	77 1f       	adc	r23, r23
    221a:	88 1f       	adc	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	1a 94       	dec	r1
    2220:	69 f7       	brne	.-38     	; 0x21fc <__udivmodsi4_loop>
    2222:	60 95       	com	r22
    2224:	70 95       	com	r23
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	bd 01       	movw	r22, r26
    2230:	cf 01       	movw	r24, r30
    2232:	08 95       	ret

00002234 <malloc>:
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	91 05       	cpc	r25, r1
    223c:	10 f4       	brcc	.+4      	; 0x2242 <malloc+0xe>
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	e0 91 af 02 	lds	r30, 0x02AF
    2246:	f0 91 b0 02 	lds	r31, 0x02B0
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	30 97       	sbiw	r30, 0x00	; 0
    2254:	39 f1       	breq	.+78     	; 0x22a4 <malloc+0x70>
    2256:	40 81       	ld	r20, Z
    2258:	51 81       	ldd	r21, Z+1	; 0x01
    225a:	48 17       	cp	r20, r24
    225c:	59 07       	cpc	r21, r25
    225e:	b8 f0       	brcs	.+46     	; 0x228e <malloc+0x5a>
    2260:	48 17       	cp	r20, r24
    2262:	59 07       	cpc	r21, r25
    2264:	71 f4       	brne	.+28     	; 0x2282 <malloc+0x4e>
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	10 97       	sbiw	r26, 0x00	; 0
    226c:	29 f0       	breq	.+10     	; 0x2278 <malloc+0x44>
    226e:	13 96       	adiw	r26, 0x03	; 3
    2270:	9c 93       	st	X, r25
    2272:	8e 93       	st	-X, r24
    2274:	12 97       	sbiw	r26, 0x02	; 2
    2276:	2c c0       	rjmp	.+88     	; 0x22d0 <malloc+0x9c>
    2278:	90 93 b0 02 	sts	0x02B0, r25
    227c:	80 93 af 02 	sts	0x02AF, r24
    2280:	27 c0       	rjmp	.+78     	; 0x22d0 <malloc+0x9c>
    2282:	21 15       	cp	r18, r1
    2284:	31 05       	cpc	r19, r1
    2286:	31 f0       	breq	.+12     	; 0x2294 <malloc+0x60>
    2288:	42 17       	cp	r20, r18
    228a:	53 07       	cpc	r21, r19
    228c:	18 f0       	brcs	.+6      	; 0x2294 <malloc+0x60>
    228e:	a9 01       	movw	r20, r18
    2290:	db 01       	movw	r26, r22
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <malloc+0x62>
    2294:	ef 01       	movw	r28, r30
    2296:	9a 01       	movw	r18, r20
    2298:	bd 01       	movw	r22, r26
    229a:	df 01       	movw	r26, r30
    229c:	02 80       	ldd	r0, Z+2	; 0x02
    229e:	f3 81       	ldd	r31, Z+3	; 0x03
    22a0:	e0 2d       	mov	r30, r0
    22a2:	d7 cf       	rjmp	.-82     	; 0x2252 <malloc+0x1e>
    22a4:	21 15       	cp	r18, r1
    22a6:	31 05       	cpc	r19, r1
    22a8:	f9 f0       	breq	.+62     	; 0x22e8 <malloc+0xb4>
    22aa:	28 1b       	sub	r18, r24
    22ac:	39 0b       	sbc	r19, r25
    22ae:	24 30       	cpi	r18, 0x04	; 4
    22b0:	31 05       	cpc	r19, r1
    22b2:	80 f4       	brcc	.+32     	; 0x22d4 <malloc+0xa0>
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	61 15       	cp	r22, r1
    22ba:	71 05       	cpc	r23, r1
    22bc:	21 f0       	breq	.+8      	; 0x22c6 <malloc+0x92>
    22be:	fb 01       	movw	r30, r22
    22c0:	93 83       	std	Z+3, r25	; 0x03
    22c2:	82 83       	std	Z+2, r24	; 0x02
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <malloc+0x9a>
    22c6:	90 93 b0 02 	sts	0x02B0, r25
    22ca:	80 93 af 02 	sts	0x02AF, r24
    22ce:	fe 01       	movw	r30, r28
    22d0:	32 96       	adiw	r30, 0x02	; 2
    22d2:	44 c0       	rjmp	.+136    	; 0x235c <malloc+0x128>
    22d4:	fe 01       	movw	r30, r28
    22d6:	e2 0f       	add	r30, r18
    22d8:	f3 1f       	adc	r31, r19
    22da:	81 93       	st	Z+, r24
    22dc:	91 93       	st	Z+, r25
    22de:	22 50       	subi	r18, 0x02	; 2
    22e0:	31 09       	sbc	r19, r1
    22e2:	39 83       	std	Y+1, r19	; 0x01
    22e4:	28 83       	st	Y, r18
    22e6:	3a c0       	rjmp	.+116    	; 0x235c <malloc+0x128>
    22e8:	20 91 ad 02 	lds	r18, 0x02AD
    22ec:	30 91 ae 02 	lds	r19, 0x02AE
    22f0:	23 2b       	or	r18, r19
    22f2:	41 f4       	brne	.+16     	; 0x2304 <malloc+0xd0>
    22f4:	20 91 02 01 	lds	r18, 0x0102
    22f8:	30 91 03 01 	lds	r19, 0x0103
    22fc:	30 93 ae 02 	sts	0x02AE, r19
    2300:	20 93 ad 02 	sts	0x02AD, r18
    2304:	20 91 00 01 	lds	r18, 0x0100
    2308:	30 91 01 01 	lds	r19, 0x0101
    230c:	21 15       	cp	r18, r1
    230e:	31 05       	cpc	r19, r1
    2310:	41 f4       	brne	.+16     	; 0x2322 <malloc+0xee>
    2312:	2d b7       	in	r18, 0x3d	; 61
    2314:	3e b7       	in	r19, 0x3e	; 62
    2316:	40 91 04 01 	lds	r20, 0x0104
    231a:	50 91 05 01 	lds	r21, 0x0105
    231e:	24 1b       	sub	r18, r20
    2320:	35 0b       	sbc	r19, r21
    2322:	e0 91 ad 02 	lds	r30, 0x02AD
    2326:	f0 91 ae 02 	lds	r31, 0x02AE
    232a:	e2 17       	cp	r30, r18
    232c:	f3 07       	cpc	r31, r19
    232e:	a0 f4       	brcc	.+40     	; 0x2358 <malloc+0x124>
    2330:	2e 1b       	sub	r18, r30
    2332:	3f 0b       	sbc	r19, r31
    2334:	28 17       	cp	r18, r24
    2336:	39 07       	cpc	r19, r25
    2338:	78 f0       	brcs	.+30     	; 0x2358 <malloc+0x124>
    233a:	ac 01       	movw	r20, r24
    233c:	4e 5f       	subi	r20, 0xFE	; 254
    233e:	5f 4f       	sbci	r21, 0xFF	; 255
    2340:	24 17       	cp	r18, r20
    2342:	35 07       	cpc	r19, r21
    2344:	48 f0       	brcs	.+18     	; 0x2358 <malloc+0x124>
    2346:	4e 0f       	add	r20, r30
    2348:	5f 1f       	adc	r21, r31
    234a:	50 93 ae 02 	sts	0x02AE, r21
    234e:	40 93 ad 02 	sts	0x02AD, r20
    2352:	81 93       	st	Z+, r24
    2354:	91 93       	st	Z+, r25
    2356:	02 c0       	rjmp	.+4      	; 0x235c <malloc+0x128>
    2358:	e0 e0       	ldi	r30, 0x00	; 0
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	cf 01       	movw	r24, r30
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	08 95       	ret

00002364 <free>:
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	09 f4       	brne	.+2      	; 0x236e <free+0xa>
    236c:	87 c0       	rjmp	.+270    	; 0x247c <free+0x118>
    236e:	fc 01       	movw	r30, r24
    2370:	32 97       	sbiw	r30, 0x02	; 2
    2372:	13 82       	std	Z+3, r1	; 0x03
    2374:	12 82       	std	Z+2, r1	; 0x02
    2376:	c0 91 af 02 	lds	r28, 0x02AF
    237a:	d0 91 b0 02 	lds	r29, 0x02B0
    237e:	20 97       	sbiw	r28, 0x00	; 0
    2380:	81 f4       	brne	.+32     	; 0x23a2 <free+0x3e>
    2382:	20 81       	ld	r18, Z
    2384:	31 81       	ldd	r19, Z+1	; 0x01
    2386:	28 0f       	add	r18, r24
    2388:	39 1f       	adc	r19, r25
    238a:	80 91 ad 02 	lds	r24, 0x02AD
    238e:	90 91 ae 02 	lds	r25, 0x02AE
    2392:	82 17       	cp	r24, r18
    2394:	93 07       	cpc	r25, r19
    2396:	79 f5       	brne	.+94     	; 0x23f6 <free+0x92>
    2398:	f0 93 ae 02 	sts	0x02AE, r31
    239c:	e0 93 ad 02 	sts	0x02AD, r30
    23a0:	6d c0       	rjmp	.+218    	; 0x247c <free+0x118>
    23a2:	de 01       	movw	r26, r28
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	ae 17       	cp	r26, r30
    23aa:	bf 07       	cpc	r27, r31
    23ac:	50 f4       	brcc	.+20     	; 0x23c2 <free+0x5e>
    23ae:	12 96       	adiw	r26, 0x02	; 2
    23b0:	4d 91       	ld	r20, X+
    23b2:	5c 91       	ld	r21, X
    23b4:	13 97       	sbiw	r26, 0x03	; 3
    23b6:	9d 01       	movw	r18, r26
    23b8:	41 15       	cp	r20, r1
    23ba:	51 05       	cpc	r21, r1
    23bc:	09 f1       	breq	.+66     	; 0x2400 <free+0x9c>
    23be:	da 01       	movw	r26, r20
    23c0:	f3 cf       	rjmp	.-26     	; 0x23a8 <free+0x44>
    23c2:	b3 83       	std	Z+3, r27	; 0x03
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	40 81       	ld	r20, Z
    23c8:	51 81       	ldd	r21, Z+1	; 0x01
    23ca:	84 0f       	add	r24, r20
    23cc:	95 1f       	adc	r25, r21
    23ce:	8a 17       	cp	r24, r26
    23d0:	9b 07       	cpc	r25, r27
    23d2:	71 f4       	brne	.+28     	; 0x23f0 <free+0x8c>
    23d4:	8d 91       	ld	r24, X+
    23d6:	9c 91       	ld	r25, X
    23d8:	11 97       	sbiw	r26, 0x01	; 1
    23da:	84 0f       	add	r24, r20
    23dc:	95 1f       	adc	r25, r21
    23de:	02 96       	adiw	r24, 0x02	; 2
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	80 83       	st	Z, r24
    23e4:	12 96       	adiw	r26, 0x02	; 2
    23e6:	8d 91       	ld	r24, X+
    23e8:	9c 91       	ld	r25, X
    23ea:	13 97       	sbiw	r26, 0x03	; 3
    23ec:	93 83       	std	Z+3, r25	; 0x03
    23ee:	82 83       	std	Z+2, r24	; 0x02
    23f0:	21 15       	cp	r18, r1
    23f2:	31 05       	cpc	r19, r1
    23f4:	29 f4       	brne	.+10     	; 0x2400 <free+0x9c>
    23f6:	f0 93 b0 02 	sts	0x02B0, r31
    23fa:	e0 93 af 02 	sts	0x02AF, r30
    23fe:	3e c0       	rjmp	.+124    	; 0x247c <free+0x118>
    2400:	d9 01       	movw	r26, r18
    2402:	13 96       	adiw	r26, 0x03	; 3
    2404:	fc 93       	st	X, r31
    2406:	ee 93       	st	-X, r30
    2408:	12 97       	sbiw	r26, 0x02	; 2
    240a:	4d 91       	ld	r20, X+
    240c:	5d 91       	ld	r21, X+
    240e:	a4 0f       	add	r26, r20
    2410:	b5 1f       	adc	r27, r21
    2412:	ea 17       	cp	r30, r26
    2414:	fb 07       	cpc	r31, r27
    2416:	79 f4       	brne	.+30     	; 0x2436 <free+0xd2>
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	84 0f       	add	r24, r20
    241e:	95 1f       	adc	r25, r21
    2420:	02 96       	adiw	r24, 0x02	; 2
    2422:	d9 01       	movw	r26, r18
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	9c 93       	st	X, r25
    2428:	8e 93       	st	-X, r24
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	13 96       	adiw	r26, 0x03	; 3
    2430:	9c 93       	st	X, r25
    2432:	8e 93       	st	-X, r24
    2434:	12 97       	sbiw	r26, 0x02	; 2
    2436:	e0 e0       	ldi	r30, 0x00	; 0
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	19 f0       	breq	.+6      	; 0x2448 <free+0xe4>
    2442:	fe 01       	movw	r30, r28
    2444:	ec 01       	movw	r28, r24
    2446:	f9 cf       	rjmp	.-14     	; 0x243a <free+0xd6>
    2448:	ce 01       	movw	r24, r28
    244a:	02 96       	adiw	r24, 0x02	; 2
    244c:	28 81       	ld	r18, Y
    244e:	39 81       	ldd	r19, Y+1	; 0x01
    2450:	82 0f       	add	r24, r18
    2452:	93 1f       	adc	r25, r19
    2454:	20 91 ad 02 	lds	r18, 0x02AD
    2458:	30 91 ae 02 	lds	r19, 0x02AE
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	69 f4       	brne	.+26     	; 0x247c <free+0x118>
    2462:	30 97       	sbiw	r30, 0x00	; 0
    2464:	29 f4       	brne	.+10     	; 0x2470 <free+0x10c>
    2466:	10 92 b0 02 	sts	0x02B0, r1
    246a:	10 92 af 02 	sts	0x02AF, r1
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <free+0x110>
    2470:	13 82       	std	Z+3, r1	; 0x03
    2472:	12 82       	std	Z+2, r1	; 0x02
    2474:	d0 93 ae 02 	sts	0x02AE, r29
    2478:	c0 93 ad 02 	sts	0x02AD, r28
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <realloc>:
    2482:	a0 e0       	ldi	r26, 0x00	; 0
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e4       	ldi	r30, 0x47	; 71
    2488:	f2 e1       	ldi	r31, 0x12	; 18
    248a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x8>
    248e:	ec 01       	movw	r28, r24
    2490:	cb 01       	movw	r24, r22
    2492:	20 97       	sbiw	r28, 0x00	; 0
    2494:	19 f4       	brne	.+6      	; 0x249c <realloc+0x1a>
    2496:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
    249a:	b8 c0       	rjmp	.+368    	; 0x260c <realloc+0x18a>
    249c:	fe 01       	movw	r30, r28
    249e:	e6 0f       	add	r30, r22
    24a0:	f7 1f       	adc	r31, r23
    24a2:	9e 01       	movw	r18, r28
    24a4:	22 50       	subi	r18, 0x02	; 2
    24a6:	31 09       	sbc	r19, r1
    24a8:	e2 17       	cp	r30, r18
    24aa:	f3 07       	cpc	r31, r19
    24ac:	08 f4       	brcc	.+2      	; 0x24b0 <realloc+0x2e>
    24ae:	ac c0       	rjmp	.+344    	; 0x2608 <realloc+0x186>
    24b0:	d9 01       	movw	r26, r18
    24b2:	0d 91       	ld	r16, X+
    24b4:	1c 91       	ld	r17, X
    24b6:	11 97       	sbiw	r26, 0x01	; 1
    24b8:	06 17       	cp	r16, r22
    24ba:	17 07       	cpc	r17, r23
    24bc:	b8 f0       	brcs	.+46     	; 0x24ec <realloc+0x6a>
    24be:	05 30       	cpi	r16, 0x05	; 5
    24c0:	11 05       	cpc	r17, r1
    24c2:	08 f4       	brcc	.+2      	; 0x24c6 <realloc+0x44>
    24c4:	9f c0       	rjmp	.+318    	; 0x2604 <realloc+0x182>
    24c6:	a8 01       	movw	r20, r16
    24c8:	44 50       	subi	r20, 0x04	; 4
    24ca:	51 09       	sbc	r21, r1
    24cc:	46 17       	cp	r20, r22
    24ce:	57 07       	cpc	r21, r23
    24d0:	08 f4       	brcc	.+2      	; 0x24d4 <realloc+0x52>
    24d2:	98 c0       	rjmp	.+304    	; 0x2604 <realloc+0x182>
    24d4:	02 50       	subi	r16, 0x02	; 2
    24d6:	11 09       	sbc	r17, r1
    24d8:	06 1b       	sub	r16, r22
    24da:	17 0b       	sbc	r17, r23
    24dc:	01 93       	st	Z+, r16
    24de:	11 93       	st	Z+, r17
    24e0:	6d 93       	st	X+, r22
    24e2:	7c 93       	st	X, r23
    24e4:	cf 01       	movw	r24, r30
    24e6:	0e 94 b2 11 	call	0x2364	; 0x2364 <free>
    24ea:	8c c0       	rjmp	.+280    	; 0x2604 <realloc+0x182>
    24ec:	5b 01       	movw	r10, r22
    24ee:	a0 1a       	sub	r10, r16
    24f0:	b1 0a       	sbc	r11, r17
    24f2:	4e 01       	movw	r8, r28
    24f4:	80 0e       	add	r8, r16
    24f6:	91 1e       	adc	r9, r17
    24f8:	a0 91 af 02 	lds	r26, 0x02AF
    24fc:	b0 91 b0 02 	lds	r27, 0x02B0
    2500:	61 2c       	mov	r6, r1
    2502:	71 2c       	mov	r7, r1
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	10 97       	sbiw	r26, 0x00	; 0
    250a:	09 f4       	brne	.+2      	; 0x250e <realloc+0x8c>
    250c:	49 c0       	rjmp	.+146    	; 0x25a0 <realloc+0x11e>
    250e:	a8 15       	cp	r26, r8
    2510:	b9 05       	cpc	r27, r9
    2512:	c9 f5       	brne	.+114    	; 0x2586 <realloc+0x104>
    2514:	ed 90       	ld	r14, X+
    2516:	fc 90       	ld	r15, X
    2518:	11 97       	sbiw	r26, 0x01	; 1
    251a:	67 01       	movw	r12, r14
    251c:	42 e0       	ldi	r20, 0x02	; 2
    251e:	c4 0e       	add	r12, r20
    2520:	d1 1c       	adc	r13, r1
    2522:	ca 14       	cp	r12, r10
    2524:	db 04       	cpc	r13, r11
    2526:	78 f1       	brcs	.+94     	; 0x2586 <realloc+0x104>
    2528:	47 01       	movw	r8, r14
    252a:	8a 18       	sub	r8, r10
    252c:	9b 08       	sbc	r9, r11
    252e:	64 01       	movw	r12, r8
    2530:	42 e0       	ldi	r20, 0x02	; 2
    2532:	c4 0e       	add	r12, r20
    2534:	d1 1c       	adc	r13, r1
    2536:	12 96       	adiw	r26, 0x02	; 2
    2538:	bc 90       	ld	r11, X
    253a:	12 97       	sbiw	r26, 0x02	; 2
    253c:	13 96       	adiw	r26, 0x03	; 3
    253e:	ac 91       	ld	r26, X
    2540:	b5 e0       	ldi	r27, 0x05	; 5
    2542:	cb 16       	cp	r12, r27
    2544:	d1 04       	cpc	r13, r1
    2546:	40 f0       	brcs	.+16     	; 0x2558 <realloc+0xd6>
    2548:	b2 82       	std	Z+2, r11	; 0x02
    254a:	a3 83       	std	Z+3, r26	; 0x03
    254c:	91 82       	std	Z+1, r9	; 0x01
    254e:	80 82       	st	Z, r8
    2550:	d9 01       	movw	r26, r18
    2552:	8d 93       	st	X+, r24
    2554:	9c 93       	st	X, r25
    2556:	09 c0       	rjmp	.+18     	; 0x256a <realloc+0xe8>
    2558:	0e 5f       	subi	r16, 0xFE	; 254
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	0e 0d       	add	r16, r14
    255e:	1f 1d       	adc	r17, r15
    2560:	f9 01       	movw	r30, r18
    2562:	11 83       	std	Z+1, r17	; 0x01
    2564:	00 83       	st	Z, r16
    2566:	eb 2d       	mov	r30, r11
    2568:	fa 2f       	mov	r31, r26
    256a:	61 15       	cp	r22, r1
    256c:	71 05       	cpc	r23, r1
    256e:	31 f0       	breq	.+12     	; 0x257c <realloc+0xfa>
    2570:	db 01       	movw	r26, r22
    2572:	13 96       	adiw	r26, 0x03	; 3
    2574:	fc 93       	st	X, r31
    2576:	ee 93       	st	-X, r30
    2578:	12 97       	sbiw	r26, 0x02	; 2
    257a:	44 c0       	rjmp	.+136    	; 0x2604 <realloc+0x182>
    257c:	f0 93 b0 02 	sts	0x02B0, r31
    2580:	e0 93 af 02 	sts	0x02AF, r30
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <realloc+0x182>
    2586:	6d 91       	ld	r22, X+
    2588:	7c 91       	ld	r23, X
    258a:	11 97       	sbiw	r26, 0x01	; 1
    258c:	66 16       	cp	r6, r22
    258e:	77 06       	cpc	r7, r23
    2590:	08 f4       	brcc	.+2      	; 0x2594 <realloc+0x112>
    2592:	3b 01       	movw	r6, r22
    2594:	bd 01       	movw	r22, r26
    2596:	12 96       	adiw	r26, 0x02	; 2
    2598:	0d 90       	ld	r0, X+
    259a:	bc 91       	ld	r27, X
    259c:	a0 2d       	mov	r26, r0
    259e:	b4 cf       	rjmp	.-152    	; 0x2508 <realloc+0x86>
    25a0:	60 91 ad 02 	lds	r22, 0x02AD
    25a4:	70 91 ae 02 	lds	r23, 0x02AE
    25a8:	68 15       	cp	r22, r8
    25aa:	79 05       	cpc	r23, r9
    25ac:	e9 f4       	brne	.+58     	; 0x25e8 <realloc+0x166>
    25ae:	68 16       	cp	r6, r24
    25b0:	79 06       	cpc	r7, r25
    25b2:	d0 f4       	brcc	.+52     	; 0x25e8 <realloc+0x166>
    25b4:	40 91 00 01 	lds	r20, 0x0100
    25b8:	50 91 01 01 	lds	r21, 0x0101
    25bc:	41 15       	cp	r20, r1
    25be:	51 05       	cpc	r21, r1
    25c0:	41 f4       	brne	.+16     	; 0x25d2 <realloc+0x150>
    25c2:	4d b7       	in	r20, 0x3d	; 61
    25c4:	5e b7       	in	r21, 0x3e	; 62
    25c6:	60 91 04 01 	lds	r22, 0x0104
    25ca:	70 91 05 01 	lds	r23, 0x0105
    25ce:	46 1b       	sub	r20, r22
    25d0:	57 0b       	sbc	r21, r23
    25d2:	e4 17       	cp	r30, r20
    25d4:	f5 07       	cpc	r31, r21
    25d6:	c0 f4       	brcc	.+48     	; 0x2608 <realloc+0x186>
    25d8:	f0 93 ae 02 	sts	0x02AE, r31
    25dc:	e0 93 ad 02 	sts	0x02AD, r30
    25e0:	f9 01       	movw	r30, r18
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <realloc+0x182>
    25e8:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
    25ec:	7c 01       	movw	r14, r24
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	59 f0       	breq	.+22     	; 0x2608 <realloc+0x186>
    25f2:	a8 01       	movw	r20, r16
    25f4:	be 01       	movw	r22, r28
    25f6:	0e 94 0b 13 	call	0x2616	; 0x2616 <memcpy>
    25fa:	ce 01       	movw	r24, r28
    25fc:	0e 94 b2 11 	call	0x2364	; 0x2364 <free>
    2600:	c7 01       	movw	r24, r14
    2602:	04 c0       	rjmp	.+8      	; 0x260c <realloc+0x18a>
    2604:	ce 01       	movw	r24, r28
    2606:	02 c0       	rjmp	.+4      	; 0x260c <realloc+0x18a>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	ee e0       	ldi	r30, 0x0E	; 14
    2612:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x8>

00002616 <memcpy>:
    2616:	fb 01       	movw	r30, r22
    2618:	dc 01       	movw	r26, r24
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <memcpy+0xa>
    261c:	01 90       	ld	r0, Z+
    261e:	0d 92       	st	X+, r0
    2620:	41 50       	subi	r20, 0x01	; 1
    2622:	50 40       	sbci	r21, 0x00	; 0
    2624:	d8 f7       	brcc	.-10     	; 0x261c <memcpy+0x6>
    2626:	08 95       	ret

00002628 <fdevopen>:
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	ec 01       	movw	r28, r24
    2632:	8b 01       	movw	r16, r22
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	31 f4       	brne	.+12     	; 0x2644 <fdevopen+0x1c>
    2638:	61 15       	cp	r22, r1
    263a:	71 05       	cpc	r23, r1
    263c:	19 f4       	brne	.+6      	; 0x2644 <fdevopen+0x1c>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	38 c0       	rjmp	.+112    	; 0x26b4 <fdevopen+0x8c>
    2644:	6e e0       	ldi	r22, 0x0E	; 14
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 67 15 	call	0x2ace	; 0x2ace <calloc>
    2650:	fc 01       	movw	r30, r24
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	a1 f3       	breq	.-24     	; 0x263e <fdevopen+0x16>
    2656:	80 e8       	ldi	r24, 0x80	; 128
    2658:	83 83       	std	Z+3, r24	; 0x03
    265a:	01 15       	cp	r16, r1
    265c:	11 05       	cpc	r17, r1
    265e:	71 f0       	breq	.+28     	; 0x267c <fdevopen+0x54>
    2660:	13 87       	std	Z+11, r17	; 0x0b
    2662:	02 87       	std	Z+10, r16	; 0x0a
    2664:	81 e8       	ldi	r24, 0x81	; 129
    2666:	83 83       	std	Z+3, r24	; 0x03
    2668:	80 91 b1 02 	lds	r24, 0x02B1
    266c:	90 91 b2 02 	lds	r25, 0x02B2
    2670:	89 2b       	or	r24, r25
    2672:	21 f4       	brne	.+8      	; 0x267c <fdevopen+0x54>
    2674:	f0 93 b2 02 	sts	0x02B2, r31
    2678:	e0 93 b1 02 	sts	0x02B1, r30
    267c:	20 97       	sbiw	r28, 0x00	; 0
    267e:	c9 f0       	breq	.+50     	; 0x26b2 <fdevopen+0x8a>
    2680:	d1 87       	std	Z+9, r29	; 0x09
    2682:	c0 87       	std	Z+8, r28	; 0x08
    2684:	83 81       	ldd	r24, Z+3	; 0x03
    2686:	82 60       	ori	r24, 0x02	; 2
    2688:	83 83       	std	Z+3, r24	; 0x03
    268a:	80 91 b3 02 	lds	r24, 0x02B3
    268e:	90 91 b4 02 	lds	r25, 0x02B4
    2692:	89 2b       	or	r24, r25
    2694:	71 f4       	brne	.+28     	; 0x26b2 <fdevopen+0x8a>
    2696:	f0 93 b4 02 	sts	0x02B4, r31
    269a:	e0 93 b3 02 	sts	0x02B3, r30
    269e:	80 91 b5 02 	lds	r24, 0x02B5
    26a2:	90 91 b6 02 	lds	r25, 0x02B6
    26a6:	89 2b       	or	r24, r25
    26a8:	21 f4       	brne	.+8      	; 0x26b2 <fdevopen+0x8a>
    26aa:	f0 93 b6 02 	sts	0x02B6, r31
    26ae:	e0 93 b5 02 	sts	0x02B5, r30
    26b2:	cf 01       	movw	r24, r30
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	08 95       	ret

000026be <printf>:
    26be:	a0 e0       	ldi	r26, 0x00	; 0
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e5 e6       	ldi	r30, 0x65	; 101
    26c4:	f3 e1       	ldi	r31, 0x13	; 19
    26c6:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__prologue_saves__+0x20>
    26ca:	fe 01       	movw	r30, r28
    26cc:	35 96       	adiw	r30, 0x05	; 5
    26ce:	61 91       	ld	r22, Z+
    26d0:	71 91       	ld	r23, Z+
    26d2:	af 01       	movw	r20, r30
    26d4:	80 91 b3 02 	lds	r24, 0x02B3
    26d8:	90 91 b4 02 	lds	r25, 0x02B4
    26dc:	0e 94 95 13 	call	0x272a	; 0x272a <vfprintf>
    26e0:	e2 e0       	ldi	r30, 0x02	; 2
    26e2:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__epilogue_restores__+0x20>

000026e6 <sprintf>:
    26e6:	ae e0       	ldi	r26, 0x0E	; 14
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e9 e7       	ldi	r30, 0x79	; 121
    26ec:	f3 e1       	ldi	r31, 0x13	; 19
    26ee:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__prologue_saves__+0x1c>
    26f2:	0d 89       	ldd	r16, Y+21	; 0x15
    26f4:	1e 89       	ldd	r17, Y+22	; 0x16
    26f6:	86 e0       	ldi	r24, 0x06	; 6
    26f8:	8c 83       	std	Y+4, r24	; 0x04
    26fa:	1a 83       	std	Y+2, r17	; 0x02
    26fc:	09 83       	std	Y+1, r16	; 0x01
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	9f e7       	ldi	r25, 0x7F	; 127
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	ae 01       	movw	r20, r28
    2708:	47 5e       	subi	r20, 0xE7	; 231
    270a:	5f 4f       	sbci	r21, 0xFF	; 255
    270c:	6f 89       	ldd	r22, Y+23	; 0x17
    270e:	78 8d       	ldd	r23, Y+24	; 0x18
    2710:	ce 01       	movw	r24, r28
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	0e 94 95 13 	call	0x272a	; 0x272a <vfprintf>
    2718:	ef 81       	ldd	r30, Y+7	; 0x07
    271a:	f8 85       	ldd	r31, Y+8	; 0x08
    271c:	e0 0f       	add	r30, r16
    271e:	f1 1f       	adc	r31, r17
    2720:	10 82       	st	Z, r1
    2722:	2e 96       	adiw	r28, 0x0e	; 14
    2724:	e4 e0       	ldi	r30, 0x04	; 4
    2726:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__epilogue_restores__+0x1c>

0000272a <vfprintf>:
    272a:	ac e0       	ldi	r26, 0x0C	; 12
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	eb e9       	ldi	r30, 0x9B	; 155
    2730:	f3 e1       	ldi	r31, 0x13	; 19
    2732:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__prologue_saves__>
    2736:	7c 01       	movw	r14, r24
    2738:	6b 01       	movw	r12, r22
    273a:	8a 01       	movw	r16, r20
    273c:	fc 01       	movw	r30, r24
    273e:	17 82       	std	Z+7, r1	; 0x07
    2740:	16 82       	std	Z+6, r1	; 0x06
    2742:	83 81       	ldd	r24, Z+3	; 0x03
    2744:	81 ff       	sbrs	r24, 1
    2746:	bd c1       	rjmp	.+890    	; 0x2ac2 <vfprintf+0x398>
    2748:	ce 01       	movw	r24, r28
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	4c 01       	movw	r8, r24
    274e:	f7 01       	movw	r30, r14
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	f6 01       	movw	r30, r12
    2754:	93 fd       	sbrc	r25, 3
    2756:	85 91       	lpm	r24, Z+
    2758:	93 ff       	sbrs	r25, 3
    275a:	81 91       	ld	r24, Z+
    275c:	6f 01       	movw	r12, r30
    275e:	88 23       	and	r24, r24
    2760:	09 f4       	brne	.+2      	; 0x2764 <vfprintf+0x3a>
    2762:	ab c1       	rjmp	.+854    	; 0x2aba <vfprintf+0x390>
    2764:	85 32       	cpi	r24, 0x25	; 37
    2766:	39 f4       	brne	.+14     	; 0x2776 <vfprintf+0x4c>
    2768:	93 fd       	sbrc	r25, 3
    276a:	85 91       	lpm	r24, Z+
    276c:	93 ff       	sbrs	r25, 3
    276e:	81 91       	ld	r24, Z+
    2770:	6f 01       	movw	r12, r30
    2772:	85 32       	cpi	r24, 0x25	; 37
    2774:	29 f4       	brne	.+10     	; 0x2780 <vfprintf+0x56>
    2776:	b7 01       	movw	r22, r14
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    277e:	e7 cf       	rjmp	.-50     	; 0x274e <vfprintf+0x24>
    2780:	51 2c       	mov	r5, r1
    2782:	31 2c       	mov	r3, r1
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	20 32       	cpi	r18, 0x20	; 32
    2788:	a0 f4       	brcc	.+40     	; 0x27b2 <vfprintf+0x88>
    278a:	8b 32       	cpi	r24, 0x2B	; 43
    278c:	69 f0       	breq	.+26     	; 0x27a8 <vfprintf+0x7e>
    278e:	30 f4       	brcc	.+12     	; 0x279c <vfprintf+0x72>
    2790:	80 32       	cpi	r24, 0x20	; 32
    2792:	59 f0       	breq	.+22     	; 0x27aa <vfprintf+0x80>
    2794:	83 32       	cpi	r24, 0x23	; 35
    2796:	69 f4       	brne	.+26     	; 0x27b2 <vfprintf+0x88>
    2798:	20 61       	ori	r18, 0x10	; 16
    279a:	2c c0       	rjmp	.+88     	; 0x27f4 <vfprintf+0xca>
    279c:	8d 32       	cpi	r24, 0x2D	; 45
    279e:	39 f0       	breq	.+14     	; 0x27ae <vfprintf+0x84>
    27a0:	80 33       	cpi	r24, 0x30	; 48
    27a2:	39 f4       	brne	.+14     	; 0x27b2 <vfprintf+0x88>
    27a4:	21 60       	ori	r18, 0x01	; 1
    27a6:	26 c0       	rjmp	.+76     	; 0x27f4 <vfprintf+0xca>
    27a8:	22 60       	ori	r18, 0x02	; 2
    27aa:	24 60       	ori	r18, 0x04	; 4
    27ac:	23 c0       	rjmp	.+70     	; 0x27f4 <vfprintf+0xca>
    27ae:	28 60       	ori	r18, 0x08	; 8
    27b0:	21 c0       	rjmp	.+66     	; 0x27f4 <vfprintf+0xca>
    27b2:	27 fd       	sbrc	r18, 7
    27b4:	27 c0       	rjmp	.+78     	; 0x2804 <vfprintf+0xda>
    27b6:	30 ed       	ldi	r19, 0xD0	; 208
    27b8:	38 0f       	add	r19, r24
    27ba:	3a 30       	cpi	r19, 0x0A	; 10
    27bc:	78 f4       	brcc	.+30     	; 0x27dc <vfprintf+0xb2>
    27be:	26 ff       	sbrs	r18, 6
    27c0:	06 c0       	rjmp	.+12     	; 0x27ce <vfprintf+0xa4>
    27c2:	fa e0       	ldi	r31, 0x0A	; 10
    27c4:	5f 9e       	mul	r5, r31
    27c6:	30 0d       	add	r19, r0
    27c8:	11 24       	eor	r1, r1
    27ca:	53 2e       	mov	r5, r19
    27cc:	13 c0       	rjmp	.+38     	; 0x27f4 <vfprintf+0xca>
    27ce:	8a e0       	ldi	r24, 0x0A	; 10
    27d0:	38 9e       	mul	r3, r24
    27d2:	30 0d       	add	r19, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	33 2e       	mov	r3, r19
    27d8:	20 62       	ori	r18, 0x20	; 32
    27da:	0c c0       	rjmp	.+24     	; 0x27f4 <vfprintf+0xca>
    27dc:	8e 32       	cpi	r24, 0x2E	; 46
    27de:	21 f4       	brne	.+8      	; 0x27e8 <vfprintf+0xbe>
    27e0:	26 fd       	sbrc	r18, 6
    27e2:	6b c1       	rjmp	.+726    	; 0x2aba <vfprintf+0x390>
    27e4:	20 64       	ori	r18, 0x40	; 64
    27e6:	06 c0       	rjmp	.+12     	; 0x27f4 <vfprintf+0xca>
    27e8:	8c 36       	cpi	r24, 0x6C	; 108
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <vfprintf+0xc6>
    27ec:	20 68       	ori	r18, 0x80	; 128
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <vfprintf+0xca>
    27f0:	88 36       	cpi	r24, 0x68	; 104
    27f2:	41 f4       	brne	.+16     	; 0x2804 <vfprintf+0xda>
    27f4:	f6 01       	movw	r30, r12
    27f6:	93 fd       	sbrc	r25, 3
    27f8:	85 91       	lpm	r24, Z+
    27fa:	93 ff       	sbrs	r25, 3
    27fc:	81 91       	ld	r24, Z+
    27fe:	6f 01       	movw	r12, r30
    2800:	81 11       	cpse	r24, r1
    2802:	c1 cf       	rjmp	.-126    	; 0x2786 <vfprintf+0x5c>
    2804:	98 2f       	mov	r25, r24
    2806:	9f 7d       	andi	r25, 0xDF	; 223
    2808:	95 54       	subi	r25, 0x45	; 69
    280a:	93 30       	cpi	r25, 0x03	; 3
    280c:	28 f4       	brcc	.+10     	; 0x2818 <vfprintf+0xee>
    280e:	0c 5f       	subi	r16, 0xFC	; 252
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	ff e3       	ldi	r31, 0x3F	; 63
    2814:	f9 83       	std	Y+1, r31	; 0x01
    2816:	0d c0       	rjmp	.+26     	; 0x2832 <vfprintf+0x108>
    2818:	83 36       	cpi	r24, 0x63	; 99
    281a:	31 f0       	breq	.+12     	; 0x2828 <vfprintf+0xfe>
    281c:	83 37       	cpi	r24, 0x73	; 115
    281e:	71 f0       	breq	.+28     	; 0x283c <vfprintf+0x112>
    2820:	83 35       	cpi	r24, 0x53	; 83
    2822:	09 f0       	breq	.+2      	; 0x2826 <vfprintf+0xfc>
    2824:	5b c0       	rjmp	.+182    	; 0x28dc <vfprintf+0x1b2>
    2826:	22 c0       	rjmp	.+68     	; 0x286c <vfprintf+0x142>
    2828:	f8 01       	movw	r30, r16
    282a:	80 81       	ld	r24, Z
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	0e 5f       	subi	r16, 0xFE	; 254
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	44 24       	eor	r4, r4
    2834:	43 94       	inc	r4
    2836:	51 2c       	mov	r5, r1
    2838:	54 01       	movw	r10, r8
    283a:	15 c0       	rjmp	.+42     	; 0x2866 <vfprintf+0x13c>
    283c:	38 01       	movw	r6, r16
    283e:	f2 e0       	ldi	r31, 0x02	; 2
    2840:	6f 0e       	add	r6, r31
    2842:	71 1c       	adc	r7, r1
    2844:	f8 01       	movw	r30, r16
    2846:	a0 80       	ld	r10, Z
    2848:	b1 80       	ldd	r11, Z+1	; 0x01
    284a:	26 ff       	sbrs	r18, 6
    284c:	03 c0       	rjmp	.+6      	; 0x2854 <vfprintf+0x12a>
    284e:	65 2d       	mov	r22, r5
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <vfprintf+0x12e>
    2854:	6f ef       	ldi	r22, 0xFF	; 255
    2856:	7f ef       	ldi	r23, 0xFF	; 255
    2858:	c5 01       	movw	r24, r10
    285a:	2c 87       	std	Y+12, r18	; 0x0c
    285c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <strnlen>
    2860:	2c 01       	movw	r4, r24
    2862:	83 01       	movw	r16, r6
    2864:	2c 85       	ldd	r18, Y+12	; 0x0c
    2866:	2f 77       	andi	r18, 0x7F	; 127
    2868:	22 2e       	mov	r2, r18
    286a:	17 c0       	rjmp	.+46     	; 0x289a <vfprintf+0x170>
    286c:	38 01       	movw	r6, r16
    286e:	f2 e0       	ldi	r31, 0x02	; 2
    2870:	6f 0e       	add	r6, r31
    2872:	71 1c       	adc	r7, r1
    2874:	f8 01       	movw	r30, r16
    2876:	a0 80       	ld	r10, Z
    2878:	b1 80       	ldd	r11, Z+1	; 0x01
    287a:	26 ff       	sbrs	r18, 6
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <vfprintf+0x15a>
    287e:	65 2d       	mov	r22, r5
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <vfprintf+0x15e>
    2884:	6f ef       	ldi	r22, 0xFF	; 255
    2886:	7f ef       	ldi	r23, 0xFF	; 255
    2888:	c5 01       	movw	r24, r10
    288a:	2c 87       	std	Y+12, r18	; 0x0c
    288c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <strnlen_P>
    2890:	2c 01       	movw	r4, r24
    2892:	2c 85       	ldd	r18, Y+12	; 0x0c
    2894:	20 68       	ori	r18, 0x80	; 128
    2896:	22 2e       	mov	r2, r18
    2898:	83 01       	movw	r16, r6
    289a:	23 fc       	sbrc	r2, 3
    289c:	1b c0       	rjmp	.+54     	; 0x28d4 <vfprintf+0x1aa>
    289e:	83 2d       	mov	r24, r3
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	48 16       	cp	r4, r24
    28a4:	59 06       	cpc	r5, r25
    28a6:	b0 f4       	brcc	.+44     	; 0x28d4 <vfprintf+0x1aa>
    28a8:	b7 01       	movw	r22, r14
    28aa:	80 e2       	ldi	r24, 0x20	; 32
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    28b2:	3a 94       	dec	r3
    28b4:	f4 cf       	rjmp	.-24     	; 0x289e <vfprintf+0x174>
    28b6:	f5 01       	movw	r30, r10
    28b8:	27 fc       	sbrc	r2, 7
    28ba:	85 91       	lpm	r24, Z+
    28bc:	27 fe       	sbrs	r2, 7
    28be:	81 91       	ld	r24, Z+
    28c0:	5f 01       	movw	r10, r30
    28c2:	b7 01       	movw	r22, r14
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    28ca:	31 10       	cpse	r3, r1
    28cc:	3a 94       	dec	r3
    28ce:	f1 e0       	ldi	r31, 0x01	; 1
    28d0:	4f 1a       	sub	r4, r31
    28d2:	51 08       	sbc	r5, r1
    28d4:	41 14       	cp	r4, r1
    28d6:	51 04       	cpc	r5, r1
    28d8:	71 f7       	brne	.-36     	; 0x28b6 <vfprintf+0x18c>
    28da:	e5 c0       	rjmp	.+458    	; 0x2aa6 <vfprintf+0x37c>
    28dc:	84 36       	cpi	r24, 0x64	; 100
    28de:	11 f0       	breq	.+4      	; 0x28e4 <vfprintf+0x1ba>
    28e0:	89 36       	cpi	r24, 0x69	; 105
    28e2:	39 f5       	brne	.+78     	; 0x2932 <vfprintf+0x208>
    28e4:	f8 01       	movw	r30, r16
    28e6:	27 ff       	sbrs	r18, 7
    28e8:	07 c0       	rjmp	.+14     	; 0x28f8 <vfprintf+0x1ce>
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	0c 5f       	subi	r16, 0xFC	; 252
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	08 c0       	rjmp	.+16     	; 0x2908 <vfprintf+0x1de>
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	88 27       	eor	r24, r24
    28fe:	77 fd       	sbrc	r23, 7
    2900:	80 95       	com	r24
    2902:	98 2f       	mov	r25, r24
    2904:	0e 5f       	subi	r16, 0xFE	; 254
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	2f 76       	andi	r18, 0x6F	; 111
    290a:	b2 2e       	mov	r11, r18
    290c:	97 ff       	sbrs	r25, 7
    290e:	09 c0       	rjmp	.+18     	; 0x2922 <vfprintf+0x1f8>
    2910:	90 95       	com	r25
    2912:	80 95       	com	r24
    2914:	70 95       	com	r23
    2916:	61 95       	neg	r22
    2918:	7f 4f       	sbci	r23, 0xFF	; 255
    291a:	8f 4f       	sbci	r24, 0xFF	; 255
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	20 68       	ori	r18, 0x80	; 128
    2920:	b2 2e       	mov	r11, r18
    2922:	2a e0       	ldi	r18, 0x0A	; 10
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	a4 01       	movw	r20, r8
    2928:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__ultoa_invert>
    292c:	a8 2e       	mov	r10, r24
    292e:	a8 18       	sub	r10, r8
    2930:	44 c0       	rjmp	.+136    	; 0x29ba <vfprintf+0x290>
    2932:	85 37       	cpi	r24, 0x75	; 117
    2934:	29 f4       	brne	.+10     	; 0x2940 <vfprintf+0x216>
    2936:	2f 7e       	andi	r18, 0xEF	; 239
    2938:	b2 2e       	mov	r11, r18
    293a:	2a e0       	ldi	r18, 0x0A	; 10
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	25 c0       	rjmp	.+74     	; 0x298a <vfprintf+0x260>
    2940:	f2 2f       	mov	r31, r18
    2942:	f9 7f       	andi	r31, 0xF9	; 249
    2944:	bf 2e       	mov	r11, r31
    2946:	8f 36       	cpi	r24, 0x6F	; 111
    2948:	c1 f0       	breq	.+48     	; 0x297a <vfprintf+0x250>
    294a:	18 f4       	brcc	.+6      	; 0x2952 <vfprintf+0x228>
    294c:	88 35       	cpi	r24, 0x58	; 88
    294e:	79 f0       	breq	.+30     	; 0x296e <vfprintf+0x244>
    2950:	b4 c0       	rjmp	.+360    	; 0x2aba <vfprintf+0x390>
    2952:	80 37       	cpi	r24, 0x70	; 112
    2954:	19 f0       	breq	.+6      	; 0x295c <vfprintf+0x232>
    2956:	88 37       	cpi	r24, 0x78	; 120
    2958:	21 f0       	breq	.+8      	; 0x2962 <vfprintf+0x238>
    295a:	af c0       	rjmp	.+350    	; 0x2aba <vfprintf+0x390>
    295c:	2f 2f       	mov	r18, r31
    295e:	20 61       	ori	r18, 0x10	; 16
    2960:	b2 2e       	mov	r11, r18
    2962:	b4 fe       	sbrs	r11, 4
    2964:	0d c0       	rjmp	.+26     	; 0x2980 <vfprintf+0x256>
    2966:	8b 2d       	mov	r24, r11
    2968:	84 60       	ori	r24, 0x04	; 4
    296a:	b8 2e       	mov	r11, r24
    296c:	09 c0       	rjmp	.+18     	; 0x2980 <vfprintf+0x256>
    296e:	24 ff       	sbrs	r18, 4
    2970:	0a c0       	rjmp	.+20     	; 0x2986 <vfprintf+0x25c>
    2972:	9f 2f       	mov	r25, r31
    2974:	96 60       	ori	r25, 0x06	; 6
    2976:	b9 2e       	mov	r11, r25
    2978:	06 c0       	rjmp	.+12     	; 0x2986 <vfprintf+0x25c>
    297a:	28 e0       	ldi	r18, 0x08	; 8
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	05 c0       	rjmp	.+10     	; 0x298a <vfprintf+0x260>
    2980:	20 e1       	ldi	r18, 0x10	; 16
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	02 c0       	rjmp	.+4      	; 0x298a <vfprintf+0x260>
    2986:	20 e1       	ldi	r18, 0x10	; 16
    2988:	32 e0       	ldi	r19, 0x02	; 2
    298a:	f8 01       	movw	r30, r16
    298c:	b7 fe       	sbrs	r11, 7
    298e:	07 c0       	rjmp	.+14     	; 0x299e <vfprintf+0x274>
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	0c 5f       	subi	r16, 0xFC	; 252
    299a:	1f 4f       	sbci	r17, 0xFF	; 255
    299c:	06 c0       	rjmp	.+12     	; 0x29aa <vfprintf+0x280>
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 5f       	subi	r16, 0xFE	; 254
    29a8:	1f 4f       	sbci	r17, 0xFF	; 255
    29aa:	a4 01       	movw	r20, r8
    29ac:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__ultoa_invert>
    29b0:	a8 2e       	mov	r10, r24
    29b2:	a8 18       	sub	r10, r8
    29b4:	fb 2d       	mov	r31, r11
    29b6:	ff 77       	andi	r31, 0x7F	; 127
    29b8:	bf 2e       	mov	r11, r31
    29ba:	b6 fe       	sbrs	r11, 6
    29bc:	0b c0       	rjmp	.+22     	; 0x29d4 <vfprintf+0x2aa>
    29be:	2b 2d       	mov	r18, r11
    29c0:	2e 7f       	andi	r18, 0xFE	; 254
    29c2:	a5 14       	cp	r10, r5
    29c4:	50 f4       	brcc	.+20     	; 0x29da <vfprintf+0x2b0>
    29c6:	b4 fe       	sbrs	r11, 4
    29c8:	0a c0       	rjmp	.+20     	; 0x29de <vfprintf+0x2b4>
    29ca:	b2 fc       	sbrc	r11, 2
    29cc:	08 c0       	rjmp	.+16     	; 0x29de <vfprintf+0x2b4>
    29ce:	2b 2d       	mov	r18, r11
    29d0:	2e 7e       	andi	r18, 0xEE	; 238
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <vfprintf+0x2b4>
    29d4:	7a 2c       	mov	r7, r10
    29d6:	2b 2d       	mov	r18, r11
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <vfprintf+0x2b6>
    29da:	7a 2c       	mov	r7, r10
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <vfprintf+0x2b6>
    29de:	75 2c       	mov	r7, r5
    29e0:	24 ff       	sbrs	r18, 4
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <vfprintf+0x2d4>
    29e4:	fe 01       	movw	r30, r28
    29e6:	ea 0d       	add	r30, r10
    29e8:	f1 1d       	adc	r31, r1
    29ea:	80 81       	ld	r24, Z
    29ec:	80 33       	cpi	r24, 0x30	; 48
    29ee:	11 f4       	brne	.+4      	; 0x29f4 <vfprintf+0x2ca>
    29f0:	29 7e       	andi	r18, 0xE9	; 233
    29f2:	09 c0       	rjmp	.+18     	; 0x2a06 <vfprintf+0x2dc>
    29f4:	22 ff       	sbrs	r18, 2
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <vfprintf+0x2da>
    29f8:	73 94       	inc	r7
    29fa:	73 94       	inc	r7
    29fc:	04 c0       	rjmp	.+8      	; 0x2a06 <vfprintf+0x2dc>
    29fe:	82 2f       	mov	r24, r18
    2a00:	86 78       	andi	r24, 0x86	; 134
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <vfprintf+0x2dc>
    2a04:	73 94       	inc	r7
    2a06:	23 fd       	sbrc	r18, 3
    2a08:	13 c0       	rjmp	.+38     	; 0x2a30 <vfprintf+0x306>
    2a0a:	20 ff       	sbrs	r18, 0
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <vfprintf+0x2f0>
    2a0e:	5a 2c       	mov	r5, r10
    2a10:	73 14       	cp	r7, r3
    2a12:	18 f4       	brcc	.+6      	; 0x2a1a <vfprintf+0x2f0>
    2a14:	53 0c       	add	r5, r3
    2a16:	57 18       	sub	r5, r7
    2a18:	73 2c       	mov	r7, r3
    2a1a:	73 14       	cp	r7, r3
    2a1c:	68 f4       	brcc	.+26     	; 0x2a38 <vfprintf+0x30e>
    2a1e:	b7 01       	movw	r22, r14
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	2c 87       	std	Y+12, r18	; 0x0c
    2a26:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    2a2a:	73 94       	inc	r7
    2a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a2e:	f5 cf       	rjmp	.-22     	; 0x2a1a <vfprintf+0x2f0>
    2a30:	73 14       	cp	r7, r3
    2a32:	10 f4       	brcc	.+4      	; 0x2a38 <vfprintf+0x30e>
    2a34:	37 18       	sub	r3, r7
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <vfprintf+0x310>
    2a38:	31 2c       	mov	r3, r1
    2a3a:	24 ff       	sbrs	r18, 4
    2a3c:	12 c0       	rjmp	.+36     	; 0x2a62 <vfprintf+0x338>
    2a3e:	b7 01       	movw	r22, r14
    2a40:	80 e3       	ldi	r24, 0x30	; 48
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	2c 87       	std	Y+12, r18	; 0x0c
    2a46:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    2a4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a4c:	22 ff       	sbrs	r18, 2
    2a4e:	17 c0       	rjmp	.+46     	; 0x2a7e <vfprintf+0x354>
    2a50:	21 ff       	sbrs	r18, 1
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <vfprintf+0x330>
    2a54:	88 e5       	ldi	r24, 0x58	; 88
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <vfprintf+0x334>
    2a5a:	88 e7       	ldi	r24, 0x78	; 120
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	b7 01       	movw	r22, r14
    2a60:	0c c0       	rjmp	.+24     	; 0x2a7a <vfprintf+0x350>
    2a62:	82 2f       	mov	r24, r18
    2a64:	86 78       	andi	r24, 0x86	; 134
    2a66:	59 f0       	breq	.+22     	; 0x2a7e <vfprintf+0x354>
    2a68:	21 fd       	sbrc	r18, 1
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <vfprintf+0x346>
    2a6c:	80 e2       	ldi	r24, 0x20	; 32
    2a6e:	01 c0       	rjmp	.+2      	; 0x2a72 <vfprintf+0x348>
    2a70:	8b e2       	ldi	r24, 0x2B	; 43
    2a72:	27 fd       	sbrc	r18, 7
    2a74:	8d e2       	ldi	r24, 0x2D	; 45
    2a76:	b7 01       	movw	r22, r14
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    2a7e:	a5 14       	cp	r10, r5
    2a80:	38 f4       	brcc	.+14     	; 0x2a90 <vfprintf+0x366>
    2a82:	b7 01       	movw	r22, r14
    2a84:	80 e3       	ldi	r24, 0x30	; 48
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    2a8c:	5a 94       	dec	r5
    2a8e:	f7 cf       	rjmp	.-18     	; 0x2a7e <vfprintf+0x354>
    2a90:	aa 94       	dec	r10
    2a92:	f4 01       	movw	r30, r8
    2a94:	ea 0d       	add	r30, r10
    2a96:	f1 1d       	adc	r31, r1
    2a98:	80 81       	ld	r24, Z
    2a9a:	b7 01       	movw	r22, r14
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    2aa2:	a1 10       	cpse	r10, r1
    2aa4:	f5 cf       	rjmp	.-22     	; 0x2a90 <vfprintf+0x366>
    2aa6:	33 20       	and	r3, r3
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <vfprintf+0x382>
    2aaa:	51 ce       	rjmp	.-862    	; 0x274e <vfprintf+0x24>
    2aac:	b7 01       	movw	r22, r14
    2aae:	80 e2       	ldi	r24, 0x20	; 32
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <fputc>
    2ab6:	3a 94       	dec	r3
    2ab8:	f6 cf       	rjmp	.-20     	; 0x2aa6 <vfprintf+0x37c>
    2aba:	f7 01       	movw	r30, r14
    2abc:	86 81       	ldd	r24, Z+6	; 0x06
    2abe:	97 81       	ldd	r25, Z+7	; 0x07
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <vfprintf+0x39c>
    2ac2:	8f ef       	ldi	r24, 0xFF	; 255
    2ac4:	9f ef       	ldi	r25, 0xFF	; 255
    2ac6:	2c 96       	adiw	r28, 0x0c	; 12
    2ac8:	e2 e1       	ldi	r30, 0x12	; 18
    2aca:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__epilogue_restores__>

00002ace <calloc>:
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	86 9f       	mul	r24, r22
    2ad8:	80 01       	movw	r16, r0
    2ada:	87 9f       	mul	r24, r23
    2adc:	10 0d       	add	r17, r0
    2ade:	96 9f       	mul	r25, r22
    2ae0:	10 0d       	add	r17, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	0e 94 1a 11 	call	0x2234	; 0x2234 <malloc>
    2aea:	ec 01       	movw	r28, r24
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	29 f0       	breq	.+10     	; 0x2afa <calloc+0x2c>
    2af0:	a8 01       	movw	r20, r16
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <memset>
    2afa:	ce 01       	movw	r24, r28
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	08 95       	ret

00002b06 <strnlen_P>:
    2b06:	fc 01       	movw	r30, r24
    2b08:	05 90       	lpm	r0, Z+
    2b0a:	61 50       	subi	r22, 0x01	; 1
    2b0c:	70 40       	sbci	r23, 0x00	; 0
    2b0e:	01 10       	cpse	r0, r1
    2b10:	d8 f7       	brcc	.-10     	; 0x2b08 <strnlen_P+0x2>
    2b12:	80 95       	com	r24
    2b14:	90 95       	com	r25
    2b16:	8e 0f       	add	r24, r30
    2b18:	9f 1f       	adc	r25, r31
    2b1a:	08 95       	ret

00002b1c <memset>:
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	01 c0       	rjmp	.+2      	; 0x2b22 <memset+0x6>
    2b20:	6d 93       	st	X+, r22
    2b22:	41 50       	subi	r20, 0x01	; 1
    2b24:	50 40       	sbci	r21, 0x00	; 0
    2b26:	e0 f7       	brcc	.-8      	; 0x2b20 <memset+0x4>
    2b28:	08 95       	ret

00002b2a <strnlen>:
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	61 50       	subi	r22, 0x01	; 1
    2b2e:	70 40       	sbci	r23, 0x00	; 0
    2b30:	01 90       	ld	r0, Z+
    2b32:	01 10       	cpse	r0, r1
    2b34:	d8 f7       	brcc	.-10     	; 0x2b2c <strnlen+0x2>
    2b36:	80 95       	com	r24
    2b38:	90 95       	com	r25
    2b3a:	8e 0f       	add	r24, r30
    2b3c:	9f 1f       	adc	r25, r31
    2b3e:	08 95       	ret

00002b40 <fputc>:
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	18 2f       	mov	r17, r24
    2b4a:	09 2f       	mov	r16, r25
    2b4c:	eb 01       	movw	r28, r22
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	81 fd       	sbrc	r24, 1
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <fputc+0x1a>
    2b54:	8f ef       	ldi	r24, 0xFF	; 255
    2b56:	9f ef       	ldi	r25, 0xFF	; 255
    2b58:	20 c0       	rjmp	.+64     	; 0x2b9a <fputc+0x5a>
    2b5a:	82 ff       	sbrs	r24, 2
    2b5c:	10 c0       	rjmp	.+32     	; 0x2b7e <fputc+0x3e>
    2b5e:	4e 81       	ldd	r20, Y+6	; 0x06
    2b60:	5f 81       	ldd	r21, Y+7	; 0x07
    2b62:	2c 81       	ldd	r18, Y+4	; 0x04
    2b64:	3d 81       	ldd	r19, Y+5	; 0x05
    2b66:	42 17       	cp	r20, r18
    2b68:	53 07       	cpc	r21, r19
    2b6a:	7c f4       	brge	.+30     	; 0x2b8a <fputc+0x4a>
    2b6c:	e8 81       	ld	r30, Y
    2b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b70:	9f 01       	movw	r18, r30
    2b72:	2f 5f       	subi	r18, 0xFF	; 255
    2b74:	3f 4f       	sbci	r19, 0xFF	; 255
    2b76:	39 83       	std	Y+1, r19	; 0x01
    2b78:	28 83       	st	Y, r18
    2b7a:	10 83       	st	Z, r17
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <fputc+0x4a>
    2b7e:	e8 85       	ldd	r30, Y+8	; 0x08
    2b80:	f9 85       	ldd	r31, Y+9	; 0x09
    2b82:	81 2f       	mov	r24, r17
    2b84:	09 95       	icall
    2b86:	89 2b       	or	r24, r25
    2b88:	29 f7       	brne	.-54     	; 0x2b54 <fputc+0x14>
    2b8a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b8c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b8e:	2f 5f       	subi	r18, 0xFF	; 255
    2b90:	3f 4f       	sbci	r19, 0xFF	; 255
    2b92:	3f 83       	std	Y+7, r19	; 0x07
    2b94:	2e 83       	std	Y+6, r18	; 0x06
    2b96:	81 2f       	mov	r24, r17
    2b98:	90 2f       	mov	r25, r16
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	08 95       	ret

00002ba4 <__ultoa_invert>:
    2ba4:	fa 01       	movw	r30, r20
    2ba6:	aa 27       	eor	r26, r26
    2ba8:	28 30       	cpi	r18, 0x08	; 8
    2baa:	51 f1       	breq	.+84     	; 0x2c00 <__ultoa_invert+0x5c>
    2bac:	20 31       	cpi	r18, 0x10	; 16
    2bae:	81 f1       	breq	.+96     	; 0x2c10 <__ultoa_invert+0x6c>
    2bb0:	e8 94       	clt
    2bb2:	6f 93       	push	r22
    2bb4:	6e 7f       	andi	r22, 0xFE	; 254
    2bb6:	6e 5f       	subi	r22, 0xFE	; 254
    2bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bba:	8f 4f       	sbci	r24, 0xFF	; 255
    2bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbe:	af 4f       	sbci	r26, 0xFF	; 255
    2bc0:	b1 e0       	ldi	r27, 0x01	; 1
    2bc2:	3e d0       	rcall	.+124    	; 0x2c40 <__ultoa_invert+0x9c>
    2bc4:	b4 e0       	ldi	r27, 0x04	; 4
    2bc6:	3c d0       	rcall	.+120    	; 0x2c40 <__ultoa_invert+0x9c>
    2bc8:	67 0f       	add	r22, r23
    2bca:	78 1f       	adc	r23, r24
    2bcc:	89 1f       	adc	r24, r25
    2bce:	9a 1f       	adc	r25, r26
    2bd0:	a1 1d       	adc	r26, r1
    2bd2:	68 0f       	add	r22, r24
    2bd4:	79 1f       	adc	r23, r25
    2bd6:	8a 1f       	adc	r24, r26
    2bd8:	91 1d       	adc	r25, r1
    2bda:	a1 1d       	adc	r26, r1
    2bdc:	6a 0f       	add	r22, r26
    2bde:	71 1d       	adc	r23, r1
    2be0:	81 1d       	adc	r24, r1
    2be2:	91 1d       	adc	r25, r1
    2be4:	a1 1d       	adc	r26, r1
    2be6:	20 d0       	rcall	.+64     	; 0x2c28 <__ultoa_invert+0x84>
    2be8:	09 f4       	brne	.+2      	; 0x2bec <__ultoa_invert+0x48>
    2bea:	68 94       	set
    2bec:	3f 91       	pop	r19
    2bee:	2a e0       	ldi	r18, 0x0A	; 10
    2bf0:	26 9f       	mul	r18, r22
    2bf2:	11 24       	eor	r1, r1
    2bf4:	30 19       	sub	r19, r0
    2bf6:	30 5d       	subi	r19, 0xD0	; 208
    2bf8:	31 93       	st	Z+, r19
    2bfa:	de f6       	brtc	.-74     	; 0x2bb2 <__ultoa_invert+0xe>
    2bfc:	cf 01       	movw	r24, r30
    2bfe:	08 95       	ret
    2c00:	46 2f       	mov	r20, r22
    2c02:	47 70       	andi	r20, 0x07	; 7
    2c04:	40 5d       	subi	r20, 0xD0	; 208
    2c06:	41 93       	st	Z+, r20
    2c08:	b3 e0       	ldi	r27, 0x03	; 3
    2c0a:	0f d0       	rcall	.+30     	; 0x2c2a <__ultoa_invert+0x86>
    2c0c:	c9 f7       	brne	.-14     	; 0x2c00 <__ultoa_invert+0x5c>
    2c0e:	f6 cf       	rjmp	.-20     	; 0x2bfc <__ultoa_invert+0x58>
    2c10:	46 2f       	mov	r20, r22
    2c12:	4f 70       	andi	r20, 0x0F	; 15
    2c14:	40 5d       	subi	r20, 0xD0	; 208
    2c16:	4a 33       	cpi	r20, 0x3A	; 58
    2c18:	18 f0       	brcs	.+6      	; 0x2c20 <__ultoa_invert+0x7c>
    2c1a:	49 5d       	subi	r20, 0xD9	; 217
    2c1c:	31 fd       	sbrc	r19, 1
    2c1e:	40 52       	subi	r20, 0x20	; 32
    2c20:	41 93       	st	Z+, r20
    2c22:	02 d0       	rcall	.+4      	; 0x2c28 <__ultoa_invert+0x84>
    2c24:	a9 f7       	brne	.-22     	; 0x2c10 <__ultoa_invert+0x6c>
    2c26:	ea cf       	rjmp	.-44     	; 0x2bfc <__ultoa_invert+0x58>
    2c28:	b4 e0       	ldi	r27, 0x04	; 4
    2c2a:	a6 95       	lsr	r26
    2c2c:	97 95       	ror	r25
    2c2e:	87 95       	ror	r24
    2c30:	77 95       	ror	r23
    2c32:	67 95       	ror	r22
    2c34:	ba 95       	dec	r27
    2c36:	c9 f7       	brne	.-14     	; 0x2c2a <__ultoa_invert+0x86>
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	61 05       	cpc	r22, r1
    2c3c:	71 05       	cpc	r23, r1
    2c3e:	08 95       	ret
    2c40:	9b 01       	movw	r18, r22
    2c42:	ac 01       	movw	r20, r24
    2c44:	0a 2e       	mov	r0, r26
    2c46:	06 94       	lsr	r0
    2c48:	57 95       	ror	r21
    2c4a:	47 95       	ror	r20
    2c4c:	37 95       	ror	r19
    2c4e:	27 95       	ror	r18
    2c50:	ba 95       	dec	r27
    2c52:	c9 f7       	brne	.-14     	; 0x2c46 <__ultoa_invert+0xa2>
    2c54:	62 0f       	add	r22, r18
    2c56:	73 1f       	adc	r23, r19
    2c58:	84 1f       	adc	r24, r20
    2c5a:	95 1f       	adc	r25, r21
    2c5c:	a0 1d       	adc	r26, r0
    2c5e:	08 95       	ret

00002c60 <__prologue_saves__>:
    2c60:	2f 92       	push	r2
    2c62:	3f 92       	push	r3
    2c64:	4f 92       	push	r4
    2c66:	5f 92       	push	r5
    2c68:	6f 92       	push	r6
    2c6a:	7f 92       	push	r7
    2c6c:	8f 92       	push	r8
    2c6e:	9f 92       	push	r9
    2c70:	af 92       	push	r10
    2c72:	bf 92       	push	r11
    2c74:	cf 92       	push	r12
    2c76:	df 92       	push	r13
    2c78:	ef 92       	push	r14
    2c7a:	ff 92       	push	r15
    2c7c:	0f 93       	push	r16
    2c7e:	1f 93       	push	r17
    2c80:	cf 93       	push	r28
    2c82:	df 93       	push	r29
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	ca 1b       	sub	r28, r26
    2c8a:	db 0b       	sbc	r29, r27
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	09 94       	ijmp

00002c98 <__epilogue_restores__>:
    2c98:	2a 88       	ldd	r2, Y+18	; 0x12
    2c9a:	39 88       	ldd	r3, Y+17	; 0x11
    2c9c:	48 88       	ldd	r4, Y+16	; 0x10
    2c9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ca0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ca2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ca4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ca6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ca8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2caa:	b9 84       	ldd	r11, Y+9	; 0x09
    2cac:	c8 84       	ldd	r12, Y+8	; 0x08
    2cae:	df 80       	ldd	r13, Y+7	; 0x07
    2cb0:	ee 80       	ldd	r14, Y+6	; 0x06
    2cb2:	fd 80       	ldd	r15, Y+5	; 0x05
    2cb4:	0c 81       	ldd	r16, Y+4	; 0x04
    2cb6:	1b 81       	ldd	r17, Y+3	; 0x03
    2cb8:	aa 81       	ldd	r26, Y+2	; 0x02
    2cba:	b9 81       	ldd	r27, Y+1	; 0x01
    2cbc:	ce 0f       	add	r28, r30
    2cbe:	d1 1d       	adc	r29, r1
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	ed 01       	movw	r28, r26
    2ccc:	08 95       	ret

00002cce <_exit>:
    2cce:	f8 94       	cli

00002cd0 <__stop_program>:
    2cd0:	ff cf       	rjmp	.-2      	; 0x2cd0 <__stop_program>
