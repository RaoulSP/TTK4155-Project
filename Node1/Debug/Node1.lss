
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00002bf6  00002c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800206  00800206  00002d90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e8  00000000  00000000  00002dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030aa  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001155  00000000  00000000  0000617e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001019  00000000  00000000  000072d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000888  00000000  00000000  000082ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000967  00000000  00000000  00008b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024ed  00000000  00000000  000094db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  0000b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_1>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_7>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_13>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e6 ef       	ldi	r30, 0xF6	; 246
     702:	fb e2       	ldi	r31, 0x2B	; 43
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a6 30       	cpi	r26, 0x06	; 6
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a6 e0       	ldi	r26, 0x06	; 6
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a1 33       	cpi	r26, 0x31	; 49
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <main>
     724:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
	adcConversionRunning = 0;
}*/

#ifdef NODE_1
	void adc_init(){
		clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
	}
	uint8_t adc_read(char channel){
		volatile char *ext_adc = (char *) 0x1400; 
		if (channel == 'x'){
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
			*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'y'){
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
			*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'l'){
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
			*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'r'){
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
			*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
		}
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
		return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
}
     766:	08 95       	ret

00000768 <can_init>:
#include "can.h"
#include "settings.h"
#include "interrupt_flags.h"
volatile int can_message_received = 0;

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	mcp_init();
     76c:	0e 94 4b 06 	call	0xc96	; 0xc96 <mcp_init>
	
	mcp_bit_modify(0x2B,0b00000011, 0b00000011); //enable receive msg interrupt
     770:	43 e0       	ldi	r20, 0x03	; 3
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	8b e2       	ldi	r24, 0x2B	; 43
     776:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     77a:	40 e6       	ldi	r20, 0x60	; 96
     77c:	60 e6       	ldi	r22, 0x60	; 96
     77e:	80 e6       	ldi	r24, 0x60	; 96
     780:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     784:	4c 2f       	mov	r20, r28
     786:	6f ef       	ldi	r22, 0xFF	; 255
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	//TODO: Filter initialization
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
	
	#ifdef NODE_1
	MCUCR |= (1 << ISC01);
     78e:	85 b7       	in	r24, 0x35	; 53
     790:	82 60       	ori	r24, 0x02	; 2
     792:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     794:	8b b7       	in	r24, 0x3b	; 59
     796:	80 64       	ori	r24, 0x40	; 64
     798:	8b bf       	out	0x3b, r24	; 59
	#endif
}
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <can_transmit>:

void can_transmit(Msg msg){
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <can_transmit+0xe>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <can_transmit+0x10>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <can_transmit+0x12>
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	49 83       	std	Y+1, r20	; 0x01
     7b6:	5a 83       	std	Y+2, r21	; 0x02
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	7c 83       	std	Y+4, r23	; 0x04
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	09 81       	ldd	r16, Y+1	; 0x01
     7c2:	1a 81       	ldd	r17, Y+2	; 0x02
     7c4:	eb 80       	ldd	r14, Y+3	; 0x03
     7c6:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3, buffer = n - 1
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7c8:	b8 01       	movw	r22, r16
     7ca:	75 95       	asr	r23
     7cc:	67 95       	ror	r22
     7ce:	75 95       	asr	r23
     7d0:	67 95       	ror	r22
     7d2:	75 95       	asr	r23
     7d4:	67 95       	ror	r22
     7d6:	81 e5       	ldi	r24, 0x51	; 81
     7d8:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7dc:	60 2f       	mov	r22, r16
     7de:	62 95       	swap	r22
     7e0:	66 0f       	add	r22, r22
     7e2:	60 7e       	andi	r22, 0xE0	; 224
     7e4:	82 e5       	ldi	r24, 0x52	; 82
     7e6:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7ea:	6e 2d       	mov	r22, r14
     7ec:	85 e5       	ldi	r24, 0x55	; 85
     7ee:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7f2:	1e 14       	cp	r1, r14
     7f4:	1f 04       	cpc	r1, r15
     7f6:	84 f4       	brge	.+32     	; 0x818 <can_transmit+0x7a>
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     7fc:	ed 81       	ldd	r30, Y+5	; 0x05
     7fe:	fe 81       	ldd	r31, Y+6	; 0x06
     800:	e0 0f       	add	r30, r16
     802:	f1 1f       	adc	r31, r17
     804:	60 81       	ld	r22, Z
     806:	86 e5       	ldi	r24, 0x56	; 86
     808:	80 0f       	add	r24, r16
     80a:	0e 94 0b 06 	call	0xc16	; 0xc16 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	0e 15       	cp	r16, r14
     814:	1f 05       	cpc	r17, r15
     816:	91 f7       	brne	.-28     	; 0x7fc <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 1d 06 	call	0xc3a	; 0xc3a <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     828:	26 96       	adiw	r28, 0x06	; 6
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	08 95       	ret

00000842 <can_receive>:

Msg can_receive(){
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	00 d0       	rcall	.+0      	; 0x85c <can_receive+0x1a>
     85c:	00 d0       	rcall	.+0      	; 0x85e <can_receive+0x1c>
     85e:	00 d0       	rcall	.+0      	; 0x860 <can_receive+0x1e>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2, buffer = n - 1
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     86a:	a8 2e       	mov	r10, r24
     86c:	82 e6       	ldi	r24, 0x62	; 98
     86e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     872:	82 95       	swap	r24
     874:	86 95       	lsr	r24
     876:	87 70       	andi	r24, 0x07	; 7
     878:	b1 2c       	mov	r11, r1
     87a:	aa 0c       	add	r10, r10
     87c:	bb 1c       	adc	r11, r11
     87e:	aa 0c       	add	r10, r10
     880:	bb 1c       	adc	r11, r11
     882:	aa 0c       	add	r10, r10
     884:	bb 1c       	adc	r11, r11
     886:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     888:	85 e6       	ldi	r24, 0x65	; 101
     88a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	c8 2e       	mov	r12, r24
     892:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     894:	c6 01       	movw	r24, r12
     896:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
     89a:	98 2e       	mov	r9, r24
     89c:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     89e:	1c 14       	cp	r1, r12
     8a0:	1d 04       	cpc	r1, r13
     8a2:	84 f4       	brge	.+32     	; 0x8c4 <can_receive+0x82>
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f9 2e       	mov	r15, r25
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     8ac:	86 e6       	ldi	r24, 0x66	; 102
     8ae:	80 0f       	add	r24, r16
     8b0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <mcp_read>
     8b4:	f7 01       	movw	r30, r14
     8b6:	81 93       	st	Z+, r24
     8b8:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     8ba:	0f 5f       	subi	r16, 0xFF	; 255
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	0c 15       	cp	r16, r12
     8c0:	1d 05       	cpc	r17, r13
     8c2:	a4 f3       	brlt	.-24     	; 0x8ac <can_receive+0x6a>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RXnIF to 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	8c e2       	ldi	r24, 0x2C	; 44
     8ca:	0e 94 2d 06 	call	0xc5a	; 0xc5a <mcp_bit_modify>
	return msg;
     8ce:	ba 82       	std	Y+2, r11	; 0x02
     8d0:	a9 82       	std	Y+1, r10	; 0x01
     8d2:	dc 82       	std	Y+4, r13	; 0x04
     8d4:	cb 82       	std	Y+3, r12	; 0x03
     8d6:	9d 82       	std	Y+5, r9	; 0x05
     8d8:	8e 82       	std	Y+6, r8	; 0x06
     8da:	2a 2d       	mov	r18, r10
     8dc:	3a 81       	ldd	r19, Y+2	; 0x02
     8de:	4c 2d       	mov	r20, r12
     8e0:	5c 81       	ldd	r21, Y+4	; 0x04
     8e2:	69 2d       	mov	r22, r9
     8e4:	78 2d       	mov	r23, r8
}
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	26 96       	adiw	r28, 0x06	; 6
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	af 90       	pop	r10
     90a:	9f 90       	pop	r9
     90c:	8f 90       	pop	r8
     90e:	08 95       	ret

00000910 <__vector_1>:
Msg can_construct_msg(int id, int length, char* data){
	Msg msg = {id,length,data};
	return msg;
} 

ISR(INT0_vect){
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
	can_message_received = 1;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 07 02 	sts	0x0207, r25
     926:	80 93 06 02 	sts	0x0206, r24
	//printf("ISR: %d\r\n", can_message_received);
}
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     938:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     93a:	c2 9a       	sbi	0x18, 2	; 24
     93c:	08 95       	ret

0000093e <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	28 97       	sbiw	r28, 0x08	; 8
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
		x = adc_read('x');
     95e:	88 e7       	ldi	r24, 0x78	; 120
     960:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 24 02 	sts	0x0224, r25
     96a:	80 93 23 02 	sts	0x0223, r24
		y = adc_read('y');
     96e:	89 e7       	ldi	r24, 0x79	; 121
     970:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     974:	28 2f       	mov	r18, r24
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	30 93 26 02 	sts	0x0226, r19
     97c:	20 93 25 02 	sts	0x0225, r18
		z = !test_bit(PINB, PB2);
     980:	16 b3       	in	r17, 0x16	; 22
     982:	16 95       	lsr	r17
     984:	16 95       	lsr	r17
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	18 27       	eor	r17, r24
     98a:	11 70       	andi	r17, 0x01	; 1
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	10 93 0c 02 	sts	0x020C, r17
     992:	00 93 0d 02 	sts	0x020D, r16
		
		if (x > xmean){
     996:	80 91 23 02 	lds	r24, 0x0223
     99a:	90 91 24 02 	lds	r25, 0x0224
     99e:	40 91 0c 01 	lds	r20, 0x010C
     9a2:	50 91 0d 01 	lds	r21, 0x010D
     9a6:	48 17       	cp	r20, r24
     9a8:	59 07       	cpc	r21, r25
     9aa:	b4 f4       	brge	.+44     	; 0x9d8 <joy_get_position+0x9a>
			x = ((x - xmean) * 100) / (xmax - xmean);
     9ac:	bc 01       	movw	r22, r24
     9ae:	64 1b       	sub	r22, r20
     9b0:	75 0b       	sbc	r23, r21
     9b2:	e4 e6       	ldi	r30, 0x64	; 100
     9b4:	e6 9f       	mul	r30, r22
     9b6:	c0 01       	movw	r24, r0
     9b8:	e7 9f       	mul	r30, r23
     9ba:	90 0d       	add	r25, r0
     9bc:	11 24       	eor	r1, r1
     9be:	60 91 0a 01 	lds	r22, 0x010A
     9c2:	70 91 0b 01 	lds	r23, 0x010B
     9c6:	64 1b       	sub	r22, r20
     9c8:	75 0b       	sbc	r23, r21
     9ca:	0e 94 43 10 	call	0x2086	; 0x2086 <__divmodhi4>
     9ce:	70 93 24 02 	sts	0x0224, r23
     9d2:	60 93 23 02 	sts	0x0223, r22
     9d6:	17 c0       	rjmp	.+46     	; 0xa06 <joy_get_position+0xc8>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     9d8:	bc 01       	movw	r22, r24
     9da:	64 1b       	sub	r22, r20
     9dc:	75 0b       	sbc	r23, r21
     9de:	e4 e6       	ldi	r30, 0x64	; 100
     9e0:	e6 9f       	mul	r30, r22
     9e2:	c0 01       	movw	r24, r0
     9e4:	e7 9f       	mul	r30, r23
     9e6:	90 0d       	add	r25, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	60 91 0a 02 	lds	r22, 0x020A
     9ee:	70 91 0b 02 	lds	r23, 0x020B
     9f2:	fa 01       	movw	r30, r20
     9f4:	e6 1b       	sub	r30, r22
     9f6:	f7 0b       	sbc	r31, r23
     9f8:	bf 01       	movw	r22, r30
     9fa:	0e 94 43 10 	call	0x2086	; 0x2086 <__divmodhi4>
     9fe:	70 93 24 02 	sts	0x0224, r23
     a02:	60 93 23 02 	sts	0x0223, r22
		}
		if (y > ymean){
     a06:	40 91 08 01 	lds	r20, 0x0108
     a0a:	50 91 09 01 	lds	r21, 0x0109
     a0e:	42 17       	cp	r20, r18
     a10:	53 07       	cpc	r21, r19
     a12:	ac f4       	brge	.+42     	; 0xa3e <joy_get_position+0x100>
			y = ((y - ymean) * 100) / (ymax - ymean);
     a14:	24 1b       	sub	r18, r20
     a16:	35 0b       	sbc	r19, r21
     a18:	64 e6       	ldi	r22, 0x64	; 100
     a1a:	62 9f       	mul	r22, r18
     a1c:	c0 01       	movw	r24, r0
     a1e:	63 9f       	mul	r22, r19
     a20:	90 0d       	add	r25, r0
     a22:	11 24       	eor	r1, r1
     a24:	60 91 06 01 	lds	r22, 0x0106
     a28:	70 91 07 01 	lds	r23, 0x0107
     a2c:	64 1b       	sub	r22, r20
     a2e:	75 0b       	sbc	r23, r21
     a30:	0e 94 43 10 	call	0x2086	; 0x2086 <__divmodhi4>
     a34:	70 93 26 02 	sts	0x0226, r23
     a38:	60 93 25 02 	sts	0x0225, r22
     a3c:	15 c0       	rjmp	.+42     	; 0xa68 <joy_get_position+0x12a>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     a3e:	24 1b       	sub	r18, r20
     a40:	35 0b       	sbc	r19, r21
     a42:	64 e6       	ldi	r22, 0x64	; 100
     a44:	62 9f       	mul	r22, r18
     a46:	c0 01       	movw	r24, r0
     a48:	63 9f       	mul	r22, r19
     a4a:	90 0d       	add	r25, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	20 91 08 02 	lds	r18, 0x0208
     a52:	30 91 09 02 	lds	r19, 0x0209
     a56:	ba 01       	movw	r22, r20
     a58:	62 1b       	sub	r22, r18
     a5a:	73 0b       	sbc	r23, r19
     a5c:	0e 94 43 10 	call	0x2086	; 0x2086 <__divmodhi4>
     a60:	70 93 26 02 	sts	0x0226, r23
     a64:	60 93 25 02 	sts	0x0225, r22
		}
		
		Position pos;
		pos.x = x;
     a68:	e0 90 23 02 	lds	r14, 0x0223
     a6c:	c0 90 24 02 	lds	r12, 0x0224
		pos.y = y;
     a70:	f0 90 25 02 	lds	r15, 0x0225
     a74:	d0 90 26 02 	lds	r13, 0x0226
		pos.z = z;
		pos.r_slider = adc_read('r');
     a78:	82 e7       	ldi	r24, 0x72	; 114
     a7a:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     a7e:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%d\r\n",pos.r_slider);
		
		if (x < 4 && x > -4)
     a80:	60 91 23 02 	lds	r22, 0x0223
     a84:	70 91 24 02 	lds	r23, 0x0224
     a88:	6d 5f       	subi	r22, 0xFD	; 253
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
     a8c:	67 30       	cpi	r22, 0x07	; 7
     a8e:	71 05       	cpc	r23, r1
     a90:	10 f4       	brcc	.+4      	; 0xa96 <joy_get_position+0x158>
		{
			pos.x = 0;
     a92:	e1 2c       	mov	r14, r1
     a94:	c1 2c       	mov	r12, r1
		}
		if (y < 4 && y > -4)
     a96:	e0 91 25 02 	lds	r30, 0x0225
     a9a:	f0 91 26 02 	lds	r31, 0x0226
     a9e:	33 96       	adiw	r30, 0x03	; 3
     aa0:	37 97       	sbiw	r30, 0x07	; 7
     aa2:	10 f4       	brcc	.+4      	; 0xaa8 <joy_get_position+0x16a>
		{
			pos.y = 0;
     aa4:	f1 2c       	mov	r15, r1
     aa6:	d1 2c       	mov	r13, r1
		}
		return pos;
     aa8:	e9 82       	std	Y+1, r14	; 0x01
     aaa:	ca 82       	std	Y+2, r12	; 0x02
     aac:	fb 82       	std	Y+3, r15	; 0x03
     aae:	dc 82       	std	Y+4, r13	; 0x04
     ab0:	1d 83       	std	Y+5, r17	; 0x05
     ab2:	0e 83       	std	Y+6, r16	; 0x06
     ab4:	98 87       	std	Y+8, r25	; 0x08
     ab6:	8f 83       	std	Y+7, r24	; 0x07
     ab8:	2e 2d       	mov	r18, r14
     aba:	3c 2d       	mov	r19, r12
     abc:	4f 2d       	mov	r20, r15
     abe:	5d 2d       	mov	r21, r13
     ac0:	61 2f       	mov	r22, r17
     ac2:	70 2f       	mov	r23, r16
}
     ac4:	98 85       	ldd	r25, Y+8	; 0x08
     ac6:	28 96       	adiw	r28, 0x08	; 8
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	08 95       	ret

00000ae4 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	28 97       	sbiw	r28, 0x08	; 8
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
	Position pos_cart = joy_get_position();
     b08:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_get_position>
     b0c:	29 83       	std	Y+1, r18	; 0x01
     b0e:	3a 83       	std	Y+2, r19	; 0x02
     b10:	4b 83       	std	Y+3, r20	; 0x03
     b12:	5c 83       	std	Y+4, r21	; 0x04
     b14:	89 80       	ldd	r8, Y+1	; 0x01
     b16:	9a 80       	ldd	r9, Y+2	; 0x02
     b18:	ab 80       	ldd	r10, Y+3	; 0x03
     b1a:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     b1c:	b4 01       	movw	r22, r8
     b1e:	88 27       	eor	r24, r24
     b20:	77 fd       	sbrc	r23, 7
     b22:	80 95       	com	r24
     b24:	98 2f       	mov	r25, r24
     b26:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__floatsisf>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
     b2e:	b5 01       	movw	r22, r10
     b30:	88 27       	eor	r24, r24
     b32:	77 fd       	sbrc	r23, 7
     b34:	80 95       	com	r24
     b36:	98 2f       	mov	r25, r24
     b38:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__floatsisf>
     b3c:	a7 01       	movw	r20, r14
     b3e:	96 01       	movw	r18, r12
     b40:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <atan2>
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b48:	88 9c       	mul	r8, r8
     b4a:	b0 01       	movw	r22, r0
     b4c:	89 9c       	mul	r8, r9
     b4e:	70 0d       	add	r23, r0
     b50:	70 0d       	add	r23, r0
     b52:	11 24       	eor	r1, r1
     b54:	aa 9c       	mul	r10, r10
     b56:	c0 01       	movw	r24, r0
     b58:	ab 9c       	mul	r10, r11
     b5a:	90 0d       	add	r25, r0
     b5c:	90 0d       	add	r25, r0
     b5e:	11 24       	eor	r1, r1
     b60:	68 0f       	add	r22, r24
     b62:	79 1f       	adc	r23, r25
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__floatunsisf>
     b6c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <sqrt>
     b70:	4b 01       	movw	r8, r22
     b72:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     b74:	20 ee       	ldi	r18, 0xE0	; 224
     b76:	3e e2       	ldi	r19, 0x2E	; 46
     b78:	45 e6       	ldi	r20, 0x65	; 101
     b7a:	52 e4       	ldi	r21, 0x42	; 66
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__mulsf3>
     b84:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     b88:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fixsfsi>
	return pos_pol;
     b92:	7b 01       	movw	r14, r22
}
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	28 96       	adiw	r28, 0x08	; 8
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	08 95       	ret

00000bba <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     bba:	0e 94 72 05 	call	0xae4	; 0xae4 <joy_get_position_polar>
     bbe:	9b 01       	movw	r18, r22
	if(pos_pol.amplitude > 80){
     bc0:	81 35       	cpi	r24, 0x51	; 81
     bc2:	91 05       	cpc	r25, r1
     bc4:	7c f0       	brlt	.+30     	; 0xbe4 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     bc6:	68 38       	cpi	r22, 0x88	; 136
     bc8:	71 05       	cpc	r23, r1
     bca:	74 f4       	brge	.+28     	; 0xbe8 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     bcc:	6e 32       	cpi	r22, 0x2E	; 46
     bce:	71 05       	cpc	r23, r1
     bd0:	6c f4       	brge	.+26     	; 0xbec <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     bd2:	24 3d       	cpi	r18, 0xD4	; 212
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	38 07       	cpc	r19, r24
     bd8:	5c f4       	brge	.+22     	; 0xbf0 <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     bda:	2a 37       	cpi	r18, 0x7A	; 122
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	54 f0       	brlt	.+20     	; 0xbf4 <joy_get_direction+0x3a>
			return DOWN;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	08 95       	ret

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     bf4:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     bf6:	08 95       	ret

00000bf8 <mcp_read>:
#include "settings.h"
#include "spi.h"
#include "mcp.h"

char mcp_read(char address){
     bf8:	cf 93       	push	r28
     bfa:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, MCP_PIN);
     bfc:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(address);
     c04:	8c 2f       	mov	r24, r28
     c06:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     c10:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <mcp_write>:

void mcp_write(char address, char data){
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	d8 2f       	mov	r29, r24
     c1c:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, MCP_PIN);
     c1e:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(address);
     c26:	8d 2f       	mov	r24, r29
     c28:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(data);
     c2c:	8c 2f       	mov	r24, r28
     c2e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     c32:	c4 9a       	sbi	0x18, 4	; 24
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, MCP_PIN);
     c3a:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,MCP_PIN);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	48 2b       	or	r20, r24
     c48:	59 2b       	or	r21, r25
     c4a:	cb 01       	movw	r24, r22
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
	clear_bit(PORTB, MCP_PIN);
	spi_master_transmit(command);
     c50:	84 2b       	or	r24, r20
     c52:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c56:	c4 9a       	sbi	0x18, 4	; 24
     c58:	08 95       	ret

00000c5a <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,MCP_PIN);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	18 2f       	mov	r17, r24
     c62:	d6 2f       	mov	r29, r22
     c64:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, MCP_PIN);
     c66:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(address);
     c6e:	81 2f       	mov	r24, r17
     c70:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(mask);
     c74:	8d 2f       	mov	r24, r29
     c76:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	spi_master_transmit(data);
     c7a:	8c 2f       	mov	r24, r28
     c7c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c80:	c4 9a       	sbi	0x18, 4	; 24
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	08 95       	ret

00000c8a <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, MCP_PIN);
     c8a:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);
     c8c:	80 ec       	ldi	r24, 0xC0	; 192
     c8e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c92:	c4 9a       	sbi	0x18, 4	; 24
     c94:	08 95       	ret

00000c96 <mcp_init>:
}
	
void mcp_init(){
	spi_master_init();
     c96:	0e 94 50 06 	call	0xca0	; 0xca0 <spi_master_init>
	mcp_reset();
     c9a:	0e 94 45 06 	call	0xc8a	; 0xc8a <mcp_reset>
     c9e:	08 95       	ret

00000ca0 <spi_master_init>:
#include "spi.h"

void spi_master_init()
{
	#ifdef NODE_1
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
     ca0:	87 b3       	in	r24, 0x17	; 23
     ca2:	80 6b       	ori	r24, 0xB0	; 176
     ca4:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
     ca6:	be 98       	cbi	0x17, 6	; 23
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
     ca8:	81 e5       	ldi	r24, 0x51	; 81
     caa:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
     cac:	c4 9a       	sbi	0x18, 4	; 24
     cae:	08 95       	ret

00000cb0 <spi_master_transmit>:
	#endif
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
     cb0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
     cb2:	77 9b       	sbis	0x0e, 7	; 14
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <spi_master_transmit+0x2>
	return SPDR;
     cb6:	8f b1       	in	r24, 0x0f	; 15
}
     cb8:	08 95       	ret

00000cba <uart_putchar>:
	#endif
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     cba:	5d 9b       	sbis	0x0b, 5	; 11
     cbc:	fe cf       	rjmp	.-4      	; 0xcba <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
     cbe:	8c b9       	out	0x0c, r24	; 12
     cc0:	08 95       	ret

00000cc2 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     cc2:	5f 9b       	sbis	0x0b, 7	; 11
     cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <uart_getchar>
	return UDR0;
     cc6:	8c b1       	in	r24, 0x0c	; 12
     cc8:	08 95       	ret

00000cca <uart_init>:
#include <stdio.h>
#include "settings.h"
#include "uart.h"

void uart_init(int baudRate){
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     cca:	aa 27       	eor	r26, r26
     ccc:	97 fd       	sbrc	r25, 7
     cce:	a0 95       	com	r26
     cd0:	ba 2f       	mov	r27, r26
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	9c 01       	movw	r18, r24
     ce4:	ad 01       	movw	r20, r26
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	44 1f       	adc	r20, r20
     cec:	55 1f       	adc	r21, r21
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	8b e4       	ldi	r24, 0x4B	; 75
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 57 10 	call	0x20ae	; 0x20ae <__divmodsi4>
     d02:	21 50       	subi	r18, 0x01	; 1
     d04:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     d06:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
     d08:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     d0a:	88 e1       	ldi	r24, 0x18	; 24
     d0c:	8a b9       	out	0x0a, r24	; 10
	
	#ifdef NODE_1
		UCSR0C = ((1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00));
     d0e:	8e e8       	ldi	r24, 0x8E	; 142
     d10:	80 bd       	out	0x20, r24	; 32
	#else
		UCSR0C = ((1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	#endif
	fdevopen(uart_putchar, uart_getchar);
     d12:	61 e6       	ldi	r22, 0x61	; 97
     d14:	76 e0       	ldi	r23, 0x06	; 6
     d16:	8d e5       	ldi	r24, 0x5D	; 93
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	0e 94 a6 12 	call	0x254c	; 0x254c <fdevopen>
     d1e:	08 95       	ret

00000d20 <game_init>:
		free(msg_received.data);	
	}
	*/
	
	int OCRA_num = (long)F_CPU/(256);						//Prescale with 256 to get seconds
	OCR3AH = OCRA_num >> 8;
     d20:	8b e4       	ldi	r24, 0x4B	; 75
     d22:	80 93 87 00 	sts	0x0087, r24
	OCR3AL = OCRA_num;									//Sets the value for the compare match to 10240
     d26:	10 92 86 00 	sts	0x0086, r1
	TCCR3A = (1 << WGM31) | (1 << WGM30);				//Compare match mode
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS32); //clock source to be used by the Timer/Counter clkI/O/8
     d30:	8c e1       	ldi	r24, 0x1C	; 28
     d32:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = (1 << OCIE3A);								//Interrupt on compare match
     d36:	80 e1       	ldi	r24, 0x10	; 16
     d38:	80 93 7d 00 	sts	0x007D, r24
     d3c:	08 95       	ret

00000d3e <game_run>:
}

void game_run(){
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	63 97       	sbiw	r28, 0x13	; 19
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
	if (!initiated){
     d5a:	80 91 10 02 	lds	r24, 0x0210
     d5e:	90 91 11 02 	lds	r25, 0x0211
     d62:	89 2b       	or	r24, r25
     d64:	41 f4       	brne	.+16     	; 0xd76 <game_run+0x38>
		game_init();
     d66:	0e 94 90 06 	call	0xd20	; 0xd20 <game_init>
		initiated = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 11 02 	sts	0x0211, r25
     d72:	80 93 10 02 	sts	0x0210, r24
	}
	   
	if(game_second_passed == 1){
     d76:	80 91 1d 02 	lds	r24, 0x021D
     d7a:	90 91 1e 02 	lds	r25, 0x021E
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	91 f5       	brne	.+100    	; 0xde6 <game_run+0xa8>
		game_time++;
     d82:	80 91 0e 02 	lds	r24, 0x020E
     d86:	90 91 0f 02 	lds	r25, 0x020F
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	90 93 0f 02 	sts	0x020F, r25
     d90:	80 93 0e 02 	sts	0x020E, r24
		char str[5];
		sprintf(str,"%5d",game_time);
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	8b e8       	ldi	r24, 0x8B	; 139
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
     da0:	7e 01       	movw	r14, r28
     da2:	8f e0       	ldi	r24, 0x0F	; 15
     da4:	e8 0e       	add	r14, r24
     da6:	f1 1c       	adc	r15, r1
     da8:	ff 92       	push	r15
     daa:	ef 92       	push	r14
     dac:	0e 94 05 13 	call	0x260a	; 0x260a <sprintf>
		//oled_clear_line(1);
		oled_print_string(str,0,0,8,0);
     db0:	00 e0       	ldi	r16, 0x00	; 0
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	28 e0       	ldi	r18, 0x08	; 8
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	c7 01       	movw	r24, r14
     dbc:	0e 94 46 0b 	call	0x168c	; 0x168c <oled_print_string>
		oled_print_string("herms er best",0,1,8,0);
     dc0:	28 e0       	ldi	r18, 0x08	; 8
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	8f e8       	ldi	r24, 0x8F	; 143
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 46 0b 	call	0x168c	; 0x168c <oled_print_string>
		oled_refresh();
     dce:	0e 94 4b 0c 	call	0x1896	; 0x1896 <oled_refresh>
		game_second_passed = 0;
     dd2:	10 92 1e 02 	sts	0x021E, r1
     dd6:	10 92 1d 02 	sts	0x021D, r1
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
		
	}
	//SEND POSITION
	Position position = joy_get_position();
     de6:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_get_position>
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03
     df0:	5c 83       	std	Y+4, r21	; 0x04
     df2:	6d 83       	std	Y+5, r22	; 0x05
     df4:	7e 83       	std	Y+6, r23	; 0x06
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
	Msg msg;
	msg.id = 42;
     dfa:	8a e2       	ldi	r24, 0x2A	; 42
     dfc:	48 2f       	mov	r20, r24
     dfe:	89 87       	std	Y+9, r24	; 0x09
     e00:	1a 86       	std	Y+10, r1	; 0x0a
	msg.length = sizeof(position);
	msg.data = (char*) &position;
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 87       	std	Y+13, r24	; 0x0d
	can_transmit(msg);
     e0a:	98 e0       	ldi	r25, 0x08	; 8
     e0c:	69 2f       	mov	r22, r25
     e0e:	9b 87       	std	Y+11, r25	; 0x0b
     e10:	1c 86       	std	Y+12, r1	; 0x0c
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	0e 94 cf 03 	call	0x79e	; 0x79e <can_transmit>
	
	printf("l = %d\r\n",msg.length);
     e1c:	1f 92       	push	r1
     e1e:	88 e0       	ldi	r24, 0x08	; 8
     e20:	8f 93       	push	r24
     e22:	8d e9       	ldi	r24, 0x9D	; 157
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <printf>
	//can_transmit(can_construct_msg(42, sizeof(position), (char*) &position));
	
	//GET SCORE
	if (game_occluded){
     e2e:	80 91 1f 02 	lds	r24, 0x021F
     e32:	90 91 20 02 	lds	r25, 0x0220
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	89 2b       	or	r24, r25
     e40:	59 f1       	breq	.+86     	; 0xe98 <game_run+0x15a>
		score++;
     e42:	80 91 12 02 	lds	r24, 0x0212
     e46:	90 91 13 02 	lds	r25, 0x0213
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	90 93 13 02 	sts	0x0213, r25
     e50:	80 93 12 02 	sts	0x0212, r24
		char scr[5];
		sprintf(scr,"%5d",score);
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	8b e8       	ldi	r24, 0x8B	; 139
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	7e 01       	movw	r14, r28
     e62:	8f e0       	ldi	r24, 0x0F	; 15
     e64:	e8 0e       	add	r14, r24
     e66:	f1 1c       	adc	r15, r1
     e68:	ff 92       	push	r15
     e6a:	ef 92       	push	r14
     e6c:	0e 94 05 13 	call	0x260a	; 0x260a <sprintf>
		oled_print_string(scr,5,5,8,0);
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	28 e0       	ldi	r18, 0x08	; 8
     e76:	45 e0       	ldi	r20, 0x05	; 5
     e78:	65 e0       	ldi	r22, 0x05	; 5
     e7a:	c7 01       	movw	r24, r14
     e7c:	0e 94 46 0b 	call	0x168c	; 0x168c <oled_print_string>
		oled_refresh();
     e80:	0e 94 4b 0c 	call	0x1896	; 0x1896 <oled_refresh>
		game_occluded = 0;
     e84:	10 92 20 02 	sts	0x0220, r1
     e88:	10 92 1f 02 	sts	0x021F, r1
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
		}
		free(msg_received.data);
	}
	can_message_received = 0;
	*/
}
     e98:	63 96       	adiw	r28, 0x13	; 19
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	08 95       	ret

00000eb2 <__vector_7>:

ISR(TIMER3_COMPA_vect){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	8f 93       	push	r24
     ebe:	9f 93       	push	r25
	game_second_passed = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 1e 02 	sts	0x021E, r25
     ec8:	80 93 1d 02 	sts	0x021D, r24
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <action_run_game>:
	}
}

//Action functions
void action_run_game(Menu* self){
	state = in_game;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 1a 02 	sts	0x021A, r24
     ee0:	08 95       	ret

00000ee2 <action_start_transition_right>:
}
void action_start_transition_right(Menu* self){
	joy_held = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	90 93 15 02 	sts	0x0215, r25
     eea:	80 93 14 02 	sts	0x0214, r24
	transition = 1;
     eee:	90 93 19 02 	sts	0x0219, r25
     ef2:	80 93 18 02 	sts	0x0218, r24
     ef6:	08 95       	ret

00000ef8 <action_toggle_name>:
}
void action_toggle_name(Menu* self){	//TEST FOR CHECK BOXES IN OPTIONS
	self->sub_menus[self->cursor]->name= "Herman";
     ef8:	dc 01       	movw	r26, r24
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	13 97       	sbiw	r26, 0x03	; 3
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	1a 96       	adiw	r26, 0x0a	; 10
     f08:	8d 91       	ld	r24, X+
     f0a:	9c 91       	ld	r25, X
     f0c:	1b 97       	sbiw	r26, 0x0b	; 11
     f0e:	e8 0f       	add	r30, r24
     f10:	f9 1f       	adc	r31, r25
     f12:	01 90       	ld	r0, Z+
     f14:	f0 81       	ld	r31, Z
     f16:	e0 2d       	mov	r30, r0
     f18:	86 ea       	ldi	r24, 0xA6	; 166
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	91 83       	std	Z+1, r25	; 0x01
     f1e:	80 83       	st	Z, r24
     f20:	08 95       	ret

00000f22 <draw_list>:
			transition = 0;
		}
	}
	return self;
}
void draw_list(Menu* self){
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	7c 01       	movw	r14, r24
	for(int i = 0; i < self->num_of_entries; i++){
     f30:	dc 01       	movw	r26, r24
     f32:	16 96       	adiw	r26, 0x06	; 6
     f34:	8d 91       	ld	r24, X+
     f36:	9c 91       	ld	r25, X
     f38:	17 97       	sbiw	r26, 0x07	; 7
     f3a:	18 16       	cp	r1, r24
     f3c:	19 06       	cpc	r1, r25
     f3e:	fc f4       	brge	.+62     	; 0xf7e <draw_list+0x5c>
     f40:	c0 e0       	ldi	r28, 0x00	; 0
     f42:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
     f44:	ce 01       	movw	r24, r28
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	d7 01       	movw	r26, r14
     f4c:	1a 96       	adiw	r26, 0x0a	; 10
     f4e:	ed 91       	ld	r30, X+
     f50:	fc 91       	ld	r31, X
     f52:	1b 97       	sbiw	r26, 0x0b	; 11
     f54:	e8 0f       	add	r30, r24
     f56:	f9 1f       	adc	r31, r25
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	00 e0       	ldi	r16, 0x00	; 0
     f60:	10 e0       	ldi	r17, 0x00	; 0
     f62:	25 e0       	ldi	r18, 0x05	; 5
     f64:	4c 2f       	mov	r20, r28
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	0e 94 46 0b 	call	0x168c	; 0x168c <oled_print_string>
		}
	}
	return self;
}
void draw_list(Menu* self){
	for(int i = 0; i < self->num_of_entries; i++){
     f70:	21 96       	adiw	r28, 0x01	; 1
     f72:	f7 01       	movw	r30, r14
     f74:	86 81       	ldd	r24, Z+6	; 0x06
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	c8 17       	cp	r28, r24
     f7a:	d9 07       	cpc	r29, r25
     f7c:	1c f3       	brlt	.-58     	; 0xf44 <draw_list+0x22>
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
	}
	//Where to go next
	Direction dir = joy_get_direction();
     f7e:	0e 94 dd 05 	call	0xbba	; 0xbba <joy_get_direction>
	if((dir == LEFT) & (self->super_menu != NULL)){
		self = self->super_menu;
	}
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	08 95       	ret

00000f90 <add_sub_menu>:
	}
	//menu->num_of_entries = num_of_new_entries;
	//menu->cursor = 0; //To make sure the cursor is not something else
}

void add_sub_menu(Menu* super, Menu* sub){
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
     fa0:	8e 81       	ldd	r24, Y+6	; 0x06
     fa2:	9f 81       	ldd	r25, Y+7	; 0x07
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	9f 83       	std	Y+7, r25	; 0x07
     fa8:	8e 83       	std	Y+6, r24	; 0x06
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
     faa:	fb 01       	movw	r30, r22
     fac:	d1 87       	std	Z+9, r29	; 0x09
     fae:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
     fb0:	6e 81       	ldd	r22, Y+6	; 0x06
     fb2:	7f 81       	ldd	r23, Y+7	; 0x07
     fb4:	66 0f       	add	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fba:	9b 85       	ldd	r25, Y+11	; 0x0b
     fbc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <realloc>
     fc0:	9b 87       	std	Y+11, r25	; 0x0b
     fc2:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
     fc4:	ee 80       	ldd	r14, Y+6	; 0x06
     fc6:	ff 80       	ldd	r15, Y+7	; 0x07
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	ef 1a       	sub	r14, r31
     fcc:	f0 e8       	ldi	r31, 0x80	; 128
     fce:	ff 0a       	sbc	r15, r31
     fd0:	ee 0c       	add	r14, r14
     fd2:	ff 1c       	adc	r15, r15
     fd4:	e8 0e       	add	r14, r24
     fd6:	f9 1e       	adc	r15, r25
     fd8:	80 e1       	ldi	r24, 0x10	; 16
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
     fe0:	f7 01       	movw	r30, r14
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
     fe6:	ee 81       	ldd	r30, Y+6	; 0x06
     fe8:	ff 81       	ldd	r31, Y+7	; 0x07
     fea:	e1 50       	subi	r30, 0x01	; 1
     fec:	f0 48       	sbci	r31, 0x80	; 128
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff6:	e8 0f       	add	r30, r24
     ff8:	f9 1f       	adc	r31, r25
     ffa:	11 83       	std	Z+1, r17	; 0x01
     ffc:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	//super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
	//super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	//super->entries[super->num_of_entries - 1] = sub->name;
}
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	08 95       	ret

0000100c <menu_init>:

Menu* current_menu = &main_menu;

//The initializer - How the menus are related
void menu_init(){
	add_sub_menu(&main_menu, &play_game);
    100c:	60 e1       	ldi	r22, 0x10	; 16
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	80 e7       	ldi	r24, 0x70	; 112
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 c8 07 	call	0xf90	; 0xf90 <add_sub_menu>
	
	char* control_entr[3] = {"player1", "player2", "player3"};
	//add_list_entries(&control, control_entr, 3);
	add_sub_menu(&options, &control);
    1018:	60 e4       	ldi	r22, 0x40	; 64
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	80 e6       	ldi	r24, 0x60	; 96
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 c8 07 	call	0xf90	; 0xf90 <add_sub_menu>
	
	//char* contro_entr[4] = {"low", "medium", "high","ultra"};
	//add_list_entries(&contro, contro_entr, 4);
	add_sub_menu(&options, &contro);
    1024:	60 e3       	ldi	r22, 0x30	; 48
    1026:	71 e0       	ldi	r23, 0x01	; 1
    1028:	80 e6       	ldi	r24, 0x60	; 96
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 c8 07 	call	0xf90	; 0xf90 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    1030:	60 e6       	ldi	r22, 0x60	; 96
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	80 e7       	ldi	r24, 0x70	; 112
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 c8 07 	call	0xf90	; 0xf90 <add_sub_menu>
	add_sub_menu(&main_menu, &toggle);
    103c:	60 e2       	ldi	r22, 0x20	; 32
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	80 e7       	ldi	r24, 0x70	; 112
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 c8 07 	call	0xf90	; 0xf90 <add_sub_menu>
	//add_list_entries(&main_menu, diff_entr, 1);
	//add_sub_menu(&main_menu, &difficulty);
	
	char* high_entr[4] = {"1. herman","2. raoul","3. alle andre","-inf^inf. hans"};
	//add_list_entries(&highscore, high_entr,4);
	add_sub_menu(&main_menu, &highscore);
    1048:	60 e5       	ldi	r22, 0x50	; 80
    104a:	71 e0       	ldi	r23, 0x01	; 1
    104c:	80 e7       	ldi	r24, 0x70	; 112
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	0e 94 c8 07 	call	0xf90	; 0xf90 <add_sub_menu>
    1054:	08 95       	ret

00001056 <menu_run_display>:
	
}
//void action_animation(){}

void menu_run_display(){
	oled_clear_screen();
    1056:	0e 94 ae 0b 	call	0x175c	; 0x175c <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    105a:	80 91 0e 01 	lds	r24, 0x010E
    105e:	90 91 0f 01 	lds	r25, 0x010F
    1062:	dc 01       	movw	r26, r24
    1064:	1c 96       	adiw	r26, 0x0c	; 12
    1066:	ed 91       	ld	r30, X+
    1068:	fc 91       	ld	r31, X
    106a:	1d 97       	sbiw	r26, 0x0d	; 13
    106c:	09 95       	icall
    106e:	90 93 0f 01 	sts	0x010F, r25
    1072:	80 93 0e 01 	sts	0x010E, r24
	oled_refresh();
    1076:	0e 94 4b 0c 	call	0x1896	; 0x1896 <oled_refresh>
    107a:	08 95       	ret

0000107c <menu_transition>:
}
void menu_transition(Menu *self, Direction dir){
	//If done with transition
	if (transition_count == 8){
    107c:	20 91 16 02 	lds	r18, 0x0216
    1080:	30 91 17 02 	lds	r19, 0x0217
    1084:	28 30       	cpi	r18, 0x08	; 8
    1086:	31 05       	cpc	r19, r1
    1088:	09 f0       	breq	.+2      	; 0x108c <menu_transition+0x10>
    108a:	49 c0       	rjmp	.+146    	; 0x111e <menu_transition+0xa2>
		//wrapping
		if(transition_dir == UP){
    108c:	20 91 80 01 	lds	r18, 0x0180
    1090:	21 30       	cpi	r18, 0x01	; 1
    1092:	99 f4       	brne	.+38     	; 0x10ba <menu_transition+0x3e>
			if(self->cursor == -1){
    1094:	fc 01       	movw	r30, r24
    1096:	22 81       	ldd	r18, Z+2	; 0x02
    1098:	33 81       	ldd	r19, Z+3	; 0x03
    109a:	2f 3f       	cpi	r18, 0xFF	; 255
    109c:	ff ef       	ldi	r31, 0xFF	; 255
    109e:	3f 07       	cpc	r19, r31
    10a0:	31 f4       	brne	.+12     	; 0x10ae <menu_transition+0x32>
				self->cursor = 4;
    10a2:	24 e0       	ldi	r18, 0x04	; 4
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	33 83       	std	Z+3, r19	; 0x03
    10aa:	22 83       	std	Z+2, r18	; 0x02
    10ac:	18 c0       	rjmp	.+48     	; 0x10de <menu_transition+0x62>
			}
			else{
				self->cursor--;
    10ae:	21 50       	subi	r18, 0x01	; 1
    10b0:	31 09       	sbc	r19, r1
    10b2:	fc 01       	movw	r30, r24
    10b4:	33 83       	std	Z+3, r19	; 0x03
    10b6:	22 83       	std	Z+2, r18	; 0x02
    10b8:	12 c0       	rjmp	.+36     	; 0x10de <menu_transition+0x62>
			}
		}
		else if(transition_dir == DOWN){
    10ba:	23 30       	cpi	r18, 0x03	; 3
    10bc:	81 f4       	brne	.+32     	; 0x10de <menu_transition+0x62>
			//wrapping
			if(self->cursor == self->num_of_entries){
    10be:	fc 01       	movw	r30, r24
    10c0:	22 81       	ldd	r18, Z+2	; 0x02
    10c2:	33 81       	ldd	r19, Z+3	; 0x03
    10c4:	46 81       	ldd	r20, Z+6	; 0x06
    10c6:	57 81       	ldd	r21, Z+7	; 0x07
    10c8:	24 17       	cp	r18, r20
    10ca:	35 07       	cpc	r19, r21
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <menu_transition+0x58>
				self->cursor = 0;
    10ce:	13 82       	std	Z+3, r1	; 0x03
    10d0:	12 82       	std	Z+2, r1	; 0x02
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <menu_transition+0x62>
			}
			else{
				self->cursor++;
    10d4:	2f 5f       	subi	r18, 0xFF	; 255
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	fc 01       	movw	r30, r24
    10da:	33 83       	std	Z+3, r19	; 0x03
    10dc:	22 83       	std	Z+2, r18	; 0x02
			}
		}
		transition_count = 0;
    10de:	10 92 17 02 	sts	0x0217, r1
    10e2:	10 92 16 02 	sts	0x0216, r1
		transition_dir = NEUTRAL;
    10e6:	2f ef       	ldi	r18, 0xFF	; 255
    10e8:	20 93 80 01 	sts	0x0180, r18
		transition = 0;
    10ec:	10 92 19 02 	sts	0x0219, r1
    10f0:	10 92 18 02 	sts	0x0218, r1
		oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));//The final box
    10f4:	fc 01       	movw	r30, r24
    10f6:	22 81       	ldd	r18, Z+2	; 0x02
    10f8:	33 81       	ldd	r19, Z+3	; 0x03
    10fa:	2f 5f       	subi	r18, 0xFF	; 255
    10fc:	3f 4f       	sbci	r19, 0xFF	; 255
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	b9 01       	movw	r22, r18
    110c:	68 50       	subi	r22, 0x08	; 8
    110e:	71 09       	sbc	r23, r1
    1110:	40 e4       	ldi	r20, 0x40	; 64
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 83 0c 	call	0x1906	; 0x1906 <oled_invert_rectangle>
    111c:	08 95       	ret
	}
	//Update the transition
	else if(transition == 1 && (transition_dir == UP || transition_dir == DOWN)){
    111e:	40 91 18 02 	lds	r20, 0x0218
    1122:	50 91 19 02 	lds	r21, 0x0219
    1126:	41 30       	cpi	r20, 0x01	; 1
    1128:	51 05       	cpc	r21, r1
    112a:	89 f5       	brne	.+98     	; 0x118e <menu_transition+0x112>
    112c:	40 91 80 01 	lds	r20, 0x0180
    1130:	41 30       	cpi	r20, 0x01	; 1
    1132:	29 f0       	breq	.+10     	; 0x113e <menu_transition+0xc2>
    1134:	43 30       	cpi	r20, 0x03	; 3
    1136:	59 f5       	brne	.+86     	; 0x118e <menu_transition+0x112>
		int sign = 1;
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <menu_transition+0xc6>
		if(transition_dir == UP){
			sign = -1;
    113e:	4f ef       	ldi	r20, 0xFF	; 255
    1140:	5f ef       	ldi	r21, 0xFF	; 255
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    1142:	fc 01       	movw	r30, r24
    1144:	62 81       	ldd	r22, Z+2	; 0x02
    1146:	73 81       	ldd	r23, Z+3	; 0x03
    1148:	66 0f       	add	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	42 9f       	mul	r20, r18
    1156:	c0 01       	movw	r24, r0
    1158:	43 9f       	mul	r20, r19
    115a:	90 0d       	add	r25, r0
    115c:	52 9f       	mul	r21, r18
    115e:	90 0d       	add	r25, r0
    1160:	11 24       	eor	r1, r1
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
    1162:	9b 01       	movw	r18, r22
    1164:	28 5f       	subi	r18, 0xF8	; 248
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	28 0f       	add	r18, r24
    116a:	39 1f       	adc	r19, r25
		if(transition_dir == UP){
			sign = -1;
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    116c:	68 0f       	add	r22, r24
    116e:	79 1f       	adc	r23, r25
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
		
		oled_invert_rectangle(x1,y1,x2,y2);
    1170:	40 e4       	ldi	r20, 0x40	; 64
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 83 0c 	call	0x1906	; 0x1906 <oled_invert_rectangle>
		transition_count++;
    117c:	80 91 16 02 	lds	r24, 0x0216
    1180:	90 91 17 02 	lds	r25, 0x0217
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	90 93 17 02 	sts	0x0217, r25
    118a:	80 93 16 02 	sts	0x0216, r24
    118e:	08 95       	ret

00001190 <draw_menu>:
	//super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	//super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	28 97       	sbiw	r28, 0x08	; 8
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	6c 01       	movw	r12, r24
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    11b2:	dc 01       	movw	r26, r24
    11b4:	16 96       	adiw	r26, 0x06	; 6
    11b6:	8d 91       	ld	r24, X+
    11b8:	9c 91       	ld	r25, X
    11ba:	17 97       	sbiw	r26, 0x07	; 7
    11bc:	18 16       	cp	r1, r24
    11be:	19 06       	cpc	r1, r25
    11c0:	0c f5       	brge	.+66     	; 0x1204 <draw_menu+0x74>
    11c2:	e1 2c       	mov	r14, r1
    11c4:	f1 2c       	mov	r15, r1
		//HER STOPPER DET!
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
    11c6:	c7 01       	movw	r24, r14
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	d6 01       	movw	r26, r12
    11ce:	1a 96       	adiw	r26, 0x0a	; 10
    11d0:	ed 91       	ld	r30, X+
    11d2:	fc 91       	ld	r31, X
    11d4:	1b 97       	sbiw	r26, 0x0b	; 11
    11d6:	e8 0f       	add	r30, r24
    11d8:	f9 1f       	adc	r31, r25
    11da:	01 90       	ld	r0, Z+
    11dc:	f0 81       	ld	r31, Z
    11de:	e0 2d       	mov	r30, r0
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	25 e0       	ldi	r18, 0x05	; 5
    11e6:	4e 2d       	mov	r20, r14
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	0e 94 46 0b 	call	0x168c	; 0x168c <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    11f2:	bf ef       	ldi	r27, 0xFF	; 255
    11f4:	eb 1a       	sub	r14, r27
    11f6:	fb 0a       	sbc	r15, r27
    11f8:	f6 01       	movw	r30, r12
    11fa:	86 81       	ldd	r24, Z+6	; 0x06
    11fc:	97 81       	ldd	r25, Z+7	; 0x07
    11fe:	e8 16       	cp	r14, r24
    1200:	f9 06       	cpc	r15, r25
    1202:	0c f3       	brlt	.-62     	; 0x11c6 <draw_menu+0x36>
		//printf(self->sub_menus[i]->name);
		//printf("\n");
		}
	
	}
	if(transition == 0){
    1204:	80 91 18 02 	lds	r24, 0x0218
    1208:	90 91 19 02 	lds	r25, 0x0219
    120c:	89 2b       	or	r24, r25
    120e:	b1 f4       	brne	.+44     	; 0x123c <draw_menu+0xac>
		oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
    1210:	d6 01       	movw	r26, r12
    1212:	12 96       	adiw	r26, 0x02	; 2
    1214:	2d 91       	ld	r18, X+
    1216:	3c 91       	ld	r19, X
    1218:	13 97       	sbiw	r26, 0x03	; 3
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	b9 01       	movw	r22, r18
    122c:	68 50       	subi	r22, 0x08	; 8
    122e:	71 09       	sbc	r23, r1
    1230:	40 e4       	ldi	r20, 0x40	; 64
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 83 0c 	call	0x1906	; 0x1906 <oled_invert_rectangle>
	}
	//Where to go next
	Direction dir = joy_get_direction();
    123c:	0e 94 dd 05 	call	0xbba	; 0xbba <joy_get_direction>
    1240:	18 2f       	mov	r17, r24
	Position pos = joy_get_position();
    1242:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_get_position>
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	3a 83       	std	Y+2, r19	; 0x02
    124a:	4b 83       	std	Y+3, r20	; 0x03
    124c:	5c 83       	std	Y+4, r21	; 0x04
    124e:	6d 83       	std	Y+5, r22	; 0x05
    1250:	7e 83       	std	Y+6, r23	; 0x06
    1252:	8f 83       	std	Y+7, r24	; 0x07
    1254:	98 87       	std	Y+8, r25	; 0x08
	if(transition == 0){
    1256:	20 91 18 02 	lds	r18, 0x0218
    125a:	30 91 19 02 	lds	r19, 0x0219
    125e:	23 2b       	or	r18, r19
    1260:	09 f0       	breq	.+2      	; 0x1264 <draw_menu+0xd4>
    1262:	76 c0       	rjmp	.+236    	; 0x1350 <draw_menu+0x1c0>
		switch(dir){
    1264:	11 30       	cpi	r17, 0x01	; 1
    1266:	61 f0       	breq	.+24     	; 0x1280 <draw_menu+0xf0>
    1268:	34 f4       	brge	.+12     	; 0x1276 <draw_menu+0xe6>
    126a:	1f 3f       	cpi	r17, 0xFF	; 255
    126c:	09 f4       	brne	.+2      	; 0x1270 <draw_menu+0xe0>
    126e:	55 c0       	rjmp	.+170    	; 0x131a <draw_menu+0x18a>
    1270:	11 23       	and	r17, r17
    1272:	89 f1       	breq	.+98     	; 0x12d6 <draw_menu+0x146>
    1274:	86 c0       	rjmp	.+268    	; 0x1382 <draw_menu+0x1f2>
    1276:	12 30       	cpi	r17, 0x02	; 2
    1278:	d1 f0       	breq	.+52     	; 0x12ae <draw_menu+0x11e>
    127a:	13 30       	cpi	r17, 0x03	; 3
    127c:	61 f0       	breq	.+24     	; 0x1296 <draw_menu+0x106>
    127e:	81 c0       	rjmp	.+258    	; 0x1382 <draw_menu+0x1f2>
			case UP:
				transition = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	90 93 19 02 	sts	0x0219, r25
    1288:	80 93 18 02 	sts	0x0218, r24
				transition_dir = UP;
    128c:	80 93 80 01 	sts	0x0180, r24
				break;
    1290:	8c 2d       	mov	r24, r12
    1292:	9d 2d       	mov	r25, r13
    1294:	87 c0       	rjmp	.+270    	; 0x13a4 <draw_menu+0x214>
			case DOWN:
				transition = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	90 93 19 02 	sts	0x0219, r25
    129e:	80 93 18 02 	sts	0x0218, r24
				transition_dir = DOWN;
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	80 93 80 01 	sts	0x0180, r24
				break;
    12a8:	8c 2d       	mov	r24, r12
    12aa:	9d 2d       	mov	r25, r13
    12ac:	7b c0       	rjmp	.+246    	; 0x13a4 <draw_menu+0x214>
			case LEFT:
				if (self->super_menu != NULL){
    12ae:	f6 01       	movw	r30, r12
    12b0:	20 85       	ldd	r18, Z+8	; 0x08
    12b2:	31 85       	ldd	r19, Z+9	; 0x09
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <draw_menu+0x12c>
    12ba:	66 c0       	rjmp	.+204    	; 0x1388 <draw_menu+0x1f8>
					self = self->super_menu;
					joy_held = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	90 93 15 02 	sts	0x0215, r25
    12c4:	80 93 14 02 	sts	0x0214, r24
					transition = 1;
    12c8:	90 93 19 02 	sts	0x0219, r25
    12cc:	80 93 18 02 	sts	0x0218, r24
				transition = 1;
				transition_dir = DOWN;
				break;
			case LEFT:
				if (self->super_menu != NULL){
					self = self->super_menu;
    12d0:	82 2f       	mov	r24, r18
    12d2:	93 2f       	mov	r25, r19
    12d4:	67 c0       	rjmp	.+206    	; 0x13a4 <draw_menu+0x214>
					joy_held = 1;
					transition = 1;
				}
				break;
			case RIGHT:
				if (self->sub_menus[self->cursor]->num_of_entries != 0){
    12d6:	d6 01       	movw	r26, r12
    12d8:	12 96       	adiw	r26, 0x02	; 2
    12da:	8d 91       	ld	r24, X+
    12dc:	9c 91       	ld	r25, X
    12de:	13 97       	sbiw	r26, 0x03	; 3
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	1a 96       	adiw	r26, 0x0a	; 10
    12e6:	ed 91       	ld	r30, X+
    12e8:	fc 91       	ld	r31, X
    12ea:	1b 97       	sbiw	r26, 0x0b	; 11
    12ec:	e8 0f       	add	r30, r24
    12ee:	f9 1f       	adc	r31, r25
    12f0:	01 90       	ld	r0, Z+
    12f2:	f0 81       	ld	r31, Z
    12f4:	e0 2d       	mov	r30, r0
    12f6:	86 81       	ldd	r24, Z+6	; 0x06
    12f8:	97 81       	ldd	r25, Z+7	; 0x07
    12fa:	89 2b       	or	r24, r25
    12fc:	09 f4       	brne	.+2      	; 0x1300 <draw_menu+0x170>
    12fe:	47 c0       	rjmp	.+142    	; 0x138e <draw_menu+0x1fe>
					self = self->sub_menus[self->cursor];
		
					joy_held = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	90 93 15 02 	sts	0x0215, r25
    1308:	80 93 14 02 	sts	0x0214, r24
					transition = 1;
    130c:	90 93 19 02 	sts	0x0219, r25
    1310:	80 93 18 02 	sts	0x0218, r24
								//printf("\n");
								//printf(self->sub_menus[0]->name);
								//printf("\n");
								//printf(self->sub_menus[1]->name);
								//printf("\n");
					return 0;
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	45 c0       	rjmp	.+138    	; 0x13a4 <draw_menu+0x214>
				}
				break;
			case NEUTRAL:
				if(pos.z  == 1 && self->sub_menus[self->cursor]->action != NULL){
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	c9 f5       	brne	.+114    	; 0x1394 <draw_menu+0x204>
    1322:	f6 01       	movw	r30, r12
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	02 84       	ldd	r0, Z+10	; 0x0a
    132e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1330:	e0 2d       	mov	r30, r0
    1332:	e8 0f       	add	r30, r24
    1334:	f9 1f       	adc	r31, r25
    1336:	01 90       	ld	r0, Z+
    1338:	f0 81       	ld	r31, Z
    133a:	e0 2d       	mov	r30, r0
    133c:	06 84       	ldd	r0, Z+14	; 0x0e
    133e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1340:	e0 2d       	mov	r30, r0
    1342:	30 97       	sbiw	r30, 0x00	; 0
    1344:	51 f1       	breq	.+84     	; 0x139a <draw_menu+0x20a>
					self->sub_menus[self->cursor]->action(self);
    1346:	c6 01       	movw	r24, r12
    1348:	09 95       	icall
    134a:	8c 2d       	mov	r24, r12
    134c:	9d 2d       	mov	r25, r13
    134e:	2a c0       	rjmp	.+84     	; 0x13a4 <draw_menu+0x214>
				}
				break;
		}
	}
	else{
		if (transition_dir == UP || transition_dir == DOWN){
    1350:	60 91 80 01 	lds	r22, 0x0180
    1354:	86 2f       	mov	r24, r22
    1356:	8d 7f       	andi	r24, 0xFD	; 253
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	31 f4       	brne	.+12     	; 0x1368 <draw_menu+0x1d8>
			menu_transition(self, transition_dir);
    135c:	c6 01       	movw	r24, r12
    135e:	0e 94 3e 08 	call	0x107c	; 0x107c <menu_transition>
    1362:	8c 2d       	mov	r24, r12
    1364:	9d 2d       	mov	r25, r13
    1366:	1e c0       	rjmp	.+60     	; 0x13a4 <draw_menu+0x214>
		}
		else if(dir == NEUTRAL){
    1368:	1f 3f       	cpi	r17, 0xFF	; 255
    136a:	d1 f4       	brne	.+52     	; 0x13a0 <draw_menu+0x210>
			joy_held = 0;
    136c:	10 92 15 02 	sts	0x0215, r1
    1370:	10 92 14 02 	sts	0x0214, r1
			transition = 0;
    1374:	10 92 19 02 	sts	0x0219, r1
    1378:	10 92 18 02 	sts	0x0218, r1
    137c:	8c 2d       	mov	r24, r12
    137e:	9d 2d       	mov	r25, r13
    1380:	11 c0       	rjmp	.+34     	; 0x13a4 <draw_menu+0x214>
	}
	//Where to go next
	Direction dir = joy_get_direction();
	Position pos = joy_get_position();
	if(transition == 0){
		switch(dir){
    1382:	8c 2d       	mov	r24, r12
    1384:	9d 2d       	mov	r25, r13
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <draw_menu+0x214>
    1388:	8c 2d       	mov	r24, r12
    138a:	9d 2d       	mov	r25, r13
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <draw_menu+0x214>
    138e:	8c 2d       	mov	r24, r12
    1390:	9d 2d       	mov	r25, r13
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <draw_menu+0x214>
    1394:	8c 2d       	mov	r24, r12
    1396:	9d 2d       	mov	r25, r13
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <draw_menu+0x214>
    139a:	8c 2d       	mov	r24, r12
    139c:	9d 2d       	mov	r25, r13
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <draw_menu+0x214>
    13a0:	8c 2d       	mov	r24, r12
    13a2:	9d 2d       	mov	r25, r13
			joy_held = 0;
			transition = 0;
		}
	}
	return self;
}
    13a4:	28 96       	adiw	r28, 0x08	; 8
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	08 95       	ret

000013c2 <main>:
volatile int oled_refresh_timer = 0;
volatile int game_interrupt_flag = 1;
State state = in_menu;

int main(void)
{
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <main+0x6>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <main+0x8>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <main+0xa>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	
	MCUCR |= (1<<SRE);	//Enable external memory
    13d0:	85 b7       	in	r24, 0x35	; 53
    13d2:	80 68       	ori	r24, 0x80	; 128
    13d4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); 
    13d6:	80 b7       	in	r24, 0x30	; 48
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600);
    13dc:	80 e8       	ldi	r24, 0x80	; 128
    13de:	95 e2       	ldi	r25, 0x25	; 37
    13e0:	0e 94 65 06 	call	0xcca	; 0xcca <uart_init>
	can_init(MODE_NORMAL);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	adc_init();
    13ec:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
    13f0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_init>
	joy_init();
    13f4:	0e 94 9c 04 	call	0x938	; 0x938 <joy_init>
	touch_init();
    13f8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <touch_init>
	menu_init();
    13fc:	0e 94 06 08 	call	0x100c	; 0x100c <menu_init>
	sei();
    1400:	78 94       	sei
	//sram_test();
	
	printf("%d\n", 255<<8 - 9%8);
    1402:	8f e7       	ldi	r24, 0x7F	; 127
    1404:	8f 93       	push	r24
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	8f 93       	push	r24
    140a:	85 ef       	ldi	r24, 0xF5	; 245
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	9f 93       	push	r25
    1410:	8f 93       	push	r24
    1412:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <printf>
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
				case OCCLUDED:
					game_occluded = 1;
					break;
				
				default:
					printf("ID unknown\r");
    141e:	0f 2e       	mov	r0, r31
    1420:	f9 ef       	ldi	r31, 0xF9	; 249
    1422:	ef 2e       	mov	r14, r31
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	ff 2e       	mov	r15, r31
    1428:	f0 2d       	mov	r31, r0
		//joy_print();
		if (can_message_received){
			Msg msg_received =  can_receive();
			switch (msg_received.id){
				case OCCLUDED:
					game_occluded = 1;
    142a:	01 e0       	ldi	r16, 0x01	; 1
    142c:	10 e0       	ldi	r17, 0x00	; 0
	
	printf("%d\n", 255<<8 - 9%8);
	while (1)
	{
		//joy_print();
		if (can_message_received){
    142e:	80 91 06 02 	lds	r24, 0x0206
    1432:	90 91 07 02 	lds	r25, 0x0207
    1436:	89 2b       	or	r24, r25
    1438:	f9 f0       	breq	.+62     	; 0x1478 <main+0xb6>
			Msg msg_received =  can_receive();
    143a:	0e 94 21 04 	call	0x842	; 0x842 <can_receive>
    143e:	29 83       	std	Y+1, r18	; 0x01
    1440:	3a 83       	std	Y+2, r19	; 0x02
    1442:	4b 83       	std	Y+3, r20	; 0x03
    1444:	5c 83       	std	Y+4, r21	; 0x04
    1446:	6d 83       	std	Y+5, r22	; 0x05
    1448:	7e 83       	std	Y+6, r23	; 0x06
			switch (msg_received.id){
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	03 97       	sbiw	r24, 0x03	; 3
    1450:	29 f4       	brne	.+10     	; 0x145c <main+0x9a>
				case OCCLUDED:
					game_occluded = 1;
    1452:	10 93 20 02 	sts	0x0220, r17
    1456:	00 93 1f 02 	sts	0x021F, r16
					break;
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <main+0xa6>
				
				default:
					printf("ID unknown\r");
    145c:	ff 92       	push	r15
    145e:	ef 92       	push	r14
    1460:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <printf>
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
			}
			free(msg_received.data);
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	0e 94 44 11 	call	0x2288	; 0x2288 <free>
			can_message_received = 0;
    1470:	10 92 07 02 	sts	0x0207, r1
    1474:	10 92 06 02 	sts	0x0206, r1
		}
		
		switch (state){
    1478:	80 91 1a 02 	lds	r24, 0x021A
    147c:	88 23       	and	r24, r24
    147e:	19 f0       	breq	.+6      	; 0x1486 <main+0xc4>
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	71 f0       	breq	.+28     	; 0x14a0 <main+0xde>
    1484:	d4 cf       	rjmp	.-88     	; 0x142e <main+0x6c>
			case in_menu:
				if(oled_refresh_timer == 1){
    1486:	80 91 1b 02 	lds	r24, 0x021B
    148a:	90 91 1c 02 	lds	r25, 0x021C
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	71 f6       	brne	.-100    	; 0x142e <main+0x6c>
					menu_run_display();
    1492:	0e 94 2b 08 	call	0x1056	; 0x1056 <menu_run_display>
					oled_refresh_timer = 0;
    1496:	10 92 1c 02 	sts	0x021C, r1
    149a:	10 92 1b 02 	sts	0x021B, r1
    149e:	c7 cf       	rjmp	.-114    	; 0x142e <main+0x6c>
				}
				break;
			case in_game:		
				if(game_interrupt_flag == 1){
    14a0:	80 91 81 01 	lds	r24, 0x0181
    14a4:	90 91 82 01 	lds	r25, 0x0182
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	09 f6       	brne	.-126    	; 0x142e <main+0x6c>
					game_run();
    14ac:	0e 94 9f 06 	call	0xd3e	; 0xd3e <game_run>
    14b0:	be cf       	rjmp	.-132    	; 0x142e <main+0x6c>

000014b2 <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    14b2:	20 91 89 01 	lds	r18, 0x0189
    14b6:	30 91 8a 01 	lds	r19, 0x018A
    14ba:	23 2b       	or	r18, r19
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    14be:	20 91 21 02 	lds	r18, 0x0221
    14c2:	30 91 22 02 	lds	r19, 0x0222
    14c6:	21 15       	cp	r18, r1
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	39 07       	cpc	r19, r25
    14cc:	bc f4       	brge	.+46     	; 0x14fc <oled_write_data+0x4a>
			//printf("Outside of screen!\n");
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    14ce:	40 91 85 01 	lds	r20, 0x0185
    14d2:	50 91 86 01 	lds	r21, 0x0186
    14d6:	fa 01       	movw	r30, r20
    14d8:	e2 0f       	add	r30, r18
    14da:	f3 1f       	adc	r31, r19
    14dc:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    14de:	80 91 21 02 	lds	r24, 0x0221
    14e2:	90 91 22 02 	lds	r25, 0x0222
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	90 93 22 02 	sts	0x0222, r25
    14ec:	80 93 21 02 	sts	0x0221, r24
    14f0:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    14f2:	e0 91 83 01 	lds	r30, 0x0183
    14f6:	f0 91 84 01 	lds	r31, 0x0184
    14fa:	80 83       	st	Z, r24
    14fc:	08 95       	ret

000014fe <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    150a:	68 30       	cpi	r22, 0x08	; 8
    150c:	59 f4       	brne	.+22     	; 0x1524 <oled_print_char+0x26>
		font_address = &font8[character-' '];
    150e:	08 2f       	mov	r16, r24
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	00 0f       	add	r16, r16
    1514:	11 1f       	adc	r17, r17
    1516:	00 0f       	add	r16, r16
    1518:	11 1f       	adc	r17, r17
    151a:	00 0f       	add	r16, r16
    151c:	11 1f       	adc	r17, r17
    151e:	0b 50       	subi	r16, 0x0B	; 11
    1520:	1d 4f       	sbci	r17, 0xFD	; 253
    1522:	1a c0       	rjmp	.+52     	; 0x1558 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    1524:	65 30       	cpi	r22, 0x05	; 5
    1526:	71 f4       	brne	.+28     	; 0x1544 <oled_print_char+0x46>
		font_address = &font5[character-' '];
    1528:	08 2f       	mov	r16, r24
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	00 52       	subi	r16, 0x20	; 32
    152e:	11 09       	sbc	r17, r1
    1530:	c8 01       	movw	r24, r16
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	08 0f       	add	r16, r24
    153c:	19 1f       	adc	r17, r25
    153e:	06 5e       	subi	r16, 0xE6	; 230
    1540:	1d 4f       	sbci	r17, 0xFD	; 253
    1542:	0a c0       	rjmp	.+20     	; 0x1558 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    1544:	64 30       	cpi	r22, 0x04	; 4
    1546:	41 f4       	brne	.+16     	; 0x1558 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    1548:	08 2f       	mov	r16, r24
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	00 0f       	add	r16, r16
    154e:	11 1f       	adc	r17, r17
    1550:	00 0f       	add	r16, r16
    1552:	11 1f       	adc	r17, r17
    1554:	02 5e       	subi	r16, 0xE2	; 226
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    1558:	45 2b       	or	r20, r21
    155a:	31 f0       	breq	.+12     	; 0x1568 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    155c:	e6 2e       	mov	r14, r22
    155e:	f1 2c       	mov	r15, r1
    1560:	1e 14       	cp	r1, r14
    1562:	1f 04       	cpc	r1, r15
    1564:	9c f0       	brlt	.+38     	; 0x158c <oled_print_char+0x8e>
    1566:	1f c0       	rjmp	.+62     	; 0x15a6 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1568:	e6 2e       	mov	r14, r22
    156a:	f1 2c       	mov	r15, r1
    156c:	1e 14       	cp	r1, r14
    156e:	1f 04       	cpc	r1, r15
    1570:	d4 f4       	brge	.+52     	; 0x15a6 <oled_print_char+0xa8>
    1572:	c0 e0       	ldi	r28, 0x00	; 0
    1574:	d0 e0       	ldi	r29, 0x00	; 0
    1576:	fe 01       	movw	r30, r28
    1578:	e0 0f       	add	r30, r16
    157a:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    157c:	84 91       	lpm	r24, Z
    157e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1582:	21 96       	adiw	r28, 0x01	; 1
    1584:	ce 15       	cp	r28, r14
    1586:	df 05       	cpc	r29, r15
    1588:	b4 f3       	brlt	.-20     	; 0x1576 <oled_print_char+0x78>
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    158c:	c0 e0       	ldi	r28, 0x00	; 0
    158e:	d0 e0       	ldi	r29, 0x00	; 0
    1590:	fe 01       	movw	r30, r28
    1592:	e0 0f       	add	r30, r16
    1594:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    1596:	84 91       	lpm	r24, Z
    1598:	80 95       	com	r24
    159a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    159e:	21 96       	adiw	r28, 0x01	; 1
    15a0:	ce 15       	cp	r28, r14
    15a2:	df 05       	cpc	r29, r15
    15a4:	ac f3       	brlt	.-22     	; 0x1590 <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	08 95       	ret

000015b4 <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    15b4:	80 91 89 01 	lds	r24, 0x0189
    15b8:	90 91 8a 01 	lds	r25, 0x018A
    15bc:	89 2b       	or	r24, r25
    15be:	89 f0       	breq	.+34     	; 0x15e2 <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    15c0:	80 91 21 02 	lds	r24, 0x0221
    15c4:	90 91 22 02 	lds	r25, 0x0222
    15c8:	81 15       	cp	r24, r1
    15ca:	24 e0       	ldi	r18, 0x04	; 4
    15cc:	92 07       	cpc	r25, r18
    15ce:	5c f4       	brge	.+22     	; 0x15e6 <oled_read_data+0x32>
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    15d0:	20 91 85 01 	lds	r18, 0x0185
    15d4:	30 91 86 01 	lds	r19, 0x0186
    15d8:	f9 01       	movw	r30, r18
    15da:	e8 0f       	add	r30, r24
    15dc:	f9 1f       	adc	r31, r25
    15de:	80 81       	ld	r24, Z
    15e0:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	08 95       	ret
char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    15e8:	08 95       	ret

000015ea <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    15ea:	40 91 89 01 	lds	r20, 0x0189
    15ee:	50 91 8a 01 	lds	r21, 0x018A
    15f2:	45 2b       	or	r20, r21
    15f4:	d1 f0       	breq	.+52     	; 0x162a <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    15f6:	20 91 21 02 	lds	r18, 0x0221
    15fa:	30 91 22 02 	lds	r19, 0x0222
    15fe:	2f 77       	andi	r18, 0x7F	; 127
    1600:	30 78       	andi	r19, 0x80	; 128
    1602:	33 23       	and	r19, r19
    1604:	34 f4       	brge	.+12     	; 0x1612 <oled_goto_line+0x28>
    1606:	21 50       	subi	r18, 0x01	; 1
    1608:	31 09       	sbc	r19, r1
    160a:	20 68       	ori	r18, 0x80	; 128
    160c:	3f 6f       	ori	r19, 0xFF	; 255
    160e:	2f 5f       	subi	r18, 0xFF	; 255
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	96 95       	lsr	r25
    1614:	98 2f       	mov	r25, r24
    1616:	88 27       	eor	r24, r24
    1618:	97 95       	ror	r25
    161a:	87 95       	ror	r24
    161c:	28 0f       	add	r18, r24
    161e:	39 1f       	adc	r19, r25
    1620:	30 93 22 02 	sts	0x0222, r19
    1624:	20 93 21 02 	sts	0x0221, r18
    1628:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    162a:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    162c:	e0 91 87 01 	lds	r30, 0x0187
    1630:	f0 91 88 01 	lds	r31, 0x0188
    1634:	80 83       	st	Z, r24
    1636:	08 95       	ret

00001638 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    1638:	20 91 89 01 	lds	r18, 0x0189
    163c:	30 91 8a 01 	lds	r19, 0x018A
    1640:	23 2b       	or	r18, r19
    1642:	c1 f0       	breq	.+48     	; 0x1674 <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    1644:	40 91 21 02 	lds	r20, 0x0221
    1648:	50 91 22 02 	lds	r21, 0x0222
    164c:	9a 01       	movw	r18, r20
    164e:	2f 77       	andi	r18, 0x7F	; 127
    1650:	30 78       	andi	r19, 0x80	; 128
    1652:	33 23       	and	r19, r19
    1654:	34 f4       	brge	.+12     	; 0x1662 <oled_goto_column+0x2a>
    1656:	21 50       	subi	r18, 0x01	; 1
    1658:	31 09       	sbc	r19, r1
    165a:	20 68       	ori	r18, 0x80	; 128
    165c:	3f 6f       	ori	r19, 0xFF	; 255
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	42 1b       	sub	r20, r18
    1664:	53 0b       	sbc	r21, r19
    1666:	84 0f       	add	r24, r20
    1668:	95 1f       	adc	r25, r21
    166a:	90 93 22 02 	sts	0x0222, r25
    166e:	80 93 21 02 	sts	0x0221, r24
    1672:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1674:	e0 91 87 01 	lds	r30, 0x0187
    1678:	f0 91 88 01 	lds	r31, 0x0188
    167c:	10 82       	st	Z, r1
    167e:	e0 91 87 01 	lds	r30, 0x0187
    1682:	f0 91 88 01 	lds	r31, 0x0188
    1686:	80 e1       	ldi	r24, 0x10	; 16
    1688:	80 83       	st	Z, r24
    168a:	08 95       	ret

0000168c <oled_print_string>:
		
	OCR1AH = OCRA_num >> 8;
	OCR1AL = OCRA_num; //Sets the value for the compare match to 10240
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    168c:	6f 92       	push	r6
    168e:	7f 92       	push	r7
    1690:	8f 92       	push	r8
    1692:	9f 92       	push	r9
    1694:	af 92       	push	r10
    1696:	bf 92       	push	r11
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	ec 01       	movw	r28, r24
    16aa:	96 2e       	mov	r9, r22
    16ac:	74 2e       	mov	r7, r20
    16ae:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    16b0:	86 2f       	mov	r24, r22
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <oled_goto_column>
	oled_goto_line(line);
    16b8:	87 2d       	mov	r24, r7
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
	
	int length = strlen(string);
    16c0:	fe 01       	movw	r30, r28
    16c2:	01 90       	ld	r0, Z+
    16c4:	00 20       	and	r0, r0
    16c6:	e9 f7       	brne	.-6      	; 0x16c2 <oled_print_string+0x36>
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	6f 01       	movw	r12, r30
    16cc:	cc 1a       	sub	r12, r28
    16ce:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    16d0:	1c 14       	cp	r1, r12
    16d2:	1d 04       	cpc	r1, r13
    16d4:	24 f5       	brge	.+72     	; 0x171e <oled_print_string+0x92>
    16d6:	7e 01       	movw	r14, r28
    16d8:	c0 e0       	ldi	r28, 0x00	; 0
    16da:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    16dc:	8f e7       	ldi	r24, 0x7F	; 127
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	5c 01       	movw	r10, r24
    16e2:	a8 18       	sub	r10, r8
    16e4:	b1 08       	sbc	r11, r1
			column = 0;
    16e6:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    16e8:	a8 01       	movw	r20, r16
    16ea:	68 2d       	mov	r22, r8
    16ec:	f7 01       	movw	r30, r14
    16ee:	81 91       	ld	r24, Z+
    16f0:	7f 01       	movw	r14, r30
    16f2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <oled_print_char>
		column = column + font_size;
    16f6:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    16f8:	89 2d       	mov	r24, r9
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a8 16       	cp	r10, r24
    16fe:	b9 06       	cpc	r11, r25
    1700:	54 f4       	brge	.+20     	; 0x1716 <oled_print_string+0x8a>
			column = 0;
			line++;
    1702:	73 94       	inc	r7
			oled_goto_column(column);
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 1c 0b 	call	0x1638	; 0x1638 <oled_goto_column>
			oled_goto_line(line);
    170c:	87 2d       	mov	r24, r7
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    1714:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    1716:	21 96       	adiw	r28, 0x01	; 1
    1718:	cc 16       	cp	r12, r28
    171a:	dd 06       	cpc	r13, r29
    171c:	29 f7       	brne	.-54     	; 0x16e8 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	08 95       	ret

0000173c <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    173c:	cf 93       	push	r28
	oled_goto_line(line);
    173e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
	oled_goto_column(0);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 1c 0b 	call	0x1638	; 0x1638 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    174a:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    1752:	cf 5f       	subi	r28, 0xFF	; 255
    1754:	c0 38       	cpi	r28, 0x80	; 128
    1756:	d1 f7       	brne	.-12     	; 0x174c <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	c0 e0       	ldi	r28, 0x00	; 0
    1762:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 9e 0b 	call	0x173c	; 0x173c <oled_clear_line>
    176a:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    176c:	c8 30       	cpi	r28, 0x08	; 8
    176e:	d1 05       	cpc	r29, r1
    1770:	c9 f7       	brne	.-14     	; 0x1764 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1778:	e0 91 87 01 	lds	r30, 0x0187
    177c:	f0 91 88 01 	lds	r31, 0x0188
    1780:	8e ea       	ldi	r24, 0xAE	; 174
    1782:	80 83       	st	Z, r24
    1784:	e0 91 87 01 	lds	r30, 0x0187
    1788:	f0 91 88 01 	lds	r31, 0x0188
    178c:	81 ea       	ldi	r24, 0xA1	; 161
    178e:	80 83       	st	Z, r24
    1790:	e0 91 87 01 	lds	r30, 0x0187
    1794:	f0 91 88 01 	lds	r31, 0x0188
    1798:	8a ed       	ldi	r24, 0xDA	; 218
    179a:	80 83       	st	Z, r24
    179c:	e0 91 87 01 	lds	r30, 0x0187
    17a0:	f0 91 88 01 	lds	r31, 0x0188
    17a4:	82 e1       	ldi	r24, 0x12	; 18
    17a6:	80 83       	st	Z, r24
    17a8:	e0 91 87 01 	lds	r30, 0x0187
    17ac:	f0 91 88 01 	lds	r31, 0x0188
    17b0:	88 ec       	ldi	r24, 0xC8	; 200
    17b2:	80 83       	st	Z, r24
    17b4:	e0 91 87 01 	lds	r30, 0x0187
    17b8:	f0 91 88 01 	lds	r31, 0x0188
    17bc:	88 ea       	ldi	r24, 0xA8	; 168
    17be:	80 83       	st	Z, r24
    17c0:	e0 91 87 01 	lds	r30, 0x0187
    17c4:	f0 91 88 01 	lds	r31, 0x0188
    17c8:	8f e3       	ldi	r24, 0x3F	; 63
    17ca:	80 83       	st	Z, r24
    17cc:	e0 91 87 01 	lds	r30, 0x0187
    17d0:	f0 91 88 01 	lds	r31, 0x0188
    17d4:	85 ed       	ldi	r24, 0xD5	; 213
    17d6:	80 83       	st	Z, r24
    17d8:	e0 91 87 01 	lds	r30, 0x0187
    17dc:	f0 91 88 01 	lds	r31, 0x0188
    17e0:	80 e8       	ldi	r24, 0x80	; 128
    17e2:	80 83       	st	Z, r24
    17e4:	e0 91 87 01 	lds	r30, 0x0187
    17e8:	f0 91 88 01 	lds	r31, 0x0188
    17ec:	81 e8       	ldi	r24, 0x81	; 129
    17ee:	80 83       	st	Z, r24
    17f0:	e0 91 87 01 	lds	r30, 0x0187
    17f4:	f0 91 88 01 	lds	r31, 0x0188
    17f8:	80 e5       	ldi	r24, 0x50	; 80
    17fa:	80 83       	st	Z, r24
    17fc:	e0 91 87 01 	lds	r30, 0x0187
    1800:	f0 91 88 01 	lds	r31, 0x0188
    1804:	89 ed       	ldi	r24, 0xD9	; 217
    1806:	80 83       	st	Z, r24
    1808:	e0 91 87 01 	lds	r30, 0x0187
    180c:	f0 91 88 01 	lds	r31, 0x0188
    1810:	81 e2       	ldi	r24, 0x21	; 33
    1812:	80 83       	st	Z, r24
    1814:	e0 91 87 01 	lds	r30, 0x0187
    1818:	f0 91 88 01 	lds	r31, 0x0188
    181c:	80 e2       	ldi	r24, 0x20	; 32
    181e:	80 83       	st	Z, r24
    1820:	e0 91 87 01 	lds	r30, 0x0187
    1824:	f0 91 88 01 	lds	r31, 0x0188
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	80 83       	st	Z, r24
    182c:	e0 91 87 01 	lds	r30, 0x0187
    1830:	f0 91 88 01 	lds	r31, 0x0188
    1834:	8b ed       	ldi	r24, 0xDB	; 219
    1836:	80 83       	st	Z, r24
    1838:	e0 91 87 01 	lds	r30, 0x0187
    183c:	f0 91 88 01 	lds	r31, 0x0188
    1840:	80 e3       	ldi	r24, 0x30	; 48
    1842:	80 83       	st	Z, r24
    1844:	e0 91 87 01 	lds	r30, 0x0187
    1848:	f0 91 88 01 	lds	r31, 0x0188
    184c:	8d ea       	ldi	r24, 0xAD	; 173
    184e:	80 83       	st	Z, r24
    1850:	e0 91 87 01 	lds	r30, 0x0187
    1854:	f0 91 88 01 	lds	r31, 0x0188
    1858:	10 82       	st	Z, r1
    185a:	e0 91 87 01 	lds	r30, 0x0187
    185e:	f0 91 88 01 	lds	r31, 0x0188
    1862:	84 ea       	ldi	r24, 0xA4	; 164
    1864:	80 83       	st	Z, r24
    1866:	e0 91 87 01 	lds	r30, 0x0187
    186a:	f0 91 88 01 	lds	r31, 0x0188
    186e:	86 ea       	ldi	r24, 0xA6	; 166
    1870:	80 83       	st	Z, r24
    1872:	e0 91 87 01 	lds	r30, 0x0187
    1876:	f0 91 88 01 	lds	r31, 0x0188
    187a:	8f ea       	ldi	r24, 0xAF	; 175
    187c:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    187e:	0e 94 ae 0b 	call	0x175c	; 0x175c <oled_clear_screen>
	
	//Set up timer, enable timer/counter compare match interrupt for 60 FPS
	TCCR1A = (1 << WGM11) | (1 << WGM10);				//Compare match mode
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); //clock source to be used by the Timer/Counter clkI/O/8
    1886:	8a e1       	ldi	r24, 0x1A	; 26
    1888:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1A);								//Interrupt on compare match
    188a:	80 e4       	ldi	r24, 0x40	; 64
    188c:	89 bf       	out	0x39, r24	; 57
	int OCRA_num = (long)F_CPU/(refresh_rate*8);
		
	OCR1AH = OCRA_num >> 8;
    188e:	88 e2       	ldi	r24, 0x28	; 40
    1890:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = OCRA_num; //Sets the value for the compare match to 10240
    1892:	1a bc       	out	0x2a, r1	; 42
    1894:	08 95       	ret

00001896 <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    1896:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1898:	e0 91 87 01 	lds	r30, 0x0187
    189c:	f0 91 88 01 	lds	r31, 0x0188
    18a0:	10 82       	st	Z, r1
    18a2:	e0 91 87 01 	lds	r30, 0x0187
    18a6:	f0 91 88 01 	lds	r31, 0x0188
    18aa:	80 e1       	ldi	r24, 0x10	; 16
    18ac:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    18ae:	80 91 89 01 	lds	r24, 0x0189
    18b2:	90 91 8a 01 	lds	r25, 0x018A
    18b6:	89 2b       	or	r24, r25
    18b8:	21 f1       	breq	.+72     	; 0x1902 <oled_refresh+0x6c>
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    18c0:	c0 e0       	ldi	r28, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    18c4:	e0 91 87 01 	lds	r30, 0x0187
    18c8:	f0 91 88 01 	lds	r31, 0x0188
    18cc:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    18ce:	8c 2f       	mov	r24, r28
    18d0:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    18d2:	e0 91 83 01 	lds	r30, 0x0183
    18d6:	f0 91 84 01 	lds	r31, 0x0184
    18da:	9c 01       	movw	r18, r24
    18dc:	24 0f       	add	r18, r20
    18de:	35 1f       	adc	r19, r21
    18e0:	a0 91 85 01 	lds	r26, 0x0185
    18e4:	b0 91 86 01 	lds	r27, 0x0186
    18e8:	a2 0f       	add	r26, r18
    18ea:	b3 1f       	adc	r27, r19
    18ec:	2c 91       	ld	r18, X
    18ee:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	80 38       	cpi	r24, 0x80	; 128
    18f4:	91 05       	cpc	r25, r1
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <oled_refresh+0x3c>
    18f8:	6f 5f       	subi	r22, 0xFF	; 255
    18fa:	40 58       	subi	r20, 0x80	; 128
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    18fe:	68 3b       	cpi	r22, 0xB8	; 184
    1900:	09 f7       	brne	.-62     	; 0x18c4 <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <oled_invert_rectangle>:
	}
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1906:	6f 92       	push	r6
    1908:	7f 92       	push	r7
    190a:	8f 92       	push	r8
    190c:	9f 92       	push	r9
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	8c 01       	movw	r16, r24
    1924:	ea 01       	movw	r28, r20
	//NEW
	//Swap
	if(y1 > y2){
    1926:	26 17       	cp	r18, r22
    1928:	37 07       	cpc	r19, r23
    192a:	2c f4       	brge	.+10     	; 0x1936 <oled_invert_rectangle+0x30>
    192c:	96 2f       	mov	r25, r22
    192e:	87 2f       	mov	r24, r23
		int temp = y1;
		y1 = y2;
    1930:	b9 01       	movw	r22, r18
		y2 = temp;
    1932:	29 2f       	mov	r18, r25
    1934:	38 2f       	mov	r19, r24
	}
	
	if(x1 > x2){
    1936:	c0 17       	cp	r28, r16
    1938:	d1 07       	cpc	r29, r17
    193a:	14 f4       	brge	.+4      	; 0x1940 <oled_invert_rectangle+0x3a>
		int temp = x1;
		x1 = y2;
		x2 = temp;
    193c:	e8 01       	movw	r28, r16
		y2 = temp;
	}
	
	if(x1 > x2){
		int temp = x1;
		x1 = y2;
    193e:	89 01       	movw	r16, r18
		x2 = temp;
	}
	int t = 255 << y1%8;		//Top line to be filled
    1940:	cb 01       	movw	r24, r22
    1942:	87 70       	andi	r24, 0x07	; 7
    1944:	90 78       	andi	r25, 0x80	; 128
    1946:	99 23       	and	r25, r25
    1948:	24 f4       	brge	.+8      	; 0x1952 <oled_invert_rectangle+0x4c>
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	88 6f       	ori	r24, 0xF8	; 248
    194e:	9f 6f       	ori	r25, 0xFF	; 255
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	4f ef       	ldi	r20, 0xFF	; 255
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	6a 01       	movw	r12, r20
    1958:	02 c0       	rjmp	.+4      	; 0x195e <oled_invert_rectangle+0x58>
    195a:	cc 0c       	add	r12, r12
    195c:	dd 1c       	adc	r13, r13
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <oled_invert_rectangle+0x54>
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
    1962:	c9 01       	movw	r24, r18
    1964:	87 70       	andi	r24, 0x07	; 7
    1966:	90 78       	andi	r25, 0x80	; 128
    1968:	99 23       	and	r25, r25
    196a:	24 f4       	brge	.+8      	; 0x1974 <oled_invert_rectangle+0x6e>
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	88 6f       	ori	r24, 0xF8	; 248
    1970:	9f 6f       	ori	r25, 0xFF	; 255
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	48 e0       	ldi	r20, 0x08	; 8
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	5a 01       	movw	r10, r20
    197a:	a8 1a       	sub	r10, r24
    197c:	b9 0a       	sbc	r11, r25
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	ac 01       	movw	r20, r24
    1984:	02 c0       	rjmp	.+4      	; 0x198a <oled_invert_rectangle+0x84>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	aa 94       	dec	r10
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <oled_invert_rectangle+0x80>
    198e:	5a 01       	movw	r10, r20
	if(y1/8 != y2/8){ //Over several lines
    1990:	3b 01       	movw	r6, r22
    1992:	77 23       	and	r23, r23
    1994:	1c f4       	brge	.+6      	; 0x199c <oled_invert_rectangle+0x96>
    1996:	57 e0       	ldi	r21, 0x07	; 7
    1998:	65 0e       	add	r6, r21
    199a:	71 1c       	adc	r7, r1
    199c:	75 94       	asr	r7
    199e:	67 94       	ror	r6
    19a0:	75 94       	asr	r7
    19a2:	67 94       	ror	r6
    19a4:	75 94       	asr	r7
    19a6:	67 94       	ror	r6
    19a8:	79 01       	movw	r14, r18
    19aa:	33 23       	and	r19, r19
    19ac:	1c f4       	brge	.+6      	; 0x19b4 <oled_invert_rectangle+0xae>
    19ae:	87 e0       	ldi	r24, 0x07	; 7
    19b0:	e8 0e       	add	r14, r24
    19b2:	f1 1c       	adc	r15, r1
    19b4:	f5 94       	asr	r15
    19b6:	e7 94       	ror	r14
    19b8:	f5 94       	asr	r15
    19ba:	e7 94       	ror	r14
    19bc:	f5 94       	asr	r15
    19be:	e7 94       	ror	r14
    19c0:	6e 14       	cp	r6, r14
    19c2:	7f 04       	cpc	r7, r15
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <oled_invert_rectangle+0xc2>
    19c6:	4d c0       	rjmp	.+154    	; 0x1a62 <oled_invert_rectangle+0x15c>
		//Filling top
		oled_goto_line(y1/8);
    19c8:	c3 01       	movw	r24, r6
    19ca:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
		for(int x = x1; x < x2; x++){
    19ce:	0c 17       	cp	r16, r28
    19d0:	1d 07       	cpc	r17, r29
    19d2:	7c f4       	brge	.+30     	; 0x19f2 <oled_invert_rectangle+0xec>
    19d4:	48 01       	movw	r8, r16
			oled_goto_column(x);
    19d6:	c4 01       	movw	r24, r8
    19d8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <oled_goto_column>
			oled_write_data(t ^ oled_read_data());
    19dc:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <oled_read_data>
    19e0:	8c 25       	eor	r24, r12
    19e2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
	int t = 255 << y1%8;		//Top line to be filled
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
	if(y1/8 != y2/8){ //Over several lines
		//Filling top
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    19e6:	4f ef       	ldi	r20, 0xFF	; 255
    19e8:	84 1a       	sub	r8, r20
    19ea:	94 0a       	sbc	r9, r20
    19ec:	8c 16       	cp	r8, r28
    19ee:	9d 06       	cpc	r9, r29
    19f0:	94 f3       	brlt	.-28     	; 0x19d6 <oled_invert_rectangle+0xd0>
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    19f2:	5f ef       	ldi	r21, 0xFF	; 255
    19f4:	65 1a       	sub	r6, r21
    19f6:	75 0a       	sbc	r7, r21
    19f8:	6e 14       	cp	r6, r14
    19fa:	7f 04       	cpc	r7, r15
    19fc:	f4 f4       	brge	.+60     	; 0x1a3a <oled_invert_rectangle+0x134>
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    19fe:	80 2e       	mov	r8, r16
    1a00:	91 2e       	mov	r9, r17
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
    1a02:	c3 01       	movw	r24, r6
    1a04:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
			for (int x = x1; x < x2; x++){
    1a08:	0c 17       	cp	r16, r28
    1a0a:	1d 07       	cpc	r17, r29
    1a0c:	84 f4       	brge	.+32     	; 0x1a2e <oled_invert_rectangle+0x128>
    1a0e:	c8 2c       	mov	r12, r8
    1a10:	d9 2c       	mov	r13, r9
				oled_goto_line(x);
    1a12:	c6 01       	movw	r24, r12
    1a14:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
				oled_write_data(255 ^ oled_read_data());
    1a18:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <oled_read_data>
    1a1c:	80 95       	com	r24
    1a1e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	c8 1a       	sub	r12, r24
    1a26:	d8 0a       	sbc	r13, r24
    1a28:	cc 16       	cp	r12, r28
    1a2a:	dd 06       	cpc	r13, r29
    1a2c:	94 f3       	brlt	.-28     	; 0x1a12 <oled_invert_rectangle+0x10c>
		for(int x = x1; x < x2; x++){
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1a2e:	4f ef       	ldi	r20, 0xFF	; 255
    1a30:	64 1a       	sub	r6, r20
    1a32:	74 0a       	sbc	r7, r20
    1a34:	6e 14       	cp	r6, r14
    1a36:	7f 04       	cpc	r7, r15
    1a38:	24 f3       	brlt	.-56     	; 0x1a02 <oled_invert_rectangle+0xfc>
				oled_goto_line(x);
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1a40:	0c 17       	cp	r16, r28
    1a42:	1d 07       	cpc	r17, r29
    1a44:	1c f5       	brge	.+70     	; 0x1a8c <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1a46:	c8 01       	movw	r24, r16
    1a48:	0e 94 1c 0b 	call	0x1638	; 0x1638 <oled_goto_column>
			oled_write_data(b ^ oled_read_data());
    1a4c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <oled_read_data>
    1a50:	8a 25       	eor	r24, r10
    1a52:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
		for(int x = x1; x < x2; x++){
    1a56:	0f 5f       	subi	r16, 0xFF	; 255
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	0c 17       	cp	r16, r28
    1a5c:	1d 07       	cpc	r17, r29
    1a5e:	9c f3       	brlt	.-26     	; 0x1a46 <oled_invert_rectangle+0x140>
    1a60:	15 c0       	rjmp	.+42     	; 0x1a8c <oled_invert_rectangle+0x186>
			oled_goto_column(x);
			oled_write_data(b ^ oled_read_data());
		}
	}
	else{
		int m = t & b;
    1a62:	ca 20       	and	r12, r10
    1a64:	db 20       	and	r13, r11
		oled_goto_line(y1/8);
    1a66:	c3 01       	movw	r24, r6
    1a68:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1a6c:	0c 17       	cp	r16, r28
    1a6e:	1d 07       	cpc	r17, r29
    1a70:	6c f4       	brge	.+26     	; 0x1a8c <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1a72:	c8 01       	movw	r24, r16
    1a74:	0e 94 1c 0b 	call	0x1638	; 0x1638 <oled_goto_column>
			oled_write_data(m ^ oled_read_data());
    1a78:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <oled_read_data>
    1a7c:	8c 25       	eor	r24, r12
    1a7e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <oled_write_data>
		}
	}
	else{
		int m = t & b;
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1a82:	0f 5f       	subi	r16, 0xFF	; 255
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	0c 17       	cp	r16, r28
    1a88:	1d 07       	cpc	r17, r29
    1a8a:	9c f3       	brlt	.-26     	; 0x1a72 <oled_invert_rectangle+0x16c>
			oled_goto_column(x);
			oled_write_data(m ^ oled_read_data());
		}
	}
}
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	cf 90       	pop	r12
    1a9c:	bf 90       	pop	r11
    1a9e:	af 90       	pop	r10
    1aa0:	9f 90       	pop	r9
    1aa2:	8f 90       	pop	r8
    1aa4:	7f 90       	pop	r7
    1aa6:	6f 90       	pop	r6
    1aa8:	08 95       	ret

00001aaa <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
    1aaa:	1f 92       	push	r1
    1aac:	0f 92       	push	r0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	0f 92       	push	r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
	oled_refresh_timer = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	90 93 1c 02 	sts	0x021C, r25
    1ac0:	80 93 1b 02 	sts	0x021B, r24
    1ac4:	9f 91       	pop	r25
    1ac6:	8f 91       	pop	r24
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	0f 90       	pop	r0
    1ace:	1f 90       	pop	r1
    1ad0:	18 95       	reti

00001ad2 <touch_init>:
#include "../lib/settings.h"
#include "touch.h"
#include "../lib/adc.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    1ad2:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    1ad4:	b9 98       	cbi	0x17, 1	; 23
    1ad6:	08 95       	ret

00001ad8 <__subsf3>:
    1ad8:	50 58       	subi	r21, 0x80	; 128

00001ada <__addsf3>:
    1ada:	bb 27       	eor	r27, r27
    1adc:	aa 27       	eor	r26, r26
    1ade:	0e d0       	rcall	.+28     	; 0x1afc <__addsf3x>
    1ae0:	d4 c1       	rjmp	.+936    	; 0x1e8a <__fp_round>
    1ae2:	c5 d1       	rcall	.+906    	; 0x1e6e <__fp_pscA>
    1ae4:	30 f0       	brcs	.+12     	; 0x1af2 <__addsf3+0x18>
    1ae6:	ca d1       	rcall	.+916    	; 0x1e7c <__fp_pscB>
    1ae8:	20 f0       	brcs	.+8      	; 0x1af2 <__addsf3+0x18>
    1aea:	31 f4       	brne	.+12     	; 0x1af8 <__addsf3+0x1e>
    1aec:	9f 3f       	cpi	r25, 0xFF	; 255
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <__addsf3+0x1a>
    1af0:	1e f4       	brtc	.+6      	; 0x1af8 <__addsf3+0x1e>
    1af2:	95 c1       	rjmp	.+810    	; 0x1e1e <__fp_nan>
    1af4:	0e f4       	brtc	.+2      	; 0x1af8 <__addsf3+0x1e>
    1af6:	e0 95       	com	r30
    1af8:	e7 fb       	bst	r30, 7
    1afa:	8b c1       	rjmp	.+790    	; 0x1e12 <__fp_inf>

00001afc <__addsf3x>:
    1afc:	e9 2f       	mov	r30, r25
    1afe:	d6 d1       	rcall	.+940    	; 0x1eac <__fp_split3>
    1b00:	80 f3       	brcs	.-32     	; 0x1ae2 <__addsf3+0x8>
    1b02:	ba 17       	cp	r27, r26
    1b04:	62 07       	cpc	r22, r18
    1b06:	73 07       	cpc	r23, r19
    1b08:	84 07       	cpc	r24, r20
    1b0a:	95 07       	cpc	r25, r21
    1b0c:	18 f0       	brcs	.+6      	; 0x1b14 <__addsf3x+0x18>
    1b0e:	71 f4       	brne	.+28     	; 0x1b2c <__addsf3x+0x30>
    1b10:	9e f5       	brtc	.+102    	; 0x1b78 <__addsf3x+0x7c>
    1b12:	ee c1       	rjmp	.+988    	; 0x1ef0 <__fp_zero>
    1b14:	0e f4       	brtc	.+2      	; 0x1b18 <__addsf3x+0x1c>
    1b16:	e0 95       	com	r30
    1b18:	0b 2e       	mov	r0, r27
    1b1a:	ba 2f       	mov	r27, r26
    1b1c:	a0 2d       	mov	r26, r0
    1b1e:	0b 01       	movw	r0, r22
    1b20:	b9 01       	movw	r22, r18
    1b22:	90 01       	movw	r18, r0
    1b24:	0c 01       	movw	r0, r24
    1b26:	ca 01       	movw	r24, r20
    1b28:	a0 01       	movw	r20, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	ff 27       	eor	r31, r31
    1b2e:	59 1b       	sub	r21, r25
    1b30:	99 f0       	breq	.+38     	; 0x1b58 <__addsf3x+0x5c>
    1b32:	59 3f       	cpi	r21, 0xF9	; 249
    1b34:	50 f4       	brcc	.+20     	; 0x1b4a <__addsf3x+0x4e>
    1b36:	50 3e       	cpi	r21, 0xE0	; 224
    1b38:	68 f1       	brcs	.+90     	; 0x1b94 <__addsf3x+0x98>
    1b3a:	1a 16       	cp	r1, r26
    1b3c:	f0 40       	sbci	r31, 0x00	; 0
    1b3e:	a2 2f       	mov	r26, r18
    1b40:	23 2f       	mov	r18, r19
    1b42:	34 2f       	mov	r19, r20
    1b44:	44 27       	eor	r20, r20
    1b46:	58 5f       	subi	r21, 0xF8	; 248
    1b48:	f3 cf       	rjmp	.-26     	; 0x1b30 <__addsf3x+0x34>
    1b4a:	46 95       	lsr	r20
    1b4c:	37 95       	ror	r19
    1b4e:	27 95       	ror	r18
    1b50:	a7 95       	ror	r26
    1b52:	f0 40       	sbci	r31, 0x00	; 0
    1b54:	53 95       	inc	r21
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <__addsf3x+0x4e>
    1b58:	7e f4       	brtc	.+30     	; 0x1b78 <__addsf3x+0x7c>
    1b5a:	1f 16       	cp	r1, r31
    1b5c:	ba 0b       	sbc	r27, r26
    1b5e:	62 0b       	sbc	r22, r18
    1b60:	73 0b       	sbc	r23, r19
    1b62:	84 0b       	sbc	r24, r20
    1b64:	ba f0       	brmi	.+46     	; 0x1b94 <__addsf3x+0x98>
    1b66:	91 50       	subi	r25, 0x01	; 1
    1b68:	a1 f0       	breq	.+40     	; 0x1b92 <__addsf3x+0x96>
    1b6a:	ff 0f       	add	r31, r31
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	66 1f       	adc	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	c2 f7       	brpl	.-16     	; 0x1b66 <__addsf3x+0x6a>
    1b76:	0e c0       	rjmp	.+28     	; 0x1b94 <__addsf3x+0x98>
    1b78:	ba 0f       	add	r27, r26
    1b7a:	62 1f       	adc	r22, r18
    1b7c:	73 1f       	adc	r23, r19
    1b7e:	84 1f       	adc	r24, r20
    1b80:	48 f4       	brcc	.+18     	; 0x1b94 <__addsf3x+0x98>
    1b82:	87 95       	ror	r24
    1b84:	77 95       	ror	r23
    1b86:	67 95       	ror	r22
    1b88:	b7 95       	ror	r27
    1b8a:	f7 95       	ror	r31
    1b8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <__addsf3x+0x96>
    1b90:	b3 cf       	rjmp	.-154    	; 0x1af8 <__addsf3+0x1e>
    1b92:	93 95       	inc	r25
    1b94:	88 0f       	add	r24, r24
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <__addsf3x+0x9e>
    1b98:	99 27       	eor	r25, r25
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	97 95       	ror	r25
    1b9e:	87 95       	ror	r24
    1ba0:	08 95       	ret
    1ba2:	65 d1       	rcall	.+714    	; 0x1e6e <__fp_pscA>
    1ba4:	58 f0       	brcs	.+22     	; 0x1bbc <__addsf3x+0xc0>
    1ba6:	80 e8       	ldi	r24, 0x80	; 128
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <__addsf3x+0xb2>
    1bac:	9e ef       	ldi	r25, 0xFE	; 254
    1bae:	66 d1       	rcall	.+716    	; 0x1e7c <__fp_pscB>
    1bb0:	28 f0       	brcs	.+10     	; 0x1bbc <__addsf3x+0xc0>
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	51 e0       	ldi	r21, 0x01	; 1
    1bb6:	59 f4       	brne	.+22     	; 0x1bce <atan2+0xe>
    1bb8:	5e ef       	ldi	r21, 0xFE	; 254
    1bba:	09 c0       	rjmp	.+18     	; 0x1bce <atan2+0xe>
    1bbc:	30 c1       	rjmp	.+608    	; 0x1e1e <__fp_nan>
    1bbe:	98 c1       	rjmp	.+816    	; 0x1ef0 <__fp_zero>

00001bc0 <atan2>:
    1bc0:	e9 2f       	mov	r30, r25
    1bc2:	e0 78       	andi	r30, 0x80	; 128
    1bc4:	73 d1       	rcall	.+742    	; 0x1eac <__fp_split3>
    1bc6:	68 f3       	brcs	.-38     	; 0x1ba2 <__addsf3x+0xa6>
    1bc8:	09 2e       	mov	r0, r25
    1bca:	05 2a       	or	r0, r21
    1bcc:	c1 f3       	breq	.-16     	; 0x1bbe <__addsf3x+0xc2>
    1bce:	26 17       	cp	r18, r22
    1bd0:	37 07       	cpc	r19, r23
    1bd2:	48 07       	cpc	r20, r24
    1bd4:	59 07       	cpc	r21, r25
    1bd6:	38 f0       	brcs	.+14     	; 0x1be6 <atan2+0x26>
    1bd8:	0e 2e       	mov	r0, r30
    1bda:	07 f8       	bld	r0, 7
    1bdc:	e0 25       	eor	r30, r0
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <atan2+0x3a>
    1be0:	e0 25       	eor	r30, r0
    1be2:	e0 64       	ori	r30, 0x40	; 64
    1be4:	0a c0       	rjmp	.+20     	; 0x1bfa <atan2+0x3a>
    1be6:	ef 63       	ori	r30, 0x3F	; 63
    1be8:	07 f8       	bld	r0, 7
    1bea:	00 94       	com	r0
    1bec:	07 fa       	bst	r0, 7
    1bee:	db 01       	movw	r26, r22
    1bf0:	b9 01       	movw	r22, r18
    1bf2:	9d 01       	movw	r18, r26
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	ca 01       	movw	r24, r20
    1bf8:	ad 01       	movw	r20, r26
    1bfa:	ef 93       	push	r30
    1bfc:	43 d0       	rcall	.+134    	; 0x1c84 <__divsf3_pse>
    1bfe:	45 d1       	rcall	.+650    	; 0x1e8a <__fp_round>
    1c00:	0a d0       	rcall	.+20     	; 0x1c16 <atan>
    1c02:	5f 91       	pop	r21
    1c04:	55 23       	and	r21, r21
    1c06:	31 f0       	breq	.+12     	; 0x1c14 <atan2+0x54>
    1c08:	2b ed       	ldi	r18, 0xDB	; 219
    1c0a:	3f e0       	ldi	r19, 0x0F	; 15
    1c0c:	49 e4       	ldi	r20, 0x49	; 73
    1c0e:	50 fd       	sbrc	r21, 0
    1c10:	49 ec       	ldi	r20, 0xC9	; 201
    1c12:	63 cf       	rjmp	.-314    	; 0x1ada <__addsf3>
    1c14:	08 95       	ret

00001c16 <atan>:
    1c16:	df 93       	push	r29
    1c18:	dd 27       	eor	r29, r29
    1c1a:	b9 2f       	mov	r27, r25
    1c1c:	bf 77       	andi	r27, 0x7F	; 127
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	16 16       	cp	r1, r22
    1c24:	17 06       	cpc	r1, r23
    1c26:	48 07       	cpc	r20, r24
    1c28:	5b 07       	cpc	r21, r27
    1c2a:	10 f4       	brcc	.+4      	; 0x1c30 <atan+0x1a>
    1c2c:	d9 2f       	mov	r29, r25
    1c2e:	67 d1       	rcall	.+718    	; 0x1efe <inverse>
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	7f 93       	push	r23
    1c36:	6f 93       	push	r22
    1c38:	0e d2       	rcall	.+1052   	; 0x2056 <square>
    1c3a:	e0 e7       	ldi	r30, 0x70	; 112
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	f2 d0       	rcall	.+484    	; 0x1e24 <__fp_powser>
    1c40:	24 d1       	rcall	.+584    	; 0x1e8a <__fp_round>
    1c42:	2f 91       	pop	r18
    1c44:	3f 91       	pop	r19
    1c46:	4f 91       	pop	r20
    1c48:	5f 91       	pop	r21
    1c4a:	6c d1       	rcall	.+728    	; 0x1f24 <__mulsf3x>
    1c4c:	dd 23       	and	r29, r29
    1c4e:	49 f0       	breq	.+18     	; 0x1c62 <atan+0x4c>
    1c50:	90 58       	subi	r25, 0x80	; 128
    1c52:	a2 ea       	ldi	r26, 0xA2	; 162
    1c54:	2a ed       	ldi	r18, 0xDA	; 218
    1c56:	3f e0       	ldi	r19, 0x0F	; 15
    1c58:	49 ec       	ldi	r20, 0xC9	; 201
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	d0 78       	andi	r29, 0x80	; 128
    1c5e:	5d 27       	eor	r21, r29
    1c60:	4d df       	rcall	.-358    	; 0x1afc <__addsf3x>
    1c62:	df 91       	pop	r29
    1c64:	12 c1       	rjmp	.+548    	; 0x1e8a <__fp_round>

00001c66 <__divsf3>:
    1c66:	0c d0       	rcall	.+24     	; 0x1c80 <__divsf3x>
    1c68:	10 c1       	rjmp	.+544    	; 0x1e8a <__fp_round>
    1c6a:	08 d1       	rcall	.+528    	; 0x1e7c <__fp_pscB>
    1c6c:	40 f0       	brcs	.+16     	; 0x1c7e <__divsf3+0x18>
    1c6e:	ff d0       	rcall	.+510    	; 0x1e6e <__fp_pscA>
    1c70:	30 f0       	brcs	.+12     	; 0x1c7e <__divsf3+0x18>
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <__divsf3+0x16>
    1c74:	5f 3f       	cpi	r21, 0xFF	; 255
    1c76:	19 f0       	breq	.+6      	; 0x1c7e <__divsf3+0x18>
    1c78:	cc c0       	rjmp	.+408    	; 0x1e12 <__fp_inf>
    1c7a:	51 11       	cpse	r21, r1
    1c7c:	3a c1       	rjmp	.+628    	; 0x1ef2 <__fp_szero>
    1c7e:	cf c0       	rjmp	.+414    	; 0x1e1e <__fp_nan>

00001c80 <__divsf3x>:
    1c80:	15 d1       	rcall	.+554    	; 0x1eac <__fp_split3>
    1c82:	98 f3       	brcs	.-26     	; 0x1c6a <__divsf3+0x4>

00001c84 <__divsf3_pse>:
    1c84:	99 23       	and	r25, r25
    1c86:	c9 f3       	breq	.-14     	; 0x1c7a <__divsf3+0x14>
    1c88:	55 23       	and	r21, r21
    1c8a:	b1 f3       	breq	.-20     	; 0x1c78 <__divsf3+0x12>
    1c8c:	95 1b       	sub	r25, r21
    1c8e:	55 0b       	sbc	r21, r21
    1c90:	bb 27       	eor	r27, r27
    1c92:	aa 27       	eor	r26, r26
    1c94:	62 17       	cp	r22, r18
    1c96:	73 07       	cpc	r23, r19
    1c98:	84 07       	cpc	r24, r20
    1c9a:	38 f0       	brcs	.+14     	; 0x1caa <__divsf3_pse+0x26>
    1c9c:	9f 5f       	subi	r25, 0xFF	; 255
    1c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	44 1f       	adc	r20, r20
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	a9 f3       	breq	.-22     	; 0x1c94 <__divsf3_pse+0x10>
    1caa:	33 d0       	rcall	.+102    	; 0x1d12 <__divsf3_pse+0x8e>
    1cac:	0e 2e       	mov	r0, r30
    1cae:	3a f0       	brmi	.+14     	; 0x1cbe <__divsf3_pse+0x3a>
    1cb0:	e0 e8       	ldi	r30, 0x80	; 128
    1cb2:	30 d0       	rcall	.+96     	; 0x1d14 <__divsf3_pse+0x90>
    1cb4:	91 50       	subi	r25, 0x01	; 1
    1cb6:	50 40       	sbci	r21, 0x00	; 0
    1cb8:	e6 95       	lsr	r30
    1cba:	00 1c       	adc	r0, r0
    1cbc:	ca f7       	brpl	.-14     	; 0x1cb0 <__divsf3_pse+0x2c>
    1cbe:	29 d0       	rcall	.+82     	; 0x1d12 <__divsf3_pse+0x8e>
    1cc0:	fe 2f       	mov	r31, r30
    1cc2:	27 d0       	rcall	.+78     	; 0x1d12 <__divsf3_pse+0x8e>
    1cc4:	66 0f       	add	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	26 17       	cp	r18, r22
    1cce:	37 07       	cpc	r19, r23
    1cd0:	48 07       	cpc	r20, r24
    1cd2:	ab 07       	cpc	r26, r27
    1cd4:	b0 e8       	ldi	r27, 0x80	; 128
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <__divsf3_pse+0x56>
    1cd8:	bb 0b       	sbc	r27, r27
    1cda:	80 2d       	mov	r24, r0
    1cdc:	bf 01       	movw	r22, r30
    1cde:	ff 27       	eor	r31, r31
    1ce0:	93 58       	subi	r25, 0x83	; 131
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	2a f0       	brmi	.+10     	; 0x1cf0 <__divsf3_pse+0x6c>
    1ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce8:	51 05       	cpc	r21, r1
    1cea:	68 f0       	brcs	.+26     	; 0x1d06 <__divsf3_pse+0x82>
    1cec:	92 c0       	rjmp	.+292    	; 0x1e12 <__fp_inf>
    1cee:	01 c1       	rjmp	.+514    	; 0x1ef2 <__fp_szero>
    1cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf2:	ec f3       	brlt	.-6      	; 0x1cee <__divsf3_pse+0x6a>
    1cf4:	98 3e       	cpi	r25, 0xE8	; 232
    1cf6:	dc f3       	brlt	.-10     	; 0x1cee <__divsf3_pse+0x6a>
    1cf8:	86 95       	lsr	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	b7 95       	ror	r27
    1d00:	f7 95       	ror	r31
    1d02:	9f 5f       	subi	r25, 0xFF	; 255
    1d04:	c9 f7       	brne	.-14     	; 0x1cf8 <__divsf3_pse+0x74>
    1d06:	88 0f       	add	r24, r24
    1d08:	91 1d       	adc	r25, r1
    1d0a:	96 95       	lsr	r25
    1d0c:	87 95       	ror	r24
    1d0e:	97 f9       	bld	r25, 7
    1d10:	08 95       	ret
    1d12:	e1 e0       	ldi	r30, 0x01	; 1
    1d14:	66 0f       	add	r22, r22
    1d16:	77 1f       	adc	r23, r23
    1d18:	88 1f       	adc	r24, r24
    1d1a:	bb 1f       	adc	r27, r27
    1d1c:	62 17       	cp	r22, r18
    1d1e:	73 07       	cpc	r23, r19
    1d20:	84 07       	cpc	r24, r20
    1d22:	ba 07       	cpc	r27, r26
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <__divsf3_pse+0xaa>
    1d26:	62 1b       	sub	r22, r18
    1d28:	73 0b       	sbc	r23, r19
    1d2a:	84 0b       	sbc	r24, r20
    1d2c:	ba 0b       	sbc	r27, r26
    1d2e:	ee 1f       	adc	r30, r30
    1d30:	88 f7       	brcc	.-30     	; 0x1d14 <__divsf3_pse+0x90>
    1d32:	e0 95       	com	r30
    1d34:	08 95       	ret

00001d36 <__fixsfsi>:
    1d36:	04 d0       	rcall	.+8      	; 0x1d40 <__fixunssfsi>
    1d38:	68 94       	set
    1d3a:	b1 11       	cpse	r27, r1
    1d3c:	da c0       	rjmp	.+436    	; 0x1ef2 <__fp_szero>
    1d3e:	08 95       	ret

00001d40 <__fixunssfsi>:
    1d40:	bd d0       	rcall	.+378    	; 0x1ebc <__fp_splitA>
    1d42:	88 f0       	brcs	.+34     	; 0x1d66 <__fixunssfsi+0x26>
    1d44:	9f 57       	subi	r25, 0x7F	; 127
    1d46:	90 f0       	brcs	.+36     	; 0x1d6c <__fixunssfsi+0x2c>
    1d48:	b9 2f       	mov	r27, r25
    1d4a:	99 27       	eor	r25, r25
    1d4c:	b7 51       	subi	r27, 0x17	; 23
    1d4e:	a0 f0       	brcs	.+40     	; 0x1d78 <__fixunssfsi+0x38>
    1d50:	d1 f0       	breq	.+52     	; 0x1d86 <__fixunssfsi+0x46>
    1d52:	66 0f       	add	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	1a f0       	brmi	.+6      	; 0x1d62 <__fixunssfsi+0x22>
    1d5c:	ba 95       	dec	r27
    1d5e:	c9 f7       	brne	.-14     	; 0x1d52 <__fixunssfsi+0x12>
    1d60:	12 c0       	rjmp	.+36     	; 0x1d86 <__fixunssfsi+0x46>
    1d62:	b1 30       	cpi	r27, 0x01	; 1
    1d64:	81 f0       	breq	.+32     	; 0x1d86 <__fixunssfsi+0x46>
    1d66:	c4 d0       	rcall	.+392    	; 0x1ef0 <__fp_zero>
    1d68:	b1 e0       	ldi	r27, 0x01	; 1
    1d6a:	08 95       	ret
    1d6c:	c1 c0       	rjmp	.+386    	; 0x1ef0 <__fp_zero>
    1d6e:	67 2f       	mov	r22, r23
    1d70:	78 2f       	mov	r23, r24
    1d72:	88 27       	eor	r24, r24
    1d74:	b8 5f       	subi	r27, 0xF8	; 248
    1d76:	39 f0       	breq	.+14     	; 0x1d86 <__fixunssfsi+0x46>
    1d78:	b9 3f       	cpi	r27, 0xF9	; 249
    1d7a:	cc f3       	brlt	.-14     	; 0x1d6e <__fixunssfsi+0x2e>
    1d7c:	86 95       	lsr	r24
    1d7e:	77 95       	ror	r23
    1d80:	67 95       	ror	r22
    1d82:	b3 95       	inc	r27
    1d84:	d9 f7       	brne	.-10     	; 0x1d7c <__fixunssfsi+0x3c>
    1d86:	3e f4       	brtc	.+14     	; 0x1d96 <__fixunssfsi+0x56>
    1d88:	90 95       	com	r25
    1d8a:	80 95       	com	r24
    1d8c:	70 95       	com	r23
    1d8e:	61 95       	neg	r22
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8f 4f       	sbci	r24, 0xFF	; 255
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	08 95       	ret

00001d98 <__floatunsisf>:
    1d98:	e8 94       	clt
    1d9a:	09 c0       	rjmp	.+18     	; 0x1dae <__floatsisf+0x12>

00001d9c <__floatsisf>:
    1d9c:	97 fb       	bst	r25, 7
    1d9e:	3e f4       	brtc	.+14     	; 0x1dae <__floatsisf+0x12>
    1da0:	90 95       	com	r25
    1da2:	80 95       	com	r24
    1da4:	70 95       	com	r23
    1da6:	61 95       	neg	r22
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	99 23       	and	r25, r25
    1db0:	a9 f0       	breq	.+42     	; 0x1ddc <__floatsisf+0x40>
    1db2:	f9 2f       	mov	r31, r25
    1db4:	96 e9       	ldi	r25, 0x96	; 150
    1db6:	bb 27       	eor	r27, r27
    1db8:	93 95       	inc	r25
    1dba:	f6 95       	lsr	r31
    1dbc:	87 95       	ror	r24
    1dbe:	77 95       	ror	r23
    1dc0:	67 95       	ror	r22
    1dc2:	b7 95       	ror	r27
    1dc4:	f1 11       	cpse	r31, r1
    1dc6:	f8 cf       	rjmp	.-16     	; 0x1db8 <__floatsisf+0x1c>
    1dc8:	fa f4       	brpl	.+62     	; 0x1e08 <__floatsisf+0x6c>
    1dca:	bb 0f       	add	r27, r27
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <__floatsisf+0x36>
    1dce:	60 ff       	sbrs	r22, 0
    1dd0:	1b c0       	rjmp	.+54     	; 0x1e08 <__floatsisf+0x6c>
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <__floatsisf+0x6c>
    1ddc:	88 23       	and	r24, r24
    1dde:	11 f0       	breq	.+4      	; 0x1de4 <__floatsisf+0x48>
    1de0:	96 e9       	ldi	r25, 0x96	; 150
    1de2:	11 c0       	rjmp	.+34     	; 0x1e06 <__floatsisf+0x6a>
    1de4:	77 23       	and	r23, r23
    1de6:	21 f0       	breq	.+8      	; 0x1df0 <__floatsisf+0x54>
    1de8:	9e e8       	ldi	r25, 0x8E	; 142
    1dea:	87 2f       	mov	r24, r23
    1dec:	76 2f       	mov	r23, r22
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <__floatsisf+0x5e>
    1df0:	66 23       	and	r22, r22
    1df2:	71 f0       	breq	.+28     	; 0x1e10 <__floatsisf+0x74>
    1df4:	96 e8       	ldi	r25, 0x86	; 134
    1df6:	86 2f       	mov	r24, r22
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	2a f0       	brmi	.+10     	; 0x1e08 <__floatsisf+0x6c>
    1dfe:	9a 95       	dec	r25
    1e00:	66 0f       	add	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	da f7       	brpl	.-10     	; 0x1dfe <__floatsisf+0x62>
    1e08:	88 0f       	add	r24, r24
    1e0a:	96 95       	lsr	r25
    1e0c:	87 95       	ror	r24
    1e0e:	97 f9       	bld	r25, 7
    1e10:	08 95       	ret

00001e12 <__fp_inf>:
    1e12:	97 f9       	bld	r25, 7
    1e14:	9f 67       	ori	r25, 0x7F	; 127
    1e16:	80 e8       	ldi	r24, 0x80	; 128
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	08 95       	ret

00001e1e <__fp_nan>:
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	80 ec       	ldi	r24, 0xC0	; 192
    1e22:	08 95       	ret

00001e24 <__fp_powser>:
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	1f 93       	push	r17
    1e2a:	0f 93       	push	r16
    1e2c:	ff 92       	push	r15
    1e2e:	ef 92       	push	r14
    1e30:	df 92       	push	r13
    1e32:	7b 01       	movw	r14, r22
    1e34:	8c 01       	movw	r16, r24
    1e36:	68 94       	set
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <__fp_powser+0x20>
    1e3a:	da 2e       	mov	r13, r26
    1e3c:	ef 01       	movw	r28, r30
    1e3e:	72 d0       	rcall	.+228    	; 0x1f24 <__mulsf3x>
    1e40:	fe 01       	movw	r30, r28
    1e42:	e8 94       	clt
    1e44:	a5 91       	lpm	r26, Z+
    1e46:	25 91       	lpm	r18, Z+
    1e48:	35 91       	lpm	r19, Z+
    1e4a:	45 91       	lpm	r20, Z+
    1e4c:	55 91       	lpm	r21, Z+
    1e4e:	ae f3       	brts	.-22     	; 0x1e3a <__fp_powser+0x16>
    1e50:	ef 01       	movw	r28, r30
    1e52:	54 de       	rcall	.-856    	; 0x1afc <__addsf3x>
    1e54:	fe 01       	movw	r30, r28
    1e56:	97 01       	movw	r18, r14
    1e58:	a8 01       	movw	r20, r16
    1e5a:	da 94       	dec	r13
    1e5c:	79 f7       	brne	.-34     	; 0x1e3c <__fp_powser+0x18>
    1e5e:	df 90       	pop	r13
    1e60:	ef 90       	pop	r14
    1e62:	ff 90       	pop	r15
    1e64:	0f 91       	pop	r16
    1e66:	1f 91       	pop	r17
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <__fp_pscA>:
    1e6e:	00 24       	eor	r0, r0
    1e70:	0a 94       	dec	r0
    1e72:	16 16       	cp	r1, r22
    1e74:	17 06       	cpc	r1, r23
    1e76:	18 06       	cpc	r1, r24
    1e78:	09 06       	cpc	r0, r25
    1e7a:	08 95       	ret

00001e7c <__fp_pscB>:
    1e7c:	00 24       	eor	r0, r0
    1e7e:	0a 94       	dec	r0
    1e80:	12 16       	cp	r1, r18
    1e82:	13 06       	cpc	r1, r19
    1e84:	14 06       	cpc	r1, r20
    1e86:	05 06       	cpc	r0, r21
    1e88:	08 95       	ret

00001e8a <__fp_round>:
    1e8a:	09 2e       	mov	r0, r25
    1e8c:	03 94       	inc	r0
    1e8e:	00 0c       	add	r0, r0
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <__fp_round+0xc>
    1e92:	88 23       	and	r24, r24
    1e94:	52 f0       	brmi	.+20     	; 0x1eaa <__fp_round+0x20>
    1e96:	bb 0f       	add	r27, r27
    1e98:	40 f4       	brcc	.+16     	; 0x1eaa <__fp_round+0x20>
    1e9a:	bf 2b       	or	r27, r31
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <__fp_round+0x18>
    1e9e:	60 ff       	sbrs	r22, 0
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <__fp_round+0x20>
    1ea2:	6f 5f       	subi	r22, 0xFF	; 255
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	08 95       	ret

00001eac <__fp_split3>:
    1eac:	57 fd       	sbrc	r21, 7
    1eae:	90 58       	subi	r25, 0x80	; 128
    1eb0:	44 0f       	add	r20, r20
    1eb2:	55 1f       	adc	r21, r21
    1eb4:	59 f0       	breq	.+22     	; 0x1ecc <__fp_splitA+0x10>
    1eb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb8:	71 f0       	breq	.+28     	; 0x1ed6 <__fp_splitA+0x1a>
    1eba:	47 95       	ror	r20

00001ebc <__fp_splitA>:
    1ebc:	88 0f       	add	r24, r24
    1ebe:	97 fb       	bst	r25, 7
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	61 f0       	breq	.+24     	; 0x1edc <__fp_splitA+0x20>
    1ec4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec6:	79 f0       	breq	.+30     	; 0x1ee6 <__fp_splitA+0x2a>
    1ec8:	87 95       	ror	r24
    1eca:	08 95       	ret
    1ecc:	12 16       	cp	r1, r18
    1ece:	13 06       	cpc	r1, r19
    1ed0:	14 06       	cpc	r1, r20
    1ed2:	55 1f       	adc	r21, r21
    1ed4:	f2 cf       	rjmp	.-28     	; 0x1eba <__fp_split3+0xe>
    1ed6:	46 95       	lsr	r20
    1ed8:	f1 df       	rcall	.-30     	; 0x1ebc <__fp_splitA>
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <__fp_splitA+0x30>
    1edc:	16 16       	cp	r1, r22
    1ede:	17 06       	cpc	r1, r23
    1ee0:	18 06       	cpc	r1, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	f1 cf       	rjmp	.-30     	; 0x1ec8 <__fp_splitA+0xc>
    1ee6:	86 95       	lsr	r24
    1ee8:	71 05       	cpc	r23, r1
    1eea:	61 05       	cpc	r22, r1
    1eec:	08 94       	sec
    1eee:	08 95       	ret

00001ef0 <__fp_zero>:
    1ef0:	e8 94       	clt

00001ef2 <__fp_szero>:
    1ef2:	bb 27       	eor	r27, r27
    1ef4:	66 27       	eor	r22, r22
    1ef6:	77 27       	eor	r23, r23
    1ef8:	cb 01       	movw	r24, r22
    1efa:	97 f9       	bld	r25, 7
    1efc:	08 95       	ret

00001efe <inverse>:
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	80 e8       	ldi	r24, 0x80	; 128
    1f08:	9f e3       	ldi	r25, 0x3F	; 63
    1f0a:	ad ce       	rjmp	.-678    	; 0x1c66 <__divsf3>

00001f0c <__mulsf3>:
    1f0c:	0b d0       	rcall	.+22     	; 0x1f24 <__mulsf3x>
    1f0e:	bd cf       	rjmp	.-134    	; 0x1e8a <__fp_round>
    1f10:	ae df       	rcall	.-164    	; 0x1e6e <__fp_pscA>
    1f12:	28 f0       	brcs	.+10     	; 0x1f1e <__mulsf3+0x12>
    1f14:	b3 df       	rcall	.-154    	; 0x1e7c <__fp_pscB>
    1f16:	18 f0       	brcs	.+6      	; 0x1f1e <__mulsf3+0x12>
    1f18:	95 23       	and	r25, r21
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <__mulsf3+0x12>
    1f1c:	7a cf       	rjmp	.-268    	; 0x1e12 <__fp_inf>
    1f1e:	7f cf       	rjmp	.-258    	; 0x1e1e <__fp_nan>
    1f20:	11 24       	eor	r1, r1
    1f22:	e7 cf       	rjmp	.-50     	; 0x1ef2 <__fp_szero>

00001f24 <__mulsf3x>:
    1f24:	c3 df       	rcall	.-122    	; 0x1eac <__fp_split3>
    1f26:	a0 f3       	brcs	.-24     	; 0x1f10 <__mulsf3+0x4>

00001f28 <__mulsf3_pse>:
    1f28:	95 9f       	mul	r25, r21
    1f2a:	d1 f3       	breq	.-12     	; 0x1f20 <__mulsf3+0x14>
    1f2c:	95 0f       	add	r25, r21
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	55 1f       	adc	r21, r21
    1f32:	62 9f       	mul	r22, r18
    1f34:	f0 01       	movw	r30, r0
    1f36:	72 9f       	mul	r23, r18
    1f38:	bb 27       	eor	r27, r27
    1f3a:	f0 0d       	add	r31, r0
    1f3c:	b1 1d       	adc	r27, r1
    1f3e:	63 9f       	mul	r22, r19
    1f40:	aa 27       	eor	r26, r26
    1f42:	f0 0d       	add	r31, r0
    1f44:	b1 1d       	adc	r27, r1
    1f46:	aa 1f       	adc	r26, r26
    1f48:	64 9f       	mul	r22, r20
    1f4a:	66 27       	eor	r22, r22
    1f4c:	b0 0d       	add	r27, r0
    1f4e:	a1 1d       	adc	r26, r1
    1f50:	66 1f       	adc	r22, r22
    1f52:	82 9f       	mul	r24, r18
    1f54:	22 27       	eor	r18, r18
    1f56:	b0 0d       	add	r27, r0
    1f58:	a1 1d       	adc	r26, r1
    1f5a:	62 1f       	adc	r22, r18
    1f5c:	73 9f       	mul	r23, r19
    1f5e:	b0 0d       	add	r27, r0
    1f60:	a1 1d       	adc	r26, r1
    1f62:	62 1f       	adc	r22, r18
    1f64:	83 9f       	mul	r24, r19
    1f66:	a0 0d       	add	r26, r0
    1f68:	61 1d       	adc	r22, r1
    1f6a:	22 1f       	adc	r18, r18
    1f6c:	74 9f       	mul	r23, r20
    1f6e:	33 27       	eor	r19, r19
    1f70:	a0 0d       	add	r26, r0
    1f72:	61 1d       	adc	r22, r1
    1f74:	23 1f       	adc	r18, r19
    1f76:	84 9f       	mul	r24, r20
    1f78:	60 0d       	add	r22, r0
    1f7a:	21 1d       	adc	r18, r1
    1f7c:	82 2f       	mov	r24, r18
    1f7e:	76 2f       	mov	r23, r22
    1f80:	6a 2f       	mov	r22, r26
    1f82:	11 24       	eor	r1, r1
    1f84:	9f 57       	subi	r25, 0x7F	; 127
    1f86:	50 40       	sbci	r21, 0x00	; 0
    1f88:	8a f0       	brmi	.+34     	; 0x1fac <__mulsf3_pse+0x84>
    1f8a:	e1 f0       	breq	.+56     	; 0x1fc4 <__mulsf3_pse+0x9c>
    1f8c:	88 23       	and	r24, r24
    1f8e:	4a f0       	brmi	.+18     	; 0x1fa2 <__mulsf3_pse+0x7a>
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	bb 1f       	adc	r27, r27
    1f96:	66 1f       	adc	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	91 50       	subi	r25, 0x01	; 1
    1f9e:	50 40       	sbci	r21, 0x00	; 0
    1fa0:	a9 f7       	brne	.-22     	; 0x1f8c <__mulsf3_pse+0x64>
    1fa2:	9e 3f       	cpi	r25, 0xFE	; 254
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	70 f0       	brcs	.+28     	; 0x1fc4 <__mulsf3_pse+0x9c>
    1fa8:	34 cf       	rjmp	.-408    	; 0x1e12 <__fp_inf>
    1faa:	a3 cf       	rjmp	.-186    	; 0x1ef2 <__fp_szero>
    1fac:	5f 3f       	cpi	r21, 0xFF	; 255
    1fae:	ec f3       	brlt	.-6      	; 0x1faa <__mulsf3_pse+0x82>
    1fb0:	98 3e       	cpi	r25, 0xE8	; 232
    1fb2:	dc f3       	brlt	.-10     	; 0x1faa <__mulsf3_pse+0x82>
    1fb4:	86 95       	lsr	r24
    1fb6:	77 95       	ror	r23
    1fb8:	67 95       	ror	r22
    1fba:	b7 95       	ror	r27
    1fbc:	f7 95       	ror	r31
    1fbe:	e7 95       	ror	r30
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
    1fc2:	c1 f7       	brne	.-16     	; 0x1fb4 <__mulsf3_pse+0x8c>
    1fc4:	fe 2b       	or	r31, r30
    1fc6:	88 0f       	add	r24, r24
    1fc8:	91 1d       	adc	r25, r1
    1fca:	96 95       	lsr	r25
    1fcc:	87 95       	ror	r24
    1fce:	97 f9       	bld	r25, 7
    1fd0:	08 95       	ret
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <__mulsf3_pse+0xb0>
    1fd4:	0e f4       	brtc	.+2      	; 0x1fd8 <__mulsf3_pse+0xb0>
    1fd6:	23 cf       	rjmp	.-442    	; 0x1e1e <__fp_nan>
    1fd8:	41 c0       	rjmp	.+130    	; 0x205c <__fp_mpack>

00001fda <sqrt>:
    1fda:	70 df       	rcall	.-288    	; 0x1ebc <__fp_splitA>
    1fdc:	d0 f3       	brcs	.-12     	; 0x1fd2 <__mulsf3_pse+0xaa>
    1fde:	99 23       	and	r25, r25
    1fe0:	d9 f3       	breq	.-10     	; 0x1fd8 <__mulsf3_pse+0xb0>
    1fe2:	ce f3       	brts	.-14     	; 0x1fd6 <__mulsf3_pse+0xae>
    1fe4:	9f 57       	subi	r25, 0x7F	; 127
    1fe6:	55 0b       	sbc	r21, r21
    1fe8:	87 ff       	sbrs	r24, 7
    1fea:	46 d0       	rcall	.+140    	; 0x2078 <__fp_norm2>
    1fec:	00 24       	eor	r0, r0
    1fee:	a0 e6       	ldi	r26, 0x60	; 96
    1ff0:	40 ea       	ldi	r20, 0xA0	; 160
    1ff2:	90 01       	movw	r18, r0
    1ff4:	80 58       	subi	r24, 0x80	; 128
    1ff6:	56 95       	lsr	r21
    1ff8:	97 95       	ror	r25
    1ffa:	28 f4       	brcc	.+10     	; 0x2006 <sqrt+0x2c>
    1ffc:	80 5c       	subi	r24, 0xC0	; 192
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	20 f0       	brcs	.+8      	; 0x200e <sqrt+0x34>
    2006:	26 17       	cp	r18, r22
    2008:	37 07       	cpc	r19, r23
    200a:	48 07       	cpc	r20, r24
    200c:	30 f4       	brcc	.+12     	; 0x201a <sqrt+0x40>
    200e:	62 1b       	sub	r22, r18
    2010:	73 0b       	sbc	r23, r19
    2012:	84 0b       	sbc	r24, r20
    2014:	20 29       	or	r18, r0
    2016:	31 29       	or	r19, r1
    2018:	4a 2b       	or	r20, r26
    201a:	a6 95       	lsr	r26
    201c:	17 94       	ror	r1
    201e:	07 94       	ror	r0
    2020:	20 25       	eor	r18, r0
    2022:	31 25       	eor	r19, r1
    2024:	4a 27       	eor	r20, r26
    2026:	58 f7       	brcc	.-42     	; 0x1ffe <sqrt+0x24>
    2028:	66 0f       	add	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	20 f0       	brcs	.+8      	; 0x2038 <sqrt+0x5e>
    2030:	26 17       	cp	r18, r22
    2032:	37 07       	cpc	r19, r23
    2034:	48 07       	cpc	r20, r24
    2036:	30 f4       	brcc	.+12     	; 0x2044 <sqrt+0x6a>
    2038:	62 0b       	sbc	r22, r18
    203a:	73 0b       	sbc	r23, r19
    203c:	84 0b       	sbc	r24, r20
    203e:	20 0d       	add	r18, r0
    2040:	31 1d       	adc	r19, r1
    2042:	41 1d       	adc	r20, r1
    2044:	a0 95       	com	r26
    2046:	81 f7       	brne	.-32     	; 0x2028 <sqrt+0x4e>
    2048:	b9 01       	movw	r22, r18
    204a:	84 2f       	mov	r24, r20
    204c:	91 58       	subi	r25, 0x81	; 129
    204e:	88 0f       	add	r24, r24
    2050:	96 95       	lsr	r25
    2052:	87 95       	ror	r24
    2054:	08 95       	ret

00002056 <square>:
    2056:	9b 01       	movw	r18, r22
    2058:	ac 01       	movw	r20, r24
    205a:	58 cf       	rjmp	.-336    	; 0x1f0c <__mulsf3>

0000205c <__fp_mpack>:
    205c:	9f 3f       	cpi	r25, 0xFF	; 255
    205e:	31 f0       	breq	.+12     	; 0x206c <__fp_mpack_finite+0xc>

00002060 <__fp_mpack_finite>:
    2060:	91 50       	subi	r25, 0x01	; 1
    2062:	20 f4       	brcc	.+8      	; 0x206c <__fp_mpack_finite+0xc>
    2064:	87 95       	ror	r24
    2066:	77 95       	ror	r23
    2068:	67 95       	ror	r22
    206a:	b7 95       	ror	r27
    206c:	88 0f       	add	r24, r24
    206e:	91 1d       	adc	r25, r1
    2070:	96 95       	lsr	r25
    2072:	87 95       	ror	r24
    2074:	97 f9       	bld	r25, 7
    2076:	08 95       	ret

00002078 <__fp_norm2>:
    2078:	91 50       	subi	r25, 0x01	; 1
    207a:	50 40       	sbci	r21, 0x00	; 0
    207c:	66 0f       	add	r22, r22
    207e:	77 1f       	adc	r23, r23
    2080:	88 1f       	adc	r24, r24
    2082:	d2 f7       	brpl	.-12     	; 0x2078 <__fp_norm2>
    2084:	08 95       	ret

00002086 <__divmodhi4>:
    2086:	97 fb       	bst	r25, 7
    2088:	07 2e       	mov	r0, r23
    208a:	16 f4       	brtc	.+4      	; 0x2090 <__divmodhi4+0xa>
    208c:	00 94       	com	r0
    208e:	07 d0       	rcall	.+14     	; 0x209e <__divmodhi4_neg1>
    2090:	77 fd       	sbrc	r23, 7
    2092:	09 d0       	rcall	.+18     	; 0x20a6 <__divmodhi4_neg2>
    2094:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
    2098:	07 fc       	sbrc	r0, 7
    209a:	05 d0       	rcall	.+10     	; 0x20a6 <__divmodhi4_neg2>
    209c:	3e f4       	brtc	.+14     	; 0x20ac <__divmodhi4_exit>

0000209e <__divmodhi4_neg1>:
    209e:	90 95       	com	r25
    20a0:	81 95       	neg	r24
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	08 95       	ret

000020a6 <__divmodhi4_neg2>:
    20a6:	70 95       	com	r23
    20a8:	61 95       	neg	r22
    20aa:	7f 4f       	sbci	r23, 0xFF	; 255

000020ac <__divmodhi4_exit>:
    20ac:	08 95       	ret

000020ae <__divmodsi4>:
    20ae:	05 2e       	mov	r0, r21
    20b0:	97 fb       	bst	r25, 7
    20b2:	1e f4       	brtc	.+6      	; 0x20ba <__divmodsi4+0xc>
    20b4:	00 94       	com	r0
    20b6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__negsi2>
    20ba:	57 fd       	sbrc	r21, 7
    20bc:	07 d0       	rcall	.+14     	; 0x20cc <__divmodsi4_neg2>
    20be:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodsi4>
    20c2:	07 fc       	sbrc	r0, 7
    20c4:	03 d0       	rcall	.+6      	; 0x20cc <__divmodsi4_neg2>
    20c6:	4e f4       	brtc	.+18     	; 0x20da <__divmodsi4_exit>
    20c8:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__negsi2>

000020cc <__divmodsi4_neg2>:
    20cc:	50 95       	com	r21
    20ce:	40 95       	com	r20
    20d0:	30 95       	com	r19
    20d2:	21 95       	neg	r18
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	4f 4f       	sbci	r20, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255

000020da <__divmodsi4_exit>:
    20da:	08 95       	ret

000020dc <__negsi2>:
    20dc:	90 95       	com	r25
    20de:	80 95       	com	r24
    20e0:	70 95       	com	r23
    20e2:	61 95       	neg	r22
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	08 95       	ret

000020ec <__udivmodhi4>:
    20ec:	aa 1b       	sub	r26, r26
    20ee:	bb 1b       	sub	r27, r27
    20f0:	51 e1       	ldi	r21, 0x11	; 17
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <__udivmodhi4_ep>

000020f4 <__udivmodhi4_loop>:
    20f4:	aa 1f       	adc	r26, r26
    20f6:	bb 1f       	adc	r27, r27
    20f8:	a6 17       	cp	r26, r22
    20fa:	b7 07       	cpc	r27, r23
    20fc:	10 f0       	brcs	.+4      	; 0x2102 <__udivmodhi4_ep>
    20fe:	a6 1b       	sub	r26, r22
    2100:	b7 0b       	sbc	r27, r23

00002102 <__udivmodhi4_ep>:
    2102:	88 1f       	adc	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	5a 95       	dec	r21
    2108:	a9 f7       	brne	.-22     	; 0x20f4 <__udivmodhi4_loop>
    210a:	80 95       	com	r24
    210c:	90 95       	com	r25
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	08 95       	ret

00002114 <__udivmodsi4>:
    2114:	a1 e2       	ldi	r26, 0x21	; 33
    2116:	1a 2e       	mov	r1, r26
    2118:	aa 1b       	sub	r26, r26
    211a:	bb 1b       	sub	r27, r27
    211c:	fd 01       	movw	r30, r26
    211e:	0d c0       	rjmp	.+26     	; 0x213a <__udivmodsi4_ep>

00002120 <__udivmodsi4_loop>:
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	ee 1f       	adc	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	a2 17       	cp	r26, r18
    212a:	b3 07       	cpc	r27, r19
    212c:	e4 07       	cpc	r30, r20
    212e:	f5 07       	cpc	r31, r21
    2130:	20 f0       	brcs	.+8      	; 0x213a <__udivmodsi4_ep>
    2132:	a2 1b       	sub	r26, r18
    2134:	b3 0b       	sbc	r27, r19
    2136:	e4 0b       	sbc	r30, r20
    2138:	f5 0b       	sbc	r31, r21

0000213a <__udivmodsi4_ep>:
    213a:	66 1f       	adc	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	1a 94       	dec	r1
    2144:	69 f7       	brne	.-38     	; 0x2120 <__udivmodsi4_loop>
    2146:	60 95       	com	r22
    2148:	70 95       	com	r23
    214a:	80 95       	com	r24
    214c:	90 95       	com	r25
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	bd 01       	movw	r22, r26
    2154:	cf 01       	movw	r24, r30
    2156:	08 95       	ret

00002158 <malloc>:
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	82 30       	cpi	r24, 0x02	; 2
    215e:	91 05       	cpc	r25, r1
    2160:	10 f4       	brcc	.+4      	; 0x2166 <malloc+0xe>
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	e0 91 29 02 	lds	r30, 0x0229
    216a:	f0 91 2a 02 	lds	r31, 0x022A
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	30 97       	sbiw	r30, 0x00	; 0
    2178:	39 f1       	breq	.+78     	; 0x21c8 <malloc+0x70>
    217a:	40 81       	ld	r20, Z
    217c:	51 81       	ldd	r21, Z+1	; 0x01
    217e:	48 17       	cp	r20, r24
    2180:	59 07       	cpc	r21, r25
    2182:	b8 f0       	brcs	.+46     	; 0x21b2 <malloc+0x5a>
    2184:	48 17       	cp	r20, r24
    2186:	59 07       	cpc	r21, r25
    2188:	71 f4       	brne	.+28     	; 0x21a6 <malloc+0x4e>
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	10 97       	sbiw	r26, 0x00	; 0
    2190:	29 f0       	breq	.+10     	; 0x219c <malloc+0x44>
    2192:	13 96       	adiw	r26, 0x03	; 3
    2194:	9c 93       	st	X, r25
    2196:	8e 93       	st	-X, r24
    2198:	12 97       	sbiw	r26, 0x02	; 2
    219a:	2c c0       	rjmp	.+88     	; 0x21f4 <malloc+0x9c>
    219c:	90 93 2a 02 	sts	0x022A, r25
    21a0:	80 93 29 02 	sts	0x0229, r24
    21a4:	27 c0       	rjmp	.+78     	; 0x21f4 <malloc+0x9c>
    21a6:	21 15       	cp	r18, r1
    21a8:	31 05       	cpc	r19, r1
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <malloc+0x60>
    21ac:	42 17       	cp	r20, r18
    21ae:	53 07       	cpc	r21, r19
    21b0:	18 f0       	brcs	.+6      	; 0x21b8 <malloc+0x60>
    21b2:	a9 01       	movw	r20, r18
    21b4:	db 01       	movw	r26, r22
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <malloc+0x62>
    21b8:	ef 01       	movw	r28, r30
    21ba:	9a 01       	movw	r18, r20
    21bc:	bd 01       	movw	r22, r26
    21be:	df 01       	movw	r26, r30
    21c0:	02 80       	ldd	r0, Z+2	; 0x02
    21c2:	f3 81       	ldd	r31, Z+3	; 0x03
    21c4:	e0 2d       	mov	r30, r0
    21c6:	d7 cf       	rjmp	.-82     	; 0x2176 <malloc+0x1e>
    21c8:	21 15       	cp	r18, r1
    21ca:	31 05       	cpc	r19, r1
    21cc:	f9 f0       	breq	.+62     	; 0x220c <malloc+0xb4>
    21ce:	28 1b       	sub	r18, r24
    21d0:	39 0b       	sbc	r19, r25
    21d2:	24 30       	cpi	r18, 0x04	; 4
    21d4:	31 05       	cpc	r19, r1
    21d6:	80 f4       	brcc	.+32     	; 0x21f8 <malloc+0xa0>
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	61 15       	cp	r22, r1
    21de:	71 05       	cpc	r23, r1
    21e0:	21 f0       	breq	.+8      	; 0x21ea <malloc+0x92>
    21e2:	fb 01       	movw	r30, r22
    21e4:	93 83       	std	Z+3, r25	; 0x03
    21e6:	82 83       	std	Z+2, r24	; 0x02
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <malloc+0x9a>
    21ea:	90 93 2a 02 	sts	0x022A, r25
    21ee:	80 93 29 02 	sts	0x0229, r24
    21f2:	fe 01       	movw	r30, r28
    21f4:	32 96       	adiw	r30, 0x02	; 2
    21f6:	44 c0       	rjmp	.+136    	; 0x2280 <malloc+0x128>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	81 93       	st	Z+, r24
    2200:	91 93       	st	Z+, r25
    2202:	22 50       	subi	r18, 0x02	; 2
    2204:	31 09       	sbc	r19, r1
    2206:	39 83       	std	Y+1, r19	; 0x01
    2208:	28 83       	st	Y, r18
    220a:	3a c0       	rjmp	.+116    	; 0x2280 <malloc+0x128>
    220c:	20 91 27 02 	lds	r18, 0x0227
    2210:	30 91 28 02 	lds	r19, 0x0228
    2214:	23 2b       	or	r18, r19
    2216:	41 f4       	brne	.+16     	; 0x2228 <malloc+0xd0>
    2218:	20 91 02 01 	lds	r18, 0x0102
    221c:	30 91 03 01 	lds	r19, 0x0103
    2220:	30 93 28 02 	sts	0x0228, r19
    2224:	20 93 27 02 	sts	0x0227, r18
    2228:	20 91 00 01 	lds	r18, 0x0100
    222c:	30 91 01 01 	lds	r19, 0x0101
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	41 f4       	brne	.+16     	; 0x2246 <malloc+0xee>
    2236:	2d b7       	in	r18, 0x3d	; 61
    2238:	3e b7       	in	r19, 0x3e	; 62
    223a:	40 91 04 01 	lds	r20, 0x0104
    223e:	50 91 05 01 	lds	r21, 0x0105
    2242:	24 1b       	sub	r18, r20
    2244:	35 0b       	sbc	r19, r21
    2246:	e0 91 27 02 	lds	r30, 0x0227
    224a:	f0 91 28 02 	lds	r31, 0x0228
    224e:	e2 17       	cp	r30, r18
    2250:	f3 07       	cpc	r31, r19
    2252:	a0 f4       	brcc	.+40     	; 0x227c <malloc+0x124>
    2254:	2e 1b       	sub	r18, r30
    2256:	3f 0b       	sbc	r19, r31
    2258:	28 17       	cp	r18, r24
    225a:	39 07       	cpc	r19, r25
    225c:	78 f0       	brcs	.+30     	; 0x227c <malloc+0x124>
    225e:	ac 01       	movw	r20, r24
    2260:	4e 5f       	subi	r20, 0xFE	; 254
    2262:	5f 4f       	sbci	r21, 0xFF	; 255
    2264:	24 17       	cp	r18, r20
    2266:	35 07       	cpc	r19, r21
    2268:	48 f0       	brcs	.+18     	; 0x227c <malloc+0x124>
    226a:	4e 0f       	add	r20, r30
    226c:	5f 1f       	adc	r21, r31
    226e:	50 93 28 02 	sts	0x0228, r21
    2272:	40 93 27 02 	sts	0x0227, r20
    2276:	81 93       	st	Z+, r24
    2278:	91 93       	st	Z+, r25
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <malloc+0x128>
    227c:	e0 e0       	ldi	r30, 0x00	; 0
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	cf 01       	movw	r24, r30
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <free>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	09 f4       	brne	.+2      	; 0x2292 <free+0xa>
    2290:	87 c0       	rjmp	.+270    	; 0x23a0 <free+0x118>
    2292:	fc 01       	movw	r30, r24
    2294:	32 97       	sbiw	r30, 0x02	; 2
    2296:	13 82       	std	Z+3, r1	; 0x03
    2298:	12 82       	std	Z+2, r1	; 0x02
    229a:	c0 91 29 02 	lds	r28, 0x0229
    229e:	d0 91 2a 02 	lds	r29, 0x022A
    22a2:	20 97       	sbiw	r28, 0x00	; 0
    22a4:	81 f4       	brne	.+32     	; 0x22c6 <free+0x3e>
    22a6:	20 81       	ld	r18, Z
    22a8:	31 81       	ldd	r19, Z+1	; 0x01
    22aa:	28 0f       	add	r18, r24
    22ac:	39 1f       	adc	r19, r25
    22ae:	80 91 27 02 	lds	r24, 0x0227
    22b2:	90 91 28 02 	lds	r25, 0x0228
    22b6:	82 17       	cp	r24, r18
    22b8:	93 07       	cpc	r25, r19
    22ba:	79 f5       	brne	.+94     	; 0x231a <free+0x92>
    22bc:	f0 93 28 02 	sts	0x0228, r31
    22c0:	e0 93 27 02 	sts	0x0227, r30
    22c4:	6d c0       	rjmp	.+218    	; 0x23a0 <free+0x118>
    22c6:	de 01       	movw	r26, r28
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	ae 17       	cp	r26, r30
    22ce:	bf 07       	cpc	r27, r31
    22d0:	50 f4       	brcc	.+20     	; 0x22e6 <free+0x5e>
    22d2:	12 96       	adiw	r26, 0x02	; 2
    22d4:	4d 91       	ld	r20, X+
    22d6:	5c 91       	ld	r21, X
    22d8:	13 97       	sbiw	r26, 0x03	; 3
    22da:	9d 01       	movw	r18, r26
    22dc:	41 15       	cp	r20, r1
    22de:	51 05       	cpc	r21, r1
    22e0:	09 f1       	breq	.+66     	; 0x2324 <free+0x9c>
    22e2:	da 01       	movw	r26, r20
    22e4:	f3 cf       	rjmp	.-26     	; 0x22cc <free+0x44>
    22e6:	b3 83       	std	Z+3, r27	; 0x03
    22e8:	a2 83       	std	Z+2, r26	; 0x02
    22ea:	40 81       	ld	r20, Z
    22ec:	51 81       	ldd	r21, Z+1	; 0x01
    22ee:	84 0f       	add	r24, r20
    22f0:	95 1f       	adc	r25, r21
    22f2:	8a 17       	cp	r24, r26
    22f4:	9b 07       	cpc	r25, r27
    22f6:	71 f4       	brne	.+28     	; 0x2314 <free+0x8c>
    22f8:	8d 91       	ld	r24, X+
    22fa:	9c 91       	ld	r25, X
    22fc:	11 97       	sbiw	r26, 0x01	; 1
    22fe:	84 0f       	add	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	02 96       	adiw	r24, 0x02	; 2
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
    2308:	12 96       	adiw	r26, 0x02	; 2
    230a:	8d 91       	ld	r24, X+
    230c:	9c 91       	ld	r25, X
    230e:	13 97       	sbiw	r26, 0x03	; 3
    2310:	93 83       	std	Z+3, r25	; 0x03
    2312:	82 83       	std	Z+2, r24	; 0x02
    2314:	21 15       	cp	r18, r1
    2316:	31 05       	cpc	r19, r1
    2318:	29 f4       	brne	.+10     	; 0x2324 <free+0x9c>
    231a:	f0 93 2a 02 	sts	0x022A, r31
    231e:	e0 93 29 02 	sts	0x0229, r30
    2322:	3e c0       	rjmp	.+124    	; 0x23a0 <free+0x118>
    2324:	d9 01       	movw	r26, r18
    2326:	13 96       	adiw	r26, 0x03	; 3
    2328:	fc 93       	st	X, r31
    232a:	ee 93       	st	-X, r30
    232c:	12 97       	sbiw	r26, 0x02	; 2
    232e:	4d 91       	ld	r20, X+
    2330:	5d 91       	ld	r21, X+
    2332:	a4 0f       	add	r26, r20
    2334:	b5 1f       	adc	r27, r21
    2336:	ea 17       	cp	r30, r26
    2338:	fb 07       	cpc	r31, r27
    233a:	79 f4       	brne	.+30     	; 0x235a <free+0xd2>
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	84 0f       	add	r24, r20
    2342:	95 1f       	adc	r25, r21
    2344:	02 96       	adiw	r24, 0x02	; 2
    2346:	d9 01       	movw	r26, r18
    2348:	11 96       	adiw	r26, 0x01	; 1
    234a:	9c 93       	st	X, r25
    234c:	8e 93       	st	-X, r24
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	13 96       	adiw	r26, 0x03	; 3
    2354:	9c 93       	st	X, r25
    2356:	8e 93       	st	-X, r24
    2358:	12 97       	sbiw	r26, 0x02	; 2
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	19 f0       	breq	.+6      	; 0x236c <free+0xe4>
    2366:	fe 01       	movw	r30, r28
    2368:	ec 01       	movw	r28, r24
    236a:	f9 cf       	rjmp	.-14     	; 0x235e <free+0xd6>
    236c:	ce 01       	movw	r24, r28
    236e:	02 96       	adiw	r24, 0x02	; 2
    2370:	28 81       	ld	r18, Y
    2372:	39 81       	ldd	r19, Y+1	; 0x01
    2374:	82 0f       	add	r24, r18
    2376:	93 1f       	adc	r25, r19
    2378:	20 91 27 02 	lds	r18, 0x0227
    237c:	30 91 28 02 	lds	r19, 0x0228
    2380:	28 17       	cp	r18, r24
    2382:	39 07       	cpc	r19, r25
    2384:	69 f4       	brne	.+26     	; 0x23a0 <free+0x118>
    2386:	30 97       	sbiw	r30, 0x00	; 0
    2388:	29 f4       	brne	.+10     	; 0x2394 <free+0x10c>
    238a:	10 92 2a 02 	sts	0x022A, r1
    238e:	10 92 29 02 	sts	0x0229, r1
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <free+0x110>
    2394:	13 82       	std	Z+3, r1	; 0x03
    2396:	12 82       	std	Z+2, r1	; 0x02
    2398:	d0 93 28 02 	sts	0x0228, r29
    239c:	c0 93 27 02 	sts	0x0227, r28
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <realloc>:
    23a6:	a0 e0       	ldi	r26, 0x00	; 0
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e9 ed       	ldi	r30, 0xD9	; 217
    23ac:	f1 e1       	ldi	r31, 0x11	; 17
    23ae:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__prologue_saves__+0x8>
    23b2:	ec 01       	movw	r28, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	20 97       	sbiw	r28, 0x00	; 0
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <realloc+0x1a>
    23ba:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
    23be:	b8 c0       	rjmp	.+368    	; 0x2530 <realloc+0x18a>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e6 0f       	add	r30, r22
    23c4:	f7 1f       	adc	r31, r23
    23c6:	9e 01       	movw	r18, r28
    23c8:	22 50       	subi	r18, 0x02	; 2
    23ca:	31 09       	sbc	r19, r1
    23cc:	e2 17       	cp	r30, r18
    23ce:	f3 07       	cpc	r31, r19
    23d0:	08 f4       	brcc	.+2      	; 0x23d4 <realloc+0x2e>
    23d2:	ac c0       	rjmp	.+344    	; 0x252c <realloc+0x186>
    23d4:	d9 01       	movw	r26, r18
    23d6:	0d 91       	ld	r16, X+
    23d8:	1c 91       	ld	r17, X
    23da:	11 97       	sbiw	r26, 0x01	; 1
    23dc:	06 17       	cp	r16, r22
    23de:	17 07       	cpc	r17, r23
    23e0:	b8 f0       	brcs	.+46     	; 0x2410 <realloc+0x6a>
    23e2:	05 30       	cpi	r16, 0x05	; 5
    23e4:	11 05       	cpc	r17, r1
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <realloc+0x44>
    23e8:	9f c0       	rjmp	.+318    	; 0x2528 <realloc+0x182>
    23ea:	a8 01       	movw	r20, r16
    23ec:	44 50       	subi	r20, 0x04	; 4
    23ee:	51 09       	sbc	r21, r1
    23f0:	46 17       	cp	r20, r22
    23f2:	57 07       	cpc	r21, r23
    23f4:	08 f4       	brcc	.+2      	; 0x23f8 <realloc+0x52>
    23f6:	98 c0       	rjmp	.+304    	; 0x2528 <realloc+0x182>
    23f8:	02 50       	subi	r16, 0x02	; 2
    23fa:	11 09       	sbc	r17, r1
    23fc:	06 1b       	sub	r16, r22
    23fe:	17 0b       	sbc	r17, r23
    2400:	01 93       	st	Z+, r16
    2402:	11 93       	st	Z+, r17
    2404:	6d 93       	st	X+, r22
    2406:	7c 93       	st	X, r23
    2408:	cf 01       	movw	r24, r30
    240a:	0e 94 44 11 	call	0x2288	; 0x2288 <free>
    240e:	8c c0       	rjmp	.+280    	; 0x2528 <realloc+0x182>
    2410:	5b 01       	movw	r10, r22
    2412:	a0 1a       	sub	r10, r16
    2414:	b1 0a       	sbc	r11, r17
    2416:	4e 01       	movw	r8, r28
    2418:	80 0e       	add	r8, r16
    241a:	91 1e       	adc	r9, r17
    241c:	a0 91 29 02 	lds	r26, 0x0229
    2420:	b0 91 2a 02 	lds	r27, 0x022A
    2424:	61 2c       	mov	r6, r1
    2426:	71 2c       	mov	r7, r1
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	10 97       	sbiw	r26, 0x00	; 0
    242e:	09 f4       	brne	.+2      	; 0x2432 <realloc+0x8c>
    2430:	49 c0       	rjmp	.+146    	; 0x24c4 <realloc+0x11e>
    2432:	a8 15       	cp	r26, r8
    2434:	b9 05       	cpc	r27, r9
    2436:	c9 f5       	brne	.+114    	; 0x24aa <realloc+0x104>
    2438:	ed 90       	ld	r14, X+
    243a:	fc 90       	ld	r15, X
    243c:	11 97       	sbiw	r26, 0x01	; 1
    243e:	67 01       	movw	r12, r14
    2440:	42 e0       	ldi	r20, 0x02	; 2
    2442:	c4 0e       	add	r12, r20
    2444:	d1 1c       	adc	r13, r1
    2446:	ca 14       	cp	r12, r10
    2448:	db 04       	cpc	r13, r11
    244a:	78 f1       	brcs	.+94     	; 0x24aa <realloc+0x104>
    244c:	47 01       	movw	r8, r14
    244e:	8a 18       	sub	r8, r10
    2450:	9b 08       	sbc	r9, r11
    2452:	64 01       	movw	r12, r8
    2454:	42 e0       	ldi	r20, 0x02	; 2
    2456:	c4 0e       	add	r12, r20
    2458:	d1 1c       	adc	r13, r1
    245a:	12 96       	adiw	r26, 0x02	; 2
    245c:	bc 90       	ld	r11, X
    245e:	12 97       	sbiw	r26, 0x02	; 2
    2460:	13 96       	adiw	r26, 0x03	; 3
    2462:	ac 91       	ld	r26, X
    2464:	b5 e0       	ldi	r27, 0x05	; 5
    2466:	cb 16       	cp	r12, r27
    2468:	d1 04       	cpc	r13, r1
    246a:	40 f0       	brcs	.+16     	; 0x247c <realloc+0xd6>
    246c:	b2 82       	std	Z+2, r11	; 0x02
    246e:	a3 83       	std	Z+3, r26	; 0x03
    2470:	91 82       	std	Z+1, r9	; 0x01
    2472:	80 82       	st	Z, r8
    2474:	d9 01       	movw	r26, r18
    2476:	8d 93       	st	X+, r24
    2478:	9c 93       	st	X, r25
    247a:	09 c0       	rjmp	.+18     	; 0x248e <realloc+0xe8>
    247c:	0e 5f       	subi	r16, 0xFE	; 254
    247e:	1f 4f       	sbci	r17, 0xFF	; 255
    2480:	0e 0d       	add	r16, r14
    2482:	1f 1d       	adc	r17, r15
    2484:	f9 01       	movw	r30, r18
    2486:	11 83       	std	Z+1, r17	; 0x01
    2488:	00 83       	st	Z, r16
    248a:	eb 2d       	mov	r30, r11
    248c:	fa 2f       	mov	r31, r26
    248e:	61 15       	cp	r22, r1
    2490:	71 05       	cpc	r23, r1
    2492:	31 f0       	breq	.+12     	; 0x24a0 <realloc+0xfa>
    2494:	db 01       	movw	r26, r22
    2496:	13 96       	adiw	r26, 0x03	; 3
    2498:	fc 93       	st	X, r31
    249a:	ee 93       	st	-X, r30
    249c:	12 97       	sbiw	r26, 0x02	; 2
    249e:	44 c0       	rjmp	.+136    	; 0x2528 <realloc+0x182>
    24a0:	f0 93 2a 02 	sts	0x022A, r31
    24a4:	e0 93 29 02 	sts	0x0229, r30
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <realloc+0x182>
    24aa:	6d 91       	ld	r22, X+
    24ac:	7c 91       	ld	r23, X
    24ae:	11 97       	sbiw	r26, 0x01	; 1
    24b0:	66 16       	cp	r6, r22
    24b2:	77 06       	cpc	r7, r23
    24b4:	08 f4       	brcc	.+2      	; 0x24b8 <realloc+0x112>
    24b6:	3b 01       	movw	r6, r22
    24b8:	bd 01       	movw	r22, r26
    24ba:	12 96       	adiw	r26, 0x02	; 2
    24bc:	0d 90       	ld	r0, X+
    24be:	bc 91       	ld	r27, X
    24c0:	a0 2d       	mov	r26, r0
    24c2:	b4 cf       	rjmp	.-152    	; 0x242c <realloc+0x86>
    24c4:	60 91 27 02 	lds	r22, 0x0227
    24c8:	70 91 28 02 	lds	r23, 0x0228
    24cc:	68 15       	cp	r22, r8
    24ce:	79 05       	cpc	r23, r9
    24d0:	e9 f4       	brne	.+58     	; 0x250c <realloc+0x166>
    24d2:	68 16       	cp	r6, r24
    24d4:	79 06       	cpc	r7, r25
    24d6:	d0 f4       	brcc	.+52     	; 0x250c <realloc+0x166>
    24d8:	40 91 00 01 	lds	r20, 0x0100
    24dc:	50 91 01 01 	lds	r21, 0x0101
    24e0:	41 15       	cp	r20, r1
    24e2:	51 05       	cpc	r21, r1
    24e4:	41 f4       	brne	.+16     	; 0x24f6 <realloc+0x150>
    24e6:	4d b7       	in	r20, 0x3d	; 61
    24e8:	5e b7       	in	r21, 0x3e	; 62
    24ea:	60 91 04 01 	lds	r22, 0x0104
    24ee:	70 91 05 01 	lds	r23, 0x0105
    24f2:	46 1b       	sub	r20, r22
    24f4:	57 0b       	sbc	r21, r23
    24f6:	e4 17       	cp	r30, r20
    24f8:	f5 07       	cpc	r31, r21
    24fa:	c0 f4       	brcc	.+48     	; 0x252c <realloc+0x186>
    24fc:	f0 93 28 02 	sts	0x0228, r31
    2500:	e0 93 27 02 	sts	0x0227, r30
    2504:	f9 01       	movw	r30, r18
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	0e c0       	rjmp	.+28     	; 0x2528 <realloc+0x182>
    250c:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
    2510:	7c 01       	movw	r14, r24
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	59 f0       	breq	.+22     	; 0x252c <realloc+0x186>
    2516:	a8 01       	movw	r20, r16
    2518:	be 01       	movw	r22, r28
    251a:	0e 94 9d 12 	call	0x253a	; 0x253a <memcpy>
    251e:	ce 01       	movw	r24, r28
    2520:	0e 94 44 11 	call	0x2288	; 0x2288 <free>
    2524:	c7 01       	movw	r24, r14
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <realloc+0x18a>
    2528:	ce 01       	movw	r24, r28
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <realloc+0x18a>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	ee e0       	ldi	r30, 0x0E	; 14
    2536:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__epilogue_restores__+0x8>

0000253a <memcpy>:
    253a:	fb 01       	movw	r30, r22
    253c:	dc 01       	movw	r26, r24
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <memcpy+0xa>
    2540:	01 90       	ld	r0, Z+
    2542:	0d 92       	st	X+, r0
    2544:	41 50       	subi	r20, 0x01	; 1
    2546:	50 40       	sbci	r21, 0x00	; 0
    2548:	d8 f7       	brcc	.-10     	; 0x2540 <memcpy+0x6>
    254a:	08 95       	ret

0000254c <fdevopen>:
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	ec 01       	movw	r28, r24
    2556:	8b 01       	movw	r16, r22
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	31 f4       	brne	.+12     	; 0x2568 <fdevopen+0x1c>
    255c:	61 15       	cp	r22, r1
    255e:	71 05       	cpc	r23, r1
    2560:	19 f4       	brne	.+6      	; 0x2568 <fdevopen+0x1c>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	38 c0       	rjmp	.+112    	; 0x25d8 <fdevopen+0x8c>
    2568:	6e e0       	ldi	r22, 0x0E	; 14
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <calloc>
    2574:	fc 01       	movw	r30, r24
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	a1 f3       	breq	.-24     	; 0x2562 <fdevopen+0x16>
    257a:	80 e8       	ldi	r24, 0x80	; 128
    257c:	83 83       	std	Z+3, r24	; 0x03
    257e:	01 15       	cp	r16, r1
    2580:	11 05       	cpc	r17, r1
    2582:	71 f0       	breq	.+28     	; 0x25a0 <fdevopen+0x54>
    2584:	13 87       	std	Z+11, r17	; 0x0b
    2586:	02 87       	std	Z+10, r16	; 0x0a
    2588:	81 e8       	ldi	r24, 0x81	; 129
    258a:	83 83       	std	Z+3, r24	; 0x03
    258c:	80 91 2b 02 	lds	r24, 0x022B
    2590:	90 91 2c 02 	lds	r25, 0x022C
    2594:	89 2b       	or	r24, r25
    2596:	21 f4       	brne	.+8      	; 0x25a0 <fdevopen+0x54>
    2598:	f0 93 2c 02 	sts	0x022C, r31
    259c:	e0 93 2b 02 	sts	0x022B, r30
    25a0:	20 97       	sbiw	r28, 0x00	; 0
    25a2:	c9 f0       	breq	.+50     	; 0x25d6 <fdevopen+0x8a>
    25a4:	d1 87       	std	Z+9, r29	; 0x09
    25a6:	c0 87       	std	Z+8, r28	; 0x08
    25a8:	83 81       	ldd	r24, Z+3	; 0x03
    25aa:	82 60       	ori	r24, 0x02	; 2
    25ac:	83 83       	std	Z+3, r24	; 0x03
    25ae:	80 91 2d 02 	lds	r24, 0x022D
    25b2:	90 91 2e 02 	lds	r25, 0x022E
    25b6:	89 2b       	or	r24, r25
    25b8:	71 f4       	brne	.+28     	; 0x25d6 <fdevopen+0x8a>
    25ba:	f0 93 2e 02 	sts	0x022E, r31
    25be:	e0 93 2d 02 	sts	0x022D, r30
    25c2:	80 91 2f 02 	lds	r24, 0x022F
    25c6:	90 91 30 02 	lds	r25, 0x0230
    25ca:	89 2b       	or	r24, r25
    25cc:	21 f4       	brne	.+8      	; 0x25d6 <fdevopen+0x8a>
    25ce:	f0 93 30 02 	sts	0x0230, r31
    25d2:	e0 93 2f 02 	sts	0x022F, r30
    25d6:	cf 01       	movw	r24, r30
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <printf>:
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e7 ef       	ldi	r30, 0xF7	; 247
    25e8:	f2 e1       	ldi	r31, 0x12	; 18
    25ea:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x20>
    25ee:	fe 01       	movw	r30, r28
    25f0:	35 96       	adiw	r30, 0x05	; 5
    25f2:	61 91       	ld	r22, Z+
    25f4:	71 91       	ld	r23, Z+
    25f6:	af 01       	movw	r20, r30
    25f8:	80 91 2d 02 	lds	r24, 0x022D
    25fc:	90 91 2e 02 	lds	r25, 0x022E
    2600:	0e 94 27 13 	call	0x264e	; 0x264e <vfprintf>
    2604:	e2 e0       	ldi	r30, 0x02	; 2
    2606:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x20>

0000260a <sprintf>:
    260a:	ae e0       	ldi	r26, 0x0E	; 14
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	eb e0       	ldi	r30, 0x0B	; 11
    2610:	f3 e1       	ldi	r31, 0x13	; 19
    2612:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__prologue_saves__+0x1c>
    2616:	0d 89       	ldd	r16, Y+21	; 0x15
    2618:	1e 89       	ldd	r17, Y+22	; 0x16
    261a:	86 e0       	ldi	r24, 0x06	; 6
    261c:	8c 83       	std	Y+4, r24	; 0x04
    261e:	1a 83       	std	Y+2, r17	; 0x02
    2620:	09 83       	std	Y+1, r16	; 0x01
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	9f e7       	ldi	r25, 0x7F	; 127
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	ae 01       	movw	r20, r28
    262c:	47 5e       	subi	r20, 0xE7	; 231
    262e:	5f 4f       	sbci	r21, 0xFF	; 255
    2630:	6f 89       	ldd	r22, Y+23	; 0x17
    2632:	78 8d       	ldd	r23, Y+24	; 0x18
    2634:	ce 01       	movw	r24, r28
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	0e 94 27 13 	call	0x264e	; 0x264e <vfprintf>
    263c:	ef 81       	ldd	r30, Y+7	; 0x07
    263e:	f8 85       	ldd	r31, Y+8	; 0x08
    2640:	e0 0f       	add	r30, r16
    2642:	f1 1f       	adc	r31, r17
    2644:	10 82       	st	Z, r1
    2646:	2e 96       	adiw	r28, 0x0e	; 14
    2648:	e4 e0       	ldi	r30, 0x04	; 4
    264a:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__epilogue_restores__+0x1c>

0000264e <vfprintf>:
    264e:	ac e0       	ldi	r26, 0x0C	; 12
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	ed e2       	ldi	r30, 0x2D	; 45
    2654:	f3 e1       	ldi	r31, 0x13	; 19
    2656:	0c 94 c2 15 	jmp	0x2b84	; 0x2b84 <__prologue_saves__>
    265a:	7c 01       	movw	r14, r24
    265c:	6b 01       	movw	r12, r22
    265e:	8a 01       	movw	r16, r20
    2660:	fc 01       	movw	r30, r24
    2662:	17 82       	std	Z+7, r1	; 0x07
    2664:	16 82       	std	Z+6, r1	; 0x06
    2666:	83 81       	ldd	r24, Z+3	; 0x03
    2668:	81 ff       	sbrs	r24, 1
    266a:	bd c1       	rjmp	.+890    	; 0x29e6 <vfprintf+0x398>
    266c:	ce 01       	movw	r24, r28
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	4c 01       	movw	r8, r24
    2672:	f7 01       	movw	r30, r14
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	f6 01       	movw	r30, r12
    2678:	93 fd       	sbrc	r25, 3
    267a:	85 91       	lpm	r24, Z+
    267c:	93 ff       	sbrs	r25, 3
    267e:	81 91       	ld	r24, Z+
    2680:	6f 01       	movw	r12, r30
    2682:	88 23       	and	r24, r24
    2684:	09 f4       	brne	.+2      	; 0x2688 <vfprintf+0x3a>
    2686:	ab c1       	rjmp	.+854    	; 0x29de <vfprintf+0x390>
    2688:	85 32       	cpi	r24, 0x25	; 37
    268a:	39 f4       	brne	.+14     	; 0x269a <vfprintf+0x4c>
    268c:	93 fd       	sbrc	r25, 3
    268e:	85 91       	lpm	r24, Z+
    2690:	93 ff       	sbrs	r25, 3
    2692:	81 91       	ld	r24, Z+
    2694:	6f 01       	movw	r12, r30
    2696:	85 32       	cpi	r24, 0x25	; 37
    2698:	29 f4       	brne	.+10     	; 0x26a4 <vfprintf+0x56>
    269a:	b7 01       	movw	r22, r14
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    26a2:	e7 cf       	rjmp	.-50     	; 0x2672 <vfprintf+0x24>
    26a4:	51 2c       	mov	r5, r1
    26a6:	31 2c       	mov	r3, r1
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	20 32       	cpi	r18, 0x20	; 32
    26ac:	a0 f4       	brcc	.+40     	; 0x26d6 <vfprintf+0x88>
    26ae:	8b 32       	cpi	r24, 0x2B	; 43
    26b0:	69 f0       	breq	.+26     	; 0x26cc <vfprintf+0x7e>
    26b2:	30 f4       	brcc	.+12     	; 0x26c0 <vfprintf+0x72>
    26b4:	80 32       	cpi	r24, 0x20	; 32
    26b6:	59 f0       	breq	.+22     	; 0x26ce <vfprintf+0x80>
    26b8:	83 32       	cpi	r24, 0x23	; 35
    26ba:	69 f4       	brne	.+26     	; 0x26d6 <vfprintf+0x88>
    26bc:	20 61       	ori	r18, 0x10	; 16
    26be:	2c c0       	rjmp	.+88     	; 0x2718 <vfprintf+0xca>
    26c0:	8d 32       	cpi	r24, 0x2D	; 45
    26c2:	39 f0       	breq	.+14     	; 0x26d2 <vfprintf+0x84>
    26c4:	80 33       	cpi	r24, 0x30	; 48
    26c6:	39 f4       	brne	.+14     	; 0x26d6 <vfprintf+0x88>
    26c8:	21 60       	ori	r18, 0x01	; 1
    26ca:	26 c0       	rjmp	.+76     	; 0x2718 <vfprintf+0xca>
    26cc:	22 60       	ori	r18, 0x02	; 2
    26ce:	24 60       	ori	r18, 0x04	; 4
    26d0:	23 c0       	rjmp	.+70     	; 0x2718 <vfprintf+0xca>
    26d2:	28 60       	ori	r18, 0x08	; 8
    26d4:	21 c0       	rjmp	.+66     	; 0x2718 <vfprintf+0xca>
    26d6:	27 fd       	sbrc	r18, 7
    26d8:	27 c0       	rjmp	.+78     	; 0x2728 <vfprintf+0xda>
    26da:	30 ed       	ldi	r19, 0xD0	; 208
    26dc:	38 0f       	add	r19, r24
    26de:	3a 30       	cpi	r19, 0x0A	; 10
    26e0:	78 f4       	brcc	.+30     	; 0x2700 <vfprintf+0xb2>
    26e2:	26 ff       	sbrs	r18, 6
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <vfprintf+0xa4>
    26e6:	fa e0       	ldi	r31, 0x0A	; 10
    26e8:	5f 9e       	mul	r5, r31
    26ea:	30 0d       	add	r19, r0
    26ec:	11 24       	eor	r1, r1
    26ee:	53 2e       	mov	r5, r19
    26f0:	13 c0       	rjmp	.+38     	; 0x2718 <vfprintf+0xca>
    26f2:	8a e0       	ldi	r24, 0x0A	; 10
    26f4:	38 9e       	mul	r3, r24
    26f6:	30 0d       	add	r19, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	33 2e       	mov	r3, r19
    26fc:	20 62       	ori	r18, 0x20	; 32
    26fe:	0c c0       	rjmp	.+24     	; 0x2718 <vfprintf+0xca>
    2700:	8e 32       	cpi	r24, 0x2E	; 46
    2702:	21 f4       	brne	.+8      	; 0x270c <vfprintf+0xbe>
    2704:	26 fd       	sbrc	r18, 6
    2706:	6b c1       	rjmp	.+726    	; 0x29de <vfprintf+0x390>
    2708:	20 64       	ori	r18, 0x40	; 64
    270a:	06 c0       	rjmp	.+12     	; 0x2718 <vfprintf+0xca>
    270c:	8c 36       	cpi	r24, 0x6C	; 108
    270e:	11 f4       	brne	.+4      	; 0x2714 <vfprintf+0xc6>
    2710:	20 68       	ori	r18, 0x80	; 128
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <vfprintf+0xca>
    2714:	88 36       	cpi	r24, 0x68	; 104
    2716:	41 f4       	brne	.+16     	; 0x2728 <vfprintf+0xda>
    2718:	f6 01       	movw	r30, r12
    271a:	93 fd       	sbrc	r25, 3
    271c:	85 91       	lpm	r24, Z+
    271e:	93 ff       	sbrs	r25, 3
    2720:	81 91       	ld	r24, Z+
    2722:	6f 01       	movw	r12, r30
    2724:	81 11       	cpse	r24, r1
    2726:	c1 cf       	rjmp	.-126    	; 0x26aa <vfprintf+0x5c>
    2728:	98 2f       	mov	r25, r24
    272a:	9f 7d       	andi	r25, 0xDF	; 223
    272c:	95 54       	subi	r25, 0x45	; 69
    272e:	93 30       	cpi	r25, 0x03	; 3
    2730:	28 f4       	brcc	.+10     	; 0x273c <vfprintf+0xee>
    2732:	0c 5f       	subi	r16, 0xFC	; 252
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	ff e3       	ldi	r31, 0x3F	; 63
    2738:	f9 83       	std	Y+1, r31	; 0x01
    273a:	0d c0       	rjmp	.+26     	; 0x2756 <vfprintf+0x108>
    273c:	83 36       	cpi	r24, 0x63	; 99
    273e:	31 f0       	breq	.+12     	; 0x274c <vfprintf+0xfe>
    2740:	83 37       	cpi	r24, 0x73	; 115
    2742:	71 f0       	breq	.+28     	; 0x2760 <vfprintf+0x112>
    2744:	83 35       	cpi	r24, 0x53	; 83
    2746:	09 f0       	breq	.+2      	; 0x274a <vfprintf+0xfc>
    2748:	5b c0       	rjmp	.+182    	; 0x2800 <vfprintf+0x1b2>
    274a:	22 c0       	rjmp	.+68     	; 0x2790 <vfprintf+0x142>
    274c:	f8 01       	movw	r30, r16
    274e:	80 81       	ld	r24, Z
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	0e 5f       	subi	r16, 0xFE	; 254
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	44 24       	eor	r4, r4
    2758:	43 94       	inc	r4
    275a:	51 2c       	mov	r5, r1
    275c:	54 01       	movw	r10, r8
    275e:	15 c0       	rjmp	.+42     	; 0x278a <vfprintf+0x13c>
    2760:	38 01       	movw	r6, r16
    2762:	f2 e0       	ldi	r31, 0x02	; 2
    2764:	6f 0e       	add	r6, r31
    2766:	71 1c       	adc	r7, r1
    2768:	f8 01       	movw	r30, r16
    276a:	a0 80       	ld	r10, Z
    276c:	b1 80       	ldd	r11, Z+1	; 0x01
    276e:	26 ff       	sbrs	r18, 6
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <vfprintf+0x12a>
    2772:	65 2d       	mov	r22, r5
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	02 c0       	rjmp	.+4      	; 0x277c <vfprintf+0x12e>
    2778:	6f ef       	ldi	r22, 0xFF	; 255
    277a:	7f ef       	ldi	r23, 0xFF	; 255
    277c:	c5 01       	movw	r24, r10
    277e:	2c 87       	std	Y+12, r18	; 0x0c
    2780:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <strnlen>
    2784:	2c 01       	movw	r4, r24
    2786:	83 01       	movw	r16, r6
    2788:	2c 85       	ldd	r18, Y+12	; 0x0c
    278a:	2f 77       	andi	r18, 0x7F	; 127
    278c:	22 2e       	mov	r2, r18
    278e:	17 c0       	rjmp	.+46     	; 0x27be <vfprintf+0x170>
    2790:	38 01       	movw	r6, r16
    2792:	f2 e0       	ldi	r31, 0x02	; 2
    2794:	6f 0e       	add	r6, r31
    2796:	71 1c       	adc	r7, r1
    2798:	f8 01       	movw	r30, r16
    279a:	a0 80       	ld	r10, Z
    279c:	b1 80       	ldd	r11, Z+1	; 0x01
    279e:	26 ff       	sbrs	r18, 6
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <vfprintf+0x15a>
    27a2:	65 2d       	mov	r22, r5
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <vfprintf+0x15e>
    27a8:	6f ef       	ldi	r22, 0xFF	; 255
    27aa:	7f ef       	ldi	r23, 0xFF	; 255
    27ac:	c5 01       	movw	r24, r10
    27ae:	2c 87       	std	Y+12, r18	; 0x0c
    27b0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <strnlen_P>
    27b4:	2c 01       	movw	r4, r24
    27b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    27b8:	20 68       	ori	r18, 0x80	; 128
    27ba:	22 2e       	mov	r2, r18
    27bc:	83 01       	movw	r16, r6
    27be:	23 fc       	sbrc	r2, 3
    27c0:	1b c0       	rjmp	.+54     	; 0x27f8 <vfprintf+0x1aa>
    27c2:	83 2d       	mov	r24, r3
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	48 16       	cp	r4, r24
    27c8:	59 06       	cpc	r5, r25
    27ca:	b0 f4       	brcc	.+44     	; 0x27f8 <vfprintf+0x1aa>
    27cc:	b7 01       	movw	r22, r14
    27ce:	80 e2       	ldi	r24, 0x20	; 32
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    27d6:	3a 94       	dec	r3
    27d8:	f4 cf       	rjmp	.-24     	; 0x27c2 <vfprintf+0x174>
    27da:	f5 01       	movw	r30, r10
    27dc:	27 fc       	sbrc	r2, 7
    27de:	85 91       	lpm	r24, Z+
    27e0:	27 fe       	sbrs	r2, 7
    27e2:	81 91       	ld	r24, Z+
    27e4:	5f 01       	movw	r10, r30
    27e6:	b7 01       	movw	r22, r14
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    27ee:	31 10       	cpse	r3, r1
    27f0:	3a 94       	dec	r3
    27f2:	f1 e0       	ldi	r31, 0x01	; 1
    27f4:	4f 1a       	sub	r4, r31
    27f6:	51 08       	sbc	r5, r1
    27f8:	41 14       	cp	r4, r1
    27fa:	51 04       	cpc	r5, r1
    27fc:	71 f7       	brne	.-36     	; 0x27da <vfprintf+0x18c>
    27fe:	e5 c0       	rjmp	.+458    	; 0x29ca <vfprintf+0x37c>
    2800:	84 36       	cpi	r24, 0x64	; 100
    2802:	11 f0       	breq	.+4      	; 0x2808 <vfprintf+0x1ba>
    2804:	89 36       	cpi	r24, 0x69	; 105
    2806:	39 f5       	brne	.+78     	; 0x2856 <vfprintf+0x208>
    2808:	f8 01       	movw	r30, r16
    280a:	27 ff       	sbrs	r18, 7
    280c:	07 c0       	rjmp	.+14     	; 0x281c <vfprintf+0x1ce>
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	0c 5f       	subi	r16, 0xFC	; 252
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	08 c0       	rjmp	.+16     	; 0x282c <vfprintf+0x1de>
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	88 27       	eor	r24, r24
    2822:	77 fd       	sbrc	r23, 7
    2824:	80 95       	com	r24
    2826:	98 2f       	mov	r25, r24
    2828:	0e 5f       	subi	r16, 0xFE	; 254
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	2f 76       	andi	r18, 0x6F	; 111
    282e:	b2 2e       	mov	r11, r18
    2830:	97 ff       	sbrs	r25, 7
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <vfprintf+0x1f8>
    2834:	90 95       	com	r25
    2836:	80 95       	com	r24
    2838:	70 95       	com	r23
    283a:	61 95       	neg	r22
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	8f 4f       	sbci	r24, 0xFF	; 255
    2840:	9f 4f       	sbci	r25, 0xFF	; 255
    2842:	20 68       	ori	r18, 0x80	; 128
    2844:	b2 2e       	mov	r11, r18
    2846:	2a e0       	ldi	r18, 0x0A	; 10
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	a4 01       	movw	r20, r8
    284c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__ultoa_invert>
    2850:	a8 2e       	mov	r10, r24
    2852:	a8 18       	sub	r10, r8
    2854:	44 c0       	rjmp	.+136    	; 0x28de <vfprintf+0x290>
    2856:	85 37       	cpi	r24, 0x75	; 117
    2858:	29 f4       	brne	.+10     	; 0x2864 <vfprintf+0x216>
    285a:	2f 7e       	andi	r18, 0xEF	; 239
    285c:	b2 2e       	mov	r11, r18
    285e:	2a e0       	ldi	r18, 0x0A	; 10
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	25 c0       	rjmp	.+74     	; 0x28ae <vfprintf+0x260>
    2864:	f2 2f       	mov	r31, r18
    2866:	f9 7f       	andi	r31, 0xF9	; 249
    2868:	bf 2e       	mov	r11, r31
    286a:	8f 36       	cpi	r24, 0x6F	; 111
    286c:	c1 f0       	breq	.+48     	; 0x289e <vfprintf+0x250>
    286e:	18 f4       	brcc	.+6      	; 0x2876 <vfprintf+0x228>
    2870:	88 35       	cpi	r24, 0x58	; 88
    2872:	79 f0       	breq	.+30     	; 0x2892 <vfprintf+0x244>
    2874:	b4 c0       	rjmp	.+360    	; 0x29de <vfprintf+0x390>
    2876:	80 37       	cpi	r24, 0x70	; 112
    2878:	19 f0       	breq	.+6      	; 0x2880 <vfprintf+0x232>
    287a:	88 37       	cpi	r24, 0x78	; 120
    287c:	21 f0       	breq	.+8      	; 0x2886 <vfprintf+0x238>
    287e:	af c0       	rjmp	.+350    	; 0x29de <vfprintf+0x390>
    2880:	2f 2f       	mov	r18, r31
    2882:	20 61       	ori	r18, 0x10	; 16
    2884:	b2 2e       	mov	r11, r18
    2886:	b4 fe       	sbrs	r11, 4
    2888:	0d c0       	rjmp	.+26     	; 0x28a4 <vfprintf+0x256>
    288a:	8b 2d       	mov	r24, r11
    288c:	84 60       	ori	r24, 0x04	; 4
    288e:	b8 2e       	mov	r11, r24
    2890:	09 c0       	rjmp	.+18     	; 0x28a4 <vfprintf+0x256>
    2892:	24 ff       	sbrs	r18, 4
    2894:	0a c0       	rjmp	.+20     	; 0x28aa <vfprintf+0x25c>
    2896:	9f 2f       	mov	r25, r31
    2898:	96 60       	ori	r25, 0x06	; 6
    289a:	b9 2e       	mov	r11, r25
    289c:	06 c0       	rjmp	.+12     	; 0x28aa <vfprintf+0x25c>
    289e:	28 e0       	ldi	r18, 0x08	; 8
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	05 c0       	rjmp	.+10     	; 0x28ae <vfprintf+0x260>
    28a4:	20 e1       	ldi	r18, 0x10	; 16
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x260>
    28aa:	20 e1       	ldi	r18, 0x10	; 16
    28ac:	32 e0       	ldi	r19, 0x02	; 2
    28ae:	f8 01       	movw	r30, r16
    28b0:	b7 fe       	sbrs	r11, 7
    28b2:	07 c0       	rjmp	.+14     	; 0x28c2 <vfprintf+0x274>
    28b4:	60 81       	ld	r22, Z
    28b6:	71 81       	ldd	r23, Z+1	; 0x01
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	0c 5f       	subi	r16, 0xFC	; 252
    28be:	1f 4f       	sbci	r17, 0xFF	; 255
    28c0:	06 c0       	rjmp	.+12     	; 0x28ce <vfprintf+0x280>
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 5f       	subi	r16, 0xFE	; 254
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	a4 01       	movw	r20, r8
    28d0:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__ultoa_invert>
    28d4:	a8 2e       	mov	r10, r24
    28d6:	a8 18       	sub	r10, r8
    28d8:	fb 2d       	mov	r31, r11
    28da:	ff 77       	andi	r31, 0x7F	; 127
    28dc:	bf 2e       	mov	r11, r31
    28de:	b6 fe       	sbrs	r11, 6
    28e0:	0b c0       	rjmp	.+22     	; 0x28f8 <vfprintf+0x2aa>
    28e2:	2b 2d       	mov	r18, r11
    28e4:	2e 7f       	andi	r18, 0xFE	; 254
    28e6:	a5 14       	cp	r10, r5
    28e8:	50 f4       	brcc	.+20     	; 0x28fe <vfprintf+0x2b0>
    28ea:	b4 fe       	sbrs	r11, 4
    28ec:	0a c0       	rjmp	.+20     	; 0x2902 <vfprintf+0x2b4>
    28ee:	b2 fc       	sbrc	r11, 2
    28f0:	08 c0       	rjmp	.+16     	; 0x2902 <vfprintf+0x2b4>
    28f2:	2b 2d       	mov	r18, r11
    28f4:	2e 7e       	andi	r18, 0xEE	; 238
    28f6:	05 c0       	rjmp	.+10     	; 0x2902 <vfprintf+0x2b4>
    28f8:	7a 2c       	mov	r7, r10
    28fa:	2b 2d       	mov	r18, r11
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <vfprintf+0x2b6>
    28fe:	7a 2c       	mov	r7, r10
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <vfprintf+0x2b6>
    2902:	75 2c       	mov	r7, r5
    2904:	24 ff       	sbrs	r18, 4
    2906:	0d c0       	rjmp	.+26     	; 0x2922 <vfprintf+0x2d4>
    2908:	fe 01       	movw	r30, r28
    290a:	ea 0d       	add	r30, r10
    290c:	f1 1d       	adc	r31, r1
    290e:	80 81       	ld	r24, Z
    2910:	80 33       	cpi	r24, 0x30	; 48
    2912:	11 f4       	brne	.+4      	; 0x2918 <vfprintf+0x2ca>
    2914:	29 7e       	andi	r18, 0xE9	; 233
    2916:	09 c0       	rjmp	.+18     	; 0x292a <vfprintf+0x2dc>
    2918:	22 ff       	sbrs	r18, 2
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <vfprintf+0x2da>
    291c:	73 94       	inc	r7
    291e:	73 94       	inc	r7
    2920:	04 c0       	rjmp	.+8      	; 0x292a <vfprintf+0x2dc>
    2922:	82 2f       	mov	r24, r18
    2924:	86 78       	andi	r24, 0x86	; 134
    2926:	09 f0       	breq	.+2      	; 0x292a <vfprintf+0x2dc>
    2928:	73 94       	inc	r7
    292a:	23 fd       	sbrc	r18, 3
    292c:	13 c0       	rjmp	.+38     	; 0x2954 <vfprintf+0x306>
    292e:	20 ff       	sbrs	r18, 0
    2930:	06 c0       	rjmp	.+12     	; 0x293e <vfprintf+0x2f0>
    2932:	5a 2c       	mov	r5, r10
    2934:	73 14       	cp	r7, r3
    2936:	18 f4       	brcc	.+6      	; 0x293e <vfprintf+0x2f0>
    2938:	53 0c       	add	r5, r3
    293a:	57 18       	sub	r5, r7
    293c:	73 2c       	mov	r7, r3
    293e:	73 14       	cp	r7, r3
    2940:	68 f4       	brcc	.+26     	; 0x295c <vfprintf+0x30e>
    2942:	b7 01       	movw	r22, r14
    2944:	80 e2       	ldi	r24, 0x20	; 32
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	2c 87       	std	Y+12, r18	; 0x0c
    294a:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    294e:	73 94       	inc	r7
    2950:	2c 85       	ldd	r18, Y+12	; 0x0c
    2952:	f5 cf       	rjmp	.-22     	; 0x293e <vfprintf+0x2f0>
    2954:	73 14       	cp	r7, r3
    2956:	10 f4       	brcc	.+4      	; 0x295c <vfprintf+0x30e>
    2958:	37 18       	sub	r3, r7
    295a:	01 c0       	rjmp	.+2      	; 0x295e <vfprintf+0x310>
    295c:	31 2c       	mov	r3, r1
    295e:	24 ff       	sbrs	r18, 4
    2960:	12 c0       	rjmp	.+36     	; 0x2986 <vfprintf+0x338>
    2962:	b7 01       	movw	r22, r14
    2964:	80 e3       	ldi	r24, 0x30	; 48
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	2c 87       	std	Y+12, r18	; 0x0c
    296a:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    296e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2970:	22 ff       	sbrs	r18, 2
    2972:	17 c0       	rjmp	.+46     	; 0x29a2 <vfprintf+0x354>
    2974:	21 ff       	sbrs	r18, 1
    2976:	03 c0       	rjmp	.+6      	; 0x297e <vfprintf+0x330>
    2978:	88 e5       	ldi	r24, 0x58	; 88
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <vfprintf+0x334>
    297e:	88 e7       	ldi	r24, 0x78	; 120
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	b7 01       	movw	r22, r14
    2984:	0c c0       	rjmp	.+24     	; 0x299e <vfprintf+0x350>
    2986:	82 2f       	mov	r24, r18
    2988:	86 78       	andi	r24, 0x86	; 134
    298a:	59 f0       	breq	.+22     	; 0x29a2 <vfprintf+0x354>
    298c:	21 fd       	sbrc	r18, 1
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <vfprintf+0x346>
    2990:	80 e2       	ldi	r24, 0x20	; 32
    2992:	01 c0       	rjmp	.+2      	; 0x2996 <vfprintf+0x348>
    2994:	8b e2       	ldi	r24, 0x2B	; 43
    2996:	27 fd       	sbrc	r18, 7
    2998:	8d e2       	ldi	r24, 0x2D	; 45
    299a:	b7 01       	movw	r22, r14
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    29a2:	a5 14       	cp	r10, r5
    29a4:	38 f4       	brcc	.+14     	; 0x29b4 <vfprintf+0x366>
    29a6:	b7 01       	movw	r22, r14
    29a8:	80 e3       	ldi	r24, 0x30	; 48
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    29b0:	5a 94       	dec	r5
    29b2:	f7 cf       	rjmp	.-18     	; 0x29a2 <vfprintf+0x354>
    29b4:	aa 94       	dec	r10
    29b6:	f4 01       	movw	r30, r8
    29b8:	ea 0d       	add	r30, r10
    29ba:	f1 1d       	adc	r31, r1
    29bc:	80 81       	ld	r24, Z
    29be:	b7 01       	movw	r22, r14
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    29c6:	a1 10       	cpse	r10, r1
    29c8:	f5 cf       	rjmp	.-22     	; 0x29b4 <vfprintf+0x366>
    29ca:	33 20       	and	r3, r3
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <vfprintf+0x382>
    29ce:	51 ce       	rjmp	.-862    	; 0x2672 <vfprintf+0x24>
    29d0:	b7 01       	movw	r22, r14
    29d2:	80 e2       	ldi	r24, 0x20	; 32
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 32 15 	call	0x2a64	; 0x2a64 <fputc>
    29da:	3a 94       	dec	r3
    29dc:	f6 cf       	rjmp	.-20     	; 0x29ca <vfprintf+0x37c>
    29de:	f7 01       	movw	r30, r14
    29e0:	86 81       	ldd	r24, Z+6	; 0x06
    29e2:	97 81       	ldd	r25, Z+7	; 0x07
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <vfprintf+0x39c>
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	9f ef       	ldi	r25, 0xFF	; 255
    29ea:	2c 96       	adiw	r28, 0x0c	; 12
    29ec:	e2 e1       	ldi	r30, 0x12	; 18
    29ee:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__epilogue_restores__>

000029f2 <calloc>:
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	86 9f       	mul	r24, r22
    29fc:	80 01       	movw	r16, r0
    29fe:	87 9f       	mul	r24, r23
    2a00:	10 0d       	add	r17, r0
    2a02:	96 9f       	mul	r25, r22
    2a04:	10 0d       	add	r17, r0
    2a06:	11 24       	eor	r1, r1
    2a08:	c8 01       	movw	r24, r16
    2a0a:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
    2a0e:	ec 01       	movw	r28, r24
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <calloc+0x2c>
    2a14:	a8 01       	movw	r20, r16
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <memset>
    2a1e:	ce 01       	movw	r24, r28
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	08 95       	ret

00002a2a <strnlen_P>:
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	05 90       	lpm	r0, Z+
    2a2e:	61 50       	subi	r22, 0x01	; 1
    2a30:	70 40       	sbci	r23, 0x00	; 0
    2a32:	01 10       	cpse	r0, r1
    2a34:	d8 f7       	brcc	.-10     	; 0x2a2c <strnlen_P+0x2>
    2a36:	80 95       	com	r24
    2a38:	90 95       	com	r25
    2a3a:	8e 0f       	add	r24, r30
    2a3c:	9f 1f       	adc	r25, r31
    2a3e:	08 95       	ret

00002a40 <memset>:
    2a40:	dc 01       	movw	r26, r24
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <memset+0x6>
    2a44:	6d 93       	st	X+, r22
    2a46:	41 50       	subi	r20, 0x01	; 1
    2a48:	50 40       	sbci	r21, 0x00	; 0
    2a4a:	e0 f7       	brcc	.-8      	; 0x2a44 <memset+0x4>
    2a4c:	08 95       	ret

00002a4e <strnlen>:
    2a4e:	fc 01       	movw	r30, r24
    2a50:	61 50       	subi	r22, 0x01	; 1
    2a52:	70 40       	sbci	r23, 0x00	; 0
    2a54:	01 90       	ld	r0, Z+
    2a56:	01 10       	cpse	r0, r1
    2a58:	d8 f7       	brcc	.-10     	; 0x2a50 <strnlen+0x2>
    2a5a:	80 95       	com	r24
    2a5c:	90 95       	com	r25
    2a5e:	8e 0f       	add	r24, r30
    2a60:	9f 1f       	adc	r25, r31
    2a62:	08 95       	ret

00002a64 <fputc>:
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	18 2f       	mov	r17, r24
    2a6e:	09 2f       	mov	r16, r25
    2a70:	eb 01       	movw	r28, r22
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	81 fd       	sbrc	r24, 1
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <fputc+0x1a>
    2a78:	8f ef       	ldi	r24, 0xFF	; 255
    2a7a:	9f ef       	ldi	r25, 0xFF	; 255
    2a7c:	20 c0       	rjmp	.+64     	; 0x2abe <fputc+0x5a>
    2a7e:	82 ff       	sbrs	r24, 2
    2a80:	10 c0       	rjmp	.+32     	; 0x2aa2 <fputc+0x3e>
    2a82:	4e 81       	ldd	r20, Y+6	; 0x06
    2a84:	5f 81       	ldd	r21, Y+7	; 0x07
    2a86:	2c 81       	ldd	r18, Y+4	; 0x04
    2a88:	3d 81       	ldd	r19, Y+5	; 0x05
    2a8a:	42 17       	cp	r20, r18
    2a8c:	53 07       	cpc	r21, r19
    2a8e:	7c f4       	brge	.+30     	; 0x2aae <fputc+0x4a>
    2a90:	e8 81       	ld	r30, Y
    2a92:	f9 81       	ldd	r31, Y+1	; 0x01
    2a94:	9f 01       	movw	r18, r30
    2a96:	2f 5f       	subi	r18, 0xFF	; 255
    2a98:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9a:	39 83       	std	Y+1, r19	; 0x01
    2a9c:	28 83       	st	Y, r18
    2a9e:	10 83       	st	Z, r17
    2aa0:	06 c0       	rjmp	.+12     	; 0x2aae <fputc+0x4a>
    2aa2:	e8 85       	ldd	r30, Y+8	; 0x08
    2aa4:	f9 85       	ldd	r31, Y+9	; 0x09
    2aa6:	81 2f       	mov	r24, r17
    2aa8:	09 95       	icall
    2aaa:	89 2b       	or	r24, r25
    2aac:	29 f7       	brne	.-54     	; 0x2a78 <fputc+0x14>
    2aae:	2e 81       	ldd	r18, Y+6	; 0x06
    2ab0:	3f 81       	ldd	r19, Y+7	; 0x07
    2ab2:	2f 5f       	subi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	3f 83       	std	Y+7, r19	; 0x07
    2ab8:	2e 83       	std	Y+6, r18	; 0x06
    2aba:	81 2f       	mov	r24, r17
    2abc:	90 2f       	mov	r25, r16
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	08 95       	ret

00002ac8 <__ultoa_invert>:
    2ac8:	fa 01       	movw	r30, r20
    2aca:	aa 27       	eor	r26, r26
    2acc:	28 30       	cpi	r18, 0x08	; 8
    2ace:	51 f1       	breq	.+84     	; 0x2b24 <__ultoa_invert+0x5c>
    2ad0:	20 31       	cpi	r18, 0x10	; 16
    2ad2:	81 f1       	breq	.+96     	; 0x2b34 <__ultoa_invert+0x6c>
    2ad4:	e8 94       	clt
    2ad6:	6f 93       	push	r22
    2ad8:	6e 7f       	andi	r22, 0xFE	; 254
    2ada:	6e 5f       	subi	r22, 0xFE	; 254
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	af 4f       	sbci	r26, 0xFF	; 255
    2ae4:	b1 e0       	ldi	r27, 0x01	; 1
    2ae6:	3e d0       	rcall	.+124    	; 0x2b64 <__ultoa_invert+0x9c>
    2ae8:	b4 e0       	ldi	r27, 0x04	; 4
    2aea:	3c d0       	rcall	.+120    	; 0x2b64 <__ultoa_invert+0x9c>
    2aec:	67 0f       	add	r22, r23
    2aee:	78 1f       	adc	r23, r24
    2af0:	89 1f       	adc	r24, r25
    2af2:	9a 1f       	adc	r25, r26
    2af4:	a1 1d       	adc	r26, r1
    2af6:	68 0f       	add	r22, r24
    2af8:	79 1f       	adc	r23, r25
    2afa:	8a 1f       	adc	r24, r26
    2afc:	91 1d       	adc	r25, r1
    2afe:	a1 1d       	adc	r26, r1
    2b00:	6a 0f       	add	r22, r26
    2b02:	71 1d       	adc	r23, r1
    2b04:	81 1d       	adc	r24, r1
    2b06:	91 1d       	adc	r25, r1
    2b08:	a1 1d       	adc	r26, r1
    2b0a:	20 d0       	rcall	.+64     	; 0x2b4c <__ultoa_invert+0x84>
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <__ultoa_invert+0x48>
    2b0e:	68 94       	set
    2b10:	3f 91       	pop	r19
    2b12:	2a e0       	ldi	r18, 0x0A	; 10
    2b14:	26 9f       	mul	r18, r22
    2b16:	11 24       	eor	r1, r1
    2b18:	30 19       	sub	r19, r0
    2b1a:	30 5d       	subi	r19, 0xD0	; 208
    2b1c:	31 93       	st	Z+, r19
    2b1e:	de f6       	brtc	.-74     	; 0x2ad6 <__ultoa_invert+0xe>
    2b20:	cf 01       	movw	r24, r30
    2b22:	08 95       	ret
    2b24:	46 2f       	mov	r20, r22
    2b26:	47 70       	andi	r20, 0x07	; 7
    2b28:	40 5d       	subi	r20, 0xD0	; 208
    2b2a:	41 93       	st	Z+, r20
    2b2c:	b3 e0       	ldi	r27, 0x03	; 3
    2b2e:	0f d0       	rcall	.+30     	; 0x2b4e <__ultoa_invert+0x86>
    2b30:	c9 f7       	brne	.-14     	; 0x2b24 <__ultoa_invert+0x5c>
    2b32:	f6 cf       	rjmp	.-20     	; 0x2b20 <__ultoa_invert+0x58>
    2b34:	46 2f       	mov	r20, r22
    2b36:	4f 70       	andi	r20, 0x0F	; 15
    2b38:	40 5d       	subi	r20, 0xD0	; 208
    2b3a:	4a 33       	cpi	r20, 0x3A	; 58
    2b3c:	18 f0       	brcs	.+6      	; 0x2b44 <__ultoa_invert+0x7c>
    2b3e:	49 5d       	subi	r20, 0xD9	; 217
    2b40:	31 fd       	sbrc	r19, 1
    2b42:	40 52       	subi	r20, 0x20	; 32
    2b44:	41 93       	st	Z+, r20
    2b46:	02 d0       	rcall	.+4      	; 0x2b4c <__ultoa_invert+0x84>
    2b48:	a9 f7       	brne	.-22     	; 0x2b34 <__ultoa_invert+0x6c>
    2b4a:	ea cf       	rjmp	.-44     	; 0x2b20 <__ultoa_invert+0x58>
    2b4c:	b4 e0       	ldi	r27, 0x04	; 4
    2b4e:	a6 95       	lsr	r26
    2b50:	97 95       	ror	r25
    2b52:	87 95       	ror	r24
    2b54:	77 95       	ror	r23
    2b56:	67 95       	ror	r22
    2b58:	ba 95       	dec	r27
    2b5a:	c9 f7       	brne	.-14     	; 0x2b4e <__ultoa_invert+0x86>
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	61 05       	cpc	r22, r1
    2b60:	71 05       	cpc	r23, r1
    2b62:	08 95       	ret
    2b64:	9b 01       	movw	r18, r22
    2b66:	ac 01       	movw	r20, r24
    2b68:	0a 2e       	mov	r0, r26
    2b6a:	06 94       	lsr	r0
    2b6c:	57 95       	ror	r21
    2b6e:	47 95       	ror	r20
    2b70:	37 95       	ror	r19
    2b72:	27 95       	ror	r18
    2b74:	ba 95       	dec	r27
    2b76:	c9 f7       	brne	.-14     	; 0x2b6a <__ultoa_invert+0xa2>
    2b78:	62 0f       	add	r22, r18
    2b7a:	73 1f       	adc	r23, r19
    2b7c:	84 1f       	adc	r24, r20
    2b7e:	95 1f       	adc	r25, r21
    2b80:	a0 1d       	adc	r26, r0
    2b82:	08 95       	ret

00002b84 <__prologue_saves__>:
    2b84:	2f 92       	push	r2
    2b86:	3f 92       	push	r3
    2b88:	4f 92       	push	r4
    2b8a:	5f 92       	push	r5
    2b8c:	6f 92       	push	r6
    2b8e:	7f 92       	push	r7
    2b90:	8f 92       	push	r8
    2b92:	9f 92       	push	r9
    2b94:	af 92       	push	r10
    2b96:	bf 92       	push	r11
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	ca 1b       	sub	r28, r26
    2bae:	db 0b       	sbc	r29, r27
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	09 94       	ijmp

00002bbc <__epilogue_restores__>:
    2bbc:	2a 88       	ldd	r2, Y+18	; 0x12
    2bbe:	39 88       	ldd	r3, Y+17	; 0x11
    2bc0:	48 88       	ldd	r4, Y+16	; 0x10
    2bc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bcc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bce:	b9 84       	ldd	r11, Y+9	; 0x09
    2bd0:	c8 84       	ldd	r12, Y+8	; 0x08
    2bd2:	df 80       	ldd	r13, Y+7	; 0x07
    2bd4:	ee 80       	ldd	r14, Y+6	; 0x06
    2bd6:	fd 80       	ldd	r15, Y+5	; 0x05
    2bd8:	0c 81       	ldd	r16, Y+4	; 0x04
    2bda:	1b 81       	ldd	r17, Y+3	; 0x03
    2bdc:	aa 81       	ldd	r26, Y+2	; 0x02
    2bde:	b9 81       	ldd	r27, Y+1	; 0x01
    2be0:	ce 0f       	add	r28, r30
    2be2:	d1 1d       	adc	r29, r1
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	ed 01       	movw	r28, r26
    2bf0:	08 95       	ret

00002bf2 <_exit>:
    2bf2:	f8 94       	cli

00002bf4 <__stop_program>:
    2bf4:	ff cf       	rjmp	.-2      	; 0x2bf4 <__stop_program>
