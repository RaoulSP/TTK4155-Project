
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800100  00002da2  00002e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008002a6  008002a6  00002fdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000348  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003518  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001358  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011ea  00000000  00000000  00007bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000930  00000000  00000000  00008ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a5f  00000000  00000000  0000970c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002696  00000000  00000000  0000a16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000c801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_1>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_7>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_10>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e2 ea       	ldi	r30, 0xA2	; 162
     702:	fd e2       	ldi	r31, 0x2D	; 45
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a6 3a       	cpi	r26, 0xA6	; 166
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a6 ea       	ldi	r26, 0xA6	; 166
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a2 3d       	cpi	r26, 0xD2	; 210
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 ba 0a 	call	0x1574	; 0x1574 <main>
     724:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
#include "adc.h"

#ifdef NODE_1
	void adc_init(){
		clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
	}
	uint8_t adc_read(char channel){
		volatile char *ext_adc = (char *) 0x1400; 
		switch (channel){
     730:	82 37       	cpi	r24, 0x72	; 114
     732:	a9 f0       	breq	.+42     	; 0x75e <adc_read+0x2e>
     734:	18 f4       	brcc	.+6      	; 0x73c <adc_read+0xc>
     736:	8c 36       	cpi	r24, 0x6C	; 108
     738:	71 f0       	breq	.+28     	; 0x756 <adc_read+0x26>
     73a:	14 c0       	rjmp	.+40     	; 0x764 <adc_read+0x34>
     73c:	88 37       	cpi	r24, 0x78	; 120
     73e:	19 f0       	breq	.+6      	; 0x746 <adc_read+0x16>
     740:	89 37       	cpi	r24, 0x79	; 121
     742:	29 f0       	breq	.+10     	; 0x74e <adc_read+0x1e>
     744:	0f c0       	rjmp	.+30     	; 0x764 <adc_read+0x34>
		case 'x':
			*ext_adc = 0b0100;
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	80 93 00 14 	sts	0x1400, r24
			break;
     74c:	0b c0       	rjmp	.+22     	; 0x764 <adc_read+0x34>
		case 'y':
			*ext_adc = 0b0101;
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	80 93 00 14 	sts	0x1400, r24
			break;
     754:	07 c0       	rjmp	.+14     	; 0x764 <adc_read+0x34>
		case 'l':
			*ext_adc = 0b0110;
     756:	86 e0       	ldi	r24, 0x06	; 6
     758:	80 93 00 14 	sts	0x1400, r24
			break;
     75c:	03 c0       	rjmp	.+6      	; 0x764 <adc_read+0x34>
		case 'r':
			*ext_adc = 0b0111;
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	80 93 00 14 	sts	0x1400, r24
			break;
		}
		
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     764:	28 99       	sbic	0x05, 0	; 5
     766:	fe cf       	rjmp	.-4      	; 0x764 <adc_read+0x34>
		return (uint8_t) *ext_adc;
     768:	80 91 00 14 	lds	r24, 0x1400
}
     76c:	08 95       	ret

0000076e <can_init>:
#include "settings.h"
#include "interrupts.h"

volatile int can_message_received = 0;

void can_init(int mode){
     76e:	cf 93       	push	r28
     770:	c8 2f       	mov	r28, r24
	mcp_init();
     772:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <mcp_init>
	
	mcp_bit_modify(0x2B,0b00000011, 0b00000011); //enable receive msg interrupt
     776:	43 e0       	ldi	r20, 0x03	; 3
     778:	63 e0       	ldi	r22, 0x03	; 3
     77a:	8b e2       	ldi	r24, 0x2B	; 43
     77c:	0e 94 cb 06 	call	0xd96	; 0xd96 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     780:	40 e6       	ldi	r20, 0x60	; 96
     782:	60 e6       	ldi	r22, 0x60	; 96
     784:	80 e6       	ldi	r24, 0x60	; 96
     786:	0e 94 cb 06 	call	0xd96	; 0xd96 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     78a:	4c 2f       	mov	r20, r28
     78c:	6f ef       	ldi	r22, 0xFF	; 255
     78e:	8f e0       	ldi	r24, 0x0F	; 15
     790:	0e 94 cb 06 	call	0xd96	; 0xd96 <mcp_bit_modify>
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
	
	#ifdef NODE_1
	//External interrupt
	MCUCR |= (1 << ISC01);
     794:	85 b7       	in	r24, 0x35	; 53
     796:	82 60       	ori	r24, 0x02	; 2
     798:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     79a:	8b b7       	in	r24, 0x3b	; 59
     79c:	80 64       	ori	r24, 0x40	; 64
     79e:	8b bf       	out	0x3b, r24	; 59
	#endif
}
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <can_transmit>:

void can_transmit(Msg msg){
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <can_transmit+0xe>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <can_transmit+0x10>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <can_transmit+0x12>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	49 83       	std	Y+1, r20	; 0x01
     7bc:	5a 83       	std	Y+2, r21	; 0x02
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	7c 83       	std	Y+4, r23	; 0x04
     7c2:	8d 83       	std	Y+5, r24	; 0x05
     7c4:	9e 83       	std	Y+6, r25	; 0x06
     7c6:	09 81       	ldd	r16, Y+1	; 0x01
     7c8:	1a 81       	ldd	r17, Y+2	; 0x02
     7ca:	eb 80       	ldd	r14, Y+3	; 0x03
     7cc:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3, buffer = n - 1
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7ce:	b8 01       	movw	r22, r16
     7d0:	75 95       	asr	r23
     7d2:	67 95       	ror	r22
     7d4:	75 95       	asr	r23
     7d6:	67 95       	ror	r22
     7d8:	75 95       	asr	r23
     7da:	67 95       	ror	r22
     7dc:	81 e5       	ldi	r24, 0x51	; 81
     7de:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7e2:	60 2f       	mov	r22, r16
     7e4:	62 95       	swap	r22
     7e6:	66 0f       	add	r22, r22
     7e8:	60 7e       	andi	r22, 0xE0	; 224
     7ea:	82 e5       	ldi	r24, 0x52	; 82
     7ec:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7f0:	6e 2d       	mov	r22, r14
     7f2:	85 e5       	ldi	r24, 0x55	; 85
     7f4:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7f8:	1e 14       	cp	r1, r14
     7fa:	1f 04       	cpc	r1, r15
     7fc:	84 f4       	brge	.+32     	; 0x81e <can_transmit+0x7a>
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     802:	ed 81       	ldd	r30, Y+5	; 0x05
     804:	fe 81       	ldd	r31, Y+6	; 0x06
     806:	e0 0f       	add	r30, r16
     808:	f1 1f       	adc	r31, r17
     80a:	60 81       	ld	r22, Z
     80c:	86 e5       	ldi	r24, 0x56	; 86
     80e:	80 0f       	add	r24, r16
     810:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     814:	0f 5f       	subi	r16, 0xFF	; 255
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	0e 15       	cp	r16, r14
     81a:	1f 05       	cpc	r17, r15
     81c:	91 f7       	brne	.-28     	; 0x802 <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 bb 06 	call	0xd76	; 0xd76 <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     82e:	26 96       	adiw	r28, 0x06	; 6
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <can_receive>:

Msg can_receive(){
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <can_receive+0x1a>
     862:	00 d0       	rcall	.+0      	; 0x864 <can_receive+0x1c>
     864:	00 d0       	rcall	.+0      	; 0x866 <can_receive+0x1e>
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2, buffer = n - 1
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     86a:	81 e6       	ldi	r24, 0x61	; 97
     86c:	0e 94 9a 06 	call	0xd34	; 0xd34 <mcp_read>
     870:	a8 2e       	mov	r10, r24
     872:	82 e6       	ldi	r24, 0x62	; 98
     874:	0e 94 9a 06 	call	0xd34	; 0xd34 <mcp_read>
     878:	82 95       	swap	r24
     87a:	86 95       	lsr	r24
     87c:	87 70       	andi	r24, 0x07	; 7
     87e:	b1 2c       	mov	r11, r1
     880:	aa 0c       	add	r10, r10
     882:	bb 1c       	adc	r11, r11
     884:	aa 0c       	add	r10, r10
     886:	bb 1c       	adc	r11, r11
     888:	aa 0c       	add	r10, r10
     88a:	bb 1c       	adc	r11, r11
     88c:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     88e:	85 e6       	ldi	r24, 0x65	; 101
     890:	0e 94 9a 06 	call	0xd34	; 0xd34 <mcp_read>
     894:	8f 70       	andi	r24, 0x0F	; 15
     896:	c8 2e       	mov	r12, r24
     898:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     89a:	c6 01       	movw	r24, r12
     89c:	0e 94 82 11 	call	0x2304	; 0x2304 <malloc>
     8a0:	98 2e       	mov	r9, r24
     8a2:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     8a4:	1c 14       	cp	r1, r12
     8a6:	1d 04       	cpc	r1, r13
     8a8:	84 f4       	brge	.+32     	; 0x8ca <can_receive+0x82>
     8aa:	e8 2e       	mov	r14, r24
     8ac:	f9 2e       	mov	r15, r25
     8ae:	00 e0       	ldi	r16, 0x00	; 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     8b2:	86 e6       	ldi	r24, 0x66	; 102
     8b4:	80 0f       	add	r24, r16
     8b6:	0e 94 9a 06 	call	0xd34	; 0xd34 <mcp_read>
     8ba:	f7 01       	movw	r30, r14
     8bc:	81 93       	st	Z+, r24
     8be:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     8c0:	0f 5f       	subi	r16, 0xFF	; 255
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	0c 15       	cp	r16, r12
     8c6:	1d 05       	cpc	r17, r13
     8c8:	a4 f3       	brlt	.-24     	; 0x8b2 <can_receive+0x6a>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RXnIF to 0
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	8c e2       	ldi	r24, 0x2C	; 44
     8d0:	0e 94 cb 06 	call	0xd96	; 0xd96 <mcp_bit_modify>
	return msg;
     8d4:	ba 82       	std	Y+2, r11	; 0x02
     8d6:	a9 82       	std	Y+1, r10	; 0x01
     8d8:	dc 82       	std	Y+4, r13	; 0x04
     8da:	cb 82       	std	Y+3, r12	; 0x03
     8dc:	9d 82       	std	Y+5, r9	; 0x05
     8de:	8e 82       	std	Y+6, r8	; 0x06
     8e0:	2a 2d       	mov	r18, r10
     8e2:	3a 81       	ldd	r19, Y+2	; 0x02
     8e4:	4c 2d       	mov	r20, r12
     8e6:	5c 81       	ldd	r21, Y+4	; 0x04
     8e8:	69 2d       	mov	r22, r9
     8ea:	78 2d       	mov	r23, r8
}
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	26 96       	adiw	r28, 0x06	; 6
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	df 90       	pop	r13
     90a:	cf 90       	pop	r12
     90c:	bf 90       	pop	r11
     90e:	af 90       	pop	r10
     910:	9f 90       	pop	r9
     912:	8f 90       	pop	r8
     914:	08 95       	ret

00000916 <__vector_1>:
Msg can_construct_msg(int id, int length, char* data){
	Msg msg = {id,length,data};
	return msg;
} 

ISR(INT0_vect){
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
	can_message_received = 1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 a7 02 	sts	0x02A7, r25
     92c:	80 93 a6 02 	sts	0x02A6, r24
	//printf("ISR: %d\r\n", can_message_received);
}
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <joy_calibrate>:
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
	joy_calibrate();
}

void joy_calibrate(){
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
	xmean = adc_read('x');
     944:	88 e7       	ldi	r24, 0x78	; 120
     946:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 0d 01 	sts	0x010D, r25
     950:	80 93 0c 01 	sts	0x010C, r24
	ymean = adc_read('y');
     954:	89 e7       	ldi	r24, 0x79	; 121
     956:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 09 01 	sts	0x0109, r25
     960:	80 93 08 01 	sts	0x0108, r24
	xmax = 0;
     964:	10 92 0b 01 	sts	0x010B, r1
     968:	10 92 0a 01 	sts	0x010A, r1
	xmin = 255;
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	90 93 ab 02 	sts	0x02AB, r25
     974:	80 93 aa 02 	sts	0x02AA, r24
	ymax = 0;
     978:	10 92 07 01 	sts	0x0107, r1
     97c:	10 92 06 01 	sts	0x0106, r1
	ymin = 255;
     980:	90 93 a9 02 	sts	0x02A9, r25
     984:	80 93 a8 02 	sts	0x02A8, r24
	
	oled_print_string("Please calibrate joystick!",0,0,8,0);
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	28 e0       	ldi	r18, 0x08	; 8
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	84 eb       	ldi	r24, 0xB4	; 180
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
	oled_refresh();
     9a0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <oled_refresh>
	
	while (z == 0){
		x = adc_read('x');
		y = adc_read('y');
		z = !test_bit(PINB, PB2);
     9a4:	c1 e0       	ldi	r28, 0x01	; 1
	ymin = 255;
	
	oled_print_string("Please calibrate joystick!",0,0,8,0);
	oled_refresh();
	
	while (z == 0){
     9a6:	49 c0       	rjmp	.+146    	; 0xa3a <joy_calibrate+0xfc>
		x = adc_read('x');
     9a8:	88 e7       	ldi	r24, 0x78	; 120
     9aa:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 c5 02 	sts	0x02C5, r25
     9b4:	80 93 c4 02 	sts	0x02C4, r24
		y = adc_read('y');
     9b8:	89 e7       	ldi	r24, 0x79	; 121
     9ba:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 c7 02 	sts	0x02C7, r25
     9c4:	80 93 c6 02 	sts	0x02C6, r24
		z = !test_bit(PINB, PB2);
     9c8:	26 b3       	in	r18, 0x16	; 22
     9ca:	26 95       	lsr	r18
     9cc:	26 95       	lsr	r18
     9ce:	2c 27       	eor	r18, r28
     9d0:	21 70       	andi	r18, 0x01	; 1
     9d2:	20 93 ac 02 	sts	0x02AC, r18
     9d6:	10 92 ad 02 	sts	0x02AD, r1
		
		if (x > xmax){
     9da:	20 91 c4 02 	lds	r18, 0x02C4
     9de:	30 91 c5 02 	lds	r19, 0x02C5
     9e2:	40 91 0a 01 	lds	r20, 0x010A
     9e6:	50 91 0b 01 	lds	r21, 0x010B
     9ea:	42 17       	cp	r20, r18
     9ec:	53 07       	cpc	r21, r19
     9ee:	24 f4       	brge	.+8      	; 0x9f8 <joy_calibrate+0xba>
			xmax = x;
     9f0:	30 93 0b 01 	sts	0x010B, r19
     9f4:	20 93 0a 01 	sts	0x010A, r18
		}
		if (y > ymax){
     9f8:	40 91 06 01 	lds	r20, 0x0106
     9fc:	50 91 07 01 	lds	r21, 0x0107
     a00:	48 17       	cp	r20, r24
     a02:	59 07       	cpc	r21, r25
     a04:	24 f4       	brge	.+8      	; 0xa0e <joy_calibrate+0xd0>
			ymax = y;
     a06:	90 93 07 01 	sts	0x0107, r25
     a0a:	80 93 06 01 	sts	0x0106, r24
		}
		if (x < xmin){
     a0e:	40 91 aa 02 	lds	r20, 0x02AA
     a12:	50 91 ab 02 	lds	r21, 0x02AB
     a16:	24 17       	cp	r18, r20
     a18:	35 07       	cpc	r19, r21
     a1a:	24 f4       	brge	.+8      	; 0xa24 <joy_calibrate+0xe6>
			xmin = x;
     a1c:	30 93 ab 02 	sts	0x02AB, r19
     a20:	20 93 aa 02 	sts	0x02AA, r18
		}
		if (y < ymin){
     a24:	20 91 a8 02 	lds	r18, 0x02A8
     a28:	30 91 a9 02 	lds	r19, 0x02A9
     a2c:	82 17       	cp	r24, r18
     a2e:	93 07       	cpc	r25, r19
     a30:	24 f4       	brge	.+8      	; 0xa3a <joy_calibrate+0xfc>
			ymin = y;
     a32:	90 93 a9 02 	sts	0x02A9, r25
     a36:	80 93 a8 02 	sts	0x02A8, r24
	ymin = 255;
	
	oled_print_string("Please calibrate joystick!",0,0,8,0);
	oled_refresh();
	
	while (z == 0){
     a3a:	80 91 ac 02 	lds	r24, 0x02AC
     a3e:	90 91 ad 02 	lds	r25, 0x02AD
     a42:	89 2b       	or	r24, r25
     a44:	09 f4       	brne	.+2      	; 0xa48 <joy_calibrate+0x10a>
     a46:	b0 cf       	rjmp	.-160    	; 0x9a8 <joy_calibrate+0x6a>
		}
		if (y < ymin){
			ymin = y;
		}
	}
	oled_clear_screen();
     a48:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <oled_clear_screen>
	oled_print_string("Calibrated!",0,0,8,0);
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	28 e0       	ldi	r18, 0x08	; 8
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	8f ec       	ldi	r24, 0xCF	; 207
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
	oled_refresh();
     a64:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <oled_refresh>
}
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     a70:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     a72:	c2 9a       	sbi	0x18, 2	; 24
	joy_calibrate();
     a74:	0e 94 9f 04 	call	0x93e	; 0x93e <joy_calibrate>
     a78:	08 95       	ret

00000a7a <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	28 97       	sbiw	r28, 0x08	; 8
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
		x = adc_read('x');
     a9a:	88 e7       	ldi	r24, 0x78	; 120
     a9c:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 c5 02 	sts	0x02C5, r25
     aa6:	80 93 c4 02 	sts	0x02C4, r24
		y = adc_read('y');
     aaa:	89 e7       	ldi	r24, 0x79	; 121
     aac:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	30 93 c7 02 	sts	0x02C7, r19
     ab8:	20 93 c6 02 	sts	0x02C6, r18
		z = !test_bit(PINB, PB2);
     abc:	16 b3       	in	r17, 0x16	; 22
     abe:	16 95       	lsr	r17
     ac0:	16 95       	lsr	r17
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	18 27       	eor	r17, r24
     ac6:	11 70       	andi	r17, 0x01	; 1
     ac8:	00 e0       	ldi	r16, 0x00	; 0
     aca:	10 93 ac 02 	sts	0x02AC, r17
     ace:	00 93 ad 02 	sts	0x02AD, r16
		
		if (x > xmean){
     ad2:	80 91 c4 02 	lds	r24, 0x02C4
     ad6:	90 91 c5 02 	lds	r25, 0x02C5
     ada:	40 91 0c 01 	lds	r20, 0x010C
     ade:	50 91 0d 01 	lds	r21, 0x010D
     ae2:	48 17       	cp	r20, r24
     ae4:	59 07       	cpc	r21, r25
     ae6:	b4 f4       	brge	.+44     	; 0xb14 <joy_get_position+0x9a>
			x = ((x - xmean) * 100) / (xmax - xmean);
     ae8:	bc 01       	movw	r22, r24
     aea:	64 1b       	sub	r22, r20
     aec:	75 0b       	sbc	r23, r21
     aee:	e4 e6       	ldi	r30, 0x64	; 100
     af0:	e6 9f       	mul	r30, r22
     af2:	c0 01       	movw	r24, r0
     af4:	e7 9f       	mul	r30, r23
     af6:	90 0d       	add	r25, r0
     af8:	11 24       	eor	r1, r1
     afa:	60 91 0a 01 	lds	r22, 0x010A
     afe:	70 91 0b 01 	lds	r23, 0x010B
     b02:	64 1b       	sub	r22, r20
     b04:	75 0b       	sbc	r23, r21
     b06:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     b0a:	70 93 c5 02 	sts	0x02C5, r23
     b0e:	60 93 c4 02 	sts	0x02C4, r22
     b12:	17 c0       	rjmp	.+46     	; 0xb42 <joy_get_position+0xc8>
		}
		else {
			x = ((x - xmean) * 100) / (xmean - xmin);
     b14:	bc 01       	movw	r22, r24
     b16:	64 1b       	sub	r22, r20
     b18:	75 0b       	sbc	r23, r21
     b1a:	e4 e6       	ldi	r30, 0x64	; 100
     b1c:	e6 9f       	mul	r30, r22
     b1e:	c0 01       	movw	r24, r0
     b20:	e7 9f       	mul	r30, r23
     b22:	90 0d       	add	r25, r0
     b24:	11 24       	eor	r1, r1
     b26:	60 91 aa 02 	lds	r22, 0x02AA
     b2a:	70 91 ab 02 	lds	r23, 0x02AB
     b2e:	fa 01       	movw	r30, r20
     b30:	e6 1b       	sub	r30, r22
     b32:	f7 0b       	sbc	r31, r23
     b34:	bf 01       	movw	r22, r30
     b36:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     b3a:	70 93 c5 02 	sts	0x02C5, r23
     b3e:	60 93 c4 02 	sts	0x02C4, r22
		}
		if (y > ymean){
     b42:	40 91 08 01 	lds	r20, 0x0108
     b46:	50 91 09 01 	lds	r21, 0x0109
     b4a:	42 17       	cp	r20, r18
     b4c:	53 07       	cpc	r21, r19
     b4e:	ac f4       	brge	.+42     	; 0xb7a <joy_get_position+0x100>
			y = ((y - ymean) * 100) / (ymax - ymean);
     b50:	24 1b       	sub	r18, r20
     b52:	35 0b       	sbc	r19, r21
     b54:	64 e6       	ldi	r22, 0x64	; 100
     b56:	62 9f       	mul	r22, r18
     b58:	c0 01       	movw	r24, r0
     b5a:	63 9f       	mul	r22, r19
     b5c:	90 0d       	add	r25, r0
     b5e:	11 24       	eor	r1, r1
     b60:	60 91 06 01 	lds	r22, 0x0106
     b64:	70 91 07 01 	lds	r23, 0x0107
     b68:	64 1b       	sub	r22, r20
     b6a:	75 0b       	sbc	r23, r21
     b6c:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     b70:	70 93 c7 02 	sts	0x02C7, r23
     b74:	60 93 c6 02 	sts	0x02C6, r22
     b78:	15 c0       	rjmp	.+42     	; 0xba4 <joy_get_position+0x12a>
		}
		else {
			y = ((y - ymean)  * 100) / (ymean - ymin);
     b7a:	24 1b       	sub	r18, r20
     b7c:	35 0b       	sbc	r19, r21
     b7e:	64 e6       	ldi	r22, 0x64	; 100
     b80:	62 9f       	mul	r22, r18
     b82:	c0 01       	movw	r24, r0
     b84:	63 9f       	mul	r22, r19
     b86:	90 0d       	add	r25, r0
     b88:	11 24       	eor	r1, r1
     b8a:	20 91 a8 02 	lds	r18, 0x02A8
     b8e:	30 91 a9 02 	lds	r19, 0x02A9
     b92:	ba 01       	movw	r22, r20
     b94:	62 1b       	sub	r22, r18
     b96:	73 0b       	sbc	r23, r19
     b98:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     b9c:	70 93 c7 02 	sts	0x02C7, r23
     ba0:	60 93 c6 02 	sts	0x02C6, r22
		}
		
		Position pos;
		pos.x = x;
     ba4:	e0 90 c4 02 	lds	r14, 0x02C4
     ba8:	c0 90 c5 02 	lds	r12, 0x02C5
		pos.y = y;
     bac:	f0 90 c6 02 	lds	r15, 0x02C6
     bb0:	d0 90 c7 02 	lds	r13, 0x02C7
		pos.z = z;
		pos.r_slider = adc_read('r');
     bb4:	82 e7       	ldi	r24, 0x72	; 114
     bb6:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     bba:	90 e0       	ldi	r25, 0x00	; 0
		
		if (x < 4 && x > -4){
     bbc:	60 91 c4 02 	lds	r22, 0x02C4
     bc0:	70 91 c5 02 	lds	r23, 0x02C5
     bc4:	6d 5f       	subi	r22, 0xFD	; 253
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	67 30       	cpi	r22, 0x07	; 7
     bca:	71 05       	cpc	r23, r1
     bcc:	10 f4       	brcc	.+4      	; 0xbd2 <joy_get_position+0x158>
			pos.x = 0;
     bce:	e1 2c       	mov	r14, r1
     bd0:	c1 2c       	mov	r12, r1
		}
		if (y < 4 && y > -4){
     bd2:	e0 91 c6 02 	lds	r30, 0x02C6
     bd6:	f0 91 c7 02 	lds	r31, 0x02C7
     bda:	33 96       	adiw	r30, 0x03	; 3
     bdc:	37 97       	sbiw	r30, 0x07	; 7
     bde:	10 f4       	brcc	.+4      	; 0xbe4 <joy_get_position+0x16a>
			pos.y = 0;
     be0:	f1 2c       	mov	r15, r1
     be2:	d1 2c       	mov	r13, r1
		}
		return pos;
     be4:	e9 82       	std	Y+1, r14	; 0x01
     be6:	ca 82       	std	Y+2, r12	; 0x02
     be8:	fb 82       	std	Y+3, r15	; 0x03
     bea:	dc 82       	std	Y+4, r13	; 0x04
     bec:	1d 83       	std	Y+5, r17	; 0x05
     bee:	0e 83       	std	Y+6, r16	; 0x06
     bf0:	98 87       	std	Y+8, r25	; 0x08
     bf2:	8f 83       	std	Y+7, r24	; 0x07
     bf4:	2e 2d       	mov	r18, r14
     bf6:	3c 2d       	mov	r19, r12
     bf8:	4f 2d       	mov	r20, r15
     bfa:	5d 2d       	mov	r21, r13
     bfc:	61 2f       	mov	r22, r17
     bfe:	70 2f       	mov	r23, r16
}
     c00:	98 85       	ldd	r25, Y+8	; 0x08
     c02:	28 96       	adiw	r28, 0x08	; 8
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	28 97       	sbiw	r28, 0x08	; 8
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	Position pos_cart = joy_get_position();
     c44:	0e 94 3d 05 	call	0xa7a	; 0xa7a <joy_get_position>
     c48:	29 83       	std	Y+1, r18	; 0x01
     c4a:	3a 83       	std	Y+2, r19	; 0x02
     c4c:	4b 83       	std	Y+3, r20	; 0x03
     c4e:	5c 83       	std	Y+4, r21	; 0x04
     c50:	89 80       	ldd	r8, Y+1	; 0x01
     c52:	9a 80       	ldd	r9, Y+2	; 0x02
     c54:	ab 80       	ldd	r10, Y+3	; 0x03
     c56:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     c58:	b4 01       	movw	r22, r8
     c5a:	88 27       	eor	r24, r24
     c5c:	77 fd       	sbrc	r23, 7
     c5e:	80 95       	com	r24
     c60:	98 2f       	mov	r25, r24
     c62:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatsisf>
     c66:	6b 01       	movw	r12, r22
     c68:	7c 01       	movw	r14, r24
     c6a:	b5 01       	movw	r22, r10
     c6c:	88 27       	eor	r24, r24
     c6e:	77 fd       	sbrc	r23, 7
     c70:	80 95       	com	r24
     c72:	98 2f       	mov	r25, r24
     c74:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatsisf>
     c78:	a7 01       	movw	r20, r14
     c7a:	96 01       	movw	r18, r12
     c7c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <atan2>
     c80:	6b 01       	movw	r12, r22
     c82:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     c84:	88 9c       	mul	r8, r8
     c86:	b0 01       	movw	r22, r0
     c88:	89 9c       	mul	r8, r9
     c8a:	70 0d       	add	r23, r0
     c8c:	70 0d       	add	r23, r0
     c8e:	11 24       	eor	r1, r1
     c90:	aa 9c       	mul	r10, r10
     c92:	c0 01       	movw	r24, r0
     c94:	ab 9c       	mul	r10, r11
     c96:	90 0d       	add	r25, r0
     c98:	90 0d       	add	r25, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	68 0f       	add	r22, r24
     c9e:	79 1f       	adc	r23, r25
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__floatunsisf>
     ca8:	0e 94 c3 10 	call	0x2186	; 0x2186 <sqrt>
     cac:	4b 01       	movw	r8, r22
     cae:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     cb0:	20 ee       	ldi	r18, 0xE0	; 224
     cb2:	3e e2       	ldi	r19, 0x2E	; 46
     cb4:	45 e6       	ldi	r20, 0x65	; 101
     cb6:	52 e4       	ldi	r21, 0x42	; 66
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     cc0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     cc4:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     cc6:	c5 01       	movw	r24, r10
     cc8:	b4 01       	movw	r22, r8
     cca:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fixsfsi>
	return pos_pol;
     cce:	7b 01       	movw	r14, r22
}
     cd0:	c7 01       	movw	r24, r14
     cd2:	b6 01       	movw	r22, r12
     cd4:	28 96       	adiw	r28, 0x08	; 8
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	08 95       	ret

00000cf6 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     cf6:	0e 94 10 06 	call	0xc20	; 0xc20 <joy_get_position_polar>
     cfa:	9b 01       	movw	r18, r22
	if(pos_pol.amplitude > 80){
     cfc:	81 35       	cpi	r24, 0x51	; 81
     cfe:	91 05       	cpc	r25, r1
     d00:	7c f0       	brlt	.+30     	; 0xd20 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     d02:	68 38       	cpi	r22, 0x88	; 136
     d04:	71 05       	cpc	r23, r1
     d06:	74 f4       	brge	.+28     	; 0xd24 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     d08:	6e 32       	cpi	r22, 0x2E	; 46
     d0a:	71 05       	cpc	r23, r1
     d0c:	6c f4       	brge	.+26     	; 0xd28 <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     d0e:	24 3d       	cpi	r18, 0xD4	; 212
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	38 07       	cpc	r19, r24
     d14:	5c f4       	brge	.+22     	; 0xd2c <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     d16:	2a 37       	cpi	r18, 0x7A	; 122
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	54 f0       	brlt	.+20     	; 0xd30 <joy_get_direction+0x3a>
			return DOWN;
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	08 95       	ret

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     d30:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     d32:	08 95       	ret

00000d34 <mcp_read>:
     d34:	cf 93       	push	r28
     d36:	c8 2f       	mov	r28, r24
     d38:	c4 98       	cbi	0x18, 4	; 24
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d40:	8c 2f       	mov	r24, r28
     d42:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d4c:	c4 9a       	sbi	0x18, 4	; 24
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <mcp_write>:
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	d8 2f       	mov	r29, r24
     d58:	c6 2f       	mov	r28, r22
     d5a:	c4 98       	cbi	0x18, 4	; 24
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d62:	8d 2f       	mov	r24, r29
     d64:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d68:	8c 2f       	mov	r24, r28
     d6a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d6e:	c4 9a       	sbi	0x18, 4	; 24
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <mcp_request_to_send>:
     d76:	c4 98       	cbi	0x18, 4	; 24
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	48 2b       	or	r20, r24
     d84:	59 2b       	or	r21, r25
     d86:	cb 01       	movw	r24, r22
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	84 2b       	or	r24, r20
     d8e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     d92:	c4 9a       	sbi	0x18, 4	; 24
     d94:	08 95       	ret

00000d96 <mcp_bit_modify>:
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	18 2f       	mov	r17, r24
     d9e:	d6 2f       	mov	r29, r22
     da0:	c4 2f       	mov	r28, r20
     da2:	c4 98       	cbi	0x18, 4	; 24
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     daa:	81 2f       	mov	r24, r17
     dac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     db0:	8d 2f       	mov	r24, r29
     db2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     db6:	8c 2f       	mov	r24, r28
     db8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     dbc:	c4 9a       	sbi	0x18, 4	; 24
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	08 95       	ret

00000dc6 <mcp_reset>:
     dc6:	c4 98       	cbi	0x18, 4	; 24
     dc8:	80 ec       	ldi	r24, 0xC0	; 192
     dca:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_master_transmit>
     dce:	c4 9a       	sbi	0x18, 4	; 24
     dd0:	08 95       	ret

00000dd2 <mcp_init>:
     dd2:	0e 94 06 07 	call	0xe0c	; 0xe0c <spi_master_init>
     dd6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp_reset>
     dda:	08 95       	ret

00000ddc <pwm_change_freq>:
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	9c 01       	movw	r18, r24
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	8b e4       	ldi	r24, 0x4B	; 75
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodsi4>
     dfa:	21 50       	subi	r18, 0x01	; 1
     dfc:	31 09       	sbc	r19, r1
     dfe:	30 93 af 02 	sts	0x02AF, r19
     e02:	20 93 ae 02 	sts	0x02AE, r18
     e06:	35 bd       	out	0x25, r19	; 37
     e08:	24 bd       	out	0x24, r18	; 36
     e0a:	08 95       	ret

00000e0c <spi_master_init>:
     e0c:	87 b3       	in	r24, 0x17	; 23
     e0e:	80 6b       	ori	r24, 0xB0	; 176
     e10:	87 bb       	out	0x17, r24	; 23
     e12:	be 98       	cbi	0x17, 6	; 23
     e14:	81 e5       	ldi	r24, 0x51	; 81
     e16:	8d b9       	out	0x0d, r24	; 13
     e18:	c4 9a       	sbi	0x18, 4	; 24
     e1a:	08 95       	ret

00000e1c <spi_master_transmit>:
     e1c:	8f b9       	out	0x0f, r24	; 15
     e1e:	77 9b       	sbis	0x0e, 7	; 14
     e20:	fe cf       	rjmp	.-4      	; 0xe1e <spi_master_transmit+0x2>
     e22:	8f b1       	in	r24, 0x0f	; 15
     e24:	08 95       	ret

00000e26 <uart_putchar>:
     e26:	5d 9b       	sbis	0x0b, 5	; 11
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <uart_putchar>
     e2a:	8c b9       	out	0x0c, r24	; 12
     e2c:	08 95       	ret

00000e2e <uart_getchar>:
     e2e:	5f 9b       	sbis	0x0b, 7	; 11
     e30:	fe cf       	rjmp	.-4      	; 0xe2e <uart_getchar>
     e32:	8c b1       	in	r24, 0x0c	; 12
     e34:	08 95       	ret

00000e36 <uart_init>:
     e36:	aa 27       	eor	r26, r26
     e38:	97 fd       	sbrc	r25, 7
     e3a:	a0 95       	com	r26
     e3c:	ba 2f       	mov	r27, r26
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	aa 1f       	adc	r26, r26
     e44:	bb 1f       	adc	r27, r27
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	aa 1f       	adc	r26, r26
     e4c:	bb 1f       	adc	r27, r27
     e4e:	9c 01       	movw	r18, r24
     e50:	ad 01       	movw	r20, r26
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	44 1f       	adc	r20, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	44 1f       	adc	r20, r20
     e60:	55 1f       	adc	r21, r21
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	8b e4       	ldi	r24, 0x4B	; 75
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 4f 11 	call	0x229e	; 0x229e <__divmodsi4>
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	31 09       	sbc	r19, r1
     e72:	29 b9       	out	0x09, r18	; 9
     e74:	30 bd       	out	0x20, r19	; 32
     e76:	88 e1       	ldi	r24, 0x18	; 24
     e78:	8a b9       	out	0x0a, r24	; 10
     e7a:	8e e8       	ldi	r24, 0x8E	; 142
     e7c:	80 bd       	out	0x20, r24	; 32
     e7e:	67 e1       	ldi	r22, 0x17	; 23
     e80:	77 e0       	ldi	r23, 0x07	; 7
     e82:	83 e1       	ldi	r24, 0x13	; 19
     e84:	97 e0       	ldi	r25, 0x07	; 7
     e86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <fdevopen>
     e8a:	08 95       	ret

00000e8c <game_run>:
void game_init(){
	oled_clear_screen();
}
int tones[] = { 1898, 1690, 1500, 1420, 1265, 1194, 1126, 1063, 1001, 947, 893, 843, 795, 749, 710, 668, 630, 594 };

void game_run(){
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	67 97       	sbiw	r28, 0x17	; 23
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	
	if (!initiated){
     eac:	80 91 b0 02 	lds	r24, 0x02B0
     eb0:	90 91 b1 02 	lds	r25, 0x02B1
     eb4:	89 2b       	or	r24, r25
     eb6:	41 f4       	brne	.+16     	; 0xec8 <game_run+0x3c>
int deaths = 0;
int initiated = 0;
int game_time = -1;

void game_init(){
	oled_clear_screen();
     eb8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <oled_clear_screen>
	
	if (!initiated){
		game_init();
		//music_init(1);
		//music_start_song();
		initiated = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	90 93 b1 02 	sts	0x02B1, r25
     ec4:	80 93 b0 02 	sts	0x02B0, r24
	}
	
	
	if(music_beat_flag == 1){
     ec8:	80 91 bc 02 	lds	r24, 0x02BC
     ecc:	90 91 bd 02 	lds	r25, 0x02BD
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	51 f4       	brne	.+20     	; 0xee8 <game_run+0x5c>
		music_play_song(tones, 15);
     ed4:	6f e0       	ldi	r22, 0x0F	; 15
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	8e e0       	ldi	r24, 0x0E	; 14
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <music_play_song>
		music_beat_flag == 0;
     ee0:	80 91 bc 02 	lds	r24, 0x02BC
     ee4:	90 91 bd 02 	lds	r25, 0x02BD
	}
		//music_play_song(tones,15);
	if(game_time_passed == 1){
     ee8:	80 91 aa 01 	lds	r24, 0x01AA
     eec:	90 91 ab 01 	lds	r25, 0x01AB
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <game_run+0x6a>
     ef4:	56 c0       	rjmp	.+172    	; 0xfa2 <game_run+0x116>
		game_time++;
     ef6:	80 91 32 01 	lds	r24, 0x0132
     efa:	90 91 33 01 	lds	r25, 0x0133
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	90 93 33 01 	sts	0x0133, r25
     f04:	80 93 32 01 	sts	0x0132, r24
		char str[5];
		char hs[4];

		sprintf(str,"%5d",game_time);
     f08:	9f 93       	push	r25
     f0a:	8f 93       	push	r24
     f0c:	86 e3       	ldi	r24, 0x36	; 54
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	7e 01       	movw	r14, r28
     f16:	8f e0       	ldi	r24, 0x0F	; 15
     f18:	e8 0e       	add	r14, r24
     f1a:	f1 1c       	adc	r15, r1
     f1c:	ff 92       	push	r15
     f1e:	ef 92       	push	r14
     f20:	0e 94 db 13 	call	0x27b6	; 0x27b6 <sprintf>
		sprintf(hs,"%4d",1337);
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	8f 93       	push	r24
     f28:	89 e3       	ldi	r24, 0x39	; 57
     f2a:	8f 93       	push	r24
     f2c:	8a e3       	ldi	r24, 0x3A	; 58
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	6e 01       	movw	r12, r28
     f36:	94 e1       	ldi	r25, 0x14	; 20
     f38:	c9 0e       	add	r12, r25
     f3a:	d1 1c       	adc	r13, r1
     f3c:	df 92       	push	r13
     f3e:	cf 92       	push	r12
     f40:	0e 94 db 13 	call	0x27b6	; 0x27b6 <sprintf>
		oled_clear_line(0);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <oled_clear_line>
		oled_print_string("HIGH SCORE:",0,0,5,0);
     f4c:	00 e0       	ldi	r16, 0x00	; 0
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	25 e0       	ldi	r18, 0x05	; 5
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	8e e3       	ldi	r24, 0x3E	; 62
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
		oled_print_string(hs,7*8,0,5,0);
     f5e:	25 e0       	ldi	r18, 0x05	; 5
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	68 e3       	ldi	r22, 0x38	; 56
     f64:	c6 01       	movw	r24, r12
     f66:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
		oled_clear_line(1);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <oled_clear_line>
		oled_print_string("SCORE:",0,1,5,0);
     f72:	25 e0       	ldi	r18, 0x05	; 5
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	83 e4       	ldi	r24, 0x43	; 67
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
		oled_print_string(str,4*8,1,5,0);
     f80:	25 e0       	ldi	r18, 0x05	; 5
     f82:	41 e0       	ldi	r20, 0x01	; 1
     f84:	60 e2       	ldi	r22, 0x20	; 32
     f86:	c7 01       	movw	r24, r14
     f88:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
		oled_refresh();
     f8c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <oled_refresh>
		game_time_passed = 0;
     f90:	10 92 ab 01 	sts	0x01AB, r1
     f94:	10 92 aa 01 	sts	0x01AA, r1
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
		
	}
	//SEND POSITION
	Position position = joy_get_position();
     fa2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <joy_get_position>
     fa6:	29 83       	std	Y+1, r18	; 0x01
     fa8:	3a 83       	std	Y+2, r19	; 0x02
     faa:	4b 83       	std	Y+3, r20	; 0x03
     fac:	5c 83       	std	Y+4, r21	; 0x04
     fae:	6d 83       	std	Y+5, r22	; 0x05
     fb0:	7e 83       	std	Y+6, r23	; 0x06
     fb2:	8f 83       	std	Y+7, r24	; 0x07
     fb4:	98 87       	std	Y+8, r25	; 0x08
	Msg msg;
	msg.id = 42;
     fb6:	8a e2       	ldi	r24, 0x2A	; 42
     fb8:	48 2f       	mov	r20, r24
     fba:	89 87       	std	Y+9, r24	; 0x09
     fbc:	1a 86       	std	Y+10, r1	; 0x0a
	msg.length = sizeof(position);
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	68 2f       	mov	r22, r24
     fc2:	8b 87       	std	Y+11, r24	; 0x0b
     fc4:	1c 86       	std	Y+12, r1	; 0x0c
	msg.data = (char*) &position;
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	9e 87       	std	Y+14, r25	; 0x0e
     fcc:	8d 87       	std	Y+13, r24	; 0x0d
	can_transmit(msg);
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <can_transmit>
	
	//GET SCORE
	if (game_occluded){
     fd8:	80 91 c0 02 	lds	r24, 0x02C0
     fdc:	90 91 c1 02 	lds	r25, 0x02C1
     fe0:	89 2b       	or	r24, r25
     fe2:	59 f1       	breq	.+86     	; 0x103a <game_run+0x1ae>
		char scr[5];
		deaths++;
     fe4:	80 91 b2 02 	lds	r24, 0x02B2
     fe8:	90 91 b3 02 	lds	r25, 0x02B3
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	90 93 b3 02 	sts	0x02B3, r25
     ff2:	80 93 b2 02 	sts	0x02B2, r24
		sprintf(scr,"%5d",deaths);
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	86 e3       	ldi	r24, 0x36	; 54
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	9f 93       	push	r25
    1000:	8f 93       	push	r24
    1002:	7e 01       	movw	r14, r28
    1004:	9f e0       	ldi	r25, 0x0F	; 15
    1006:	e9 0e       	add	r14, r25
    1008:	f1 1c       	adc	r15, r1
    100a:	ff 92       	push	r15
    100c:	ef 92       	push	r14
    100e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <sprintf>
		oled_print_string(scr,5,5,8,0);
    1012:	00 e0       	ldi	r16, 0x00	; 0
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	28 e0       	ldi	r18, 0x08	; 8
    1018:	45 e0       	ldi	r20, 0x05	; 5
    101a:	65 e0       	ldi	r22, 0x05	; 5
    101c:	c7 01       	movw	r24, r14
    101e:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
		oled_refresh();
    1022:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <oled_refresh>
		game_occluded = 0;
    1026:	10 92 c1 02 	sts	0x02C1, r1
    102a:	10 92 c0 02 	sts	0x02C0, r1
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
		//TODO: stop game
	}
	//TODO: Create state-machine
	//TODO: Calibrate hardware (?)
}
    103a:	67 96       	adiw	r28, 0x17	; 23
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13
    1054:	cf 90       	pop	r12
    1056:	08 95       	ret

00001058 <action_run_game>:
	}
}

//Action functions
Menu* action_run_game(Menu* self){
	state = in_game;
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 93 a7 01 	sts	0x01A7, r24
}
    105e:	08 95       	ret

00001060 <action_start_transition_right>:
Menu* action_start_transition_right(Menu* self){
		if (self->sub_menus[self->cursor]->num_of_entries != 0){
    1060:	dc 01       	movw	r26, r24
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	ed 91       	ld	r30, X+
    1066:	fc 91       	ld	r31, X
    1068:	13 97       	sbiw	r26, 0x03	; 3
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	1a 96       	adiw	r26, 0x0a	; 10
    1070:	2d 91       	ld	r18, X+
    1072:	3c 91       	ld	r19, X
    1074:	1b 97       	sbiw	r26, 0x0b	; 11
    1076:	e2 0f       	add	r30, r18
    1078:	f3 1f       	adc	r31, r19
    107a:	01 90       	ld	r0, Z+
    107c:	f0 81       	ld	r31, Z
    107e:	e0 2d       	mov	r30, r0
    1080:	26 81       	ldd	r18, Z+6	; 0x06
    1082:	37 81       	ldd	r19, Z+7	; 0x07
    1084:	23 2b       	or	r18, r19
    1086:	59 f0       	breq	.+22     	; 0x109e <action_start_transition_right+0x3e>
			self = self->sub_menus[self->cursor];
			joy_held = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 93 b5 02 	sts	0x02B5, r25
    1090:	80 93 b4 02 	sts	0x02B4, r24
			transition = 1;
    1094:	90 93 b9 02 	sts	0x02B9, r25
    1098:	80 93 b8 02 	sts	0x02B8, r24
Menu* action_run_game(Menu* self){
	state = in_game;
}
Menu* action_start_transition_right(Menu* self){
		if (self->sub_menus[self->cursor]->num_of_entries != 0){
			self = self->sub_menus[self->cursor];
    109c:	cf 01       	movw	r24, r30
			joy_held = 1;
			transition = 1;
		}
		return self;
}
    109e:	08 95       	ret

000010a0 <action_toggle_name>:
Menu* action_toggle_name(Menu* self){	//TEST FOR CHECK BOXES IN OPTIONS
	self->sub_menus[self->cursor]->name= "Herman";
    10a0:	dc 01       	movw	r26, r24
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	13 97       	sbiw	r26, 0x03	; 3
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	1a 96       	adiw	r26, 0x0a	; 10
    10b0:	2d 91       	ld	r18, X+
    10b2:	3c 91       	ld	r19, X
    10b4:	1b 97       	sbiw	r26, 0x0b	; 11
    10b6:	e2 0f       	add	r30, r18
    10b8:	f3 1f       	adc	r31, r19
    10ba:	01 90       	ld	r0, Z+
    10bc:	f0 81       	ld	r31, Z
    10be:	e0 2d       	mov	r30, r0
    10c0:	2a e4       	ldi	r18, 0x4A	; 74
    10c2:	32 e0       	ldi	r19, 0x02	; 2
    10c4:	31 83       	std	Z+1, r19	; 0x01
    10c6:	20 83       	st	Z, r18
	return self;
}
    10c8:	08 95       	ret

000010ca <draw_list>:
			transition = 0;
		}
	}
	return self;
}
Menu* draw_list(Menu* self){
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	7c 01       	movw	r14, r24
	for(int i = 0; i < self->num_of_entries; i++){
    10d8:	dc 01       	movw	r26, r24
    10da:	16 96       	adiw	r26, 0x06	; 6
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	17 97       	sbiw	r26, 0x07	; 7
    10e2:	18 16       	cp	r1, r24
    10e4:	19 06       	cpc	r1, r25
    10e6:	fc f4       	brge	.+62     	; 0x1126 <draw_list+0x5c>
    10e8:	c0 e0       	ldi	r28, 0x00	; 0
    10ea:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
    10ec:	ce 01       	movw	r24, r28
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	d7 01       	movw	r26, r14
    10f4:	1a 96       	adiw	r26, 0x0a	; 10
    10f6:	ed 91       	ld	r30, X+
    10f8:	fc 91       	ld	r31, X
    10fa:	1b 97       	sbiw	r26, 0x0b	; 11
    10fc:	e8 0f       	add	r30, r24
    10fe:	f9 1f       	adc	r31, r25
    1100:	01 90       	ld	r0, Z+
    1102:	f0 81       	ld	r31, Z
    1104:	e0 2d       	mov	r30, r0
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	25 e0       	ldi	r18, 0x05	; 5
    110c:	4c 2f       	mov	r20, r28
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
		}
	}
	return self;
}
Menu* draw_list(Menu* self){
	for(int i = 0; i < self->num_of_entries; i++){
    1118:	21 96       	adiw	r28, 0x01	; 1
    111a:	f7 01       	movw	r30, r14
    111c:	86 81       	ldd	r24, Z+6	; 0x06
    111e:	97 81       	ldd	r25, Z+7	; 0x07
    1120:	c8 17       	cp	r28, r24
    1122:	d9 07       	cpc	r29, r25
    1124:	1c f3       	brlt	.-58     	; 0x10ec <draw_list+0x22>
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
	}
	//Where to go next
	Direction dir = joy_get_direction();
    1126:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <joy_get_direction>
	if((dir == LEFT) & (self->super_menu != NULL)){
		self = self->super_menu;
	}
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	08 95       	ret

00001138 <add_sub_menu>:
		empty->num_of_entries = 0;
		add_sub_menu(menu, empty);
	}
}

void add_sub_menu(Menu* super, Menu* sub){
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
    1146:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    1148:	8e 81       	ldd	r24, Y+6	; 0x06
    114a:	9f 81       	ldd	r25, Y+7	; 0x07
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	9f 83       	std	Y+7, r25	; 0x07
    1150:	8e 83       	std	Y+6, r24	; 0x06
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    1152:	fb 01       	movw	r30, r22
    1154:	d1 87       	std	Z+9, r29	; 0x09
    1156:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    1158:	6e 81       	ldd	r22, Y+6	; 0x06
    115a:	7f 81       	ldd	r23, Y+7	; 0x07
    115c:	66 0f       	add	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	8a 85       	ldd	r24, Y+10	; 0x0a
    1162:	9b 85       	ldd	r25, Y+11	; 0x0b
    1164:	0e 94 a9 12 	call	0x2552	; 0x2552 <realloc>
    1168:	9b 87       	std	Y+11, r25	; 0x0b
    116a:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    116c:	ee 80       	ldd	r14, Y+6	; 0x06
    116e:	ff 80       	ldd	r15, Y+7	; 0x07
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	ef 1a       	sub	r14, r31
    1174:	f0 e8       	ldi	r31, 0x80	; 128
    1176:	ff 0a       	sbc	r15, r31
    1178:	ee 0c       	add	r14, r14
    117a:	ff 1c       	adc	r15, r15
    117c:	e8 0e       	add	r14, r24
    117e:	f9 1e       	adc	r15, r25
    1180:	80 e1       	ldi	r24, 0x10	; 16
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 82 11 	call	0x2304	; 0x2304 <malloc>
    1188:	f7 01       	movw	r30, r14
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    118e:	ee 81       	ldd	r30, Y+6	; 0x06
    1190:	ff 81       	ldd	r31, Y+7	; 0x07
    1192:	e1 50       	subi	r30, 0x01	; 1
    1194:	f0 48       	sbci	r31, 0x80	; 128
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	8a 85       	ldd	r24, Y+10	; 0x0a
    119c:	9b 85       	ldd	r25, Y+11	; 0x0b
    119e:	e8 0f       	add	r30, r24
    11a0:	f9 1f       	adc	r31, r25
    11a2:	11 83       	std	Z+1, r17	; 0x01
    11a4:	00 83       	st	Z, r16
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret

000011b4 <menu_init>:

Menu* current_menu = &main_menu;

//The initializer - How the menus are related
void menu_init(){
	add_sub_menu(&main_menu, &play_game);
    11b4:	66 e3       	ldi	r22, 0x36	; 54
    11b6:	71 e0       	ldi	r23, 0x01	; 1
    11b8:	86 e9       	ldi	r24, 0x96	; 150
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 9c 08 	call	0x1138	; 0x1138 <add_sub_menu>
	
	char* control_entr[3] = {"player1", "player2", "player3"};
	//add_list_entries(&control, control_entr, 3);
	add_sub_menu(&options, &control);
    11c0:	66 e6       	ldi	r22, 0x66	; 102
    11c2:	71 e0       	ldi	r23, 0x01	; 1
    11c4:	86 e8       	ldi	r24, 0x86	; 134
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 9c 08 	call	0x1138	; 0x1138 <add_sub_menu>
	
	//char* contro_entr[4] = {"low", "medium", "high","ultra"};
	//add_list_entries(&contro, contro_entr, 4);
	add_sub_menu(&options, &contro);
    11cc:	66 e5       	ldi	r22, 0x56	; 86
    11ce:	71 e0       	ldi	r23, 0x01	; 1
    11d0:	86 e8       	ldi	r24, 0x86	; 134
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 9c 08 	call	0x1138	; 0x1138 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    11d8:	66 e8       	ldi	r22, 0x86	; 134
    11da:	71 e0       	ldi	r23, 0x01	; 1
    11dc:	86 e9       	ldi	r24, 0x96	; 150
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 9c 08 	call	0x1138	; 0x1138 <add_sub_menu>
	add_sub_menu(&main_menu, &toggle);
    11e4:	66 e4       	ldi	r22, 0x46	; 70
    11e6:	71 e0       	ldi	r23, 0x01	; 1
    11e8:	86 e9       	ldi	r24, 0x96	; 150
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 9c 08 	call	0x1138	; 0x1138 <add_sub_menu>
	//add_list_entries(&main_menu, diff_entr, 1);
	//add_sub_menu(&main_menu, &difficulty);
	
	char* high_entr[4] = {"1. herman","2. raoul","3. alle andre","-inf^inf. hans"};
	//add_list_entries(&highscore, high_entr,4);
	add_sub_menu(&main_menu, &highscore);
    11f0:	66 e7       	ldi	r22, 0x76	; 118
    11f2:	71 e0       	ldi	r23, 0x01	; 1
    11f4:	86 e9       	ldi	r24, 0x96	; 150
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 9c 08 	call	0x1138	; 0x1138 <add_sub_menu>
    11fc:	08 95       	ret

000011fe <menu_run_display>:
	return self;
}
//void action_animation(){}

void menu_run_display(){
	oled_clear_screen();
    11fe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    1202:	80 91 34 01 	lds	r24, 0x0134
    1206:	90 91 35 01 	lds	r25, 0x0135
    120a:	dc 01       	movw	r26, r24
    120c:	1c 96       	adiw	r26, 0x0c	; 12
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	1d 97       	sbiw	r26, 0x0d	; 13
    1214:	09 95       	icall
    1216:	90 93 35 01 	sts	0x0135, r25
    121a:	80 93 34 01 	sts	0x0134, r24
	oled_refresh();
    121e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <oled_refresh>
    1222:	08 95       	ret

00001224 <menu_transition>:
}
void menu_transition(Menu *self, Direction dir){
	//If done with transition
	if (transition_count == 8){
    1224:	20 91 b6 02 	lds	r18, 0x02B6
    1228:	30 91 b7 02 	lds	r19, 0x02B7
    122c:	28 30       	cpi	r18, 0x08	; 8
    122e:	31 05       	cpc	r19, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <menu_transition+0x10>
    1232:	4a c0       	rjmp	.+148    	; 0x12c8 <menu_transition+0xa4>
		//wrapping
		if(transition_dir == UP){
    1234:	20 91 a6 01 	lds	r18, 0x01A6
    1238:	21 30       	cpi	r18, 0x01	; 1
    123a:	91 f4       	brne	.+36     	; 0x1260 <menu_transition+0x3c>
			self->cursor--;
    123c:	fc 01       	movw	r30, r24
    123e:	22 81       	ldd	r18, Z+2	; 0x02
    1240:	33 81       	ldd	r19, Z+3	; 0x03
    1242:	21 50       	subi	r18, 0x01	; 1
    1244:	31 09       	sbc	r19, r1
    1246:	33 83       	std	Z+3, r19	; 0x03
    1248:	22 83       	std	Z+2, r18	; 0x02
			if(self->cursor == -1){
    124a:	2f 3f       	cpi	r18, 0xFF	; 255
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	e1 f4       	brne	.+56     	; 0x1288 <menu_transition+0x64>
				self->cursor = self->num_of_entries - 1;
    1250:	fc 01       	movw	r30, r24
    1252:	26 81       	ldd	r18, Z+6	; 0x06
    1254:	37 81       	ldd	r19, Z+7	; 0x07
    1256:	21 50       	subi	r18, 0x01	; 1
    1258:	31 09       	sbc	r19, r1
    125a:	33 83       	std	Z+3, r19	; 0x03
    125c:	22 83       	std	Z+2, r18	; 0x02
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <menu_transition+0x64>
			}
		}
		else if(transition_dir == DOWN){
    1260:	23 30       	cpi	r18, 0x03	; 3
    1262:	91 f4       	brne	.+36     	; 0x1288 <menu_transition+0x64>
			//wrapping
			if(self->cursor == self->num_of_entries - 1){
    1264:	fc 01       	movw	r30, r24
    1266:	22 81       	ldd	r18, Z+2	; 0x02
    1268:	33 81       	ldd	r19, Z+3	; 0x03
    126a:	46 81       	ldd	r20, Z+6	; 0x06
    126c:	57 81       	ldd	r21, Z+7	; 0x07
    126e:	41 50       	subi	r20, 0x01	; 1
    1270:	51 09       	sbc	r21, r1
    1272:	24 17       	cp	r18, r20
    1274:	35 07       	cpc	r19, r21
    1276:	19 f4       	brne	.+6      	; 0x127e <menu_transition+0x5a>
				self->cursor = 0;
    1278:	13 82       	std	Z+3, r1	; 0x03
    127a:	12 82       	std	Z+2, r1	; 0x02
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <menu_transition+0x64>
			}
			else{
				self->cursor++;
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	fc 01       	movw	r30, r24
    1284:	33 83       	std	Z+3, r19	; 0x03
    1286:	22 83       	std	Z+2, r18	; 0x02
			}
		}
		transition_count = 0;
    1288:	10 92 b7 02 	sts	0x02B7, r1
    128c:	10 92 b6 02 	sts	0x02B6, r1
		transition_dir = NEUTRAL;
    1290:	2f ef       	ldi	r18, 0xFF	; 255
    1292:	20 93 a6 01 	sts	0x01A6, r18
		transition = 0;
    1296:	10 92 b9 02 	sts	0x02B9, r1
    129a:	10 92 b8 02 	sts	0x02B8, r1
		oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));//The final box
    129e:	fc 01       	movw	r30, r24
    12a0:	22 81       	ldd	r18, Z+2	; 0x02
    12a2:	33 81       	ldd	r19, Z+3	; 0x03
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	b9 01       	movw	r22, r18
    12b6:	68 50       	subi	r22, 0x08	; 8
    12b8:	71 09       	sbc	r23, r1
    12ba:	40 e4       	ldi	r20, 0x40	; 64
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <oled_invert_rectangle>
    12c6:	08 95       	ret
	}
	//Update the transition
	else if(transition == 1 && (transition_dir == UP || transition_dir == DOWN)){
    12c8:	40 91 b8 02 	lds	r20, 0x02B8
    12cc:	50 91 b9 02 	lds	r21, 0x02B9
    12d0:	41 30       	cpi	r20, 0x01	; 1
    12d2:	51 05       	cpc	r21, r1
    12d4:	89 f5       	brne	.+98     	; 0x1338 <menu_transition+0x114>
    12d6:	40 91 a6 01 	lds	r20, 0x01A6
    12da:	41 30       	cpi	r20, 0x01	; 1
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <menu_transition+0xc4>
    12de:	43 30       	cpi	r20, 0x03	; 3
    12e0:	59 f5       	brne	.+86     	; 0x1338 <menu_transition+0x114>
		int sign = 1;
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <menu_transition+0xc8>
		if(transition_dir == UP){
			sign = -1;
    12e8:	4f ef       	ldi	r20, 0xFF	; 255
    12ea:	5f ef       	ldi	r21, 0xFF	; 255
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    12ec:	fc 01       	movw	r30, r24
    12ee:	62 81       	ldd	r22, Z+2	; 0x02
    12f0:	73 81       	ldd	r23, Z+3	; 0x03
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	66 0f       	add	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	66 0f       	add	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	42 9f       	mul	r20, r18
    1300:	c0 01       	movw	r24, r0
    1302:	43 9f       	mul	r20, r19
    1304:	90 0d       	add	r25, r0
    1306:	52 9f       	mul	r21, r18
    1308:	90 0d       	add	r25, r0
    130a:	11 24       	eor	r1, r1
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
    130c:	9b 01       	movw	r18, r22
    130e:	28 5f       	subi	r18, 0xF8	; 248
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	28 0f       	add	r18, r24
    1314:	39 1f       	adc	r19, r25
		if(transition_dir == UP){
			sign = -1;
		}
		int x1 = 0;
		int x2 = 64;
		int y1 = 8*(self->cursor) + sign*transition_count;
    1316:	68 0f       	add	r22, r24
    1318:	79 1f       	adc	r23, r25
		int y2 = 8*(self->cursor + 1) + sign*transition_count;
		
		oled_invert_rectangle(x1,y1,x2,y2);
    131a:	40 e4       	ldi	r20, 0x40	; 64
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <oled_invert_rectangle>
		transition_count++;
    1326:	80 91 b6 02 	lds	r24, 0x02B6
    132a:	90 91 b7 02 	lds	r25, 0x02B7
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	90 93 b7 02 	sts	0x02B7, r25
    1334:	80 93 b6 02 	sts	0x02B6, r24
    1338:	08 95       	ret

0000133a <draw_menu>:
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
	super->sub_menus[super->num_of_entries - 1] = sub;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	28 97       	sbiw	r28, 0x08	; 8
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	6c 01       	movw	r12, r24
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    135c:	dc 01       	movw	r26, r24
    135e:	16 96       	adiw	r26, 0x06	; 6
    1360:	8d 91       	ld	r24, X+
    1362:	9c 91       	ld	r25, X
    1364:	17 97       	sbiw	r26, 0x07	; 7
    1366:	18 16       	cp	r1, r24
    1368:	19 06       	cpc	r1, r25
    136a:	0c f5       	brge	.+66     	; 0x13ae <draw_menu+0x74>
    136c:	e1 2c       	mov	r14, r1
    136e:	f1 2c       	mov	r15, r1
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
    1370:	c7 01       	movw	r24, r14
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	d6 01       	movw	r26, r12
    1378:	1a 96       	adiw	r26, 0x0a	; 10
    137a:	ed 91       	ld	r30, X+
    137c:	fc 91       	ld	r31, X
    137e:	1b 97       	sbiw	r26, 0x0b	; 11
    1380:	e8 0f       	add	r30, r24
    1382:	f9 1f       	adc	r31, r25
    1384:	01 90       	ld	r0, Z+
    1386:	f0 81       	ld	r31, Z
    1388:	e0 2d       	mov	r30, r0
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	25 e0       	ldi	r18, 0x05	; 5
    1390:	4e 2d       	mov	r20, r14
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	0e 94 11 0c 	call	0x1822	; 0x1822 <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	//Print the menu
	for(int i = 0; i < self->num_of_entries; i++){
    139c:	bf ef       	ldi	r27, 0xFF	; 255
    139e:	eb 1a       	sub	r14, r27
    13a0:	fb 0a       	sbc	r15, r27
    13a2:	f6 01       	movw	r30, r12
    13a4:	86 81       	ldd	r24, Z+6	; 0x06
    13a6:	97 81       	ldd	r25, Z+7	; 0x07
    13a8:	e8 16       	cp	r14, r24
    13aa:	f9 06       	cpc	r15, r25
    13ac:	0c f3       	brlt	.-62     	; 0x1370 <draw_menu+0x36>
		oled_print_string(self->sub_menus[i]->name,0,i,5,0);
	}
	if(transition == 0){
    13ae:	80 91 b8 02 	lds	r24, 0x02B8
    13b2:	90 91 b9 02 	lds	r25, 0x02B9
    13b6:	89 2b       	or	r24, r25
    13b8:	b1 f4       	brne	.+44     	; 0x13e6 <draw_menu+0xac>
		oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
    13ba:	d6 01       	movw	r26, r12
    13bc:	12 96       	adiw	r26, 0x02	; 2
    13be:	2d 91       	ld	r18, X+
    13c0:	3c 91       	ld	r19, X
    13c2:	13 97       	sbiw	r26, 0x03	; 3
    13c4:	2f 5f       	subi	r18, 0xFF	; 255
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	b9 01       	movw	r22, r18
    13d6:	68 50       	subi	r22, 0x08	; 8
    13d8:	71 09       	sbc	r23, r1
    13da:	40 e4       	ldi	r20, 0x40	; 64
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <oled_invert_rectangle>
	}
	//Where to go next
	Direction dir = joy_get_direction();
    13e6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <joy_get_direction>
    13ea:	18 2f       	mov	r17, r24
	Position pos = joy_get_position();
    13ec:	0e 94 3d 05 	call	0xa7a	; 0xa7a <joy_get_position>
    13f0:	29 83       	std	Y+1, r18	; 0x01
    13f2:	3a 83       	std	Y+2, r19	; 0x02
    13f4:	4b 83       	std	Y+3, r20	; 0x03
    13f6:	5c 83       	std	Y+4, r21	; 0x04
    13f8:	6d 83       	std	Y+5, r22	; 0x05
    13fa:	7e 83       	std	Y+6, r23	; 0x06
    13fc:	8f 83       	std	Y+7, r24	; 0x07
    13fe:	98 87       	std	Y+8, r25	; 0x08
	//THIS DOES NOT WORK IF THE JOYSTICK IS NOT WORKING
	if(transition == 0){
    1400:	20 91 b8 02 	lds	r18, 0x02B8
    1404:	30 91 b9 02 	lds	r19, 0x02B9
    1408:	23 2b       	or	r18, r19
    140a:	09 f0       	breq	.+2      	; 0x140e <draw_menu+0xd4>
    140c:	54 c0       	rjmp	.+168    	; 0x14b6 <draw_menu+0x17c>
		switch(dir){
    140e:	11 30       	cpi	r17, 0x01	; 1
    1410:	59 f0       	breq	.+22     	; 0x1428 <draw_menu+0xee>
    1412:	2c f4       	brge	.+10     	; 0x141e <draw_menu+0xe4>
    1414:	1f 3f       	cpi	r17, 0xFF	; 255
    1416:	91 f1       	breq	.+100    	; 0x147c <draw_menu+0x142>
    1418:	11 23       	and	r17, r17
    141a:	59 f1       	breq	.+86     	; 0x1472 <draw_menu+0x138>
    141c:	60 c0       	rjmp	.+192    	; 0x14de <draw_menu+0x1a4>
    141e:	12 30       	cpi	r17, 0x02	; 2
    1420:	b1 f0       	breq	.+44     	; 0x144e <draw_menu+0x114>
    1422:	13 30       	cpi	r17, 0x03	; 3
    1424:	51 f0       	breq	.+20     	; 0x143a <draw_menu+0x100>
    1426:	5b c0       	rjmp	.+182    	; 0x14de <draw_menu+0x1a4>
			case UP:
				transition = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	90 93 b9 02 	sts	0x02B9, r25
    1430:	80 93 b8 02 	sts	0x02B8, r24
				transition_dir = UP;
    1434:	80 93 a6 01 	sts	0x01A6, r24
				break;
    1438:	52 c0       	rjmp	.+164    	; 0x14de <draw_menu+0x1a4>
			case DOWN:
				transition = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	90 93 b9 02 	sts	0x02B9, r25
    1442:	80 93 b8 02 	sts	0x02B8, r24
				transition_dir = DOWN;
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	80 93 a6 01 	sts	0x01A6, r24
				break;
    144c:	48 c0       	rjmp	.+144    	; 0x14de <draw_menu+0x1a4>
			case LEFT:
				if (self->super_menu != NULL){
    144e:	f6 01       	movw	r30, r12
    1450:	80 85       	ldd	r24, Z+8	; 0x08
    1452:	91 85       	ldd	r25, Z+9	; 0x09
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	09 f4       	brne	.+2      	; 0x145a <draw_menu+0x120>
    1458:	42 c0       	rjmp	.+132    	; 0x14de <draw_menu+0x1a4>
					self = self->super_menu;
					joy_held = 1;
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	30 93 b5 02 	sts	0x02B5, r19
    1462:	20 93 b4 02 	sts	0x02B4, r18
					transition = 1;
    1466:	30 93 b9 02 	sts	0x02B9, r19
    146a:	20 93 b8 02 	sts	0x02B8, r18
				transition = 1;
				transition_dir = DOWN;
				break;
			case LEFT:
				if (self->super_menu != NULL){
					self = self->super_menu;
    146e:	6c 01       	movw	r12, r24
    1470:	36 c0       	rjmp	.+108    	; 0x14de <draw_menu+0x1a4>
					joy_held = 1;
					transition = 1;
				}
				break;
			case RIGHT:
				self = action_start_transition_right(self);
    1472:	c6 01       	movw	r24, r12
    1474:	0e 94 30 08 	call	0x1060	; 0x1060 <action_start_transition_right>
    1478:	6c 01       	movw	r12, r24
				break;
    147a:	31 c0       	rjmp	.+98     	; 0x14de <draw_menu+0x1a4>
			case NEUTRAL:
				if(pos.z  == 1 && self->sub_menus[self->cursor]->action != NULL){
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	69 f5       	brne	.+90     	; 0x14de <draw_menu+0x1a4>
    1484:	d6 01       	movw	r26, r12
    1486:	12 96       	adiw	r26, 0x02	; 2
    1488:	8d 91       	ld	r24, X+
    148a:	9c 91       	ld	r25, X
    148c:	13 97       	sbiw	r26, 0x03	; 3
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	1a 96       	adiw	r26, 0x0a	; 10
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	1b 97       	sbiw	r26, 0x0b	; 11
    149a:	e8 0f       	add	r30, r24
    149c:	f9 1f       	adc	r31, r25
    149e:	01 90       	ld	r0, Z+
    14a0:	f0 81       	ld	r31, Z
    14a2:	e0 2d       	mov	r30, r0
    14a4:	06 84       	ldd	r0, Z+14	; 0x0e
    14a6:	f7 85       	ldd	r31, Z+15	; 0x0f
    14a8:	e0 2d       	mov	r30, r0
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	c1 f0       	breq	.+48     	; 0x14de <draw_menu+0x1a4>
					self = self->sub_menus[self->cursor]->action(self);
    14ae:	c6 01       	movw	r24, r12
    14b0:	09 95       	icall
    14b2:	6c 01       	movw	r12, r24
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <draw_menu+0x1a4>
				}
				break;
		}
	}
	else{
		if (transition_dir == UP || transition_dir == DOWN){
    14b6:	60 91 a6 01 	lds	r22, 0x01A6
    14ba:	86 2f       	mov	r24, r22
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	21 f4       	brne	.+8      	; 0x14ca <draw_menu+0x190>
			menu_transition(self, transition_dir);
    14c2:	c6 01       	movw	r24, r12
    14c4:	0e 94 12 09 	call	0x1224	; 0x1224 <menu_transition>
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <draw_menu+0x1a4>
		}
		else if(dir == NEUTRAL){
    14ca:	1f 3f       	cpi	r17, 0xFF	; 255
    14cc:	41 f4       	brne	.+16     	; 0x14de <draw_menu+0x1a4>
			joy_held = 0;
    14ce:	10 92 b5 02 	sts	0x02B5, r1
    14d2:	10 92 b4 02 	sts	0x02B4, r1
			transition = 0;
    14d6:	10 92 b9 02 	sts	0x02B9, r1
    14da:	10 92 b8 02 	sts	0x02B8, r1
		}
	}
	return self;
}
    14de:	c6 01       	movw	r24, r12
    14e0:	28 96       	adiw	r28, 0x08	; 8
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	08 95       	ret

000014fe <music_play_song>:
	TCCR3B |= (1 << CS32);
}

//Mby have play song in interrupt for perfect timing?
void music_play_song(int song[], int length){
	if(song_count == length){
    14fe:	20 91 ba 02 	lds	r18, 0x02BA
    1502:	30 91 bb 02 	lds	r19, 0x02BB
    1506:	26 17       	cp	r18, r22
    1508:	37 07       	cpc	r19, r23
    150a:	49 f4       	brne	.+18     	; 0x151e <music_play_song+0x20>
		song_count = 0;
    150c:	10 92 bb 02 	sts	0x02BB, r1
    1510:	10 92 ba 02 	sts	0x02BA, r1
		TCCR3B &= ~(1 << CS32);
    1514:	ea e8       	ldi	r30, 0x8A	; 138
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	20 81       	ld	r18, Z
    151a:	2b 7f       	andi	r18, 0xFB	; 251
    151c:	20 83       	st	Z, r18
		//Stop interrupt timer
	}
	pwm_change_freq(song[song_count]);
    151e:	20 91 ba 02 	lds	r18, 0x02BA
    1522:	30 91 bb 02 	lds	r19, 0x02BB
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	fc 01       	movw	r30, r24
    152c:	e2 0f       	add	r30, r18
    152e:	f3 1f       	adc	r31, r19
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	0e 94 ee 06 	call	0xddc	; 0xddc <pwm_change_freq>
	song_count++;
    1538:	80 91 ba 02 	lds	r24, 0x02BA
    153c:	90 91 bb 02 	lds	r25, 0x02BB
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	90 93 bb 02 	sts	0x02BB, r25
    1546:	80 93 ba 02 	sts	0x02BA, r24
    154a:	08 95       	ret

0000154c <__vector_7>:
}

//TODO: Change time for music interrupts 
//-Something weird happening

ISR(TIMER3_COMPA_vect){
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	8f 93       	push	r24
    1558:	9f 93       	push	r25
	music_beat_flag = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	90 93 bd 02 	sts	0x02BD, r25
    1562:	80 93 bc 02 	sts	0x02BC, r24
    1566:	9f 91       	pop	r25
    1568:	8f 91       	pop	r24
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0
    1570:	1f 90       	pop	r1
    1572:	18 95       	reti

00001574 <main>:
volatile int oled_refresh_timer = 0;
volatile int game_interrupt_flag = 1;
State state = in_menu;

int main(void)
{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	00 d0       	rcall	.+0      	; 0x157a <main+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <main+0x8>
    157c:	00 d0       	rcall	.+0      	; 0x157e <main+0xa>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<SRE);	//Enable external memory
    1582:	85 b7       	in	r24, 0x35	; 53
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); 
    1588:	80 b7       	in	r24, 0x30	; 48
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600);
    158e:	80 e8       	ldi	r24, 0x80	; 128
    1590:	95 e2       	ldi	r25, 0x25	; 37
    1592:	0e 94 1b 07 	call	0xe36	; 0xe36 <uart_init>
	can_init(MODE_NORMAL);
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 b7 03 	call	0x76e	; 0x76e <can_init>
	adc_init();
    159e:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
    15a2:	0e 94 87 0c 	call	0x190e	; 0x190e <oled_init>
	joy_init();
    15a6:	0e 94 38 05 	call	0xa70	; 0xa70 <joy_init>
	touch_init();
    15aa:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <touch_init>
	menu_init();
    15ae:	0e 94 da 08 	call	0x11b4	; 0x11b4 <menu_init>
	sei();
    15b2:	78 94       	sei
				case OCCLUDED:
					game_occluded = 1;
					break;
				
				default:
					printf("ID unknown\r");
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f9 e9       	ldi	r31, 0x99	; 153
    15b8:	ef 2e       	mov	r14, r31
    15ba:	f2 e0       	ldi	r31, 0x02	; 2
    15bc:	ff 2e       	mov	r15, r31
    15be:	f0 2d       	mov	r31, r0
		
		if (can_message_received){
			Msg msg_received =  can_receive();
			switch (msg_received.id){
				case OCCLUDED:
					game_occluded = 1;
    15c0:	01 e0       	ldi	r16, 0x01	; 1
    15c2:	10 e0       	ldi	r17, 0x00	; 0
	menu_init();
	sei();
	
	while (1)
	{	
		switch (state){
    15c4:	80 91 a7 01 	lds	r24, 0x01A7
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <main+0x5e>
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	71 f0       	breq	.+28     	; 0x15ec <main+0x78>
    15d0:	15 c0       	rjmp	.+42     	; 0x15fc <main+0x88>
			case initialize:
				break;
			case in_menu:
				if(oled_refresh_timer == 1){
    15d2:	80 91 be 02 	lds	r24, 0x02BE
    15d6:	90 91 bf 02 	lds	r25, 0x02BF
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	79 f4       	brne	.+30     	; 0x15fc <main+0x88>
					menu_run_display();
    15de:	0e 94 ff 08 	call	0x11fe	; 0x11fe <menu_run_display>
					oled_refresh_timer = 0;
    15e2:	10 92 bf 02 	sts	0x02BF, r1
    15e6:	10 92 be 02 	sts	0x02BE, r1
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <main+0x88>
				}
				break;
			case in_game:		
				if(game_interrupt_flag == 1){
    15ec:	80 91 a8 01 	lds	r24, 0x01A8
    15f0:	90 91 a9 01 	lds	r25, 0x01A9
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	11 f4       	brne	.+4      	; 0x15fc <main+0x88>
					game_run();
    15f8:	0e 94 46 07 	call	0xe8c	; 0xe8c <game_run>
				break;
		}
		
		
		
		if (can_message_received){
    15fc:	80 91 a6 02 	lds	r24, 0x02A6
    1600:	90 91 a7 02 	lds	r25, 0x02A7
    1604:	89 2b       	or	r24, r25
    1606:	f1 f2       	breq	.-68     	; 0x15c4 <main+0x50>
			Msg msg_received =  can_receive();
    1608:	0e 94 24 04 	call	0x848	; 0x848 <can_receive>
    160c:	29 83       	std	Y+1, r18	; 0x01
    160e:	3a 83       	std	Y+2, r19	; 0x02
    1610:	4b 83       	std	Y+3, r20	; 0x03
    1612:	5c 83       	std	Y+4, r21	; 0x04
    1614:	6d 83       	std	Y+5, r22	; 0x05
    1616:	7e 83       	std	Y+6, r23	; 0x06
			switch (msg_received.id){
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	03 97       	sbiw	r24, 0x03	; 3
    161e:	29 f4       	brne	.+10     	; 0x162a <main+0xb6>
				case OCCLUDED:
					game_occluded = 1;
    1620:	10 93 c1 02 	sts	0x02C1, r17
    1624:	00 93 c0 02 	sts	0x02C0, r16
					break;
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <main+0xc2>
				
				default:
					printf("ID unknown\r");
    162a:	ff 92       	push	r15
    162c:	ef 92       	push	r14
    162e:	0e 94 c7 13 	call	0x278e	; 0x278e <printf>
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
			}
			free(msg_received.data);
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	0e 94 1a 12 	call	0x2434	; 0x2434 <free>
			can_message_received = 0;
    163e:	10 92 a7 02 	sts	0x02A7, r1
    1642:	10 92 a6 02 	sts	0x02A6, r1
    1646:	be cf       	rjmp	.-132    	; 0x15c4 <main+0x50>

00001648 <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    1648:	20 91 b2 01 	lds	r18, 0x01B2
    164c:	30 91 b3 01 	lds	r19, 0x01B3
    1650:	23 2b       	or	r18, r19
    1652:	d1 f0       	breq	.+52     	; 0x1688 <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    1654:	20 91 c2 02 	lds	r18, 0x02C2
    1658:	30 91 c3 02 	lds	r19, 0x02C3
    165c:	21 15       	cp	r18, r1
    165e:	94 e0       	ldi	r25, 0x04	; 4
    1660:	39 07       	cpc	r19, r25
    1662:	bc f4       	brge	.+46     	; 0x1692 <oled_write_data+0x4a>
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    1664:	40 91 ae 01 	lds	r20, 0x01AE
    1668:	50 91 af 01 	lds	r21, 0x01AF
    166c:	fa 01       	movw	r30, r20
    166e:	e2 0f       	add	r30, r18
    1670:	f3 1f       	adc	r31, r19
    1672:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    1674:	80 91 c2 02 	lds	r24, 0x02C2
    1678:	90 91 c3 02 	lds	r25, 0x02C3
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 c3 02 	sts	0x02C3, r25
    1682:	80 93 c2 02 	sts	0x02C2, r24
    1686:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    1688:	e0 91 ac 01 	lds	r30, 0x01AC
    168c:	f0 91 ad 01 	lds	r31, 0x01AD
    1690:	80 83       	st	Z, r24
    1692:	08 95       	ret

00001694 <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    16a0:	68 30       	cpi	r22, 0x08	; 8
    16a2:	59 f4       	brne	.+22     	; 0x16ba <oled_print_char+0x26>
		font_address = &font8[character-' '];
    16a4:	08 2f       	mov	r16, r24
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	00 0f       	add	r16, r16
    16aa:	11 1f       	adc	r17, r17
    16ac:	00 0f       	add	r16, r16
    16ae:	11 1f       	adc	r17, r17
    16b0:	00 0f       	add	r16, r16
    16b2:	11 1f       	adc	r17, r17
    16b4:	0b 50       	subi	r16, 0x0B	; 11
    16b6:	1d 4f       	sbci	r17, 0xFD	; 253
    16b8:	1a c0       	rjmp	.+52     	; 0x16ee <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    16ba:	65 30       	cpi	r22, 0x05	; 5
    16bc:	71 f4       	brne	.+28     	; 0x16da <oled_print_char+0x46>
		font_address = &font5[character-' '];
    16be:	08 2f       	mov	r16, r24
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	00 52       	subi	r16, 0x20	; 32
    16c4:	11 09       	sbc	r17, r1
    16c6:	c8 01       	movw	r24, r16
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	08 0f       	add	r16, r24
    16d2:	19 1f       	adc	r17, r25
    16d4:	06 5e       	subi	r16, 0xE6	; 230
    16d6:	1d 4f       	sbci	r17, 0xFD	; 253
    16d8:	0a c0       	rjmp	.+20     	; 0x16ee <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    16da:	64 30       	cpi	r22, 0x04	; 4
    16dc:	41 f4       	brne	.+16     	; 0x16ee <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    16de:	08 2f       	mov	r16, r24
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	00 0f       	add	r16, r16
    16e4:	11 1f       	adc	r17, r17
    16e6:	00 0f       	add	r16, r16
    16e8:	11 1f       	adc	r17, r17
    16ea:	02 5e       	subi	r16, 0xE2	; 226
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    16ee:	45 2b       	or	r20, r21
    16f0:	31 f0       	breq	.+12     	; 0x16fe <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    16f2:	e6 2e       	mov	r14, r22
    16f4:	f1 2c       	mov	r15, r1
    16f6:	1e 14       	cp	r1, r14
    16f8:	1f 04       	cpc	r1, r15
    16fa:	9c f0       	brlt	.+38     	; 0x1722 <oled_print_char+0x8e>
    16fc:	1f c0       	rjmp	.+62     	; 0x173c <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    16fe:	e6 2e       	mov	r14, r22
    1700:	f1 2c       	mov	r15, r1
    1702:	1e 14       	cp	r1, r14
    1704:	1f 04       	cpc	r1, r15
    1706:	d4 f4       	brge	.+52     	; 0x173c <oled_print_char+0xa8>
    1708:	c0 e0       	ldi	r28, 0x00	; 0
    170a:	d0 e0       	ldi	r29, 0x00	; 0
    170c:	fe 01       	movw	r30, r28
    170e:	e0 0f       	add	r30, r16
    1710:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    1712:	84 91       	lpm	r24, Z
    1714:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1718:	21 96       	adiw	r28, 0x01	; 1
    171a:	ce 15       	cp	r28, r14
    171c:	df 05       	cpc	r29, r15
    171e:	b4 f3       	brlt	.-20     	; 0x170c <oled_print_char+0x78>
    1720:	0d c0       	rjmp	.+26     	; 0x173c <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1722:	c0 e0       	ldi	r28, 0x00	; 0
    1724:	d0 e0       	ldi	r29, 0x00	; 0
    1726:	fe 01       	movw	r30, r28
    1728:	e0 0f       	add	r30, r16
    172a:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    172c:	84 91       	lpm	r24, Z
    172e:	80 95       	com	r24
    1730:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1734:	21 96       	adiw	r28, 0x01	; 1
    1736:	ce 15       	cp	r28, r14
    1738:	df 05       	cpc	r29, r15
    173a:	ac f3       	brlt	.-22     	; 0x1726 <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    174a:	80 91 b2 01 	lds	r24, 0x01B2
    174e:	90 91 b3 01 	lds	r25, 0x01B3
    1752:	89 2b       	or	r24, r25
    1754:	89 f0       	breq	.+34     	; 0x1778 <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    1756:	80 91 c2 02 	lds	r24, 0x02C2
    175a:	90 91 c3 02 	lds	r25, 0x02C3
    175e:	81 15       	cp	r24, r1
    1760:	24 e0       	ldi	r18, 0x04	; 4
    1762:	92 07       	cpc	r25, r18
    1764:	5c f4       	brge	.+22     	; 0x177c <oled_read_data+0x32>
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    1766:	20 91 ae 01 	lds	r18, 0x01AE
    176a:	30 91 af 01 	lds	r19, 0x01AF
    176e:	f9 01       	movw	r30, r18
    1770:	e8 0f       	add	r30, r24
    1772:	f9 1f       	adc	r31, r25
    1774:	80 81       	ld	r24, Z
    1776:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	08 95       	ret
}

char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			return 0x00;
    177c:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    177e:	08 95       	ret

00001780 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    1780:	40 91 b2 01 	lds	r20, 0x01B2
    1784:	50 91 b3 01 	lds	r21, 0x01B3
    1788:	45 2b       	or	r20, r21
    178a:	d1 f0       	breq	.+52     	; 0x17c0 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    178c:	20 91 c2 02 	lds	r18, 0x02C2
    1790:	30 91 c3 02 	lds	r19, 0x02C3
    1794:	2f 77       	andi	r18, 0x7F	; 127
    1796:	30 78       	andi	r19, 0x80	; 128
    1798:	33 23       	and	r19, r19
    179a:	34 f4       	brge	.+12     	; 0x17a8 <oled_goto_line+0x28>
    179c:	21 50       	subi	r18, 0x01	; 1
    179e:	31 09       	sbc	r19, r1
    17a0:	20 68       	ori	r18, 0x80	; 128
    17a2:	3f 6f       	ori	r19, 0xFF	; 255
    17a4:	2f 5f       	subi	r18, 0xFF	; 255
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	96 95       	lsr	r25
    17aa:	98 2f       	mov	r25, r24
    17ac:	88 27       	eor	r24, r24
    17ae:	97 95       	ror	r25
    17b0:	87 95       	ror	r24
    17b2:	28 0f       	add	r18, r24
    17b4:	39 1f       	adc	r19, r25
    17b6:	30 93 c3 02 	sts	0x02C3, r19
    17ba:	20 93 c2 02 	sts	0x02C2, r18
    17be:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    17c0:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    17c2:	e0 91 b0 01 	lds	r30, 0x01B0
    17c6:	f0 91 b1 01 	lds	r31, 0x01B1
    17ca:	80 83       	st	Z, r24
    17cc:	08 95       	ret

000017ce <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    17ce:	20 91 b2 01 	lds	r18, 0x01B2
    17d2:	30 91 b3 01 	lds	r19, 0x01B3
    17d6:	23 2b       	or	r18, r19
    17d8:	c1 f0       	breq	.+48     	; 0x180a <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    17da:	40 91 c2 02 	lds	r20, 0x02C2
    17de:	50 91 c3 02 	lds	r21, 0x02C3
    17e2:	9a 01       	movw	r18, r20
    17e4:	2f 77       	andi	r18, 0x7F	; 127
    17e6:	30 78       	andi	r19, 0x80	; 128
    17e8:	33 23       	and	r19, r19
    17ea:	34 f4       	brge	.+12     	; 0x17f8 <oled_goto_column+0x2a>
    17ec:	21 50       	subi	r18, 0x01	; 1
    17ee:	31 09       	sbc	r19, r1
    17f0:	20 68       	ori	r18, 0x80	; 128
    17f2:	3f 6f       	ori	r19, 0xFF	; 255
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	42 1b       	sub	r20, r18
    17fa:	53 0b       	sbc	r21, r19
    17fc:	84 0f       	add	r24, r20
    17fe:	95 1f       	adc	r25, r21
    1800:	90 93 c3 02 	sts	0x02C3, r25
    1804:	80 93 c2 02 	sts	0x02C2, r24
    1808:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    180a:	e0 91 b0 01 	lds	r30, 0x01B0
    180e:	f0 91 b1 01 	lds	r31, 0x01B1
    1812:	10 82       	st	Z, r1
    1814:	e0 91 b0 01 	lds	r30, 0x01B0
    1818:	f0 91 b1 01 	lds	r31, 0x01B1
    181c:	80 e1       	ldi	r24, 0x10	; 16
    181e:	80 83       	st	Z, r24
    1820:	08 95       	ret

00001822 <oled_print_string>:
	TIMSK = (1 << OCIE2);					
	int OCRA_num = (long)F_CPU/(refresh_rate*1024);
	OCR2 = OCRA_num; //Sets the value for the compare match to 80
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    1822:	6f 92       	push	r6
    1824:	7f 92       	push	r7
    1826:	8f 92       	push	r8
    1828:	9f 92       	push	r9
    182a:	af 92       	push	r10
    182c:	bf 92       	push	r11
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	ec 01       	movw	r28, r24
    1840:	96 2e       	mov	r9, r22
    1842:	74 2e       	mov	r7, r20
    1844:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    1846:	86 2f       	mov	r24, r22
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <oled_goto_column>
	oled_goto_line(line);
    184e:	87 2d       	mov	r24, r7
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
	
	int length = strlen(string);
    1856:	fe 01       	movw	r30, r28
    1858:	01 90       	ld	r0, Z+
    185a:	00 20       	and	r0, r0
    185c:	e9 f7       	brne	.-6      	; 0x1858 <oled_print_string+0x36>
    185e:	31 97       	sbiw	r30, 0x01	; 1
    1860:	6f 01       	movw	r12, r30
    1862:	cc 1a       	sub	r12, r28
    1864:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    1866:	1c 14       	cp	r1, r12
    1868:	1d 04       	cpc	r1, r13
    186a:	24 f5       	brge	.+72     	; 0x18b4 <oled_print_string+0x92>
    186c:	7e 01       	movw	r14, r28
    186e:	c0 e0       	ldi	r28, 0x00	; 0
    1870:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    1872:	8f e7       	ldi	r24, 0x7F	; 127
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	5c 01       	movw	r10, r24
    1878:	a8 18       	sub	r10, r8
    187a:	b1 08       	sbc	r11, r1
			column = 0;
    187c:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    187e:	a8 01       	movw	r20, r16
    1880:	68 2d       	mov	r22, r8
    1882:	f7 01       	movw	r30, r14
    1884:	81 91       	ld	r24, Z+
    1886:	7f 01       	movw	r14, r30
    1888:	0e 94 4a 0b 	call	0x1694	; 0x1694 <oled_print_char>
		column = column + font_size;
    188c:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    188e:	89 2d       	mov	r24, r9
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a8 16       	cp	r10, r24
    1894:	b9 06       	cpc	r11, r25
    1896:	54 f4       	brge	.+20     	; 0x18ac <oled_print_string+0x8a>
			column = 0;
			line++;
    1898:	73 94       	inc	r7
			oled_goto_column(column);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <oled_goto_column>
			oled_goto_line(line);
    18a2:	87 2d       	mov	r24, r7
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    18aa:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    18ac:	21 96       	adiw	r28, 0x01	; 1
    18ae:	cc 16       	cp	r12, r28
    18b0:	dd 06       	cpc	r13, r29
    18b2:	29 f7       	brne	.-54     	; 0x187e <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	7f 90       	pop	r7
    18ce:	6f 90       	pop	r6
    18d0:	08 95       	ret

000018d2 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    18d2:	cf 93       	push	r28
	oled_goto_line(line);
    18d4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
	oled_goto_column(0);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    18e8:	cf 5f       	subi	r28, 0xFF	; 255
    18ea:	c0 38       	cpi	r28, 0x80	; 128
    18ec:	d1 f7       	brne	.-12     	; 0x18e2 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	c0 e0       	ldi	r28, 0x00	; 0
    18f8:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    18fa:	ce 01       	movw	r24, r28
    18fc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <oled_clear_line>
    1900:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    1902:	c8 30       	cpi	r28, 0x08	; 8
    1904:	d1 05       	cpc	r29, r1
    1906:	c9 f7       	brne	.-14     	; 0x18fa <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <oled_init>:

volatile uint8_t *oled_command = 0x1000;
volatile uint8_t *oled_back_buffer = 0x1800;
volatile uint8_t *oled_front_buffer = 0x1200;

void oled_init(){
    190e:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1910:	e0 91 b0 01 	lds	r30, 0x01B0
    1914:	f0 91 b1 01 	lds	r31, 0x01B1
    1918:	8e ea       	ldi	r24, 0xAE	; 174
    191a:	80 83       	st	Z, r24
    191c:	e0 91 b0 01 	lds	r30, 0x01B0
    1920:	f0 91 b1 01 	lds	r31, 0x01B1
    1924:	81 ea       	ldi	r24, 0xA1	; 161
    1926:	80 83       	st	Z, r24
    1928:	e0 91 b0 01 	lds	r30, 0x01B0
    192c:	f0 91 b1 01 	lds	r31, 0x01B1
    1930:	8a ed       	ldi	r24, 0xDA	; 218
    1932:	80 83       	st	Z, r24
    1934:	e0 91 b0 01 	lds	r30, 0x01B0
    1938:	f0 91 b1 01 	lds	r31, 0x01B1
    193c:	82 e1       	ldi	r24, 0x12	; 18
    193e:	80 83       	st	Z, r24
    1940:	e0 91 b0 01 	lds	r30, 0x01B0
    1944:	f0 91 b1 01 	lds	r31, 0x01B1
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	80 83       	st	Z, r24
    194c:	e0 91 b0 01 	lds	r30, 0x01B0
    1950:	f0 91 b1 01 	lds	r31, 0x01B1
    1954:	88 ea       	ldi	r24, 0xA8	; 168
    1956:	80 83       	st	Z, r24
    1958:	e0 91 b0 01 	lds	r30, 0x01B0
    195c:	f0 91 b1 01 	lds	r31, 0x01B1
    1960:	8f e3       	ldi	r24, 0x3F	; 63
    1962:	80 83       	st	Z, r24
    1964:	e0 91 b0 01 	lds	r30, 0x01B0
    1968:	f0 91 b1 01 	lds	r31, 0x01B1
    196c:	85 ed       	ldi	r24, 0xD5	; 213
    196e:	80 83       	st	Z, r24
    1970:	e0 91 b0 01 	lds	r30, 0x01B0
    1974:	f0 91 b1 01 	lds	r31, 0x01B1
    1978:	80 e8       	ldi	r24, 0x80	; 128
    197a:	80 83       	st	Z, r24
    197c:	e0 91 b0 01 	lds	r30, 0x01B0
    1980:	f0 91 b1 01 	lds	r31, 0x01B1
    1984:	81 e8       	ldi	r24, 0x81	; 129
    1986:	80 83       	st	Z, r24
    1988:	e0 91 b0 01 	lds	r30, 0x01B0
    198c:	f0 91 b1 01 	lds	r31, 0x01B1
    1990:	c0 e5       	ldi	r28, 0x50	; 80
    1992:	c0 83       	st	Z, r28
    1994:	e0 91 b0 01 	lds	r30, 0x01B0
    1998:	f0 91 b1 01 	lds	r31, 0x01B1
    199c:	89 ed       	ldi	r24, 0xD9	; 217
    199e:	80 83       	st	Z, r24
    19a0:	e0 91 b0 01 	lds	r30, 0x01B0
    19a4:	f0 91 b1 01 	lds	r31, 0x01B1
    19a8:	81 e2       	ldi	r24, 0x21	; 33
    19aa:	80 83       	st	Z, r24
    19ac:	e0 91 b0 01 	lds	r30, 0x01B0
    19b0:	f0 91 b1 01 	lds	r31, 0x01B1
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	80 83       	st	Z, r24
    19b8:	e0 91 b0 01 	lds	r30, 0x01B0
    19bc:	f0 91 b1 01 	lds	r31, 0x01B1
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	80 83       	st	Z, r24
    19c4:	e0 91 b0 01 	lds	r30, 0x01B0
    19c8:	f0 91 b1 01 	lds	r31, 0x01B1
    19cc:	8b ed       	ldi	r24, 0xDB	; 219
    19ce:	80 83       	st	Z, r24
    19d0:	e0 91 b0 01 	lds	r30, 0x01B0
    19d4:	f0 91 b1 01 	lds	r31, 0x01B1
    19d8:	80 e3       	ldi	r24, 0x30	; 48
    19da:	80 83       	st	Z, r24
    19dc:	e0 91 b0 01 	lds	r30, 0x01B0
    19e0:	f0 91 b1 01 	lds	r31, 0x01B1
    19e4:	8d ea       	ldi	r24, 0xAD	; 173
    19e6:	80 83       	st	Z, r24
    19e8:	e0 91 b0 01 	lds	r30, 0x01B0
    19ec:	f0 91 b1 01 	lds	r31, 0x01B1
    19f0:	10 82       	st	Z, r1
    19f2:	e0 91 b0 01 	lds	r30, 0x01B0
    19f6:	f0 91 b1 01 	lds	r31, 0x01B1
    19fa:	84 ea       	ldi	r24, 0xA4	; 164
    19fc:	80 83       	st	Z, r24
    19fe:	e0 91 b0 01 	lds	r30, 0x01B0
    1a02:	f0 91 b1 01 	lds	r31, 0x01B1
    1a06:	86 ea       	ldi	r24, 0xA6	; 166
    1a08:	80 83       	st	Z, r24
    1a0a:	e0 91 b0 01 	lds	r30, 0x01B0
    1a0e:	f0 91 b1 01 	lds	r31, 0x01B1
    1a12:	8f ea       	ldi	r24, 0xAF	; 175
    1a14:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen();	  //Sets all buffer data to 0
    1a16:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <oled_clear_screen>
	
	//Set up timer, enable timer/counter compare match interrupt for 60 FPS
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20) | (1 << WGM21);  //clock source to be used by the Timer/Counter clkI/O/1024 -  CTC mode
    1a1a:	8f e0       	ldi	r24, 0x0F	; 15
    1a1c:	87 bd       	out	0x27, r24	; 39
	TIMSK = (1 << OCIE2);					
    1a1e:	80 e1       	ldi	r24, 0x10	; 16
    1a20:	89 bf       	out	0x39, r24	; 57
	int OCRA_num = (long)F_CPU/(refresh_rate*1024);
	OCR2 = OCRA_num; //Sets the value for the compare match to 80
    1a22:	c2 bd       	out	0x22, r28	; 34
}
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    1a28:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a2a:	e0 91 b0 01 	lds	r30, 0x01B0
    1a2e:	f0 91 b1 01 	lds	r31, 0x01B1
    1a32:	10 82       	st	Z, r1
    1a34:	e0 91 b0 01 	lds	r30, 0x01B0
    1a38:	f0 91 b1 01 	lds	r31, 0x01B1
    1a3c:	80 e1       	ldi	r24, 0x10	; 16
    1a3e:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    1a40:	80 91 b2 01 	lds	r24, 0x01B2
    1a44:	90 91 b3 01 	lds	r25, 0x01B3
    1a48:	89 2b       	or	r24, r25
    1a4a:	21 f1       	breq	.+72     	; 0x1a94 <oled_refresh+0x6c>
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a52:	c0 e0       	ldi	r28, 0x00	; 0
    1a54:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1a56:	e0 91 b0 01 	lds	r30, 0x01B0
    1a5a:	f0 91 b1 01 	lds	r31, 0x01B1
    1a5e:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a60:	8c 2f       	mov	r24, r28
    1a62:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    1a64:	e0 91 ac 01 	lds	r30, 0x01AC
    1a68:	f0 91 ad 01 	lds	r31, 0x01AD
    1a6c:	9c 01       	movw	r18, r24
    1a6e:	24 0f       	add	r18, r20
    1a70:	35 1f       	adc	r19, r21
    1a72:	a0 91 ae 01 	lds	r26, 0x01AE
    1a76:	b0 91 af 01 	lds	r27, 0x01AF
    1a7a:	a2 0f       	add	r26, r18
    1a7c:	b3 1f       	adc	r27, r19
    1a7e:	2c 91       	ld	r18, X
    1a80:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	80 38       	cpi	r24, 0x80	; 128
    1a86:	91 05       	cpc	r25, r1
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <oled_refresh+0x3c>
    1a8a:	6f 5f       	subi	r22, 0xFF	; 255
    1a8c:	40 58       	subi	r20, 0x80	; 128
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1a90:	68 3b       	cpi	r22, 0xB8	; 184
    1a92:	09 f7       	brne	.-62     	; 0x1a56 <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <oled_invert_rectangle>:
	}
	
	//TODO: make it draw correctly in every direction
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1a98:	6f 92       	push	r6
    1a9a:	7f 92       	push	r7
    1a9c:	8f 92       	push	r8
    1a9e:	9f 92       	push	r9
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	8c 01       	movw	r16, r24
    1ab6:	ea 01       	movw	r28, r20
	if(y1 > y2){
    1ab8:	26 17       	cp	r18, r22
    1aba:	37 07       	cpc	r19, r23
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <oled_invert_rectangle+0x30>
    1abe:	96 2f       	mov	r25, r22
    1ac0:	87 2f       	mov	r24, r23
		int temp = y1;
		y1 = y2;
    1ac2:	b9 01       	movw	r22, r18
		y2 = temp;
    1ac4:	29 2f       	mov	r18, r25
    1ac6:	38 2f       	mov	r19, r24
	}
	
	if(x1 > x2){
    1ac8:	c0 17       	cp	r28, r16
    1aca:	d1 07       	cpc	r29, r17
    1acc:	14 f4       	brge	.+4      	; 0x1ad2 <oled_invert_rectangle+0x3a>
		int temp = x1;
		x1 = y2;
		x2 = temp;
    1ace:	e8 01       	movw	r28, r16
		y2 = temp;
	}
	
	if(x1 > x2){
		int temp = x1;
		x1 = y2;
    1ad0:	89 01       	movw	r16, r18
		x2 = temp;
	}
	int t = 255 << y1%8;		//Top line to be filled
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	87 70       	andi	r24, 0x07	; 7
    1ad6:	90 78       	andi	r25, 0x80	; 128
    1ad8:	99 23       	and	r25, r25
    1ada:	24 f4       	brge	.+8      	; 0x1ae4 <oled_invert_rectangle+0x4c>
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	88 6f       	ori	r24, 0xF8	; 248
    1ae0:	9f 6f       	ori	r25, 0xFF	; 255
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	4f ef       	ldi	r20, 0xFF	; 255
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	6a 01       	movw	r12, r20
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <oled_invert_rectangle+0x58>
    1aec:	cc 0c       	add	r12, r12
    1aee:	dd 1c       	adc	r13, r13
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <oled_invert_rectangle+0x54>
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
    1af4:	c9 01       	movw	r24, r18
    1af6:	87 70       	andi	r24, 0x07	; 7
    1af8:	90 78       	andi	r25, 0x80	; 128
    1afa:	99 23       	and	r25, r25
    1afc:	24 f4       	brge	.+8      	; 0x1b06 <oled_invert_rectangle+0x6e>
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	88 6f       	ori	r24, 0xF8	; 248
    1b02:	9f 6f       	ori	r25, 0xFF	; 255
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	48 e0       	ldi	r20, 0x08	; 8
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	5a 01       	movw	r10, r20
    1b0c:	a8 1a       	sub	r10, r24
    1b0e:	b9 0a       	sbc	r11, r25
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	ac 01       	movw	r20, r24
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <oled_invert_rectangle+0x84>
    1b18:	55 95       	asr	r21
    1b1a:	47 95       	ror	r20
    1b1c:	aa 94       	dec	r10
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <oled_invert_rectangle+0x80>
    1b20:	5a 01       	movw	r10, r20
	if(y1/8 != y2/8){			//Over several lines
    1b22:	3b 01       	movw	r6, r22
    1b24:	77 23       	and	r23, r23
    1b26:	1c f4       	brge	.+6      	; 0x1b2e <oled_invert_rectangle+0x96>
    1b28:	57 e0       	ldi	r21, 0x07	; 7
    1b2a:	65 0e       	add	r6, r21
    1b2c:	71 1c       	adc	r7, r1
    1b2e:	75 94       	asr	r7
    1b30:	67 94       	ror	r6
    1b32:	75 94       	asr	r7
    1b34:	67 94       	ror	r6
    1b36:	75 94       	asr	r7
    1b38:	67 94       	ror	r6
    1b3a:	79 01       	movw	r14, r18
    1b3c:	33 23       	and	r19, r19
    1b3e:	1c f4       	brge	.+6      	; 0x1b46 <oled_invert_rectangle+0xae>
    1b40:	87 e0       	ldi	r24, 0x07	; 7
    1b42:	e8 0e       	add	r14, r24
    1b44:	f1 1c       	adc	r15, r1
    1b46:	f5 94       	asr	r15
    1b48:	e7 94       	ror	r14
    1b4a:	f5 94       	asr	r15
    1b4c:	e7 94       	ror	r14
    1b4e:	f5 94       	asr	r15
    1b50:	e7 94       	ror	r14
    1b52:	6e 14       	cp	r6, r14
    1b54:	7f 04       	cpc	r7, r15
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <oled_invert_rectangle+0xc2>
    1b58:	4d c0       	rjmp	.+154    	; 0x1bf4 <oled_invert_rectangle+0x15c>
		//Filling top
		oled_goto_line(y1/8);
    1b5a:	c3 01       	movw	r24, r6
    1b5c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1b60:	0c 17       	cp	r16, r28
    1b62:	1d 07       	cpc	r17, r29
    1b64:	7c f4       	brge	.+30     	; 0x1b84 <oled_invert_rectangle+0xec>
    1b66:	48 01       	movw	r8, r16
			oled_goto_column(x);
    1b68:	c4 01       	movw	r24, r8
    1b6a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <oled_goto_column>
			oled_write_data(t ^ oled_read_data());
    1b6e:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_read_data>
    1b72:	8c 25       	eor	r24, r12
    1b74:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
	int t = 255 << y1%8;		//Top line to be filled
	int b = 255 >> 8 - y2%8;	//Bottom line to be filled
	if(y1/8 != y2/8){			//Over several lines
		//Filling top
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1b78:	4f ef       	ldi	r20, 0xFF	; 255
    1b7a:	84 1a       	sub	r8, r20
    1b7c:	94 0a       	sbc	r9, r20
    1b7e:	8c 16       	cp	r8, r28
    1b80:	9d 06       	cpc	r9, r29
    1b82:	94 f3       	brlt	.-28     	; 0x1b68 <oled_invert_rectangle+0xd0>
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1b84:	5f ef       	ldi	r21, 0xFF	; 255
    1b86:	65 1a       	sub	r6, r21
    1b88:	75 0a       	sbc	r7, r21
    1b8a:	6e 14       	cp	r6, r14
    1b8c:	7f 04       	cpc	r7, r15
    1b8e:	f4 f4       	brge	.+60     	; 0x1bcc <oled_invert_rectangle+0x134>
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1b90:	80 2e       	mov	r8, r16
    1b92:	91 2e       	mov	r9, r17
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
    1b94:	c3 01       	movw	r24, r6
    1b96:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
			for (int x = x1; x < x2; x++){
    1b9a:	0c 17       	cp	r16, r28
    1b9c:	1d 07       	cpc	r17, r29
    1b9e:	84 f4       	brge	.+32     	; 0x1bc0 <oled_invert_rectangle+0x128>
    1ba0:	c8 2c       	mov	r12, r8
    1ba2:	d9 2c       	mov	r13, r9
				oled_goto_line(x);
    1ba4:	c6 01       	movw	r24, r12
    1ba6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
				oled_write_data(255 ^ oled_read_data());
    1baa:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_read_data>
    1bae:	80 95       	com	r24
    1bb0:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
			oled_goto_line(l);
			for (int x = x1; x < x2; x++){
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	c8 1a       	sub	r12, r24
    1bb8:	d8 0a       	sbc	r13, r24
    1bba:	cc 16       	cp	r12, r28
    1bbc:	dd 06       	cpc	r13, r29
    1bbe:	94 f3       	brlt	.-28     	; 0x1ba4 <oled_invert_rectangle+0x10c>
		for(int x = x1; x < x2; x++){
			oled_goto_column(x);
			oled_write_data(t ^ oled_read_data());
		}
		//Filling lines inbetween
		for (int l = y1/8 + 1; l < y2/8; l++){
    1bc0:	4f ef       	ldi	r20, 0xFF	; 255
    1bc2:	64 1a       	sub	r6, r20
    1bc4:	74 0a       	sbc	r7, r20
    1bc6:	6e 14       	cp	r6, r14
    1bc8:	7f 04       	cpc	r7, r15
    1bca:	24 f3       	brlt	.-56     	; 0x1b94 <oled_invert_rectangle+0xfc>
				oled_goto_line(x);
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
    1bcc:	c7 01       	movw	r24, r14
    1bce:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1bd2:	0c 17       	cp	r16, r28
    1bd4:	1d 07       	cpc	r17, r29
    1bd6:	1c f5       	brge	.+70     	; 0x1c1e <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <oled_goto_column>
			oled_write_data(b ^ oled_read_data());
    1bde:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_read_data>
    1be2:	8a 25       	eor	r24, r10
    1be4:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
				oled_write_data(255 ^ oled_read_data());
			}
		}
		//Filling bottom
		oled_goto_line(y2/8);
		for(int x = x1; x < x2; x++){
    1be8:	0f 5f       	subi	r16, 0xFF	; 255
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	0c 17       	cp	r16, r28
    1bee:	1d 07       	cpc	r17, r29
    1bf0:	9c f3       	brlt	.-26     	; 0x1bd8 <oled_invert_rectangle+0x140>
    1bf2:	15 c0       	rjmp	.+42     	; 0x1c1e <oled_invert_rectangle+0x186>
			oled_goto_column(x);
			oled_write_data(b ^ oled_read_data());
		}
	}
	else{
		int m = t & b;
    1bf4:	ca 20       	and	r12, r10
    1bf6:	db 20       	and	r13, r11
		oled_goto_line(y1/8);
    1bf8:	c3 01       	movw	r24, r6
    1bfa:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_goto_line>
		for(int x = x1; x < x2; x++){
    1bfe:	0c 17       	cp	r16, r28
    1c00:	1d 07       	cpc	r17, r29
    1c02:	6c f4       	brge	.+26     	; 0x1c1e <oled_invert_rectangle+0x186>
			oled_goto_column(x);
    1c04:	c8 01       	movw	r24, r16
    1c06:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <oled_goto_column>
			oled_write_data(m ^ oled_read_data());
    1c0a:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_read_data>
    1c0e:	8c 25       	eor	r24, r12
    1c10:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_write_data>
		}
	}
	else{
		int m = t & b;
		oled_goto_line(y1/8);
		for(int x = x1; x < x2; x++){
    1c14:	0f 5f       	subi	r16, 0xFF	; 255
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	0c 17       	cp	r16, r28
    1c1a:	1d 07       	cpc	r17, r29
    1c1c:	9c f3       	brlt	.-26     	; 0x1c04 <oled_invert_rectangle+0x16c>
			oled_goto_column(x);
			oled_write_data(m ^ oled_read_data());
		}
	}
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	8f 90       	pop	r8
    1c36:	7f 90       	pop	r7
    1c38:	6f 90       	pop	r6
    1c3a:	08 95       	ret

00001c3c <__vector_10>:

ISR(TIMER2_COMP_vect)
{
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	8f 93       	push	r24
    1c48:	9f 93       	push	r25
	if(state == in_menu){
    1c4a:	80 91 a7 01 	lds	r24, 0x01A7
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	39 f4       	brne	.+14     	; 0x1c60 <__vector_10+0x24>
		oled_refresh_timer = 1;	
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	90 93 bf 02 	sts	0x02BF, r25
    1c5a:	80 93 be 02 	sts	0x02BE, r24
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <__vector_10+0x34>
	}
	else if(state == in_game){
    1c60:	82 30       	cpi	r24, 0x02	; 2
    1c62:	31 f4       	brne	.+12     	; 0x1c70 <__vector_10+0x34>
		game_time_passed = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	90 93 ab 01 	sts	0x01AB, r25
    1c6c:	80 93 aa 01 	sts	0x01AA, r24
	}
	
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <touch_init>:
    1c7e:	b8 98       	cbi	0x17, 0	; 23
    1c80:	b9 98       	cbi	0x17, 1	; 23
    1c82:	08 95       	ret

00001c84 <__subsf3>:
    1c84:	50 58       	subi	r21, 0x80	; 128

00001c86 <__addsf3>:
    1c86:	bb 27       	eor	r27, r27
    1c88:	aa 27       	eor	r26, r26
    1c8a:	0e d0       	rcall	.+28     	; 0x1ca8 <__addsf3x>
    1c8c:	d4 c1       	rjmp	.+936    	; 0x2036 <__fp_round>
    1c8e:	c5 d1       	rcall	.+906    	; 0x201a <__fp_pscA>
    1c90:	30 f0       	brcs	.+12     	; 0x1c9e <__addsf3+0x18>
    1c92:	ca d1       	rcall	.+916    	; 0x2028 <__fp_pscB>
    1c94:	20 f0       	brcs	.+8      	; 0x1c9e <__addsf3+0x18>
    1c96:	31 f4       	brne	.+12     	; 0x1ca4 <__addsf3+0x1e>
    1c98:	9f 3f       	cpi	r25, 0xFF	; 255
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <__addsf3+0x1a>
    1c9c:	1e f4       	brtc	.+6      	; 0x1ca4 <__addsf3+0x1e>
    1c9e:	95 c1       	rjmp	.+810    	; 0x1fca <__fp_nan>
    1ca0:	0e f4       	brtc	.+2      	; 0x1ca4 <__addsf3+0x1e>
    1ca2:	e0 95       	com	r30
    1ca4:	e7 fb       	bst	r30, 7
    1ca6:	8b c1       	rjmp	.+790    	; 0x1fbe <__fp_inf>

00001ca8 <__addsf3x>:
    1ca8:	e9 2f       	mov	r30, r25
    1caa:	d6 d1       	rcall	.+940    	; 0x2058 <__fp_split3>
    1cac:	80 f3       	brcs	.-32     	; 0x1c8e <__addsf3+0x8>
    1cae:	ba 17       	cp	r27, r26
    1cb0:	62 07       	cpc	r22, r18
    1cb2:	73 07       	cpc	r23, r19
    1cb4:	84 07       	cpc	r24, r20
    1cb6:	95 07       	cpc	r25, r21
    1cb8:	18 f0       	brcs	.+6      	; 0x1cc0 <__addsf3x+0x18>
    1cba:	71 f4       	brne	.+28     	; 0x1cd8 <__addsf3x+0x30>
    1cbc:	9e f5       	brtc	.+102    	; 0x1d24 <__addsf3x+0x7c>
    1cbe:	ee c1       	rjmp	.+988    	; 0x209c <__fp_zero>
    1cc0:	0e f4       	brtc	.+2      	; 0x1cc4 <__addsf3x+0x1c>
    1cc2:	e0 95       	com	r30
    1cc4:	0b 2e       	mov	r0, r27
    1cc6:	ba 2f       	mov	r27, r26
    1cc8:	a0 2d       	mov	r26, r0
    1cca:	0b 01       	movw	r0, r22
    1ccc:	b9 01       	movw	r22, r18
    1cce:	90 01       	movw	r18, r0
    1cd0:	0c 01       	movw	r0, r24
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	a0 01       	movw	r20, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	ff 27       	eor	r31, r31
    1cda:	59 1b       	sub	r21, r25
    1cdc:	99 f0       	breq	.+38     	; 0x1d04 <__addsf3x+0x5c>
    1cde:	59 3f       	cpi	r21, 0xF9	; 249
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <__addsf3x+0x4e>
    1ce2:	50 3e       	cpi	r21, 0xE0	; 224
    1ce4:	68 f1       	brcs	.+90     	; 0x1d40 <__addsf3x+0x98>
    1ce6:	1a 16       	cp	r1, r26
    1ce8:	f0 40       	sbci	r31, 0x00	; 0
    1cea:	a2 2f       	mov	r26, r18
    1cec:	23 2f       	mov	r18, r19
    1cee:	34 2f       	mov	r19, r20
    1cf0:	44 27       	eor	r20, r20
    1cf2:	58 5f       	subi	r21, 0xF8	; 248
    1cf4:	f3 cf       	rjmp	.-26     	; 0x1cdc <__addsf3x+0x34>
    1cf6:	46 95       	lsr	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	a7 95       	ror	r26
    1cfe:	f0 40       	sbci	r31, 0x00	; 0
    1d00:	53 95       	inc	r21
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__addsf3x+0x4e>
    1d04:	7e f4       	brtc	.+30     	; 0x1d24 <__addsf3x+0x7c>
    1d06:	1f 16       	cp	r1, r31
    1d08:	ba 0b       	sbc	r27, r26
    1d0a:	62 0b       	sbc	r22, r18
    1d0c:	73 0b       	sbc	r23, r19
    1d0e:	84 0b       	sbc	r24, r20
    1d10:	ba f0       	brmi	.+46     	; 0x1d40 <__addsf3x+0x98>
    1d12:	91 50       	subi	r25, 0x01	; 1
    1d14:	a1 f0       	breq	.+40     	; 0x1d3e <__addsf3x+0x96>
    1d16:	ff 0f       	add	r31, r31
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	c2 f7       	brpl	.-16     	; 0x1d12 <__addsf3x+0x6a>
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <__addsf3x+0x98>
    1d24:	ba 0f       	add	r27, r26
    1d26:	62 1f       	adc	r22, r18
    1d28:	73 1f       	adc	r23, r19
    1d2a:	84 1f       	adc	r24, r20
    1d2c:	48 f4       	brcc	.+18     	; 0x1d40 <__addsf3x+0x98>
    1d2e:	87 95       	ror	r24
    1d30:	77 95       	ror	r23
    1d32:	67 95       	ror	r22
    1d34:	b7 95       	ror	r27
    1d36:	f7 95       	ror	r31
    1d38:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <__addsf3x+0x96>
    1d3c:	b3 cf       	rjmp	.-154    	; 0x1ca4 <__addsf3+0x1e>
    1d3e:	93 95       	inc	r25
    1d40:	88 0f       	add	r24, r24
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <__addsf3x+0x9e>
    1d44:	99 27       	eor	r25, r25
    1d46:	ee 0f       	add	r30, r30
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	08 95       	ret
    1d4e:	65 d1       	rcall	.+714    	; 0x201a <__fp_pscA>
    1d50:	58 f0       	brcs	.+22     	; 0x1d68 <__addsf3x+0xc0>
    1d52:	80 e8       	ldi	r24, 0x80	; 128
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <__addsf3x+0xb2>
    1d58:	9e ef       	ldi	r25, 0xFE	; 254
    1d5a:	66 d1       	rcall	.+716    	; 0x2028 <__fp_pscB>
    1d5c:	28 f0       	brcs	.+10     	; 0x1d68 <__addsf3x+0xc0>
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	51 e0       	ldi	r21, 0x01	; 1
    1d62:	59 f4       	brne	.+22     	; 0x1d7a <atan2+0xe>
    1d64:	5e ef       	ldi	r21, 0xFE	; 254
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <atan2+0xe>
    1d68:	30 c1       	rjmp	.+608    	; 0x1fca <__fp_nan>
    1d6a:	98 c1       	rjmp	.+816    	; 0x209c <__fp_zero>

00001d6c <atan2>:
    1d6c:	e9 2f       	mov	r30, r25
    1d6e:	e0 78       	andi	r30, 0x80	; 128
    1d70:	73 d1       	rcall	.+742    	; 0x2058 <__fp_split3>
    1d72:	68 f3       	brcs	.-38     	; 0x1d4e <__addsf3x+0xa6>
    1d74:	09 2e       	mov	r0, r25
    1d76:	05 2a       	or	r0, r21
    1d78:	c1 f3       	breq	.-16     	; 0x1d6a <__addsf3x+0xc2>
    1d7a:	26 17       	cp	r18, r22
    1d7c:	37 07       	cpc	r19, r23
    1d7e:	48 07       	cpc	r20, r24
    1d80:	59 07       	cpc	r21, r25
    1d82:	38 f0       	brcs	.+14     	; 0x1d92 <atan2+0x26>
    1d84:	0e 2e       	mov	r0, r30
    1d86:	07 f8       	bld	r0, 7
    1d88:	e0 25       	eor	r30, r0
    1d8a:	69 f0       	breq	.+26     	; 0x1da6 <atan2+0x3a>
    1d8c:	e0 25       	eor	r30, r0
    1d8e:	e0 64       	ori	r30, 0x40	; 64
    1d90:	0a c0       	rjmp	.+20     	; 0x1da6 <atan2+0x3a>
    1d92:	ef 63       	ori	r30, 0x3F	; 63
    1d94:	07 f8       	bld	r0, 7
    1d96:	00 94       	com	r0
    1d98:	07 fa       	bst	r0, 7
    1d9a:	db 01       	movw	r26, r22
    1d9c:	b9 01       	movw	r22, r18
    1d9e:	9d 01       	movw	r18, r26
    1da0:	dc 01       	movw	r26, r24
    1da2:	ca 01       	movw	r24, r20
    1da4:	ad 01       	movw	r20, r26
    1da6:	ef 93       	push	r30
    1da8:	43 d0       	rcall	.+134    	; 0x1e30 <__divsf3_pse>
    1daa:	45 d1       	rcall	.+650    	; 0x2036 <__fp_round>
    1dac:	0a d0       	rcall	.+20     	; 0x1dc2 <atan>
    1dae:	5f 91       	pop	r21
    1db0:	55 23       	and	r21, r21
    1db2:	31 f0       	breq	.+12     	; 0x1dc0 <atan2+0x54>
    1db4:	2b ed       	ldi	r18, 0xDB	; 219
    1db6:	3f e0       	ldi	r19, 0x0F	; 15
    1db8:	49 e4       	ldi	r20, 0x49	; 73
    1dba:	50 fd       	sbrc	r21, 0
    1dbc:	49 ec       	ldi	r20, 0xC9	; 201
    1dbe:	63 cf       	rjmp	.-314    	; 0x1c86 <__addsf3>
    1dc0:	08 95       	ret

00001dc2 <atan>:
    1dc2:	df 93       	push	r29
    1dc4:	dd 27       	eor	r29, r29
    1dc6:	b9 2f       	mov	r27, r25
    1dc8:	bf 77       	andi	r27, 0x7F	; 127
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	16 16       	cp	r1, r22
    1dd0:	17 06       	cpc	r1, r23
    1dd2:	48 07       	cpc	r20, r24
    1dd4:	5b 07       	cpc	r21, r27
    1dd6:	10 f4       	brcc	.+4      	; 0x1ddc <atan+0x1a>
    1dd8:	d9 2f       	mov	r29, r25
    1dda:	67 d1       	rcall	.+718    	; 0x20aa <inverse>
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	7f 93       	push	r23
    1de2:	6f 93       	push	r22
    1de4:	0e d2       	rcall	.+1052   	; 0x2202 <square>
    1de6:	e0 e7       	ldi	r30, 0x70	; 112
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	f2 d0       	rcall	.+484    	; 0x1fd0 <__fp_powser>
    1dec:	24 d1       	rcall	.+584    	; 0x2036 <__fp_round>
    1dee:	2f 91       	pop	r18
    1df0:	3f 91       	pop	r19
    1df2:	4f 91       	pop	r20
    1df4:	5f 91       	pop	r21
    1df6:	6c d1       	rcall	.+728    	; 0x20d0 <__mulsf3x>
    1df8:	dd 23       	and	r29, r29
    1dfa:	49 f0       	breq	.+18     	; 0x1e0e <atan+0x4c>
    1dfc:	90 58       	subi	r25, 0x80	; 128
    1dfe:	a2 ea       	ldi	r26, 0xA2	; 162
    1e00:	2a ed       	ldi	r18, 0xDA	; 218
    1e02:	3f e0       	ldi	r19, 0x0F	; 15
    1e04:	49 ec       	ldi	r20, 0xC9	; 201
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	d0 78       	andi	r29, 0x80	; 128
    1e0a:	5d 27       	eor	r21, r29
    1e0c:	4d df       	rcall	.-358    	; 0x1ca8 <__addsf3x>
    1e0e:	df 91       	pop	r29
    1e10:	12 c1       	rjmp	.+548    	; 0x2036 <__fp_round>

00001e12 <__divsf3>:
    1e12:	0c d0       	rcall	.+24     	; 0x1e2c <__divsf3x>
    1e14:	10 c1       	rjmp	.+544    	; 0x2036 <__fp_round>
    1e16:	08 d1       	rcall	.+528    	; 0x2028 <__fp_pscB>
    1e18:	40 f0       	brcs	.+16     	; 0x1e2a <__divsf3+0x18>
    1e1a:	ff d0       	rcall	.+510    	; 0x201a <__fp_pscA>
    1e1c:	30 f0       	brcs	.+12     	; 0x1e2a <__divsf3+0x18>
    1e1e:	21 f4       	brne	.+8      	; 0x1e28 <__divsf3+0x16>
    1e20:	5f 3f       	cpi	r21, 0xFF	; 255
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <__divsf3+0x18>
    1e24:	cc c0       	rjmp	.+408    	; 0x1fbe <__fp_inf>
    1e26:	51 11       	cpse	r21, r1
    1e28:	3a c1       	rjmp	.+628    	; 0x209e <__fp_szero>
    1e2a:	cf c0       	rjmp	.+414    	; 0x1fca <__fp_nan>

00001e2c <__divsf3x>:
    1e2c:	15 d1       	rcall	.+554    	; 0x2058 <__fp_split3>
    1e2e:	98 f3       	brcs	.-26     	; 0x1e16 <__divsf3+0x4>

00001e30 <__divsf3_pse>:
    1e30:	99 23       	and	r25, r25
    1e32:	c9 f3       	breq	.-14     	; 0x1e26 <__divsf3+0x14>
    1e34:	55 23       	and	r21, r21
    1e36:	b1 f3       	breq	.-20     	; 0x1e24 <__divsf3+0x12>
    1e38:	95 1b       	sub	r25, r21
    1e3a:	55 0b       	sbc	r21, r21
    1e3c:	bb 27       	eor	r27, r27
    1e3e:	aa 27       	eor	r26, r26
    1e40:	62 17       	cp	r22, r18
    1e42:	73 07       	cpc	r23, r19
    1e44:	84 07       	cpc	r24, r20
    1e46:	38 f0       	brcs	.+14     	; 0x1e56 <__divsf3_pse+0x26>
    1e48:	9f 5f       	subi	r25, 0xFF	; 255
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	22 0f       	add	r18, r18
    1e4e:	33 1f       	adc	r19, r19
    1e50:	44 1f       	adc	r20, r20
    1e52:	aa 1f       	adc	r26, r26
    1e54:	a9 f3       	breq	.-22     	; 0x1e40 <__divsf3_pse+0x10>
    1e56:	33 d0       	rcall	.+102    	; 0x1ebe <__divsf3_pse+0x8e>
    1e58:	0e 2e       	mov	r0, r30
    1e5a:	3a f0       	brmi	.+14     	; 0x1e6a <__divsf3_pse+0x3a>
    1e5c:	e0 e8       	ldi	r30, 0x80	; 128
    1e5e:	30 d0       	rcall	.+96     	; 0x1ec0 <__divsf3_pse+0x90>
    1e60:	91 50       	subi	r25, 0x01	; 1
    1e62:	50 40       	sbci	r21, 0x00	; 0
    1e64:	e6 95       	lsr	r30
    1e66:	00 1c       	adc	r0, r0
    1e68:	ca f7       	brpl	.-14     	; 0x1e5c <__divsf3_pse+0x2c>
    1e6a:	29 d0       	rcall	.+82     	; 0x1ebe <__divsf3_pse+0x8e>
    1e6c:	fe 2f       	mov	r31, r30
    1e6e:	27 d0       	rcall	.+78     	; 0x1ebe <__divsf3_pse+0x8e>
    1e70:	66 0f       	add	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	88 1f       	adc	r24, r24
    1e76:	bb 1f       	adc	r27, r27
    1e78:	26 17       	cp	r18, r22
    1e7a:	37 07       	cpc	r19, r23
    1e7c:	48 07       	cpc	r20, r24
    1e7e:	ab 07       	cpc	r26, r27
    1e80:	b0 e8       	ldi	r27, 0x80	; 128
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <__divsf3_pse+0x56>
    1e84:	bb 0b       	sbc	r27, r27
    1e86:	80 2d       	mov	r24, r0
    1e88:	bf 01       	movw	r22, r30
    1e8a:	ff 27       	eor	r31, r31
    1e8c:	93 58       	subi	r25, 0x83	; 131
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	2a f0       	brmi	.+10     	; 0x1e9c <__divsf3_pse+0x6c>
    1e92:	9e 3f       	cpi	r25, 0xFE	; 254
    1e94:	51 05       	cpc	r21, r1
    1e96:	68 f0       	brcs	.+26     	; 0x1eb2 <__divsf3_pse+0x82>
    1e98:	92 c0       	rjmp	.+292    	; 0x1fbe <__fp_inf>
    1e9a:	01 c1       	rjmp	.+514    	; 0x209e <__fp_szero>
    1e9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9e:	ec f3       	brlt	.-6      	; 0x1e9a <__divsf3_pse+0x6a>
    1ea0:	98 3e       	cpi	r25, 0xE8	; 232
    1ea2:	dc f3       	brlt	.-10     	; 0x1e9a <__divsf3_pse+0x6a>
    1ea4:	86 95       	lsr	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b7 95       	ror	r27
    1eac:	f7 95       	ror	r31
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	c9 f7       	brne	.-14     	; 0x1ea4 <__divsf3_pse+0x74>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	96 95       	lsr	r25
    1eb8:	87 95       	ror	r24
    1eba:	97 f9       	bld	r25, 7
    1ebc:	08 95       	ret
    1ebe:	e1 e0       	ldi	r30, 0x01	; 1
    1ec0:	66 0f       	add	r22, r22
    1ec2:	77 1f       	adc	r23, r23
    1ec4:	88 1f       	adc	r24, r24
    1ec6:	bb 1f       	adc	r27, r27
    1ec8:	62 17       	cp	r22, r18
    1eca:	73 07       	cpc	r23, r19
    1ecc:	84 07       	cpc	r24, r20
    1ece:	ba 07       	cpc	r27, r26
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <__divsf3_pse+0xaa>
    1ed2:	62 1b       	sub	r22, r18
    1ed4:	73 0b       	sbc	r23, r19
    1ed6:	84 0b       	sbc	r24, r20
    1ed8:	ba 0b       	sbc	r27, r26
    1eda:	ee 1f       	adc	r30, r30
    1edc:	88 f7       	brcc	.-30     	; 0x1ec0 <__divsf3_pse+0x90>
    1ede:	e0 95       	com	r30
    1ee0:	08 95       	ret

00001ee2 <__fixsfsi>:
    1ee2:	04 d0       	rcall	.+8      	; 0x1eec <__fixunssfsi>
    1ee4:	68 94       	set
    1ee6:	b1 11       	cpse	r27, r1
    1ee8:	da c0       	rjmp	.+436    	; 0x209e <__fp_szero>
    1eea:	08 95       	ret

00001eec <__fixunssfsi>:
    1eec:	bd d0       	rcall	.+378    	; 0x2068 <__fp_splitA>
    1eee:	88 f0       	brcs	.+34     	; 0x1f12 <__fixunssfsi+0x26>
    1ef0:	9f 57       	subi	r25, 0x7F	; 127
    1ef2:	90 f0       	brcs	.+36     	; 0x1f18 <__fixunssfsi+0x2c>
    1ef4:	b9 2f       	mov	r27, r25
    1ef6:	99 27       	eor	r25, r25
    1ef8:	b7 51       	subi	r27, 0x17	; 23
    1efa:	a0 f0       	brcs	.+40     	; 0x1f24 <__fixunssfsi+0x38>
    1efc:	d1 f0       	breq	.+52     	; 0x1f32 <__fixunssfsi+0x46>
    1efe:	66 0f       	add	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	1a f0       	brmi	.+6      	; 0x1f0e <__fixunssfsi+0x22>
    1f08:	ba 95       	dec	r27
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <__fixunssfsi+0x12>
    1f0c:	12 c0       	rjmp	.+36     	; 0x1f32 <__fixunssfsi+0x46>
    1f0e:	b1 30       	cpi	r27, 0x01	; 1
    1f10:	81 f0       	breq	.+32     	; 0x1f32 <__fixunssfsi+0x46>
    1f12:	c4 d0       	rcall	.+392    	; 0x209c <__fp_zero>
    1f14:	b1 e0       	ldi	r27, 0x01	; 1
    1f16:	08 95       	ret
    1f18:	c1 c0       	rjmp	.+386    	; 0x209c <__fp_zero>
    1f1a:	67 2f       	mov	r22, r23
    1f1c:	78 2f       	mov	r23, r24
    1f1e:	88 27       	eor	r24, r24
    1f20:	b8 5f       	subi	r27, 0xF8	; 248
    1f22:	39 f0       	breq	.+14     	; 0x1f32 <__fixunssfsi+0x46>
    1f24:	b9 3f       	cpi	r27, 0xF9	; 249
    1f26:	cc f3       	brlt	.-14     	; 0x1f1a <__fixunssfsi+0x2e>
    1f28:	86 95       	lsr	r24
    1f2a:	77 95       	ror	r23
    1f2c:	67 95       	ror	r22
    1f2e:	b3 95       	inc	r27
    1f30:	d9 f7       	brne	.-10     	; 0x1f28 <__fixunssfsi+0x3c>
    1f32:	3e f4       	brtc	.+14     	; 0x1f42 <__fixunssfsi+0x56>
    1f34:	90 95       	com	r25
    1f36:	80 95       	com	r24
    1f38:	70 95       	com	r23
    1f3a:	61 95       	neg	r22
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f40:	9f 4f       	sbci	r25, 0xFF	; 255
    1f42:	08 95       	ret

00001f44 <__floatunsisf>:
    1f44:	e8 94       	clt
    1f46:	09 c0       	rjmp	.+18     	; 0x1f5a <__floatsisf+0x12>

00001f48 <__floatsisf>:
    1f48:	97 fb       	bst	r25, 7
    1f4a:	3e f4       	brtc	.+14     	; 0x1f5a <__floatsisf+0x12>
    1f4c:	90 95       	com	r25
    1f4e:	80 95       	com	r24
    1f50:	70 95       	com	r23
    1f52:	61 95       	neg	r22
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	8f 4f       	sbci	r24, 0xFF	; 255
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	99 23       	and	r25, r25
    1f5c:	a9 f0       	breq	.+42     	; 0x1f88 <__floatsisf+0x40>
    1f5e:	f9 2f       	mov	r31, r25
    1f60:	96 e9       	ldi	r25, 0x96	; 150
    1f62:	bb 27       	eor	r27, r27
    1f64:	93 95       	inc	r25
    1f66:	f6 95       	lsr	r31
    1f68:	87 95       	ror	r24
    1f6a:	77 95       	ror	r23
    1f6c:	67 95       	ror	r22
    1f6e:	b7 95       	ror	r27
    1f70:	f1 11       	cpse	r31, r1
    1f72:	f8 cf       	rjmp	.-16     	; 0x1f64 <__floatsisf+0x1c>
    1f74:	fa f4       	brpl	.+62     	; 0x1fb4 <__floatsisf+0x6c>
    1f76:	bb 0f       	add	r27, r27
    1f78:	11 f4       	brne	.+4      	; 0x1f7e <__floatsisf+0x36>
    1f7a:	60 ff       	sbrs	r22, 0
    1f7c:	1b c0       	rjmp	.+54     	; 0x1fb4 <__floatsisf+0x6c>
    1f7e:	6f 5f       	subi	r22, 0xFF	; 255
    1f80:	7f 4f       	sbci	r23, 0xFF	; 255
    1f82:	8f 4f       	sbci	r24, 0xFF	; 255
    1f84:	9f 4f       	sbci	r25, 0xFF	; 255
    1f86:	16 c0       	rjmp	.+44     	; 0x1fb4 <__floatsisf+0x6c>
    1f88:	88 23       	and	r24, r24
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <__floatsisf+0x48>
    1f8c:	96 e9       	ldi	r25, 0x96	; 150
    1f8e:	11 c0       	rjmp	.+34     	; 0x1fb2 <__floatsisf+0x6a>
    1f90:	77 23       	and	r23, r23
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <__floatsisf+0x54>
    1f94:	9e e8       	ldi	r25, 0x8E	; 142
    1f96:	87 2f       	mov	r24, r23
    1f98:	76 2f       	mov	r23, r22
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <__floatsisf+0x5e>
    1f9c:	66 23       	and	r22, r22
    1f9e:	71 f0       	breq	.+28     	; 0x1fbc <__floatsisf+0x74>
    1fa0:	96 e8       	ldi	r25, 0x86	; 134
    1fa2:	86 2f       	mov	r24, r22
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	2a f0       	brmi	.+10     	; 0x1fb4 <__floatsisf+0x6c>
    1faa:	9a 95       	dec	r25
    1fac:	66 0f       	add	r22, r22
    1fae:	77 1f       	adc	r23, r23
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	da f7       	brpl	.-10     	; 0x1faa <__floatsisf+0x62>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	96 95       	lsr	r25
    1fb8:	87 95       	ror	r24
    1fba:	97 f9       	bld	r25, 7
    1fbc:	08 95       	ret

00001fbe <__fp_inf>:
    1fbe:	97 f9       	bld	r25, 7
    1fc0:	9f 67       	ori	r25, 0x7F	; 127
    1fc2:	80 e8       	ldi	r24, 0x80	; 128
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	08 95       	ret

00001fca <__fp_nan>:
    1fca:	9f ef       	ldi	r25, 0xFF	; 255
    1fcc:	80 ec       	ldi	r24, 0xC0	; 192
    1fce:	08 95       	ret

00001fd0 <__fp_powser>:
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	1f 93       	push	r17
    1fd6:	0f 93       	push	r16
    1fd8:	ff 92       	push	r15
    1fda:	ef 92       	push	r14
    1fdc:	df 92       	push	r13
    1fde:	7b 01       	movw	r14, r22
    1fe0:	8c 01       	movw	r16, r24
    1fe2:	68 94       	set
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <__fp_powser+0x20>
    1fe6:	da 2e       	mov	r13, r26
    1fe8:	ef 01       	movw	r28, r30
    1fea:	72 d0       	rcall	.+228    	; 0x20d0 <__mulsf3x>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e8 94       	clt
    1ff0:	a5 91       	lpm	r26, Z+
    1ff2:	25 91       	lpm	r18, Z+
    1ff4:	35 91       	lpm	r19, Z+
    1ff6:	45 91       	lpm	r20, Z+
    1ff8:	55 91       	lpm	r21, Z+
    1ffa:	ae f3       	brts	.-22     	; 0x1fe6 <__fp_powser+0x16>
    1ffc:	ef 01       	movw	r28, r30
    1ffe:	54 de       	rcall	.-856    	; 0x1ca8 <__addsf3x>
    2000:	fe 01       	movw	r30, r28
    2002:	97 01       	movw	r18, r14
    2004:	a8 01       	movw	r20, r16
    2006:	da 94       	dec	r13
    2008:	79 f7       	brne	.-34     	; 0x1fe8 <__fp_powser+0x18>
    200a:	df 90       	pop	r13
    200c:	ef 90       	pop	r14
    200e:	ff 90       	pop	r15
    2010:	0f 91       	pop	r16
    2012:	1f 91       	pop	r17
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <__fp_pscA>:
    201a:	00 24       	eor	r0, r0
    201c:	0a 94       	dec	r0
    201e:	16 16       	cp	r1, r22
    2020:	17 06       	cpc	r1, r23
    2022:	18 06       	cpc	r1, r24
    2024:	09 06       	cpc	r0, r25
    2026:	08 95       	ret

00002028 <__fp_pscB>:
    2028:	00 24       	eor	r0, r0
    202a:	0a 94       	dec	r0
    202c:	12 16       	cp	r1, r18
    202e:	13 06       	cpc	r1, r19
    2030:	14 06       	cpc	r1, r20
    2032:	05 06       	cpc	r0, r21
    2034:	08 95       	ret

00002036 <__fp_round>:
    2036:	09 2e       	mov	r0, r25
    2038:	03 94       	inc	r0
    203a:	00 0c       	add	r0, r0
    203c:	11 f4       	brne	.+4      	; 0x2042 <__fp_round+0xc>
    203e:	88 23       	and	r24, r24
    2040:	52 f0       	brmi	.+20     	; 0x2056 <__fp_round+0x20>
    2042:	bb 0f       	add	r27, r27
    2044:	40 f4       	brcc	.+16     	; 0x2056 <__fp_round+0x20>
    2046:	bf 2b       	or	r27, r31
    2048:	11 f4       	brne	.+4      	; 0x204e <__fp_round+0x18>
    204a:	60 ff       	sbrs	r22, 0
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <__fp_round+0x20>
    204e:	6f 5f       	subi	r22, 0xFF	; 255
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	8f 4f       	sbci	r24, 0xFF	; 255
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	08 95       	ret

00002058 <__fp_split3>:
    2058:	57 fd       	sbrc	r21, 7
    205a:	90 58       	subi	r25, 0x80	; 128
    205c:	44 0f       	add	r20, r20
    205e:	55 1f       	adc	r21, r21
    2060:	59 f0       	breq	.+22     	; 0x2078 <__fp_splitA+0x10>
    2062:	5f 3f       	cpi	r21, 0xFF	; 255
    2064:	71 f0       	breq	.+28     	; 0x2082 <__fp_splitA+0x1a>
    2066:	47 95       	ror	r20

00002068 <__fp_splitA>:
    2068:	88 0f       	add	r24, r24
    206a:	97 fb       	bst	r25, 7
    206c:	99 1f       	adc	r25, r25
    206e:	61 f0       	breq	.+24     	; 0x2088 <__fp_splitA+0x20>
    2070:	9f 3f       	cpi	r25, 0xFF	; 255
    2072:	79 f0       	breq	.+30     	; 0x2092 <__fp_splitA+0x2a>
    2074:	87 95       	ror	r24
    2076:	08 95       	ret
    2078:	12 16       	cp	r1, r18
    207a:	13 06       	cpc	r1, r19
    207c:	14 06       	cpc	r1, r20
    207e:	55 1f       	adc	r21, r21
    2080:	f2 cf       	rjmp	.-28     	; 0x2066 <__fp_split3+0xe>
    2082:	46 95       	lsr	r20
    2084:	f1 df       	rcall	.-30     	; 0x2068 <__fp_splitA>
    2086:	08 c0       	rjmp	.+16     	; 0x2098 <__fp_splitA+0x30>
    2088:	16 16       	cp	r1, r22
    208a:	17 06       	cpc	r1, r23
    208c:	18 06       	cpc	r1, r24
    208e:	99 1f       	adc	r25, r25
    2090:	f1 cf       	rjmp	.-30     	; 0x2074 <__fp_splitA+0xc>
    2092:	86 95       	lsr	r24
    2094:	71 05       	cpc	r23, r1
    2096:	61 05       	cpc	r22, r1
    2098:	08 94       	sec
    209a:	08 95       	ret

0000209c <__fp_zero>:
    209c:	e8 94       	clt

0000209e <__fp_szero>:
    209e:	bb 27       	eor	r27, r27
    20a0:	66 27       	eor	r22, r22
    20a2:	77 27       	eor	r23, r23
    20a4:	cb 01       	movw	r24, r22
    20a6:	97 f9       	bld	r25, 7
    20a8:	08 95       	ret

000020aa <inverse>:
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	9f e3       	ldi	r25, 0x3F	; 63
    20b6:	ad ce       	rjmp	.-678    	; 0x1e12 <__divsf3>

000020b8 <__mulsf3>:
    20b8:	0b d0       	rcall	.+22     	; 0x20d0 <__mulsf3x>
    20ba:	bd cf       	rjmp	.-134    	; 0x2036 <__fp_round>
    20bc:	ae df       	rcall	.-164    	; 0x201a <__fp_pscA>
    20be:	28 f0       	brcs	.+10     	; 0x20ca <__mulsf3+0x12>
    20c0:	b3 df       	rcall	.-154    	; 0x2028 <__fp_pscB>
    20c2:	18 f0       	brcs	.+6      	; 0x20ca <__mulsf3+0x12>
    20c4:	95 23       	and	r25, r21
    20c6:	09 f0       	breq	.+2      	; 0x20ca <__mulsf3+0x12>
    20c8:	7a cf       	rjmp	.-268    	; 0x1fbe <__fp_inf>
    20ca:	7f cf       	rjmp	.-258    	; 0x1fca <__fp_nan>
    20cc:	11 24       	eor	r1, r1
    20ce:	e7 cf       	rjmp	.-50     	; 0x209e <__fp_szero>

000020d0 <__mulsf3x>:
    20d0:	c3 df       	rcall	.-122    	; 0x2058 <__fp_split3>
    20d2:	a0 f3       	brcs	.-24     	; 0x20bc <__mulsf3+0x4>

000020d4 <__mulsf3_pse>:
    20d4:	95 9f       	mul	r25, r21
    20d6:	d1 f3       	breq	.-12     	; 0x20cc <__mulsf3+0x14>
    20d8:	95 0f       	add	r25, r21
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	55 1f       	adc	r21, r21
    20de:	62 9f       	mul	r22, r18
    20e0:	f0 01       	movw	r30, r0
    20e2:	72 9f       	mul	r23, r18
    20e4:	bb 27       	eor	r27, r27
    20e6:	f0 0d       	add	r31, r0
    20e8:	b1 1d       	adc	r27, r1
    20ea:	63 9f       	mul	r22, r19
    20ec:	aa 27       	eor	r26, r26
    20ee:	f0 0d       	add	r31, r0
    20f0:	b1 1d       	adc	r27, r1
    20f2:	aa 1f       	adc	r26, r26
    20f4:	64 9f       	mul	r22, r20
    20f6:	66 27       	eor	r22, r22
    20f8:	b0 0d       	add	r27, r0
    20fa:	a1 1d       	adc	r26, r1
    20fc:	66 1f       	adc	r22, r22
    20fe:	82 9f       	mul	r24, r18
    2100:	22 27       	eor	r18, r18
    2102:	b0 0d       	add	r27, r0
    2104:	a1 1d       	adc	r26, r1
    2106:	62 1f       	adc	r22, r18
    2108:	73 9f       	mul	r23, r19
    210a:	b0 0d       	add	r27, r0
    210c:	a1 1d       	adc	r26, r1
    210e:	62 1f       	adc	r22, r18
    2110:	83 9f       	mul	r24, r19
    2112:	a0 0d       	add	r26, r0
    2114:	61 1d       	adc	r22, r1
    2116:	22 1f       	adc	r18, r18
    2118:	74 9f       	mul	r23, r20
    211a:	33 27       	eor	r19, r19
    211c:	a0 0d       	add	r26, r0
    211e:	61 1d       	adc	r22, r1
    2120:	23 1f       	adc	r18, r19
    2122:	84 9f       	mul	r24, r20
    2124:	60 0d       	add	r22, r0
    2126:	21 1d       	adc	r18, r1
    2128:	82 2f       	mov	r24, r18
    212a:	76 2f       	mov	r23, r22
    212c:	6a 2f       	mov	r22, r26
    212e:	11 24       	eor	r1, r1
    2130:	9f 57       	subi	r25, 0x7F	; 127
    2132:	50 40       	sbci	r21, 0x00	; 0
    2134:	8a f0       	brmi	.+34     	; 0x2158 <__mulsf3_pse+0x84>
    2136:	e1 f0       	breq	.+56     	; 0x2170 <__mulsf3_pse+0x9c>
    2138:	88 23       	and	r24, r24
    213a:	4a f0       	brmi	.+18     	; 0x214e <__mulsf3_pse+0x7a>
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	bb 1f       	adc	r27, r27
    2142:	66 1f       	adc	r22, r22
    2144:	77 1f       	adc	r23, r23
    2146:	88 1f       	adc	r24, r24
    2148:	91 50       	subi	r25, 0x01	; 1
    214a:	50 40       	sbci	r21, 0x00	; 0
    214c:	a9 f7       	brne	.-22     	; 0x2138 <__mulsf3_pse+0x64>
    214e:	9e 3f       	cpi	r25, 0xFE	; 254
    2150:	51 05       	cpc	r21, r1
    2152:	70 f0       	brcs	.+28     	; 0x2170 <__mulsf3_pse+0x9c>
    2154:	34 cf       	rjmp	.-408    	; 0x1fbe <__fp_inf>
    2156:	a3 cf       	rjmp	.-186    	; 0x209e <__fp_szero>
    2158:	5f 3f       	cpi	r21, 0xFF	; 255
    215a:	ec f3       	brlt	.-6      	; 0x2156 <__mulsf3_pse+0x82>
    215c:	98 3e       	cpi	r25, 0xE8	; 232
    215e:	dc f3       	brlt	.-10     	; 0x2156 <__mulsf3_pse+0x82>
    2160:	86 95       	lsr	r24
    2162:	77 95       	ror	r23
    2164:	67 95       	ror	r22
    2166:	b7 95       	ror	r27
    2168:	f7 95       	ror	r31
    216a:	e7 95       	ror	r30
    216c:	9f 5f       	subi	r25, 0xFF	; 255
    216e:	c1 f7       	brne	.-16     	; 0x2160 <__mulsf3_pse+0x8c>
    2170:	fe 2b       	or	r31, r30
    2172:	88 0f       	add	r24, r24
    2174:	91 1d       	adc	r25, r1
    2176:	96 95       	lsr	r25
    2178:	87 95       	ror	r24
    217a:	97 f9       	bld	r25, 7
    217c:	08 95       	ret
    217e:	11 f4       	brne	.+4      	; 0x2184 <__mulsf3_pse+0xb0>
    2180:	0e f4       	brtc	.+2      	; 0x2184 <__mulsf3_pse+0xb0>
    2182:	23 cf       	rjmp	.-442    	; 0x1fca <__fp_nan>
    2184:	41 c0       	rjmp	.+130    	; 0x2208 <__fp_mpack>

00002186 <sqrt>:
    2186:	70 df       	rcall	.-288    	; 0x2068 <__fp_splitA>
    2188:	d0 f3       	brcs	.-12     	; 0x217e <__mulsf3_pse+0xaa>
    218a:	99 23       	and	r25, r25
    218c:	d9 f3       	breq	.-10     	; 0x2184 <__mulsf3_pse+0xb0>
    218e:	ce f3       	brts	.-14     	; 0x2182 <__mulsf3_pse+0xae>
    2190:	9f 57       	subi	r25, 0x7F	; 127
    2192:	55 0b       	sbc	r21, r21
    2194:	87 ff       	sbrs	r24, 7
    2196:	46 d0       	rcall	.+140    	; 0x2224 <__fp_norm2>
    2198:	00 24       	eor	r0, r0
    219a:	a0 e6       	ldi	r26, 0x60	; 96
    219c:	40 ea       	ldi	r20, 0xA0	; 160
    219e:	90 01       	movw	r18, r0
    21a0:	80 58       	subi	r24, 0x80	; 128
    21a2:	56 95       	lsr	r21
    21a4:	97 95       	ror	r25
    21a6:	28 f4       	brcc	.+10     	; 0x21b2 <sqrt+0x2c>
    21a8:	80 5c       	subi	r24, 0xC0	; 192
    21aa:	66 0f       	add	r22, r22
    21ac:	77 1f       	adc	r23, r23
    21ae:	88 1f       	adc	r24, r24
    21b0:	20 f0       	brcs	.+8      	; 0x21ba <sqrt+0x34>
    21b2:	26 17       	cp	r18, r22
    21b4:	37 07       	cpc	r19, r23
    21b6:	48 07       	cpc	r20, r24
    21b8:	30 f4       	brcc	.+12     	; 0x21c6 <sqrt+0x40>
    21ba:	62 1b       	sub	r22, r18
    21bc:	73 0b       	sbc	r23, r19
    21be:	84 0b       	sbc	r24, r20
    21c0:	20 29       	or	r18, r0
    21c2:	31 29       	or	r19, r1
    21c4:	4a 2b       	or	r20, r26
    21c6:	a6 95       	lsr	r26
    21c8:	17 94       	ror	r1
    21ca:	07 94       	ror	r0
    21cc:	20 25       	eor	r18, r0
    21ce:	31 25       	eor	r19, r1
    21d0:	4a 27       	eor	r20, r26
    21d2:	58 f7       	brcc	.-42     	; 0x21aa <sqrt+0x24>
    21d4:	66 0f       	add	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 1f       	adc	r24, r24
    21da:	20 f0       	brcs	.+8      	; 0x21e4 <sqrt+0x5e>
    21dc:	26 17       	cp	r18, r22
    21de:	37 07       	cpc	r19, r23
    21e0:	48 07       	cpc	r20, r24
    21e2:	30 f4       	brcc	.+12     	; 0x21f0 <sqrt+0x6a>
    21e4:	62 0b       	sbc	r22, r18
    21e6:	73 0b       	sbc	r23, r19
    21e8:	84 0b       	sbc	r24, r20
    21ea:	20 0d       	add	r18, r0
    21ec:	31 1d       	adc	r19, r1
    21ee:	41 1d       	adc	r20, r1
    21f0:	a0 95       	com	r26
    21f2:	81 f7       	brne	.-32     	; 0x21d4 <sqrt+0x4e>
    21f4:	b9 01       	movw	r22, r18
    21f6:	84 2f       	mov	r24, r20
    21f8:	91 58       	subi	r25, 0x81	; 129
    21fa:	88 0f       	add	r24, r24
    21fc:	96 95       	lsr	r25
    21fe:	87 95       	ror	r24
    2200:	08 95       	ret

00002202 <square>:
    2202:	9b 01       	movw	r18, r22
    2204:	ac 01       	movw	r20, r24
    2206:	58 cf       	rjmp	.-336    	; 0x20b8 <__mulsf3>

00002208 <__fp_mpack>:
    2208:	9f 3f       	cpi	r25, 0xFF	; 255
    220a:	31 f0       	breq	.+12     	; 0x2218 <__fp_mpack_finite+0xc>

0000220c <__fp_mpack_finite>:
    220c:	91 50       	subi	r25, 0x01	; 1
    220e:	20 f4       	brcc	.+8      	; 0x2218 <__fp_mpack_finite+0xc>
    2210:	87 95       	ror	r24
    2212:	77 95       	ror	r23
    2214:	67 95       	ror	r22
    2216:	b7 95       	ror	r27
    2218:	88 0f       	add	r24, r24
    221a:	91 1d       	adc	r25, r1
    221c:	96 95       	lsr	r25
    221e:	87 95       	ror	r24
    2220:	97 f9       	bld	r25, 7
    2222:	08 95       	ret

00002224 <__fp_norm2>:
    2224:	91 50       	subi	r25, 0x01	; 1
    2226:	50 40       	sbci	r21, 0x00	; 0
    2228:	66 0f       	add	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	88 1f       	adc	r24, r24
    222e:	d2 f7       	brpl	.-12     	; 0x2224 <__fp_norm2>
    2230:	08 95       	ret

00002232 <__divmodhi4>:
    2232:	97 fb       	bst	r25, 7
    2234:	07 2e       	mov	r0, r23
    2236:	16 f4       	brtc	.+4      	; 0x223c <__divmodhi4+0xa>
    2238:	00 94       	com	r0
    223a:	07 d0       	rcall	.+14     	; 0x224a <__divmodhi4_neg1>
    223c:	77 fd       	sbrc	r23, 7
    223e:	09 d0       	rcall	.+18     	; 0x2252 <__divmodhi4_neg2>
    2240:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
    2244:	07 fc       	sbrc	r0, 7
    2246:	05 d0       	rcall	.+10     	; 0x2252 <__divmodhi4_neg2>
    2248:	3e f4       	brtc	.+14     	; 0x2258 <__divmodhi4_exit>

0000224a <__divmodhi4_neg1>:
    224a:	90 95       	com	r25
    224c:	81 95       	neg	r24
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	08 95       	ret

00002252 <__divmodhi4_neg2>:
    2252:	70 95       	com	r23
    2254:	61 95       	neg	r22
    2256:	7f 4f       	sbci	r23, 0xFF	; 255

00002258 <__divmodhi4_exit>:
    2258:	08 95       	ret

0000225a <__udivmodsi4>:
    225a:	a1 e2       	ldi	r26, 0x21	; 33
    225c:	1a 2e       	mov	r1, r26
    225e:	aa 1b       	sub	r26, r26
    2260:	bb 1b       	sub	r27, r27
    2262:	fd 01       	movw	r30, r26
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <__udivmodsi4_ep>

00002266 <__udivmodsi4_loop>:
    2266:	aa 1f       	adc	r26, r26
    2268:	bb 1f       	adc	r27, r27
    226a:	ee 1f       	adc	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	a2 17       	cp	r26, r18
    2270:	b3 07       	cpc	r27, r19
    2272:	e4 07       	cpc	r30, r20
    2274:	f5 07       	cpc	r31, r21
    2276:	20 f0       	brcs	.+8      	; 0x2280 <__udivmodsi4_ep>
    2278:	a2 1b       	sub	r26, r18
    227a:	b3 0b       	sbc	r27, r19
    227c:	e4 0b       	sbc	r30, r20
    227e:	f5 0b       	sbc	r31, r21

00002280 <__udivmodsi4_ep>:
    2280:	66 1f       	adc	r22, r22
    2282:	77 1f       	adc	r23, r23
    2284:	88 1f       	adc	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	1a 94       	dec	r1
    228a:	69 f7       	brne	.-38     	; 0x2266 <__udivmodsi4_loop>
    228c:	60 95       	com	r22
    228e:	70 95       	com	r23
    2290:	80 95       	com	r24
    2292:	90 95       	com	r25
    2294:	9b 01       	movw	r18, r22
    2296:	ac 01       	movw	r20, r24
    2298:	bd 01       	movw	r22, r26
    229a:	cf 01       	movw	r24, r30
    229c:	08 95       	ret

0000229e <__divmodsi4>:
    229e:	05 2e       	mov	r0, r21
    22a0:	97 fb       	bst	r25, 7
    22a2:	1e f4       	brtc	.+6      	; 0x22aa <__divmodsi4+0xc>
    22a4:	00 94       	com	r0
    22a6:	0e 94 66 11 	call	0x22cc	; 0x22cc <__negsi2>
    22aa:	57 fd       	sbrc	r21, 7
    22ac:	07 d0       	rcall	.+14     	; 0x22bc <__divmodsi4_neg2>
    22ae:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodsi4>
    22b2:	07 fc       	sbrc	r0, 7
    22b4:	03 d0       	rcall	.+6      	; 0x22bc <__divmodsi4_neg2>
    22b6:	4e f4       	brtc	.+18     	; 0x22ca <__divmodsi4_exit>
    22b8:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__negsi2>

000022bc <__divmodsi4_neg2>:
    22bc:	50 95       	com	r21
    22be:	40 95       	com	r20
    22c0:	30 95       	com	r19
    22c2:	21 95       	neg	r18
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	4f 4f       	sbci	r20, 0xFF	; 255
    22c8:	5f 4f       	sbci	r21, 0xFF	; 255

000022ca <__divmodsi4_exit>:
    22ca:	08 95       	ret

000022cc <__negsi2>:
    22cc:	90 95       	com	r25
    22ce:	80 95       	com	r24
    22d0:	70 95       	com	r23
    22d2:	61 95       	neg	r22
    22d4:	7f 4f       	sbci	r23, 0xFF	; 255
    22d6:	8f 4f       	sbci	r24, 0xFF	; 255
    22d8:	9f 4f       	sbci	r25, 0xFF	; 255
    22da:	08 95       	ret

000022dc <__udivmodhi4>:
    22dc:	aa 1b       	sub	r26, r26
    22de:	bb 1b       	sub	r27, r27
    22e0:	51 e1       	ldi	r21, 0x11	; 17
    22e2:	07 c0       	rjmp	.+14     	; 0x22f2 <__udivmodhi4_ep>

000022e4 <__udivmodhi4_loop>:
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	a6 17       	cp	r26, r22
    22ea:	b7 07       	cpc	r27, r23
    22ec:	10 f0       	brcs	.+4      	; 0x22f2 <__udivmodhi4_ep>
    22ee:	a6 1b       	sub	r26, r22
    22f0:	b7 0b       	sbc	r27, r23

000022f2 <__udivmodhi4_ep>:
    22f2:	88 1f       	adc	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	5a 95       	dec	r21
    22f8:	a9 f7       	brne	.-22     	; 0x22e4 <__udivmodhi4_loop>
    22fa:	80 95       	com	r24
    22fc:	90 95       	com	r25
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	08 95       	ret

00002304 <malloc>:
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	91 05       	cpc	r25, r1
    230c:	10 f4       	brcc	.+4      	; 0x2312 <malloc+0xe>
    230e:	82 e0       	ldi	r24, 0x02	; 2
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	e0 91 ca 02 	lds	r30, 0x02CA
    2316:	f0 91 cb 02 	lds	r31, 0x02CB
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	a0 e0       	ldi	r26, 0x00	; 0
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	30 97       	sbiw	r30, 0x00	; 0
    2324:	39 f1       	breq	.+78     	; 0x2374 <malloc+0x70>
    2326:	40 81       	ld	r20, Z
    2328:	51 81       	ldd	r21, Z+1	; 0x01
    232a:	48 17       	cp	r20, r24
    232c:	59 07       	cpc	r21, r25
    232e:	b8 f0       	brcs	.+46     	; 0x235e <malloc+0x5a>
    2330:	48 17       	cp	r20, r24
    2332:	59 07       	cpc	r21, r25
    2334:	71 f4       	brne	.+28     	; 0x2352 <malloc+0x4e>
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	10 97       	sbiw	r26, 0x00	; 0
    233c:	29 f0       	breq	.+10     	; 0x2348 <malloc+0x44>
    233e:	13 96       	adiw	r26, 0x03	; 3
    2340:	9c 93       	st	X, r25
    2342:	8e 93       	st	-X, r24
    2344:	12 97       	sbiw	r26, 0x02	; 2
    2346:	2c c0       	rjmp	.+88     	; 0x23a0 <malloc+0x9c>
    2348:	90 93 cb 02 	sts	0x02CB, r25
    234c:	80 93 ca 02 	sts	0x02CA, r24
    2350:	27 c0       	rjmp	.+78     	; 0x23a0 <malloc+0x9c>
    2352:	21 15       	cp	r18, r1
    2354:	31 05       	cpc	r19, r1
    2356:	31 f0       	breq	.+12     	; 0x2364 <malloc+0x60>
    2358:	42 17       	cp	r20, r18
    235a:	53 07       	cpc	r21, r19
    235c:	18 f0       	brcs	.+6      	; 0x2364 <malloc+0x60>
    235e:	a9 01       	movw	r20, r18
    2360:	db 01       	movw	r26, r22
    2362:	01 c0       	rjmp	.+2      	; 0x2366 <malloc+0x62>
    2364:	ef 01       	movw	r28, r30
    2366:	9a 01       	movw	r18, r20
    2368:	bd 01       	movw	r22, r26
    236a:	df 01       	movw	r26, r30
    236c:	02 80       	ldd	r0, Z+2	; 0x02
    236e:	f3 81       	ldd	r31, Z+3	; 0x03
    2370:	e0 2d       	mov	r30, r0
    2372:	d7 cf       	rjmp	.-82     	; 0x2322 <malloc+0x1e>
    2374:	21 15       	cp	r18, r1
    2376:	31 05       	cpc	r19, r1
    2378:	f9 f0       	breq	.+62     	; 0x23b8 <malloc+0xb4>
    237a:	28 1b       	sub	r18, r24
    237c:	39 0b       	sbc	r19, r25
    237e:	24 30       	cpi	r18, 0x04	; 4
    2380:	31 05       	cpc	r19, r1
    2382:	80 f4       	brcc	.+32     	; 0x23a4 <malloc+0xa0>
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	9b 81       	ldd	r25, Y+3	; 0x03
    2388:	61 15       	cp	r22, r1
    238a:	71 05       	cpc	r23, r1
    238c:	21 f0       	breq	.+8      	; 0x2396 <malloc+0x92>
    238e:	fb 01       	movw	r30, r22
    2390:	93 83       	std	Z+3, r25	; 0x03
    2392:	82 83       	std	Z+2, r24	; 0x02
    2394:	04 c0       	rjmp	.+8      	; 0x239e <malloc+0x9a>
    2396:	90 93 cb 02 	sts	0x02CB, r25
    239a:	80 93 ca 02 	sts	0x02CA, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	32 96       	adiw	r30, 0x02	; 2
    23a2:	44 c0       	rjmp	.+136    	; 0x242c <malloc+0x128>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	81 93       	st	Z+, r24
    23ac:	91 93       	st	Z+, r25
    23ae:	22 50       	subi	r18, 0x02	; 2
    23b0:	31 09       	sbc	r19, r1
    23b2:	39 83       	std	Y+1, r19	; 0x01
    23b4:	28 83       	st	Y, r18
    23b6:	3a c0       	rjmp	.+116    	; 0x242c <malloc+0x128>
    23b8:	20 91 c8 02 	lds	r18, 0x02C8
    23bc:	30 91 c9 02 	lds	r19, 0x02C9
    23c0:	23 2b       	or	r18, r19
    23c2:	41 f4       	brne	.+16     	; 0x23d4 <malloc+0xd0>
    23c4:	20 91 02 01 	lds	r18, 0x0102
    23c8:	30 91 03 01 	lds	r19, 0x0103
    23cc:	30 93 c9 02 	sts	0x02C9, r19
    23d0:	20 93 c8 02 	sts	0x02C8, r18
    23d4:	20 91 00 01 	lds	r18, 0x0100
    23d8:	30 91 01 01 	lds	r19, 0x0101
    23dc:	21 15       	cp	r18, r1
    23de:	31 05       	cpc	r19, r1
    23e0:	41 f4       	brne	.+16     	; 0x23f2 <malloc+0xee>
    23e2:	2d b7       	in	r18, 0x3d	; 61
    23e4:	3e b7       	in	r19, 0x3e	; 62
    23e6:	40 91 04 01 	lds	r20, 0x0104
    23ea:	50 91 05 01 	lds	r21, 0x0105
    23ee:	24 1b       	sub	r18, r20
    23f0:	35 0b       	sbc	r19, r21
    23f2:	e0 91 c8 02 	lds	r30, 0x02C8
    23f6:	f0 91 c9 02 	lds	r31, 0x02C9
    23fa:	e2 17       	cp	r30, r18
    23fc:	f3 07       	cpc	r31, r19
    23fe:	a0 f4       	brcc	.+40     	; 0x2428 <malloc+0x124>
    2400:	2e 1b       	sub	r18, r30
    2402:	3f 0b       	sbc	r19, r31
    2404:	28 17       	cp	r18, r24
    2406:	39 07       	cpc	r19, r25
    2408:	78 f0       	brcs	.+30     	; 0x2428 <malloc+0x124>
    240a:	ac 01       	movw	r20, r24
    240c:	4e 5f       	subi	r20, 0xFE	; 254
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	24 17       	cp	r18, r20
    2412:	35 07       	cpc	r19, r21
    2414:	48 f0       	brcs	.+18     	; 0x2428 <malloc+0x124>
    2416:	4e 0f       	add	r20, r30
    2418:	5f 1f       	adc	r21, r31
    241a:	50 93 c9 02 	sts	0x02C9, r21
    241e:	40 93 c8 02 	sts	0x02C8, r20
    2422:	81 93       	st	Z+, r24
    2424:	91 93       	st	Z+, r25
    2426:	02 c0       	rjmp	.+4      	; 0x242c <malloc+0x128>
    2428:	e0 e0       	ldi	r30, 0x00	; 0
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	cf 01       	movw	r24, r30
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

00002434 <free>:
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	09 f4       	brne	.+2      	; 0x243e <free+0xa>
    243c:	87 c0       	rjmp	.+270    	; 0x254c <free+0x118>
    243e:	fc 01       	movw	r30, r24
    2440:	32 97       	sbiw	r30, 0x02	; 2
    2442:	13 82       	std	Z+3, r1	; 0x03
    2444:	12 82       	std	Z+2, r1	; 0x02
    2446:	c0 91 ca 02 	lds	r28, 0x02CA
    244a:	d0 91 cb 02 	lds	r29, 0x02CB
    244e:	20 97       	sbiw	r28, 0x00	; 0
    2450:	81 f4       	brne	.+32     	; 0x2472 <free+0x3e>
    2452:	20 81       	ld	r18, Z
    2454:	31 81       	ldd	r19, Z+1	; 0x01
    2456:	28 0f       	add	r18, r24
    2458:	39 1f       	adc	r19, r25
    245a:	80 91 c8 02 	lds	r24, 0x02C8
    245e:	90 91 c9 02 	lds	r25, 0x02C9
    2462:	82 17       	cp	r24, r18
    2464:	93 07       	cpc	r25, r19
    2466:	79 f5       	brne	.+94     	; 0x24c6 <free+0x92>
    2468:	f0 93 c9 02 	sts	0x02C9, r31
    246c:	e0 93 c8 02 	sts	0x02C8, r30
    2470:	6d c0       	rjmp	.+218    	; 0x254c <free+0x118>
    2472:	de 01       	movw	r26, r28
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	ae 17       	cp	r26, r30
    247a:	bf 07       	cpc	r27, r31
    247c:	50 f4       	brcc	.+20     	; 0x2492 <free+0x5e>
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	4d 91       	ld	r20, X+
    2482:	5c 91       	ld	r21, X
    2484:	13 97       	sbiw	r26, 0x03	; 3
    2486:	9d 01       	movw	r18, r26
    2488:	41 15       	cp	r20, r1
    248a:	51 05       	cpc	r21, r1
    248c:	09 f1       	breq	.+66     	; 0x24d0 <free+0x9c>
    248e:	da 01       	movw	r26, r20
    2490:	f3 cf       	rjmp	.-26     	; 0x2478 <free+0x44>
    2492:	b3 83       	std	Z+3, r27	; 0x03
    2494:	a2 83       	std	Z+2, r26	; 0x02
    2496:	40 81       	ld	r20, Z
    2498:	51 81       	ldd	r21, Z+1	; 0x01
    249a:	84 0f       	add	r24, r20
    249c:	95 1f       	adc	r25, r21
    249e:	8a 17       	cp	r24, r26
    24a0:	9b 07       	cpc	r25, r27
    24a2:	71 f4       	brne	.+28     	; 0x24c0 <free+0x8c>
    24a4:	8d 91       	ld	r24, X+
    24a6:	9c 91       	ld	r25, X
    24a8:	11 97       	sbiw	r26, 0x01	; 1
    24aa:	84 0f       	add	r24, r20
    24ac:	95 1f       	adc	r25, r21
    24ae:	02 96       	adiw	r24, 0x02	; 2
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
    24b4:	12 96       	adiw	r26, 0x02	; 2
    24b6:	8d 91       	ld	r24, X+
    24b8:	9c 91       	ld	r25, X
    24ba:	13 97       	sbiw	r26, 0x03	; 3
    24bc:	93 83       	std	Z+3, r25	; 0x03
    24be:	82 83       	std	Z+2, r24	; 0x02
    24c0:	21 15       	cp	r18, r1
    24c2:	31 05       	cpc	r19, r1
    24c4:	29 f4       	brne	.+10     	; 0x24d0 <free+0x9c>
    24c6:	f0 93 cb 02 	sts	0x02CB, r31
    24ca:	e0 93 ca 02 	sts	0x02CA, r30
    24ce:	3e c0       	rjmp	.+124    	; 0x254c <free+0x118>
    24d0:	d9 01       	movw	r26, r18
    24d2:	13 96       	adiw	r26, 0x03	; 3
    24d4:	fc 93       	st	X, r31
    24d6:	ee 93       	st	-X, r30
    24d8:	12 97       	sbiw	r26, 0x02	; 2
    24da:	4d 91       	ld	r20, X+
    24dc:	5d 91       	ld	r21, X+
    24de:	a4 0f       	add	r26, r20
    24e0:	b5 1f       	adc	r27, r21
    24e2:	ea 17       	cp	r30, r26
    24e4:	fb 07       	cpc	r31, r27
    24e6:	79 f4       	brne	.+30     	; 0x2506 <free+0xd2>
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	84 0f       	add	r24, r20
    24ee:	95 1f       	adc	r25, r21
    24f0:	02 96       	adiw	r24, 0x02	; 2
    24f2:	d9 01       	movw	r26, r18
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	13 96       	adiw	r26, 0x03	; 3
    2500:	9c 93       	st	X, r25
    2502:	8e 93       	st	-X, r24
    2504:	12 97       	sbiw	r26, 0x02	; 2
    2506:	e0 e0       	ldi	r30, 0x00	; 0
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	9b 81       	ldd	r25, Y+3	; 0x03
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	19 f0       	breq	.+6      	; 0x2518 <free+0xe4>
    2512:	fe 01       	movw	r30, r28
    2514:	ec 01       	movw	r28, r24
    2516:	f9 cf       	rjmp	.-14     	; 0x250a <free+0xd6>
    2518:	ce 01       	movw	r24, r28
    251a:	02 96       	adiw	r24, 0x02	; 2
    251c:	28 81       	ld	r18, Y
    251e:	39 81       	ldd	r19, Y+1	; 0x01
    2520:	82 0f       	add	r24, r18
    2522:	93 1f       	adc	r25, r19
    2524:	20 91 c8 02 	lds	r18, 0x02C8
    2528:	30 91 c9 02 	lds	r19, 0x02C9
    252c:	28 17       	cp	r18, r24
    252e:	39 07       	cpc	r19, r25
    2530:	69 f4       	brne	.+26     	; 0x254c <free+0x118>
    2532:	30 97       	sbiw	r30, 0x00	; 0
    2534:	29 f4       	brne	.+10     	; 0x2540 <free+0x10c>
    2536:	10 92 cb 02 	sts	0x02CB, r1
    253a:	10 92 ca 02 	sts	0x02CA, r1
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <free+0x110>
    2540:	13 82       	std	Z+3, r1	; 0x03
    2542:	12 82       	std	Z+2, r1	; 0x02
    2544:	d0 93 c9 02 	sts	0x02C9, r29
    2548:	c0 93 c8 02 	sts	0x02C8, r28
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	08 95       	ret

00002552 <realloc>:
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ef ea       	ldi	r30, 0xAF	; 175
    2558:	f2 e1       	ldi	r31, 0x12	; 18
    255a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x8>
    255e:	ec 01       	movw	r28, r24
    2560:	cb 01       	movw	r24, r22
    2562:	20 97       	sbiw	r28, 0x00	; 0
    2564:	19 f4       	brne	.+6      	; 0x256c <realloc+0x1a>
    2566:	0e 94 82 11 	call	0x2304	; 0x2304 <malloc>
    256a:	b8 c0       	rjmp	.+368    	; 0x26dc <realloc+0x18a>
    256c:	fe 01       	movw	r30, r28
    256e:	e6 0f       	add	r30, r22
    2570:	f7 1f       	adc	r31, r23
    2572:	9e 01       	movw	r18, r28
    2574:	22 50       	subi	r18, 0x02	; 2
    2576:	31 09       	sbc	r19, r1
    2578:	e2 17       	cp	r30, r18
    257a:	f3 07       	cpc	r31, r19
    257c:	08 f4       	brcc	.+2      	; 0x2580 <realloc+0x2e>
    257e:	ac c0       	rjmp	.+344    	; 0x26d8 <realloc+0x186>
    2580:	d9 01       	movw	r26, r18
    2582:	0d 91       	ld	r16, X+
    2584:	1c 91       	ld	r17, X
    2586:	11 97       	sbiw	r26, 0x01	; 1
    2588:	06 17       	cp	r16, r22
    258a:	17 07       	cpc	r17, r23
    258c:	b8 f0       	brcs	.+46     	; 0x25bc <realloc+0x6a>
    258e:	05 30       	cpi	r16, 0x05	; 5
    2590:	11 05       	cpc	r17, r1
    2592:	08 f4       	brcc	.+2      	; 0x2596 <realloc+0x44>
    2594:	9f c0       	rjmp	.+318    	; 0x26d4 <realloc+0x182>
    2596:	a8 01       	movw	r20, r16
    2598:	44 50       	subi	r20, 0x04	; 4
    259a:	51 09       	sbc	r21, r1
    259c:	46 17       	cp	r20, r22
    259e:	57 07       	cpc	r21, r23
    25a0:	08 f4       	brcc	.+2      	; 0x25a4 <realloc+0x52>
    25a2:	98 c0       	rjmp	.+304    	; 0x26d4 <realloc+0x182>
    25a4:	02 50       	subi	r16, 0x02	; 2
    25a6:	11 09       	sbc	r17, r1
    25a8:	06 1b       	sub	r16, r22
    25aa:	17 0b       	sbc	r17, r23
    25ac:	01 93       	st	Z+, r16
    25ae:	11 93       	st	Z+, r17
    25b0:	6d 93       	st	X+, r22
    25b2:	7c 93       	st	X, r23
    25b4:	cf 01       	movw	r24, r30
    25b6:	0e 94 1a 12 	call	0x2434	; 0x2434 <free>
    25ba:	8c c0       	rjmp	.+280    	; 0x26d4 <realloc+0x182>
    25bc:	5b 01       	movw	r10, r22
    25be:	a0 1a       	sub	r10, r16
    25c0:	b1 0a       	sbc	r11, r17
    25c2:	4e 01       	movw	r8, r28
    25c4:	80 0e       	add	r8, r16
    25c6:	91 1e       	adc	r9, r17
    25c8:	a0 91 ca 02 	lds	r26, 0x02CA
    25cc:	b0 91 cb 02 	lds	r27, 0x02CB
    25d0:	61 2c       	mov	r6, r1
    25d2:	71 2c       	mov	r7, r1
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	10 97       	sbiw	r26, 0x00	; 0
    25da:	09 f4       	brne	.+2      	; 0x25de <realloc+0x8c>
    25dc:	49 c0       	rjmp	.+146    	; 0x2670 <realloc+0x11e>
    25de:	a8 15       	cp	r26, r8
    25e0:	b9 05       	cpc	r27, r9
    25e2:	c9 f5       	brne	.+114    	; 0x2656 <realloc+0x104>
    25e4:	ed 90       	ld	r14, X+
    25e6:	fc 90       	ld	r15, X
    25e8:	11 97       	sbiw	r26, 0x01	; 1
    25ea:	67 01       	movw	r12, r14
    25ec:	42 e0       	ldi	r20, 0x02	; 2
    25ee:	c4 0e       	add	r12, r20
    25f0:	d1 1c       	adc	r13, r1
    25f2:	ca 14       	cp	r12, r10
    25f4:	db 04       	cpc	r13, r11
    25f6:	78 f1       	brcs	.+94     	; 0x2656 <realloc+0x104>
    25f8:	47 01       	movw	r8, r14
    25fa:	8a 18       	sub	r8, r10
    25fc:	9b 08       	sbc	r9, r11
    25fe:	64 01       	movw	r12, r8
    2600:	42 e0       	ldi	r20, 0x02	; 2
    2602:	c4 0e       	add	r12, r20
    2604:	d1 1c       	adc	r13, r1
    2606:	12 96       	adiw	r26, 0x02	; 2
    2608:	bc 90       	ld	r11, X
    260a:	12 97       	sbiw	r26, 0x02	; 2
    260c:	13 96       	adiw	r26, 0x03	; 3
    260e:	ac 91       	ld	r26, X
    2610:	b5 e0       	ldi	r27, 0x05	; 5
    2612:	cb 16       	cp	r12, r27
    2614:	d1 04       	cpc	r13, r1
    2616:	40 f0       	brcs	.+16     	; 0x2628 <realloc+0xd6>
    2618:	b2 82       	std	Z+2, r11	; 0x02
    261a:	a3 83       	std	Z+3, r26	; 0x03
    261c:	91 82       	std	Z+1, r9	; 0x01
    261e:	80 82       	st	Z, r8
    2620:	d9 01       	movw	r26, r18
    2622:	8d 93       	st	X+, r24
    2624:	9c 93       	st	X, r25
    2626:	09 c0       	rjmp	.+18     	; 0x263a <realloc+0xe8>
    2628:	0e 5f       	subi	r16, 0xFE	; 254
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	0e 0d       	add	r16, r14
    262e:	1f 1d       	adc	r17, r15
    2630:	f9 01       	movw	r30, r18
    2632:	11 83       	std	Z+1, r17	; 0x01
    2634:	00 83       	st	Z, r16
    2636:	eb 2d       	mov	r30, r11
    2638:	fa 2f       	mov	r31, r26
    263a:	61 15       	cp	r22, r1
    263c:	71 05       	cpc	r23, r1
    263e:	31 f0       	breq	.+12     	; 0x264c <realloc+0xfa>
    2640:	db 01       	movw	r26, r22
    2642:	13 96       	adiw	r26, 0x03	; 3
    2644:	fc 93       	st	X, r31
    2646:	ee 93       	st	-X, r30
    2648:	12 97       	sbiw	r26, 0x02	; 2
    264a:	44 c0       	rjmp	.+136    	; 0x26d4 <realloc+0x182>
    264c:	f0 93 cb 02 	sts	0x02CB, r31
    2650:	e0 93 ca 02 	sts	0x02CA, r30
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <realloc+0x182>
    2656:	6d 91       	ld	r22, X+
    2658:	7c 91       	ld	r23, X
    265a:	11 97       	sbiw	r26, 0x01	; 1
    265c:	66 16       	cp	r6, r22
    265e:	77 06       	cpc	r7, r23
    2660:	08 f4       	brcc	.+2      	; 0x2664 <realloc+0x112>
    2662:	3b 01       	movw	r6, r22
    2664:	bd 01       	movw	r22, r26
    2666:	12 96       	adiw	r26, 0x02	; 2
    2668:	0d 90       	ld	r0, X+
    266a:	bc 91       	ld	r27, X
    266c:	a0 2d       	mov	r26, r0
    266e:	b4 cf       	rjmp	.-152    	; 0x25d8 <realloc+0x86>
    2670:	60 91 c8 02 	lds	r22, 0x02C8
    2674:	70 91 c9 02 	lds	r23, 0x02C9
    2678:	68 15       	cp	r22, r8
    267a:	79 05       	cpc	r23, r9
    267c:	e9 f4       	brne	.+58     	; 0x26b8 <realloc+0x166>
    267e:	68 16       	cp	r6, r24
    2680:	79 06       	cpc	r7, r25
    2682:	d0 f4       	brcc	.+52     	; 0x26b8 <realloc+0x166>
    2684:	40 91 00 01 	lds	r20, 0x0100
    2688:	50 91 01 01 	lds	r21, 0x0101
    268c:	41 15       	cp	r20, r1
    268e:	51 05       	cpc	r21, r1
    2690:	41 f4       	brne	.+16     	; 0x26a2 <realloc+0x150>
    2692:	4d b7       	in	r20, 0x3d	; 61
    2694:	5e b7       	in	r21, 0x3e	; 62
    2696:	60 91 04 01 	lds	r22, 0x0104
    269a:	70 91 05 01 	lds	r23, 0x0105
    269e:	46 1b       	sub	r20, r22
    26a0:	57 0b       	sbc	r21, r23
    26a2:	e4 17       	cp	r30, r20
    26a4:	f5 07       	cpc	r31, r21
    26a6:	c0 f4       	brcc	.+48     	; 0x26d8 <realloc+0x186>
    26a8:	f0 93 c9 02 	sts	0x02C9, r31
    26ac:	e0 93 c8 02 	sts	0x02C8, r30
    26b0:	f9 01       	movw	r30, r18
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
    26b6:	0e c0       	rjmp	.+28     	; 0x26d4 <realloc+0x182>
    26b8:	0e 94 82 11 	call	0x2304	; 0x2304 <malloc>
    26bc:	7c 01       	movw	r14, r24
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	59 f0       	breq	.+22     	; 0x26d8 <realloc+0x186>
    26c2:	a8 01       	movw	r20, r16
    26c4:	be 01       	movw	r22, r28
    26c6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <memcpy>
    26ca:	ce 01       	movw	r24, r28
    26cc:	0e 94 1a 12 	call	0x2434	; 0x2434 <free>
    26d0:	c7 01       	movw	r24, r14
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <realloc+0x18a>
    26d4:	ce 01       	movw	r24, r28
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <realloc+0x18a>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	ee e0       	ldi	r30, 0x0E	; 14
    26e2:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x8>

000026e6 <memcpy>:
    26e6:	fb 01       	movw	r30, r22
    26e8:	dc 01       	movw	r26, r24
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <memcpy+0xa>
    26ec:	01 90       	ld	r0, Z+
    26ee:	0d 92       	st	X+, r0
    26f0:	41 50       	subi	r20, 0x01	; 1
    26f2:	50 40       	sbci	r21, 0x00	; 0
    26f4:	d8 f7       	brcc	.-10     	; 0x26ec <memcpy+0x6>
    26f6:	08 95       	ret

000026f8 <fdevopen>:
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	ec 01       	movw	r28, r24
    2702:	8b 01       	movw	r16, r22
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	31 f4       	brne	.+12     	; 0x2714 <fdevopen+0x1c>
    2708:	61 15       	cp	r22, r1
    270a:	71 05       	cpc	r23, r1
    270c:	19 f4       	brne	.+6      	; 0x2714 <fdevopen+0x1c>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	38 c0       	rjmp	.+112    	; 0x2784 <fdevopen+0x8c>
    2714:	6e e0       	ldi	r22, 0x0E	; 14
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <calloc>
    2720:	fc 01       	movw	r30, r24
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	a1 f3       	breq	.-24     	; 0x270e <fdevopen+0x16>
    2726:	80 e8       	ldi	r24, 0x80	; 128
    2728:	83 83       	std	Z+3, r24	; 0x03
    272a:	01 15       	cp	r16, r1
    272c:	11 05       	cpc	r17, r1
    272e:	71 f0       	breq	.+28     	; 0x274c <fdevopen+0x54>
    2730:	13 87       	std	Z+11, r17	; 0x0b
    2732:	02 87       	std	Z+10, r16	; 0x0a
    2734:	81 e8       	ldi	r24, 0x81	; 129
    2736:	83 83       	std	Z+3, r24	; 0x03
    2738:	80 91 cc 02 	lds	r24, 0x02CC
    273c:	90 91 cd 02 	lds	r25, 0x02CD
    2740:	89 2b       	or	r24, r25
    2742:	21 f4       	brne	.+8      	; 0x274c <fdevopen+0x54>
    2744:	f0 93 cd 02 	sts	0x02CD, r31
    2748:	e0 93 cc 02 	sts	0x02CC, r30
    274c:	20 97       	sbiw	r28, 0x00	; 0
    274e:	c9 f0       	breq	.+50     	; 0x2782 <fdevopen+0x8a>
    2750:	d1 87       	std	Z+9, r29	; 0x09
    2752:	c0 87       	std	Z+8, r28	; 0x08
    2754:	83 81       	ldd	r24, Z+3	; 0x03
    2756:	82 60       	ori	r24, 0x02	; 2
    2758:	83 83       	std	Z+3, r24	; 0x03
    275a:	80 91 ce 02 	lds	r24, 0x02CE
    275e:	90 91 cf 02 	lds	r25, 0x02CF
    2762:	89 2b       	or	r24, r25
    2764:	71 f4       	brne	.+28     	; 0x2782 <fdevopen+0x8a>
    2766:	f0 93 cf 02 	sts	0x02CF, r31
    276a:	e0 93 ce 02 	sts	0x02CE, r30
    276e:	80 91 d0 02 	lds	r24, 0x02D0
    2772:	90 91 d1 02 	lds	r25, 0x02D1
    2776:	89 2b       	or	r24, r25
    2778:	21 f4       	brne	.+8      	; 0x2782 <fdevopen+0x8a>
    277a:	f0 93 d1 02 	sts	0x02D1, r31
    277e:	e0 93 d0 02 	sts	0x02D0, r30
    2782:	cf 01       	movw	r24, r30
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	08 95       	ret

0000278e <printf>:
    278e:	a0 e0       	ldi	r26, 0x00	; 0
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ed ec       	ldi	r30, 0xCD	; 205
    2794:	f3 e1       	ldi	r31, 0x13	; 19
    2796:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x20>
    279a:	fe 01       	movw	r30, r28
    279c:	35 96       	adiw	r30, 0x05	; 5
    279e:	61 91       	ld	r22, Z+
    27a0:	71 91       	ld	r23, Z+
    27a2:	af 01       	movw	r20, r30
    27a4:	80 91 ce 02 	lds	r24, 0x02CE
    27a8:	90 91 cf 02 	lds	r25, 0x02CF
    27ac:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vfprintf>
    27b0:	e2 e0       	ldi	r30, 0x02	; 2
    27b2:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x20>

000027b6 <sprintf>:
    27b6:	ae e0       	ldi	r26, 0x0E	; 14
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e1 ee       	ldi	r30, 0xE1	; 225
    27bc:	f3 e1       	ldi	r31, 0x13	; 19
    27be:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x1c>
    27c2:	0d 89       	ldd	r16, Y+21	; 0x15
    27c4:	1e 89       	ldd	r17, Y+22	; 0x16
    27c6:	86 e0       	ldi	r24, 0x06	; 6
    27c8:	8c 83       	std	Y+4, r24	; 0x04
    27ca:	1a 83       	std	Y+2, r17	; 0x02
    27cc:	09 83       	std	Y+1, r16	; 0x01
    27ce:	8f ef       	ldi	r24, 0xFF	; 255
    27d0:	9f e7       	ldi	r25, 0x7F	; 127
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	ae 01       	movw	r20, r28
    27d8:	47 5e       	subi	r20, 0xE7	; 231
    27da:	5f 4f       	sbci	r21, 0xFF	; 255
    27dc:	6f 89       	ldd	r22, Y+23	; 0x17
    27de:	78 8d       	ldd	r23, Y+24	; 0x18
    27e0:	ce 01       	movw	r24, r28
    27e2:	01 96       	adiw	r24, 0x01	; 1
    27e4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vfprintf>
    27e8:	ef 81       	ldd	r30, Y+7	; 0x07
    27ea:	f8 85       	ldd	r31, Y+8	; 0x08
    27ec:	e0 0f       	add	r30, r16
    27ee:	f1 1f       	adc	r31, r17
    27f0:	10 82       	st	Z, r1
    27f2:	2e 96       	adiw	r28, 0x0e	; 14
    27f4:	e4 e0       	ldi	r30, 0x04	; 4
    27f6:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x1c>

000027fa <vfprintf>:
    27fa:	ac e0       	ldi	r26, 0x0C	; 12
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e3 e0       	ldi	r30, 0x03	; 3
    2800:	f4 e1       	ldi	r31, 0x14	; 20
    2802:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__>
    2806:	7c 01       	movw	r14, r24
    2808:	6b 01       	movw	r12, r22
    280a:	8a 01       	movw	r16, r20
    280c:	fc 01       	movw	r30, r24
    280e:	17 82       	std	Z+7, r1	; 0x07
    2810:	16 82       	std	Z+6, r1	; 0x06
    2812:	83 81       	ldd	r24, Z+3	; 0x03
    2814:	81 ff       	sbrs	r24, 1
    2816:	bd c1       	rjmp	.+890    	; 0x2b92 <vfprintf+0x398>
    2818:	ce 01       	movw	r24, r28
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	4c 01       	movw	r8, r24
    281e:	f7 01       	movw	r30, r14
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	f6 01       	movw	r30, r12
    2824:	93 fd       	sbrc	r25, 3
    2826:	85 91       	lpm	r24, Z+
    2828:	93 ff       	sbrs	r25, 3
    282a:	81 91       	ld	r24, Z+
    282c:	6f 01       	movw	r12, r30
    282e:	88 23       	and	r24, r24
    2830:	09 f4       	brne	.+2      	; 0x2834 <vfprintf+0x3a>
    2832:	ab c1       	rjmp	.+854    	; 0x2b8a <vfprintf+0x390>
    2834:	85 32       	cpi	r24, 0x25	; 37
    2836:	39 f4       	brne	.+14     	; 0x2846 <vfprintf+0x4c>
    2838:	93 fd       	sbrc	r25, 3
    283a:	85 91       	lpm	r24, Z+
    283c:	93 ff       	sbrs	r25, 3
    283e:	81 91       	ld	r24, Z+
    2840:	6f 01       	movw	r12, r30
    2842:	85 32       	cpi	r24, 0x25	; 37
    2844:	29 f4       	brne	.+10     	; 0x2850 <vfprintf+0x56>
    2846:	b7 01       	movw	r22, r14
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    284e:	e7 cf       	rjmp	.-50     	; 0x281e <vfprintf+0x24>
    2850:	51 2c       	mov	r5, r1
    2852:	31 2c       	mov	r3, r1
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	20 32       	cpi	r18, 0x20	; 32
    2858:	a0 f4       	brcc	.+40     	; 0x2882 <vfprintf+0x88>
    285a:	8b 32       	cpi	r24, 0x2B	; 43
    285c:	69 f0       	breq	.+26     	; 0x2878 <vfprintf+0x7e>
    285e:	30 f4       	brcc	.+12     	; 0x286c <vfprintf+0x72>
    2860:	80 32       	cpi	r24, 0x20	; 32
    2862:	59 f0       	breq	.+22     	; 0x287a <vfprintf+0x80>
    2864:	83 32       	cpi	r24, 0x23	; 35
    2866:	69 f4       	brne	.+26     	; 0x2882 <vfprintf+0x88>
    2868:	20 61       	ori	r18, 0x10	; 16
    286a:	2c c0       	rjmp	.+88     	; 0x28c4 <vfprintf+0xca>
    286c:	8d 32       	cpi	r24, 0x2D	; 45
    286e:	39 f0       	breq	.+14     	; 0x287e <vfprintf+0x84>
    2870:	80 33       	cpi	r24, 0x30	; 48
    2872:	39 f4       	brne	.+14     	; 0x2882 <vfprintf+0x88>
    2874:	21 60       	ori	r18, 0x01	; 1
    2876:	26 c0       	rjmp	.+76     	; 0x28c4 <vfprintf+0xca>
    2878:	22 60       	ori	r18, 0x02	; 2
    287a:	24 60       	ori	r18, 0x04	; 4
    287c:	23 c0       	rjmp	.+70     	; 0x28c4 <vfprintf+0xca>
    287e:	28 60       	ori	r18, 0x08	; 8
    2880:	21 c0       	rjmp	.+66     	; 0x28c4 <vfprintf+0xca>
    2882:	27 fd       	sbrc	r18, 7
    2884:	27 c0       	rjmp	.+78     	; 0x28d4 <vfprintf+0xda>
    2886:	30 ed       	ldi	r19, 0xD0	; 208
    2888:	38 0f       	add	r19, r24
    288a:	3a 30       	cpi	r19, 0x0A	; 10
    288c:	78 f4       	brcc	.+30     	; 0x28ac <vfprintf+0xb2>
    288e:	26 ff       	sbrs	r18, 6
    2890:	06 c0       	rjmp	.+12     	; 0x289e <vfprintf+0xa4>
    2892:	fa e0       	ldi	r31, 0x0A	; 10
    2894:	5f 9e       	mul	r5, r31
    2896:	30 0d       	add	r19, r0
    2898:	11 24       	eor	r1, r1
    289a:	53 2e       	mov	r5, r19
    289c:	13 c0       	rjmp	.+38     	; 0x28c4 <vfprintf+0xca>
    289e:	8a e0       	ldi	r24, 0x0A	; 10
    28a0:	38 9e       	mul	r3, r24
    28a2:	30 0d       	add	r19, r0
    28a4:	11 24       	eor	r1, r1
    28a6:	33 2e       	mov	r3, r19
    28a8:	20 62       	ori	r18, 0x20	; 32
    28aa:	0c c0       	rjmp	.+24     	; 0x28c4 <vfprintf+0xca>
    28ac:	8e 32       	cpi	r24, 0x2E	; 46
    28ae:	21 f4       	brne	.+8      	; 0x28b8 <vfprintf+0xbe>
    28b0:	26 fd       	sbrc	r18, 6
    28b2:	6b c1       	rjmp	.+726    	; 0x2b8a <vfprintf+0x390>
    28b4:	20 64       	ori	r18, 0x40	; 64
    28b6:	06 c0       	rjmp	.+12     	; 0x28c4 <vfprintf+0xca>
    28b8:	8c 36       	cpi	r24, 0x6C	; 108
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <vfprintf+0xc6>
    28bc:	20 68       	ori	r18, 0x80	; 128
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <vfprintf+0xca>
    28c0:	88 36       	cpi	r24, 0x68	; 104
    28c2:	41 f4       	brne	.+16     	; 0x28d4 <vfprintf+0xda>
    28c4:	f6 01       	movw	r30, r12
    28c6:	93 fd       	sbrc	r25, 3
    28c8:	85 91       	lpm	r24, Z+
    28ca:	93 ff       	sbrs	r25, 3
    28cc:	81 91       	ld	r24, Z+
    28ce:	6f 01       	movw	r12, r30
    28d0:	81 11       	cpse	r24, r1
    28d2:	c1 cf       	rjmp	.-126    	; 0x2856 <vfprintf+0x5c>
    28d4:	98 2f       	mov	r25, r24
    28d6:	9f 7d       	andi	r25, 0xDF	; 223
    28d8:	95 54       	subi	r25, 0x45	; 69
    28da:	93 30       	cpi	r25, 0x03	; 3
    28dc:	28 f4       	brcc	.+10     	; 0x28e8 <vfprintf+0xee>
    28de:	0c 5f       	subi	r16, 0xFC	; 252
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	ff e3       	ldi	r31, 0x3F	; 63
    28e4:	f9 83       	std	Y+1, r31	; 0x01
    28e6:	0d c0       	rjmp	.+26     	; 0x2902 <vfprintf+0x108>
    28e8:	83 36       	cpi	r24, 0x63	; 99
    28ea:	31 f0       	breq	.+12     	; 0x28f8 <vfprintf+0xfe>
    28ec:	83 37       	cpi	r24, 0x73	; 115
    28ee:	71 f0       	breq	.+28     	; 0x290c <vfprintf+0x112>
    28f0:	83 35       	cpi	r24, 0x53	; 83
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <vfprintf+0xfc>
    28f4:	5b c0       	rjmp	.+182    	; 0x29ac <vfprintf+0x1b2>
    28f6:	22 c0       	rjmp	.+68     	; 0x293c <vfprintf+0x142>
    28f8:	f8 01       	movw	r30, r16
    28fa:	80 81       	ld	r24, Z
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	0e 5f       	subi	r16, 0xFE	; 254
    2900:	1f 4f       	sbci	r17, 0xFF	; 255
    2902:	44 24       	eor	r4, r4
    2904:	43 94       	inc	r4
    2906:	51 2c       	mov	r5, r1
    2908:	54 01       	movw	r10, r8
    290a:	15 c0       	rjmp	.+42     	; 0x2936 <vfprintf+0x13c>
    290c:	38 01       	movw	r6, r16
    290e:	f2 e0       	ldi	r31, 0x02	; 2
    2910:	6f 0e       	add	r6, r31
    2912:	71 1c       	adc	r7, r1
    2914:	f8 01       	movw	r30, r16
    2916:	a0 80       	ld	r10, Z
    2918:	b1 80       	ldd	r11, Z+1	; 0x01
    291a:	26 ff       	sbrs	r18, 6
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <vfprintf+0x12a>
    291e:	65 2d       	mov	r22, r5
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <vfprintf+0x12e>
    2924:	6f ef       	ldi	r22, 0xFF	; 255
    2926:	7f ef       	ldi	r23, 0xFF	; 255
    2928:	c5 01       	movw	r24, r10
    292a:	2c 87       	std	Y+12, r18	; 0x0c
    292c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <strnlen>
    2930:	2c 01       	movw	r4, r24
    2932:	83 01       	movw	r16, r6
    2934:	2c 85       	ldd	r18, Y+12	; 0x0c
    2936:	2f 77       	andi	r18, 0x7F	; 127
    2938:	22 2e       	mov	r2, r18
    293a:	17 c0       	rjmp	.+46     	; 0x296a <vfprintf+0x170>
    293c:	38 01       	movw	r6, r16
    293e:	f2 e0       	ldi	r31, 0x02	; 2
    2940:	6f 0e       	add	r6, r31
    2942:	71 1c       	adc	r7, r1
    2944:	f8 01       	movw	r30, r16
    2946:	a0 80       	ld	r10, Z
    2948:	b1 80       	ldd	r11, Z+1	; 0x01
    294a:	26 ff       	sbrs	r18, 6
    294c:	03 c0       	rjmp	.+6      	; 0x2954 <vfprintf+0x15a>
    294e:	65 2d       	mov	r22, r5
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <vfprintf+0x15e>
    2954:	6f ef       	ldi	r22, 0xFF	; 255
    2956:	7f ef       	ldi	r23, 0xFF	; 255
    2958:	c5 01       	movw	r24, r10
    295a:	2c 87       	std	Y+12, r18	; 0x0c
    295c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <strnlen_P>
    2960:	2c 01       	movw	r4, r24
    2962:	2c 85       	ldd	r18, Y+12	; 0x0c
    2964:	20 68       	ori	r18, 0x80	; 128
    2966:	22 2e       	mov	r2, r18
    2968:	83 01       	movw	r16, r6
    296a:	23 fc       	sbrc	r2, 3
    296c:	1b c0       	rjmp	.+54     	; 0x29a4 <vfprintf+0x1aa>
    296e:	83 2d       	mov	r24, r3
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	48 16       	cp	r4, r24
    2974:	59 06       	cpc	r5, r25
    2976:	b0 f4       	brcc	.+44     	; 0x29a4 <vfprintf+0x1aa>
    2978:	b7 01       	movw	r22, r14
    297a:	80 e2       	ldi	r24, 0x20	; 32
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2982:	3a 94       	dec	r3
    2984:	f4 cf       	rjmp	.-24     	; 0x296e <vfprintf+0x174>
    2986:	f5 01       	movw	r30, r10
    2988:	27 fc       	sbrc	r2, 7
    298a:	85 91       	lpm	r24, Z+
    298c:	27 fe       	sbrs	r2, 7
    298e:	81 91       	ld	r24, Z+
    2990:	5f 01       	movw	r10, r30
    2992:	b7 01       	movw	r22, r14
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    299a:	31 10       	cpse	r3, r1
    299c:	3a 94       	dec	r3
    299e:	f1 e0       	ldi	r31, 0x01	; 1
    29a0:	4f 1a       	sub	r4, r31
    29a2:	51 08       	sbc	r5, r1
    29a4:	41 14       	cp	r4, r1
    29a6:	51 04       	cpc	r5, r1
    29a8:	71 f7       	brne	.-36     	; 0x2986 <vfprintf+0x18c>
    29aa:	e5 c0       	rjmp	.+458    	; 0x2b76 <vfprintf+0x37c>
    29ac:	84 36       	cpi	r24, 0x64	; 100
    29ae:	11 f0       	breq	.+4      	; 0x29b4 <vfprintf+0x1ba>
    29b0:	89 36       	cpi	r24, 0x69	; 105
    29b2:	39 f5       	brne	.+78     	; 0x2a02 <vfprintf+0x208>
    29b4:	f8 01       	movw	r30, r16
    29b6:	27 ff       	sbrs	r18, 7
    29b8:	07 c0       	rjmp	.+14     	; 0x29c8 <vfprintf+0x1ce>
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	0c 5f       	subi	r16, 0xFC	; 252
    29c4:	1f 4f       	sbci	r17, 0xFF	; 255
    29c6:	08 c0       	rjmp	.+16     	; 0x29d8 <vfprintf+0x1de>
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	88 27       	eor	r24, r24
    29ce:	77 fd       	sbrc	r23, 7
    29d0:	80 95       	com	r24
    29d2:	98 2f       	mov	r25, r24
    29d4:	0e 5f       	subi	r16, 0xFE	; 254
    29d6:	1f 4f       	sbci	r17, 0xFF	; 255
    29d8:	2f 76       	andi	r18, 0x6F	; 111
    29da:	b2 2e       	mov	r11, r18
    29dc:	97 ff       	sbrs	r25, 7
    29de:	09 c0       	rjmp	.+18     	; 0x29f2 <vfprintf+0x1f8>
    29e0:	90 95       	com	r25
    29e2:	80 95       	com	r24
    29e4:	70 95       	com	r23
    29e6:	61 95       	neg	r22
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	8f 4f       	sbci	r24, 0xFF	; 255
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	20 68       	ori	r18, 0x80	; 128
    29f0:	b2 2e       	mov	r11, r18
    29f2:	2a e0       	ldi	r18, 0x0A	; 10
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	a4 01       	movw	r20, r8
    29f8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__ultoa_invert>
    29fc:	a8 2e       	mov	r10, r24
    29fe:	a8 18       	sub	r10, r8
    2a00:	44 c0       	rjmp	.+136    	; 0x2a8a <vfprintf+0x290>
    2a02:	85 37       	cpi	r24, 0x75	; 117
    2a04:	29 f4       	brne	.+10     	; 0x2a10 <vfprintf+0x216>
    2a06:	2f 7e       	andi	r18, 0xEF	; 239
    2a08:	b2 2e       	mov	r11, r18
    2a0a:	2a e0       	ldi	r18, 0x0A	; 10
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	25 c0       	rjmp	.+74     	; 0x2a5a <vfprintf+0x260>
    2a10:	f2 2f       	mov	r31, r18
    2a12:	f9 7f       	andi	r31, 0xF9	; 249
    2a14:	bf 2e       	mov	r11, r31
    2a16:	8f 36       	cpi	r24, 0x6F	; 111
    2a18:	c1 f0       	breq	.+48     	; 0x2a4a <vfprintf+0x250>
    2a1a:	18 f4       	brcc	.+6      	; 0x2a22 <vfprintf+0x228>
    2a1c:	88 35       	cpi	r24, 0x58	; 88
    2a1e:	79 f0       	breq	.+30     	; 0x2a3e <vfprintf+0x244>
    2a20:	b4 c0       	rjmp	.+360    	; 0x2b8a <vfprintf+0x390>
    2a22:	80 37       	cpi	r24, 0x70	; 112
    2a24:	19 f0       	breq	.+6      	; 0x2a2c <vfprintf+0x232>
    2a26:	88 37       	cpi	r24, 0x78	; 120
    2a28:	21 f0       	breq	.+8      	; 0x2a32 <vfprintf+0x238>
    2a2a:	af c0       	rjmp	.+350    	; 0x2b8a <vfprintf+0x390>
    2a2c:	2f 2f       	mov	r18, r31
    2a2e:	20 61       	ori	r18, 0x10	; 16
    2a30:	b2 2e       	mov	r11, r18
    2a32:	b4 fe       	sbrs	r11, 4
    2a34:	0d c0       	rjmp	.+26     	; 0x2a50 <vfprintf+0x256>
    2a36:	8b 2d       	mov	r24, r11
    2a38:	84 60       	ori	r24, 0x04	; 4
    2a3a:	b8 2e       	mov	r11, r24
    2a3c:	09 c0       	rjmp	.+18     	; 0x2a50 <vfprintf+0x256>
    2a3e:	24 ff       	sbrs	r18, 4
    2a40:	0a c0       	rjmp	.+20     	; 0x2a56 <vfprintf+0x25c>
    2a42:	9f 2f       	mov	r25, r31
    2a44:	96 60       	ori	r25, 0x06	; 6
    2a46:	b9 2e       	mov	r11, r25
    2a48:	06 c0       	rjmp	.+12     	; 0x2a56 <vfprintf+0x25c>
    2a4a:	28 e0       	ldi	r18, 0x08	; 8
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <vfprintf+0x260>
    2a50:	20 e1       	ldi	r18, 0x10	; 16
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <vfprintf+0x260>
    2a56:	20 e1       	ldi	r18, 0x10	; 16
    2a58:	32 e0       	ldi	r19, 0x02	; 2
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	b7 fe       	sbrs	r11, 7
    2a5e:	07 c0       	rjmp	.+14     	; 0x2a6e <vfprintf+0x274>
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	0c 5f       	subi	r16, 0xFC	; 252
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	06 c0       	rjmp	.+12     	; 0x2a7a <vfprintf+0x280>
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 5f       	subi	r16, 0xFE	; 254
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	a4 01       	movw	r20, r8
    2a7c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__ultoa_invert>
    2a80:	a8 2e       	mov	r10, r24
    2a82:	a8 18       	sub	r10, r8
    2a84:	fb 2d       	mov	r31, r11
    2a86:	ff 77       	andi	r31, 0x7F	; 127
    2a88:	bf 2e       	mov	r11, r31
    2a8a:	b6 fe       	sbrs	r11, 6
    2a8c:	0b c0       	rjmp	.+22     	; 0x2aa4 <vfprintf+0x2aa>
    2a8e:	2b 2d       	mov	r18, r11
    2a90:	2e 7f       	andi	r18, 0xFE	; 254
    2a92:	a5 14       	cp	r10, r5
    2a94:	50 f4       	brcc	.+20     	; 0x2aaa <vfprintf+0x2b0>
    2a96:	b4 fe       	sbrs	r11, 4
    2a98:	0a c0       	rjmp	.+20     	; 0x2aae <vfprintf+0x2b4>
    2a9a:	b2 fc       	sbrc	r11, 2
    2a9c:	08 c0       	rjmp	.+16     	; 0x2aae <vfprintf+0x2b4>
    2a9e:	2b 2d       	mov	r18, r11
    2aa0:	2e 7e       	andi	r18, 0xEE	; 238
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <vfprintf+0x2b4>
    2aa4:	7a 2c       	mov	r7, r10
    2aa6:	2b 2d       	mov	r18, r11
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <vfprintf+0x2b6>
    2aaa:	7a 2c       	mov	r7, r10
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <vfprintf+0x2b6>
    2aae:	75 2c       	mov	r7, r5
    2ab0:	24 ff       	sbrs	r18, 4
    2ab2:	0d c0       	rjmp	.+26     	; 0x2ace <vfprintf+0x2d4>
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ea 0d       	add	r30, r10
    2ab8:	f1 1d       	adc	r31, r1
    2aba:	80 81       	ld	r24, Z
    2abc:	80 33       	cpi	r24, 0x30	; 48
    2abe:	11 f4       	brne	.+4      	; 0x2ac4 <vfprintf+0x2ca>
    2ac0:	29 7e       	andi	r18, 0xE9	; 233
    2ac2:	09 c0       	rjmp	.+18     	; 0x2ad6 <vfprintf+0x2dc>
    2ac4:	22 ff       	sbrs	r18, 2
    2ac6:	06 c0       	rjmp	.+12     	; 0x2ad4 <vfprintf+0x2da>
    2ac8:	73 94       	inc	r7
    2aca:	73 94       	inc	r7
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <vfprintf+0x2dc>
    2ace:	82 2f       	mov	r24, r18
    2ad0:	86 78       	andi	r24, 0x86	; 134
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <vfprintf+0x2dc>
    2ad4:	73 94       	inc	r7
    2ad6:	23 fd       	sbrc	r18, 3
    2ad8:	13 c0       	rjmp	.+38     	; 0x2b00 <vfprintf+0x306>
    2ada:	20 ff       	sbrs	r18, 0
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <vfprintf+0x2f0>
    2ade:	5a 2c       	mov	r5, r10
    2ae0:	73 14       	cp	r7, r3
    2ae2:	18 f4       	brcc	.+6      	; 0x2aea <vfprintf+0x2f0>
    2ae4:	53 0c       	add	r5, r3
    2ae6:	57 18       	sub	r5, r7
    2ae8:	73 2c       	mov	r7, r3
    2aea:	73 14       	cp	r7, r3
    2aec:	68 f4       	brcc	.+26     	; 0x2b08 <vfprintf+0x30e>
    2aee:	b7 01       	movw	r22, r14
    2af0:	80 e2       	ldi	r24, 0x20	; 32
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	2c 87       	std	Y+12, r18	; 0x0c
    2af6:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2afa:	73 94       	inc	r7
    2afc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2afe:	f5 cf       	rjmp	.-22     	; 0x2aea <vfprintf+0x2f0>
    2b00:	73 14       	cp	r7, r3
    2b02:	10 f4       	brcc	.+4      	; 0x2b08 <vfprintf+0x30e>
    2b04:	37 18       	sub	r3, r7
    2b06:	01 c0       	rjmp	.+2      	; 0x2b0a <vfprintf+0x310>
    2b08:	31 2c       	mov	r3, r1
    2b0a:	24 ff       	sbrs	r18, 4
    2b0c:	12 c0       	rjmp	.+36     	; 0x2b32 <vfprintf+0x338>
    2b0e:	b7 01       	movw	r22, r14
    2b10:	80 e3       	ldi	r24, 0x30	; 48
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	2c 87       	std	Y+12, r18	; 0x0c
    2b16:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2b1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b1c:	22 ff       	sbrs	r18, 2
    2b1e:	17 c0       	rjmp	.+46     	; 0x2b4e <vfprintf+0x354>
    2b20:	21 ff       	sbrs	r18, 1
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <vfprintf+0x330>
    2b24:	88 e5       	ldi	r24, 0x58	; 88
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <vfprintf+0x334>
    2b2a:	88 e7       	ldi	r24, 0x78	; 120
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	b7 01       	movw	r22, r14
    2b30:	0c c0       	rjmp	.+24     	; 0x2b4a <vfprintf+0x350>
    2b32:	82 2f       	mov	r24, r18
    2b34:	86 78       	andi	r24, 0x86	; 134
    2b36:	59 f0       	breq	.+22     	; 0x2b4e <vfprintf+0x354>
    2b38:	21 fd       	sbrc	r18, 1
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <vfprintf+0x346>
    2b3c:	80 e2       	ldi	r24, 0x20	; 32
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <vfprintf+0x348>
    2b40:	8b e2       	ldi	r24, 0x2B	; 43
    2b42:	27 fd       	sbrc	r18, 7
    2b44:	8d e2       	ldi	r24, 0x2D	; 45
    2b46:	b7 01       	movw	r22, r14
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2b4e:	a5 14       	cp	r10, r5
    2b50:	38 f4       	brcc	.+14     	; 0x2b60 <vfprintf+0x366>
    2b52:	b7 01       	movw	r22, r14
    2b54:	80 e3       	ldi	r24, 0x30	; 48
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2b5c:	5a 94       	dec	r5
    2b5e:	f7 cf       	rjmp	.-18     	; 0x2b4e <vfprintf+0x354>
    2b60:	aa 94       	dec	r10
    2b62:	f4 01       	movw	r30, r8
    2b64:	ea 0d       	add	r30, r10
    2b66:	f1 1d       	adc	r31, r1
    2b68:	80 81       	ld	r24, Z
    2b6a:	b7 01       	movw	r22, r14
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2b72:	a1 10       	cpse	r10, r1
    2b74:	f5 cf       	rjmp	.-22     	; 0x2b60 <vfprintf+0x366>
    2b76:	33 20       	and	r3, r3
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <vfprintf+0x382>
    2b7a:	51 ce       	rjmp	.-862    	; 0x281e <vfprintf+0x24>
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 08 16 	call	0x2c10	; 0x2c10 <fputc>
    2b86:	3a 94       	dec	r3
    2b88:	f6 cf       	rjmp	.-20     	; 0x2b76 <vfprintf+0x37c>
    2b8a:	f7 01       	movw	r30, r14
    2b8c:	86 81       	ldd	r24, Z+6	; 0x06
    2b8e:	97 81       	ldd	r25, Z+7	; 0x07
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <vfprintf+0x39c>
    2b92:	8f ef       	ldi	r24, 0xFF	; 255
    2b94:	9f ef       	ldi	r25, 0xFF	; 255
    2b96:	2c 96       	adiw	r28, 0x0c	; 12
    2b98:	e2 e1       	ldi	r30, 0x12	; 18
    2b9a:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__>

00002b9e <calloc>:
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	86 9f       	mul	r24, r22
    2ba8:	80 01       	movw	r16, r0
    2baa:	87 9f       	mul	r24, r23
    2bac:	10 0d       	add	r17, r0
    2bae:	96 9f       	mul	r25, r22
    2bb0:	10 0d       	add	r17, r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	c8 01       	movw	r24, r16
    2bb6:	0e 94 82 11 	call	0x2304	; 0x2304 <malloc>
    2bba:	ec 01       	movw	r28, r24
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	29 f0       	breq	.+10     	; 0x2bca <calloc+0x2c>
    2bc0:	a8 01       	movw	r20, r16
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <memset>
    2bca:	ce 01       	movw	r24, r28
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	08 95       	ret

00002bd6 <strnlen_P>:
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	05 90       	lpm	r0, Z+
    2bda:	61 50       	subi	r22, 0x01	; 1
    2bdc:	70 40       	sbci	r23, 0x00	; 0
    2bde:	01 10       	cpse	r0, r1
    2be0:	d8 f7       	brcc	.-10     	; 0x2bd8 <strnlen_P+0x2>
    2be2:	80 95       	com	r24
    2be4:	90 95       	com	r25
    2be6:	8e 0f       	add	r24, r30
    2be8:	9f 1f       	adc	r25, r31
    2bea:	08 95       	ret

00002bec <memset>:
    2bec:	dc 01       	movw	r26, r24
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <memset+0x6>
    2bf0:	6d 93       	st	X+, r22
    2bf2:	41 50       	subi	r20, 0x01	; 1
    2bf4:	50 40       	sbci	r21, 0x00	; 0
    2bf6:	e0 f7       	brcc	.-8      	; 0x2bf0 <memset+0x4>
    2bf8:	08 95       	ret

00002bfa <strnlen>:
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	61 50       	subi	r22, 0x01	; 1
    2bfe:	70 40       	sbci	r23, 0x00	; 0
    2c00:	01 90       	ld	r0, Z+
    2c02:	01 10       	cpse	r0, r1
    2c04:	d8 f7       	brcc	.-10     	; 0x2bfc <strnlen+0x2>
    2c06:	80 95       	com	r24
    2c08:	90 95       	com	r25
    2c0a:	8e 0f       	add	r24, r30
    2c0c:	9f 1f       	adc	r25, r31
    2c0e:	08 95       	ret

00002c10 <fputc>:
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	18 2f       	mov	r17, r24
    2c1a:	09 2f       	mov	r16, r25
    2c1c:	eb 01       	movw	r28, r22
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	81 fd       	sbrc	r24, 1
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <fputc+0x1a>
    2c24:	8f ef       	ldi	r24, 0xFF	; 255
    2c26:	9f ef       	ldi	r25, 0xFF	; 255
    2c28:	20 c0       	rjmp	.+64     	; 0x2c6a <fputc+0x5a>
    2c2a:	82 ff       	sbrs	r24, 2
    2c2c:	10 c0       	rjmp	.+32     	; 0x2c4e <fputc+0x3e>
    2c2e:	4e 81       	ldd	r20, Y+6	; 0x06
    2c30:	5f 81       	ldd	r21, Y+7	; 0x07
    2c32:	2c 81       	ldd	r18, Y+4	; 0x04
    2c34:	3d 81       	ldd	r19, Y+5	; 0x05
    2c36:	42 17       	cp	r20, r18
    2c38:	53 07       	cpc	r21, r19
    2c3a:	7c f4       	brge	.+30     	; 0x2c5a <fputc+0x4a>
    2c3c:	e8 81       	ld	r30, Y
    2c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c40:	9f 01       	movw	r18, r30
    2c42:	2f 5f       	subi	r18, 0xFF	; 255
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	39 83       	std	Y+1, r19	; 0x01
    2c48:	28 83       	st	Y, r18
    2c4a:	10 83       	st	Z, r17
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <fputc+0x4a>
    2c4e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c50:	f9 85       	ldd	r31, Y+9	; 0x09
    2c52:	81 2f       	mov	r24, r17
    2c54:	09 95       	icall
    2c56:	89 2b       	or	r24, r25
    2c58:	29 f7       	brne	.-54     	; 0x2c24 <fputc+0x14>
    2c5a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c5c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c5e:	2f 5f       	subi	r18, 0xFF	; 255
    2c60:	3f 4f       	sbci	r19, 0xFF	; 255
    2c62:	3f 83       	std	Y+7, r19	; 0x07
    2c64:	2e 83       	std	Y+6, r18	; 0x06
    2c66:	81 2f       	mov	r24, r17
    2c68:	90 2f       	mov	r25, r16
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	08 95       	ret

00002c74 <__ultoa_invert>:
    2c74:	fa 01       	movw	r30, r20
    2c76:	aa 27       	eor	r26, r26
    2c78:	28 30       	cpi	r18, 0x08	; 8
    2c7a:	51 f1       	breq	.+84     	; 0x2cd0 <__ultoa_invert+0x5c>
    2c7c:	20 31       	cpi	r18, 0x10	; 16
    2c7e:	81 f1       	breq	.+96     	; 0x2ce0 <__ultoa_invert+0x6c>
    2c80:	e8 94       	clt
    2c82:	6f 93       	push	r22
    2c84:	6e 7f       	andi	r22, 0xFE	; 254
    2c86:	6e 5f       	subi	r22, 0xFE	; 254
    2c88:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	af 4f       	sbci	r26, 0xFF	; 255
    2c90:	b1 e0       	ldi	r27, 0x01	; 1
    2c92:	3e d0       	rcall	.+124    	; 0x2d10 <__ultoa_invert+0x9c>
    2c94:	b4 e0       	ldi	r27, 0x04	; 4
    2c96:	3c d0       	rcall	.+120    	; 0x2d10 <__ultoa_invert+0x9c>
    2c98:	67 0f       	add	r22, r23
    2c9a:	78 1f       	adc	r23, r24
    2c9c:	89 1f       	adc	r24, r25
    2c9e:	9a 1f       	adc	r25, r26
    2ca0:	a1 1d       	adc	r26, r1
    2ca2:	68 0f       	add	r22, r24
    2ca4:	79 1f       	adc	r23, r25
    2ca6:	8a 1f       	adc	r24, r26
    2ca8:	91 1d       	adc	r25, r1
    2caa:	a1 1d       	adc	r26, r1
    2cac:	6a 0f       	add	r22, r26
    2cae:	71 1d       	adc	r23, r1
    2cb0:	81 1d       	adc	r24, r1
    2cb2:	91 1d       	adc	r25, r1
    2cb4:	a1 1d       	adc	r26, r1
    2cb6:	20 d0       	rcall	.+64     	; 0x2cf8 <__ultoa_invert+0x84>
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <__ultoa_invert+0x48>
    2cba:	68 94       	set
    2cbc:	3f 91       	pop	r19
    2cbe:	2a e0       	ldi	r18, 0x0A	; 10
    2cc0:	26 9f       	mul	r18, r22
    2cc2:	11 24       	eor	r1, r1
    2cc4:	30 19       	sub	r19, r0
    2cc6:	30 5d       	subi	r19, 0xD0	; 208
    2cc8:	31 93       	st	Z+, r19
    2cca:	de f6       	brtc	.-74     	; 0x2c82 <__ultoa_invert+0xe>
    2ccc:	cf 01       	movw	r24, r30
    2cce:	08 95       	ret
    2cd0:	46 2f       	mov	r20, r22
    2cd2:	47 70       	andi	r20, 0x07	; 7
    2cd4:	40 5d       	subi	r20, 0xD0	; 208
    2cd6:	41 93       	st	Z+, r20
    2cd8:	b3 e0       	ldi	r27, 0x03	; 3
    2cda:	0f d0       	rcall	.+30     	; 0x2cfa <__ultoa_invert+0x86>
    2cdc:	c9 f7       	brne	.-14     	; 0x2cd0 <__ultoa_invert+0x5c>
    2cde:	f6 cf       	rjmp	.-20     	; 0x2ccc <__ultoa_invert+0x58>
    2ce0:	46 2f       	mov	r20, r22
    2ce2:	4f 70       	andi	r20, 0x0F	; 15
    2ce4:	40 5d       	subi	r20, 0xD0	; 208
    2ce6:	4a 33       	cpi	r20, 0x3A	; 58
    2ce8:	18 f0       	brcs	.+6      	; 0x2cf0 <__ultoa_invert+0x7c>
    2cea:	49 5d       	subi	r20, 0xD9	; 217
    2cec:	31 fd       	sbrc	r19, 1
    2cee:	40 52       	subi	r20, 0x20	; 32
    2cf0:	41 93       	st	Z+, r20
    2cf2:	02 d0       	rcall	.+4      	; 0x2cf8 <__ultoa_invert+0x84>
    2cf4:	a9 f7       	brne	.-22     	; 0x2ce0 <__ultoa_invert+0x6c>
    2cf6:	ea cf       	rjmp	.-44     	; 0x2ccc <__ultoa_invert+0x58>
    2cf8:	b4 e0       	ldi	r27, 0x04	; 4
    2cfa:	a6 95       	lsr	r26
    2cfc:	97 95       	ror	r25
    2cfe:	87 95       	ror	r24
    2d00:	77 95       	ror	r23
    2d02:	67 95       	ror	r22
    2d04:	ba 95       	dec	r27
    2d06:	c9 f7       	brne	.-14     	; 0x2cfa <__ultoa_invert+0x86>
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	61 05       	cpc	r22, r1
    2d0c:	71 05       	cpc	r23, r1
    2d0e:	08 95       	ret
    2d10:	9b 01       	movw	r18, r22
    2d12:	ac 01       	movw	r20, r24
    2d14:	0a 2e       	mov	r0, r26
    2d16:	06 94       	lsr	r0
    2d18:	57 95       	ror	r21
    2d1a:	47 95       	ror	r20
    2d1c:	37 95       	ror	r19
    2d1e:	27 95       	ror	r18
    2d20:	ba 95       	dec	r27
    2d22:	c9 f7       	brne	.-14     	; 0x2d16 <__ultoa_invert+0xa2>
    2d24:	62 0f       	add	r22, r18
    2d26:	73 1f       	adc	r23, r19
    2d28:	84 1f       	adc	r24, r20
    2d2a:	95 1f       	adc	r25, r21
    2d2c:	a0 1d       	adc	r26, r0
    2d2e:	08 95       	ret

00002d30 <__prologue_saves__>:
    2d30:	2f 92       	push	r2
    2d32:	3f 92       	push	r3
    2d34:	4f 92       	push	r4
    2d36:	5f 92       	push	r5
    2d38:	6f 92       	push	r6
    2d3a:	7f 92       	push	r7
    2d3c:	8f 92       	push	r8
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	ca 1b       	sub	r28, r26
    2d5a:	db 0b       	sbc	r29, r27
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	09 94       	ijmp

00002d68 <__epilogue_restores__>:
    2d68:	2a 88       	ldd	r2, Y+18	; 0x12
    2d6a:	39 88       	ldd	r3, Y+17	; 0x11
    2d6c:	48 88       	ldd	r4, Y+16	; 0x10
    2d6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d70:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d72:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d74:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d76:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d78:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d7a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d7c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d7e:	df 80       	ldd	r13, Y+7	; 0x07
    2d80:	ee 80       	ldd	r14, Y+6	; 0x06
    2d82:	fd 80       	ldd	r15, Y+5	; 0x05
    2d84:	0c 81       	ldd	r16, Y+4	; 0x04
    2d86:	1b 81       	ldd	r17, Y+3	; 0x03
    2d88:	aa 81       	ldd	r26, Y+2	; 0x02
    2d8a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d8c:	ce 0f       	add	r28, r30
    2d8e:	d1 1d       	adc	r29, r1
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	ed 01       	movw	r28, r26
    2d9c:	08 95       	ret

00002d9e <_exit>:
    2d9e:	f8 94       	cli

00002da0 <__stop_program>:
    2da0:	ff cf       	rjmp	.-2      	; 0x2da0 <__stop_program>
