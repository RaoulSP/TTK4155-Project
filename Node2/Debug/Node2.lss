
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00001b7a  00001c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800240  00800240  00001c4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cc4  00000000  00000000  00001f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd9  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001363  00000000  00000000  000049af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f8  00000000  00000000  00005d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007da  00000000  00000000  0000630c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013fa  00000000  00000000  00006ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c1       	rjmp	.+942    	; 0x3b4 <__vector_1>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c6       	rjmp	.+3104   	; 0xc56 <__vector_13>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c5       	rjmp	.+2750   	; 0xb40 <__vector_32>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	26 c6       	rjmp	.+3148   	; 0xcea <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	90 06       	cpc	r9, r16
      e6:	e2 06       	cpc	r14, r18
      e8:	e2 06       	cpc	r14, r18
      ea:	e2 06       	cpc	r14, r18
      ec:	e2 06       	cpc	r14, r18
      ee:	e2 06       	cpc	r14, r18
      f0:	e2 06       	cpc	r14, r18
      f2:	e2 06       	cpc	r14, r18
      f4:	90 06       	cpc	r9, r16
      f6:	e2 06       	cpc	r14, r18
      f8:	e2 06       	cpc	r14, r18
      fa:	e2 06       	cpc	r14, r18
      fc:	e2 06       	cpc	r14, r18
      fe:	e2 06       	cpc	r14, r18
     100:	e2 06       	cpc	r14, r18
     102:	e2 06       	cpc	r14, r18
     104:	92 06       	cpc	r9, r18
     106:	e2 06       	cpc	r14, r18
     108:	e2 06       	cpc	r14, r18
     10a:	e2 06       	cpc	r14, r18
     10c:	e2 06       	cpc	r14, r18
     10e:	e2 06       	cpc	r14, r18
     110:	e2 06       	cpc	r14, r18
     112:	e2 06       	cpc	r14, r18
     114:	e2 06       	cpc	r14, r18
     116:	e2 06       	cpc	r14, r18
     118:	e2 06       	cpc	r14, r18
     11a:	e2 06       	cpc	r14, r18
     11c:	e2 06       	cpc	r14, r18
     11e:	e2 06       	cpc	r14, r18
     120:	e2 06       	cpc	r14, r18
     122:	e2 06       	cpc	r14, r18
     124:	92 06       	cpc	r9, r18
     126:	e2 06       	cpc	r14, r18
     128:	e2 06       	cpc	r14, r18
     12a:	e2 06       	cpc	r14, r18
     12c:	e2 06       	cpc	r14, r18
     12e:	e2 06       	cpc	r14, r18
     130:	e2 06       	cpc	r14, r18
     132:	e2 06       	cpc	r14, r18
     134:	e2 06       	cpc	r14, r18
     136:	e2 06       	cpc	r14, r18
     138:	e2 06       	cpc	r14, r18
     13a:	e2 06       	cpc	r14, r18
     13c:	e2 06       	cpc	r14, r18
     13e:	e2 06       	cpc	r14, r18
     140:	e2 06       	cpc	r14, r18
     142:	e2 06       	cpc	r14, r18
     144:	de 06       	cpc	r13, r30
     146:	e2 06       	cpc	r14, r18
     148:	e2 06       	cpc	r14, r18
     14a:	e2 06       	cpc	r14, r18
     14c:	e2 06       	cpc	r14, r18
     14e:	e2 06       	cpc	r14, r18
     150:	e2 06       	cpc	r14, r18
     152:	e2 06       	cpc	r14, r18
     154:	bb 06       	cpc	r11, r27
     156:	e2 06       	cpc	r14, r18
     158:	e2 06       	cpc	r14, r18
     15a:	e2 06       	cpc	r14, r18
     15c:	e2 06       	cpc	r14, r18
     15e:	e2 06       	cpc	r14, r18
     160:	e2 06       	cpc	r14, r18
     162:	e2 06       	cpc	r14, r18
     164:	e2 06       	cpc	r14, r18
     166:	e2 06       	cpc	r14, r18
     168:	e2 06       	cpc	r14, r18
     16a:	e2 06       	cpc	r14, r18
     16c:	e2 06       	cpc	r14, r18
     16e:	e2 06       	cpc	r14, r18
     170:	e2 06       	cpc	r14, r18
     172:	e2 06       	cpc	r14, r18
     174:	af 06       	cpc	r10, r31
     176:	e2 06       	cpc	r14, r18
     178:	e2 06       	cpc	r14, r18
     17a:	e2 06       	cpc	r14, r18
     17c:	e2 06       	cpc	r14, r18
     17e:	e2 06       	cpc	r14, r18
     180:	e2 06       	cpc	r14, r18
     182:	e2 06       	cpc	r14, r18
     184:	cd 06       	cpc	r12, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e7       	ldi	r30, 0x7A	; 122
     19e:	fb e1       	ldi	r31, 0x1B	; 27
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 34       	cpi	r26, 0x40	; 64
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a0 e4       	ldi	r26, 0x40	; 64
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a7 37       	cpi	r26, 0x77	; 119
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	ee d1       	rcall	.+988    	; 0x59e <main>
     1c2:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
		return (uint8_t) *ext_adc;
}
#else
	void adc_init(){ //ADC input pin is not specified. A0 default? otherwise set multiplexer
		ADCSRA |= (1 << ADEN); //Enable
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
		ADMUX |= ((1 << REFS1) | (1 << REFS0)); //00 = AREF, internal VREF turned off; 01 = AVCC with external capacitor at AREF pin; 11 = 2.56V
     1d2:	ac e7       	ldi	r26, 0x7C	; 124
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	8c 91       	ld	r24, X
     1d8:	80 6c       	ori	r24, 0xC0	; 192
     1da:	8c 93       	st	X, r24
		ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0)); //div 128
     1dc:	80 81       	ld	r24, Z
     1de:	87 60       	ori	r24, 0x07	; 7
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <adc_read>:
		//ADMUX |= (1 << ADLAR); //Left shift ADC
		//ADCSRB for mux?
	}
	int16_t adc_read(){ //let this take channel as argument
		ADCSRA |= (1 << ADSC);
     1e4:	ea e7       	ldi	r30, 0x7A	; 122
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
		while (test_bit(ADCSRA, ADSC)){
     1ee:	80 81       	ld	r24, Z
     1f0:	86 fd       	sbrc	r24, 6
     1f2:	fd cf       	rjmp	.-6      	; 0x1ee <adc_read+0xa>
		}
		return ADC;
     1f4:	80 91 78 00 	lds	r24, 0x0078
     1f8:	90 91 79 00 	lds	r25, 0x0079
	}
     1fc:	08 95       	ret

000001fe <can_init>:
#include "can.h"
#include "settings.h"
#include "interrupt_flags.h"
volatile int can_message_received = 0;

void can_init(int mode){
     1fe:	cf 93       	push	r28
     200:	c8 2f       	mov	r28, r24
	mcp_init();
     202:	2f d1       	rcall	.+606    	; 0x462 <mcp_init>
	
	mcp_bit_modify(0x2B,0b00000011, 0b00000011); //Disables interrupts from empty buffers WHAT!?!??
     204:	43 e0       	ldi	r20, 0x03	; 3
     206:	63 e0       	ldi	r22, 0x03	; 3
     208:	8b e2       	ldi	r24, 0x2B	; 43
     20a:	12 d1       	rcall	.+548    	; 0x430 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     20c:	40 e6       	ldi	r20, 0x60	; 96
     20e:	60 e6       	ldi	r22, 0x60	; 96
     210:	80 e6       	ldi	r24, 0x60	; 96
     212:	0e d1       	rcall	.+540    	; 0x430 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     214:	4c 2f       	mov	r20, r28
     216:	6f ef       	ldi	r22, 0xFF	; 255
     218:	8f e0       	ldi	r24, 0x0F	; 15
     21a:	0a d1       	rcall	.+532    	; 0x430 <mcp_bit_modify>
	
	#ifdef NODE_1
	MCUCR |= (1 << ISC01);
	GICR |= (1 << INT0);
	#endif
}
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <can_transmit>:

void can_transmit(Msg msg){
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	00 d0       	rcall	.+0      	; 0x22e <can_transmit+0xe>
     22e:	00 d0       	rcall	.+0      	; 0x230 <can_transmit+0x10>
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	49 83       	std	Y+1, r20	; 0x01
     236:	5a 83       	std	Y+2, r21	; 0x02
     238:	6b 83       	std	Y+3, r22	; 0x03
     23a:	7c 83       	std	Y+4, r23	; 0x04
     23c:	8d 83       	std	Y+5, r24	; 0x05
     23e:	9e 83       	std	Y+6, r25	; 0x06
     240:	09 81       	ldd	r16, Y+1	; 0x01
     242:	1a 81       	ldd	r17, Y+2	; 0x02
     244:	eb 80       	ldd	r14, Y+3	; 0x03
     246:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3, buffer = n - 1
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     248:	b8 01       	movw	r22, r16
     24a:	75 95       	asr	r23
     24c:	67 95       	ror	r22
     24e:	75 95       	asr	r23
     250:	67 95       	ror	r22
     252:	75 95       	asr	r23
     254:	67 95       	ror	r22
     256:	81 e5       	ldi	r24, 0x51	; 81
     258:	cd d0       	rcall	.+410    	; 0x3f4 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     25a:	60 2f       	mov	r22, r16
     25c:	62 95       	swap	r22
     25e:	66 0f       	add	r22, r22
     260:	60 7e       	andi	r22, 0xE0	; 224
     262:	82 e5       	ldi	r24, 0x52	; 82
     264:	c7 d0       	rcall	.+398    	; 0x3f4 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     266:	6e 2d       	mov	r22, r14
     268:	85 e5       	ldi	r24, 0x55	; 85
     26a:	c4 d0       	rcall	.+392    	; 0x3f4 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     26c:	1e 14       	cp	r1, r14
     26e:	1f 04       	cpc	r1, r15
     270:	7c f4       	brge	.+30     	; 0x290 <can_transmit+0x70>
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     276:	ed 81       	ldd	r30, Y+5	; 0x05
     278:	fe 81       	ldd	r31, Y+6	; 0x06
     27a:	e0 0f       	add	r30, r16
     27c:	f1 1f       	adc	r31, r17
     27e:	60 81       	ld	r22, Z
     280:	86 e5       	ldi	r24, 0x56	; 86
     282:	80 0f       	add	r24, r16
     284:	b7 d0       	rcall	.+366    	; 0x3f4 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     286:	0f 5f       	subi	r16, 0xFF	; 255
     288:	1f 4f       	sbci	r17, 0xFF	; 255
     28a:	0e 15       	cp	r16, r14
     28c:	1f 05       	cpc	r17, r15
     28e:	99 f7       	brne	.-26     	; 0x276 <can_transmit+0x56>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	ba d0       	rcall	.+372    	; 0x412 <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     29e:	26 96       	adiw	r28, 0x06	; 6
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	08 95       	ret

000002b8 <can_receive>:

Msg can_receive(){
     2b8:	8f 92       	push	r8
     2ba:	9f 92       	push	r9
     2bc:	af 92       	push	r10
     2be:	bf 92       	push	r11
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <can_receive+0x1a>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <can_receive+0x1c>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2, buffer = n - 1
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     2d8:	81 e6       	ldi	r24, 0x61	; 97
     2da:	80 d0       	rcall	.+256    	; 0x3dc <mcp_read>
     2dc:	a8 2e       	mov	r10, r24
     2de:	82 e6       	ldi	r24, 0x62	; 98
     2e0:	7d d0       	rcall	.+250    	; 0x3dc <mcp_read>
     2e2:	82 95       	swap	r24
     2e4:	86 95       	lsr	r24
     2e6:	87 70       	andi	r24, 0x07	; 7
     2e8:	b1 2c       	mov	r11, r1
     2ea:	aa 0c       	add	r10, r10
     2ec:	bb 1c       	adc	r11, r11
     2ee:	aa 0c       	add	r10, r10
     2f0:	bb 1c       	adc	r11, r11
     2f2:	aa 0c       	add	r10, r10
     2f4:	bb 1c       	adc	r11, r11
     2f6:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     2f8:	85 e6       	ldi	r24, 0x65	; 101
     2fa:	70 d0       	rcall	.+224    	; 0x3dc <mcp_read>
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	c8 2e       	mov	r12, r24
     300:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     302:	c6 01       	movw	r24, r12
     304:	d4 d7       	rcall	.+4008   	; 0x12ae <malloc>
     306:	98 2e       	mov	r9, r24
     308:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     30a:	1c 14       	cp	r1, r12
     30c:	1d 04       	cpc	r1, r13
     30e:	7c f4       	brge	.+30     	; 0x32e <can_receive+0x76>
     310:	e8 2e       	mov	r14, r24
     312:	f9 2e       	mov	r15, r25
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     318:	86 e6       	ldi	r24, 0x66	; 102
     31a:	80 0f       	add	r24, r16
     31c:	5f d0       	rcall	.+190    	; 0x3dc <mcp_read>
     31e:	f7 01       	movw	r30, r14
     320:	81 93       	st	Z+, r24
     322:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     324:	0f 5f       	subi	r16, 0xFF	; 255
     326:	1f 4f       	sbci	r17, 0xFF	; 255
     328:	0c 15       	cp	r16, r12
     32a:	1d 05       	cpc	r17, r13
     32c:	ac f3       	brlt	.-22     	; 0x318 <can_receive+0x60>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RXnIF to 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	8c e2       	ldi	r24, 0x2C	; 44
     334:	7d d0       	rcall	.+250    	; 0x430 <mcp_bit_modify>
	return msg;
     336:	ba 82       	std	Y+2, r11	; 0x02
     338:	a9 82       	std	Y+1, r10	; 0x01
     33a:	dc 82       	std	Y+4, r13	; 0x04
     33c:	cb 82       	std	Y+3, r12	; 0x03
     33e:	9d 82       	std	Y+5, r9	; 0x05
     340:	8e 82       	std	Y+6, r8	; 0x06
     342:	2a 2d       	mov	r18, r10
     344:	3a 81       	ldd	r19, Y+2	; 0x02
     346:	4c 2d       	mov	r20, r12
     348:	5c 81       	ldd	r21, Y+4	; 0x04
     34a:	69 2d       	mov	r22, r9
     34c:	78 2d       	mov	r23, r8
}
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	26 96       	adiw	r28, 0x06	; 6
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	9f 90       	pop	r9
     374:	8f 90       	pop	r8
     376:	08 95       	ret

00000378 <can_construct_msg>:

Msg can_construct_msg(int id, int length, char* data){
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	00 d0       	rcall	.+0      	; 0x37e <can_construct_msg+0x6>
     37e:	00 d0       	rcall	.+0      	; 0x380 <can_construct_msg+0x8>
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	Msg msg = {id,length,data};
	return msg;
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	6b 83       	std	Y+3, r22	; 0x03
     38a:	7c 83       	std	Y+4, r23	; 0x04
     38c:	4d 83       	std	Y+5, r20	; 0x05
     38e:	5e 83       	std	Y+6, r21	; 0x06
     390:	28 2f       	mov	r18, r24
     392:	39 2f       	mov	r19, r25
     394:	96 2f       	mov	r25, r22
     396:	57 2f       	mov	r21, r23
     398:	64 2f       	mov	r22, r20
     39a:	7e 81       	ldd	r23, Y+6	; 0x06
} 
     39c:	49 2f       	mov	r20, r25
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	26 96       	adiw	r28, 0x06	; 6
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <__vector_1>:

ISR(INT0_vect){
     3b4:	1f 92       	push	r1
     3b6:	0f 92       	push	r0
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	0f 92       	push	r0
     3bc:	11 24       	eor	r1, r1
     3be:	8f 93       	push	r24
     3c0:	9f 93       	push	r25
	can_message_received = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 41 02 	sts	0x0241, r25
     3ca:	80 93 40 02 	sts	0x0240, r24
	//printf("ISR: %d\r\n", can_message_received);
}
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <mcp_read>:
	clear_bit(PORTB, MCP_PIN);
	spi_master_transmit(MCP_READ_STATUS);
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,MCP_PIN);
	return status;
}
     3dc:	cf 93       	push	r28
     3de:	c8 2f       	mov	r28, r24
     3e0:	2f 98       	cbi	0x05, 7	; 5
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	49 d0       	rcall	.+146    	; 0x478 <spi_master_transmit>
     3e6:	8c 2f       	mov	r24, r28
     3e8:	47 d0       	rcall	.+142    	; 0x478 <spi_master_transmit>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	45 d0       	rcall	.+138    	; 0x478 <spi_master_transmit>
     3ee:	2f 9a       	sbi	0x05, 7	; 5
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <mcp_write>:
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	d8 2f       	mov	r29, r24
     3fa:	c6 2f       	mov	r28, r22
     3fc:	2f 98       	cbi	0x05, 7	; 5
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	3b d0       	rcall	.+118    	; 0x478 <spi_master_transmit>
     402:	8d 2f       	mov	r24, r29
     404:	39 d0       	rcall	.+114    	; 0x478 <spi_master_transmit>
     406:	8c 2f       	mov	r24, r28
     408:	37 d0       	rcall	.+110    	; 0x478 <spi_master_transmit>
     40a:	2f 9a       	sbi	0x05, 7	; 5
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <mcp_request_to_send>:
     412:	2f 98       	cbi	0x05, 7	; 5
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	80 68       	ori	r24, 0x80	; 128
     41e:	48 2b       	or	r20, r24
     420:	59 2b       	or	r21, r25
     422:	cb 01       	movw	r24, r22
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	84 2b       	or	r24, r20
     42a:	26 d0       	rcall	.+76     	; 0x478 <spi_master_transmit>
     42c:	2f 9a       	sbi	0x05, 7	; 5
     42e:	08 95       	ret

00000430 <mcp_bit_modify>:

void mcp_bit_modify(char address, char mask, char data){
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	18 2f       	mov	r17, r24
     438:	d6 2f       	mov	r29, r22
     43a:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, MCP_PIN);
     43c:	2f 98       	cbi	0x05, 7	; 5
	spi_master_transmit(MCP_BITMOD);	
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	1b d0       	rcall	.+54     	; 0x478 <spi_master_transmit>
	spi_master_transmit(address);
     442:	81 2f       	mov	r24, r17
     444:	19 d0       	rcall	.+50     	; 0x478 <spi_master_transmit>
	spi_master_transmit(mask);
     446:	8d 2f       	mov	r24, r29
     448:	17 d0       	rcall	.+46     	; 0x478 <spi_master_transmit>
	spi_master_transmit(data);
     44a:	8c 2f       	mov	r24, r28
     44c:	15 d0       	rcall	.+42     	; 0x478 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     44e:	2f 9a       	sbi	0x05, 7	; 5
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, MCP_PIN);
     458:	2f 98       	cbi	0x05, 7	; 5
	spi_master_transmit(MCP_RESET);
     45a:	80 ec       	ldi	r24, 0xC0	; 192
     45c:	0d d0       	rcall	.+26     	; 0x478 <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     45e:	2f 9a       	sbi	0x05, 7	; 5
     460:	08 95       	ret

00000462 <mcp_init>:
}
	
void mcp_init(){
	spi_master_init();
     462:	02 d0       	rcall	.+4      	; 0x468 <spi_master_init>
	mcp_reset();
     464:	f9 cf       	rjmp	.-14     	; 0x458 <mcp_reset>
     466:	08 95       	ret

00000468 <spi_master_init>:
		DDRB &= ~(1 << DDB6);
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
		set_bit(PORTB,PB4); //Disable chip
	#else
		//Without setting PB0 as an output printf doesn|t work!?!?!?!?
		DDRB |= (1<<DDB0)|(1 << DDB1)|(1 << DDB2)|(1 << DDB7); //Set MOSI, SS and SCK output, all others input
     468:	84 b1       	in	r24, 0x04	; 4
     46a:	87 68       	ori	r24, 0x87	; 135
     46c:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << DDB3); //DO NOT TINK IS NECCSCAS RYTSR:
     46e:	23 98       	cbi	0x04, 3	; 4
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Master, set clock rate fck/16
     470:	81 e5       	ldi	r24, 0x51	; 81
     472:	8c bd       	out	0x2c, r24	; 44
		set_bit(PORTB,PB7); //Disable chip
     474:	2f 9a       	sbi	0x05, 7	; 5
     476:	08 95       	ret

00000478 <spi_master_transmit>:
	#endif
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
     478:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <spi_master_transmit+0x2>
	return SPDR;
     480:	8e b5       	in	r24, 0x2e	; 46
}
     482:	08 95       	ret

00000484 <uart_putchar>:
	#endif
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     484:	e0 ec       	ldi	r30, 0xC0	; 192
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	90 81       	ld	r25, Z
     48a:	95 ff       	sbrs	r25, 5
     48c:	fd cf       	rjmp	.-6      	; 0x488 <uart_putchar+0x4>
	UDR0 = c; //Put data into buffer, sends the data
     48e:	80 93 c6 00 	sts	0x00C6, r24
     492:	08 95       	ret

00000494 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     494:	e0 ec       	ldi	r30, 0xC0	; 192
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	88 23       	and	r24, r24
     49c:	ec f7       	brge	.-6      	; 0x498 <uart_getchar+0x4>
	return UDR0;
     49e:	80 91 c6 00 	lds	r24, 0x00C6
     4a2:	08 95       	ret

000004a4 <uart_init>:
#include <stdio.h>
#include "settings.h"
#include "uart.h"

void uart_init(int baudRate){
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     4a4:	aa 27       	eor	r26, r26
     4a6:	97 fd       	sbrc	r25, 7
     4a8:	a0 95       	com	r26
     4aa:	ba 2f       	mov	r27, r26
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	aa 1f       	adc	r26, r26
     4b2:	bb 1f       	adc	r27, r27
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	aa 1f       	adc	r26, r26
     4ba:	bb 1f       	adc	r27, r27
     4bc:	9c 01       	movw	r18, r24
     4be:	ad 01       	movw	r20, r26
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	44 1f       	adc	r20, r20
     4c6:	55 1f       	adc	r21, r21
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	44 1f       	adc	r20, r20
     4ce:	55 1f       	adc	r21, r21
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	74 e2       	ldi	r23, 0x24	; 36
     4d4:	84 ef       	ldi	r24, 0xF4	; 244
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	a6 d6       	rcall	.+3404   	; 0x1226 <__divmodsi4>
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     4de:	20 93 c4 00 	sts	0x00C4, r18
    UBRR0H = (UBRR>>8);
     4e2:	30 93 c5 00 	sts	0x00C5, r19
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     4e6:	88 e1       	ldi	r24, 0x18	; 24
     4e8:	80 93 c1 00 	sts	0x00C1, r24
	
	#ifdef NODE_1
		UCSR0C = ((1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00));
	#else
		UCSR0C = ((1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
     4ec:	8e e0       	ldi	r24, 0x0E	; 14
     4ee:	80 93 c2 00 	sts	0x00C2, r24
	#endif
	fdevopen(uart_putchar, uart_getchar);
     4f2:	6a e4       	ldi	r22, 0x4A	; 74
     4f4:	72 e0       	ldi	r23, 0x02	; 2
     4f6:	82 e4       	ldi	r24, 0x42	; 66
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <fdevopen>
     4fe:	08 95       	ret

00000500 <check_if_scored>:
		
	}
}

int check_if_scored()
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	00 d0       	rcall	.+0      	; 0x506 <check_if_scored+0x6>
     506:	00 d0       	rcall	.+0      	; 0x508 <check_if_scored+0x8>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	int lower_trigger_value = 300;
	int upper_trigger_value = 600;
	int adc_val = adc_read();
     50c:	6b de       	rcall	.-810    	; 0x1e4 <adc_read>
	
	if (adc_val < lower_trigger_value && scoring_allowed){ //Can't score again until the adc value goes up
     50e:	8c 32       	cpi	r24, 0x2C	; 44
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	92 07       	cpc	r25, r18
     514:	2c f5       	brge	.+74     	; 0x560 <check_if_scored+0x60>
     516:	20 91 06 02 	lds	r18, 0x0206
     51a:	30 91 07 02 	lds	r19, 0x0207
     51e:	23 2b       	or	r18, r19
     520:	f9 f0       	breq	.+62     	; 0x560 <check_if_scored+0x60>
		scoring_allowed = 0;
     522:	10 92 07 02 	sts	0x0207, r1
     526:	10 92 06 02 	sts	0x0206, r1
		can_transmit(can_construct_msg(OCCLUDED, 0, 0));
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	20 df       	rcall	.-448    	; 0x378 <can_construct_msg>
     538:	f4 2f       	mov	r31, r20
     53a:	e5 2f       	mov	r30, r21
     53c:	86 2f       	mov	r24, r22
     53e:	97 2f       	mov	r25, r23
     540:	42 2f       	mov	r20, r18
     542:	53 2f       	mov	r21, r19
     544:	6f 2f       	mov	r22, r31
     546:	7e 2f       	mov	r23, r30
     548:	6b de       	rcall	.-810    	; 0x220 <can_transmit>
		printf("OCCLUDED\r");
     54a:	89 e0       	ldi	r24, 0x09	; 9
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printf>
		return 1;
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	16 c0       	rjmp	.+44     	; 0x58c <check_if_scored+0x8c>
	}
	else if (adc_val >= upper_trigger_value){
     560:	88 35       	cpi	r24, 0x58	; 88
     562:	92 40       	sbci	r25, 0x02	; 2
     564:	8c f0       	brlt	.+34     	; 0x588 <check_if_scored+0x88>
		scoring_allowed = 1;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	90 93 07 02 	sts	0x0207, r25
     56e:	80 93 06 02 	sts	0x0206, r24
		printf("........\r");
     572:	83 e1       	ldi	r24, 0x13	; 19
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printf>
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
	}
	return 0;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	02 c0       	rjmp	.+4      	; 0x58c <check_if_scored+0x8c>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	26 96       	adiw	r28, 0x06	; 6
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <main>:
volatile int solenoid_timer = 0;
int scoring_allowed = 1;


int main(void)
{	
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <main+0x6>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <main+0x8>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
	uart_init(9600);
     5aa:	80 e8       	ldi	r24, 0x80	; 128
     5ac:	95 e2       	ldi	r25, 0x25	; 37
     5ae:	7a df       	rcall	.-268    	; 0x4a4 <uart_init>
	printf("\033[4m\r\nreset\033[0m\r\n");
     5b0:	8d e1       	ldi	r24, 0x1D	; 29
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	fe d7       	rcall	.+4092   	; 0x15b2 <puts>
	adc_init();
     5b6:	08 de       	rcall	.-1008   	; 0x1c8 <adc_init>
	can_init(MODE_NORMAL);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	20 de       	rcall	.-960    	; 0x1fe <can_init>
	pwm_init();
     5be:	10 d3       	rcall	.+1568   	; 0xbe0 <pwm_init>
	TWI_Master_Initialise();
     5c0:	68 d3       	rcall	.+1744   	; 0xc92 <TWI_Master_Initialise>
	motor_init();
     5c2:	a4 d0       	rcall	.+328    	; 0x70c <motor_init>
	solenoid_init();
     5c4:	28 d3       	rcall	.+1616   	; 0xc16 <solenoid_init>
	motor_move_dc(0);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	f5 d0       	rcall	.+490    	; 0x7b6 <motor_move_dc>
	sei(); //enable the use of interrupts
     5cc:	78 94       	sei
	
	motor_move_dc_with_pid(0);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	29 d1       	rcall	.+594    	; 0x826 <motor_move_dc_with_pid>
	
	Position position_received = {0,0,0};
     5d4:	e1 2c       	mov	r14, r1
     5d6:	f1 2c       	mov	r15, r1
     5d8:	a1 2c       	mov	r10, r1
     5da:	b1 2c       	mov	r11, r1
	Msg msg_received;
	int score = 0;
	int z_released = 1;
     5dc:	cc 24       	eor	r12, r12
     5de:	c3 94       	inc	r12
     5e0:	d1 2c       	mov	r13, r1
		switch (msg_received.id){
			case 1: //For short strings
				printf("%s",msg_received.data);
				break;
			case 13: //For sending integers
				printf("%d", *(int*)msg_received.data);
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f1 e3       	ldi	r31, 0x31	; 49
     5e6:	6f 2e       	mov	r6, r31
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	7f 2e       	mov	r7, r31
     5ec:	f0 2d       	mov	r31, r0
				break;
			case 42: //For sending positions
				position_received = *(Position*)msg_received.data;
				break;
			default:
				printf("ID unknown\r");
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f4 e3       	ldi	r31, 0x34	; 52
     5f2:	4f 2e       	mov	r4, r31
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	5f 2e       	mov	r5, r31
     5f8:	f0 2d       	mov	r31, r0
		//CAN RECEIVE
		msg_received = can_receive();
		
		switch (msg_received.id){
			case 1: //For short strings
				printf("%s",msg_received.data);
     5fa:	0f 2e       	mov	r0, r31
     5fc:	fe e2       	ldi	r31, 0x2E	; 46
     5fe:	2f 2e       	mov	r2, r31
     600:	f2 e0       	ldi	r31, 0x02	; 2
     602:	3f 2e       	mov	r3, r31
     604:	f0 2d       	mov	r31, r0
		
		motor_move_servo(((-(float)position_received.y) * 1.2 / 200.0) + 1.5); //Maps -100,100 to 0.9,2.1

		if (position_received.z == 1 && z_released == 1 && solenoid_timer == 0){
			solenoid_kick();
			z_released = 0;
     606:	81 2c       	mov	r8, r1
     608:	91 2c       	mov	r9, r1
	int z_released = 1;
	
	while(1)
	{
		//CAN RECEIVE
		msg_received = can_receive();
     60a:	56 de       	rcall	.-852    	; 0x2b8 <can_receive>
     60c:	29 83       	std	Y+1, r18	; 0x01
     60e:	3a 83       	std	Y+2, r19	; 0x02
     610:	4b 83       	std	Y+3, r20	; 0x03
     612:	5c 83       	std	Y+4, r21	; 0x04
     614:	6d 83       	std	Y+5, r22	; 0x05
     616:	7e 83       	std	Y+6, r23	; 0x06
     618:	0d 81       	ldd	r16, Y+5	; 0x05
     61a:	1e 81       	ldd	r17, Y+6	; 0x06
		
		switch (msg_received.id){
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	8d 30       	cpi	r24, 0x0D	; 13
     622:	91 05       	cpc	r25, r1
     624:	79 f0       	breq	.+30     	; 0x644 <main+0xa6>
     626:	8a 32       	cpi	r24, 0x2A	; 42
     628:	91 05       	cpc	r25, r1
     62a:	c9 f0       	breq	.+50     	; 0x65e <main+0xc0>
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	e9 f4       	brne	.+58     	; 0x66a <main+0xcc>
			case 1: //For short strings
				printf("%s",msg_received.data);
     630:	1f 93       	push	r17
     632:	0f 93       	push	r16
     634:	3f 92       	push	r3
     636:	2f 92       	push	r2
     638:	ab d7       	rcall	.+3926   	; 0x1590 <printf>
				break;
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	18 c0       	rjmp	.+48     	; 0x674 <main+0xd6>
			case 13: //For sending integers
				printf("%d", *(int*)msg_received.data);
     644:	f8 01       	movw	r30, r16
     646:	81 81       	ldd	r24, Z+1	; 0x01
     648:	8f 93       	push	r24
     64a:	80 81       	ld	r24, Z
     64c:	8f 93       	push	r24
     64e:	7f 92       	push	r7
     650:	6f 92       	push	r6
     652:	9e d7       	rcall	.+3900   	; 0x1590 <printf>
				break;
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0b c0       	rjmp	.+22     	; 0x674 <main+0xd6>
			case 42: //For sending positions
				position_received = *(Position*)msg_received.data;
     65e:	f8 01       	movw	r30, r16
     660:	a2 80       	ldd	r10, Z+2	; 0x02
     662:	b3 80       	ldd	r11, Z+3	; 0x03
     664:	e4 80       	ldd	r14, Z+4	; 0x04
     666:	f5 80       	ldd	r15, Z+5	; 0x05
				break;
     668:	05 c0       	rjmp	.+10     	; 0x674 <main+0xd6>
			default:
				printf("ID unknown\r");
     66a:	5f 92       	push	r5
     66c:	4f 92       	push	r4
     66e:	90 d7       	rcall	.+3872   	; 0x1590 <printf>
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
		}
		free(msg_received.data);
     674:	c8 01       	movw	r24, r16
     676:	b3 d6       	rcall	.+3430   	; 0x13de <free>
		
		
		//UPDATE MOTORS
		score += check_if_scored();
     678:	43 df       	rcall	.-378    	; 0x500 <check_if_scored>
		
		motor_move_servo(((-(float)position_received.y) * 1.2 / 200.0) + 1.5); //Maps -100,100 to 0.9,2.1
     67a:	b5 01       	movw	r22, r10
     67c:	88 27       	eor	r24, r24
     67e:	77 fd       	sbrc	r23, 7
     680:	80 95       	com	r24
     682:	98 2f       	mov	r25, r24
     684:	b9 d4       	rcall	.+2418   	; 0xff8 <__floatsisf>
     686:	90 58       	subi	r25, 0x80	; 128
     688:	2a e9       	ldi	r18, 0x9A	; 154
     68a:	39 e9       	ldi	r19, 0x99	; 153
     68c:	49 e9       	ldi	r20, 0x99	; 153
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	67 d5       	rcall	.+2766   	; 0x1160 <__mulsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	48 e4       	ldi	r20, 0x48	; 72
     698:	53 e4       	ldi	r21, 0x43	; 67
     69a:	13 d4       	rcall	.+2086   	; 0xec2 <__divsf3>
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 ec       	ldi	r20, 0xC0	; 192
     6a2:	5f e3       	ldi	r21, 0x3F	; 63
     6a4:	a6 d3       	rcall	.+1868   	; 0xdf2 <__addsf3>
     6a6:	e8 d0       	rcall	.+464    	; 0x878 <motor_move_servo>

		if (position_received.z == 1 && z_released == 1 && solenoid_timer == 0){
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	ef 16       	cp	r14, r31
     6ac:	f1 04       	cpc	r15, r1
     6ae:	69 f4       	brne	.+26     	; 0x6ca <main+0x12c>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	c8 16       	cp	r12, r24
     6b4:	d1 04       	cpc	r13, r1
     6b6:	79 f4       	brne	.+30     	; 0x6d6 <main+0x138>
     6b8:	80 91 42 02 	lds	r24, 0x0242
     6bc:	90 91 43 02 	lds	r25, 0x0243
     6c0:	89 2b       	or	r24, r25
     6c2:	49 f4       	brne	.+18     	; 0x6d6 <main+0x138>
			solenoid_kick();
     6c4:	bb d2       	rcall	.+1398   	; 0xc3c <solenoid_kick>
			z_released = 0;
     6c6:	64 01       	movw	r12, r8
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <main+0x138>
		}
		else if(position_received.z == 0){
     6ca:	e1 14       	cp	r14, r1
     6cc:	f1 04       	cpc	r15, r1
     6ce:	19 f4       	brne	.+6      	; 0x6d6 <main+0x138>
			z_released = 1;
     6d0:	cc 24       	eor	r12, r12
     6d2:	c3 94       	inc	r12
     6d4:	d1 2c       	mov	r13, r1
		}
		
		if (pid_timer == 1) {
     6d6:	80 91 44 02 	lds	r24, 0x0244
     6da:	90 91 45 02 	lds	r25, 0x0245
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <main+0x146>
     6e2:	93 cf       	rjmp	.-218    	; 0x60a <main+0x6c>
			motor_move_dc_with_pid(position_received.y);
     6e4:	c5 01       	movw	r24, r10
     6e6:	9f d0       	rcall	.+318    	; 0x826 <motor_move_dc_with_pid>
			pid_timer = 0;
     6e8:	90 92 45 02 	sts	0x0245, r9
     6ec:	80 92 44 02 	sts	0x0244, r8
     6f0:	8c cf       	rjmp	.-232    	; 0x60a <main+0x6c>

000006f2 <motor_encoder_reset>:
	double K_i = 0.00;	//0
	pid_Init(K_p, K_i, K_d, &pid);
}

void motor_encoder_reset() {
	PORTH &= ~(1 << PH6);
     6f2:	e2 e0       	ldi	r30, 0x02	; 2
     6f4:	f1 e0       	ldi	r31, 0x01	; 1
     6f6:	80 81       	ld	r24, Z
     6f8:	8f 7b       	andi	r24, 0xBF	; 191
     6fa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fc:	8a e6       	ldi	r24, 0x6A	; 106
     6fe:	8a 95       	dec	r24
     700:	f1 f7       	brne	.-4      	; 0x6fe <motor_encoder_reset+0xc>
     702:	00 c0       	rjmp	.+0      	; 0x704 <motor_encoder_reset+0x12>
	_delay_us(20);
	PORTH |= (1 << PH6);
     704:	80 81       	ld	r24, Z
     706:	80 64       	ori	r24, 0x40	; 64
     708:	80 83       	st	Z, r24
     70a:	08 95       	ret

0000070c <motor_init>:

//initialize PID
pidData_t pid;


void motor_init(){
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
	//MOTOR 
	DDRH |= (1 << PH1); //Set motor direction pin as output
     718:	e1 e0       	ldi	r30, 0x01	; 1
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	80 81       	ld	r24, Z
     71e:	82 60       	ori	r24, 0x02	; 2
     720:	80 83       	st	Z, r24
	DDRH |= (1 << DDH4); //Set motor enable pin as output
     722:	80 81       	ld	r24, Z
     724:	80 61       	ori	r24, 0x10	; 16
     726:	80 83       	st	Z, r24
	PORTH |= (1 << PH4); //Set motor enable pin high
     728:	a2 e0       	ldi	r26, 0x02	; 2
     72a:	b1 e0       	ldi	r27, 0x01	; 1
     72c:	8c 91       	ld	r24, X
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	8c 93       	st	X, r24
	
	//ENCODER
	DDRH |= (1 << PH5); //OE as output
     732:	80 81       	ld	r24, Z
     734:	80 62       	ori	r24, 0x20	; 32
     736:	80 83       	st	Z, r24
	DDRH |= (1 << PH3); //SEL as output
     738:	80 81       	ld	r24, Z
     73a:	88 60       	ori	r24, 0x08	; 8
     73c:	80 83       	st	Z, r24
	DDRH |= (1 << PH6); //RST as output
     73e:	80 81       	ld	r24, Z
     740:	80 64       	ori	r24, 0x40	; 64
     742:	80 83       	st	Z, r24
	DDRK = 0b00000000; //Encoder vals as input 
     744:	10 92 07 01 	sts	0x0107, r1
	motor_encoder_reset();
     748:	d4 df       	rcall	.-88     	; 0x6f2 <motor_encoder_reset>
	
	double K_p = 0.075;	//0.075
	double K_d = 0;		//0
	double K_i = 0.00;	//0
	pid_Init(K_p, K_i, K_d, &pid);
     74a:	0f 2e       	mov	r0, r31
     74c:	f5 e5       	ldi	r31, 0x55	; 85
     74e:	cf 2e       	mov	r12, r31
     750:	f2 e0       	ldi	r31, 0x02	; 2
     752:	df 2e       	mov	r13, r31
     754:	f0 2d       	mov	r31, r0
     756:	e1 2c       	mov	r14, r1
     758:	f1 2c       	mov	r15, r1
     75a:	87 01       	movw	r16, r14
     75c:	a8 01       	movw	r20, r16
     75e:	97 01       	movw	r18, r14
     760:	6a e9       	ldi	r22, 0x9A	; 154
     762:	79 e9       	ldi	r23, 0x99	; 153
     764:	89 e9       	ldi	r24, 0x99	; 153
     766:	9d e3       	ldi	r25, 0x3D	; 61
     768:	b8 d0       	rcall	.+368    	; 0x8da <pid_Init>
}
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	08 95       	ret

00000778 <motor_encoder_read>:
	_delay_us(20);
	PORTH |= (1 << PH6);
}

int motor_encoder_read(){
	PORTH &= ~(1 << PH5);
     778:	e2 e0       	ldi	r30, 0x02	; 2
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	80 81       	ld	r24, Z
     77e:	8f 7d       	andi	r24, 0xDF	; 223
     780:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH3); //Set sel low to get MSB
     782:	80 81       	ld	r24, Z
     784:	87 7f       	andi	r24, 0xF7	; 247
     786:	80 83       	st	Z, r24
     788:	2a e6       	ldi	r18, 0x6A	; 106
     78a:	2a 95       	dec	r18
     78c:	f1 f7       	brne	.-4      	; 0x78a <motor_encoder_read+0x12>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <motor_encoder_read+0x18>
	_delay_us(20); //mby?
	int encoder_val = (PINK << 8); //MSB
     790:	80 91 06 01 	lds	r24, 0x0106
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	98 2f       	mov	r25, r24
     798:	88 27       	eor	r24, r24
	PORTH |= (1 << PH3); //Set sel high to get LSB
     79a:	20 81       	ld	r18, Z
     79c:	28 60       	ori	r18, 0x08	; 8
     79e:	20 83       	st	Z, r18
     7a0:	2a e6       	ldi	r18, 0x6A	; 106
     7a2:	2a 95       	dec	r18
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <motor_encoder_read+0x2a>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <motor_encoder_read+0x30>
	_delay_us(20); //mby?
	encoder_val |= PINK;  
     7a8:	20 91 06 01 	lds	r18, 0x0106
	//MBY TOGGLE RESET?
	
	PORTH |= (1 << PH5);
     7ac:	30 81       	ld	r19, Z
     7ae:	30 62       	ori	r19, 0x20	; 32
     7b0:	30 83       	st	Z, r19
	return encoder_val;
}
     7b2:	82 2b       	or	r24, r18
     7b4:	08 95       	ret

000007b6 <motor_move_dc>:

void motor_move_dc(int discrete_voltage){
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <motor_move_dc+0x6>
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	2f ef       	ldi	r18, 0xFF	; 255
     7c4:	92 07       	cpc	r25, r18
     7c6:	14 f4       	brge	.+4      	; 0x7cc <motor_move_dc+0x16>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
     7cc:	8f 3f       	cpi	r24, 0xFF	; 255
     7ce:	91 05       	cpc	r25, r1
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <motor_move_dc+0x22>
     7d2:	14 f0       	brlt	.+4      	; 0x7d8 <motor_move_dc+0x22>
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if (discrete_voltage < -255){
		discrete_voltage = -255;
	}
	
	if (discrete_voltage >= 5){
     7d8:	85 30       	cpi	r24, 0x05	; 5
     7da:	91 05       	cpc	r25, r1
     7dc:	34 f0       	brlt	.+12     	; 0x7ea <motor_move_dc+0x34>
		PORTH |= (1 << PH1); //Set direction
     7de:	e2 e0       	ldi	r30, 0x02	; 2
     7e0:	f1 e0       	ldi	r31, 0x01	; 1
     7e2:	20 81       	ld	r18, Z
     7e4:	22 60       	ori	r18, 0x02	; 2
     7e6:	20 83       	st	Z, r18
     7e8:	0f c0       	rjmp	.+30     	; 0x808 <motor_move_dc+0x52>
		voltage = discrete_voltage;
	}
	else if (discrete_voltage < -5){
     7ea:	8b 3f       	cpi	r24, 0xFB	; 251
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	92 07       	cpc	r25, r18
     7f0:	4c f4       	brge	.+18     	; 0x804 <motor_move_dc+0x4e>
		PORTH &= ~(1 << PH1); //Set other direction
     7f2:	e2 e0       	ldi	r30, 0x02	; 2
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	20 81       	ld	r18, Z
     7f8:	2d 7f       	andi	r18, 0xFD	; 253
     7fa:	20 83       	st	Z, r18
		voltage = -discrete_voltage;
     7fc:	91 95       	neg	r25
     7fe:	81 95       	neg	r24
     800:	91 09       	sbc	r25, r1
     802:	02 c0       	rjmp	.+4      	; 0x808 <motor_move_dc+0x52>
	PORTH |= (1 << PH5);
	return encoder_val;
}

void motor_move_dc(int discrete_voltage){
	int voltage = 0;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	int dac_address = 0b0101000;
	char length = 3;
	char msg[3];
	msg[0] = ((dac_address << 1) | 0); //0 = write, 1 = read
     808:	90 e5       	ldi	r25, 0x50	; 80
     80a:	99 83       	std	Y+1, r25	; 0x01
	msg[1] = 0b00000000; //Command byte: R2, R1, R0, Rst, PD, A2, A1, A0
     80c:	1a 82       	std	Y+2, r1	; 0x02
	msg[2] = voltage; //Value of 0-255, maps to 0V-5V
     80e:	8b 83       	std	Y+3, r24	; 0x03
	TWI_Start_Transceiver_With_Data(msg, length);
     810:	63 e0       	ldi	r22, 0x03	; 3
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	46 d2       	rcall	.+1164   	; 0xca6 <TWI_Start_Transceiver_With_Data>
	
	//Just for fun, no ifs:
	//PORTH |= ((pos.y > 0) << PH1); //Set direction
	//int voltage = (abs(pos.y) > 10) * abs(pos.y); //Set voltage to magnitude of pos.y, or 0
}
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <motor_move_dc_with_pid>:

void motor_move_dc_with_pid(int position){
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
	motor_position_past = motor_position;
     82c:	80 91 4a 02 	lds	r24, 0x024A
     830:	90 91 4b 02 	lds	r25, 0x024B
     834:	90 93 49 02 	sts	0x0249, r25
     838:	80 93 48 02 	sts	0x0248, r24
	motor_position = motor_encoder_read();
     83c:	9d df       	rcall	.-198    	; 0x778 <motor_encoder_read>
     83e:	bc 01       	movw	r22, r24
     840:	90 93 4b 02 	sts	0x024B, r25
     844:	80 93 4a 02 	sts	0x024A, r24
	motor_speed = motor_position - motor_position_past; //normalize
     848:	80 91 48 02 	lds	r24, 0x0248
     84c:	90 91 49 02 	lds	r25, 0x0249
     850:	68 1b       	sub	r22, r24
     852:	79 0b       	sbc	r23, r25
     854:	70 93 47 02 	sts	0x0247, r23
     858:	60 93 46 02 	sts	0x0246, r22

	int discrete_voltage = pid_Controller(position*20, motor_speed, &pid);
     85c:	45 e5       	ldi	r20, 0x55	; 85
     85e:	52 e0       	ldi	r21, 0x02	; 2
     860:	84 e1       	ldi	r24, 0x14	; 20
     862:	28 2f       	mov	r18, r24
     864:	2c 9f       	mul	r18, r28
     866:	c0 01       	movw	r24, r0
     868:	2d 9f       	mul	r18, r29
     86a:	90 0d       	add	r25, r0
     86c:	11 24       	eor	r1, r1
     86e:	94 d0       	rcall	.+296    	; 0x998 <pid_Controller>

	motor_move_dc(discrete_voltage);
     870:	a2 df       	rcall	.-188    	; 0x7b6 <motor_move_dc>
	//To do: Read timer register to normalize time
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <motor_move_servo>:

void motor_move_servo(float ms){
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
	if(ms > 2.1){
     884:	26 e6       	ldi	r18, 0x66	; 102
     886:	36 e6       	ldi	r19, 0x66	; 102
     888:	46 e0       	ldi	r20, 0x06	; 6
     88a:	50 e4       	ldi	r21, 0x40	; 64
     88c:	65 d4       	rcall	.+2250   	; 0x1158 <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	54 f0       	brlt	.+20     	; 0x8a6 <motor_move_servo+0x2e>
		ms = 2.1;
	}
	else if (ms < 0.9){
     892:	26 e6       	ldi	r18, 0x66	; 102
     894:	36 e6       	ldi	r19, 0x66	; 102
     896:	46 e6       	ldi	r20, 0x66	; 102
     898:	5f e3       	ldi	r21, 0x3F	; 63
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0d d3       	rcall	.+1562   	; 0xeba <__cmpsf2>
     8a0:	88 23       	and	r24, r24
     8a2:	5c f0       	brlt	.+22     	; 0x8ba <motor_move_servo+0x42>
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <motor_move_servo+0x52>
	//To do: Read timer register to normalize time
}

void motor_move_servo(float ms){
	if(ms > 2.1){
		ms = 2.1;
     8a6:	0f 2e       	mov	r0, r31
     8a8:	f6 e6       	ldi	r31, 0x66	; 102
     8aa:	cf 2e       	mov	r12, r31
     8ac:	dc 2c       	mov	r13, r12
     8ae:	f6 e0       	ldi	r31, 0x06	; 6
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f0 e4       	ldi	r31, 0x40	; 64
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <motor_move_servo+0x52>
	}
	else if (ms < 0.9){
		ms = 0.9;
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f6 e6       	ldi	r31, 0x66	; 102
     8be:	cf 2e       	mov	r12, r31
     8c0:	dc 2c       	mov	r13, r12
     8c2:	ec 2c       	mov	r14, r12
     8c4:	ff e3       	ldi	r31, 0x3F	; 63
     8c6:	ff 2e       	mov	r15, r31
     8c8:	f0 2d       	mov	r31, r0
	}
	pwm_set_duty_cycle(ms);
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	4c d1       	rcall	.+664    	; 0xb68 <pwm_set_duty_cycle>
}
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	08 95       	ret

000008da <pid_Init>:
 *
 *  Calling this function will reset the integrator in the PID regulator.
 */
void pid_Reset_Integrator(pidData_t *pid_st)
{
	pid_st->sumError = 0;
     8da:	8f 92       	push	r8
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	49 01       	movw	r8, r18
     8f4:	5a 01       	movw	r10, r20
     8f6:	e6 01       	movw	r28, r12
     8f8:	1a 82       	std	Y+2, r1	; 0x02
     8fa:	1b 82       	std	Y+3, r1	; 0x03
     8fc:	1c 82       	std	Y+4, r1	; 0x04
     8fe:	1d 82       	std	Y+5, r1	; 0x05
     900:	19 82       	std	Y+1, r1	; 0x01
     902:	18 82       	st	Y, r1
     904:	6e 83       	std	Y+6, r22	; 0x06
     906:	7f 83       	std	Y+7, r23	; 0x07
     908:	88 87       	std	Y+8, r24	; 0x08
     90a:	99 87       	std	Y+9, r25	; 0x09
     90c:	2a 87       	std	Y+10, r18	; 0x0a
     90e:	3b 87       	std	Y+11, r19	; 0x0b
     910:	4c 87       	std	Y+12, r20	; 0x0c
     912:	5d 87       	std	Y+13, r21	; 0x0d
     914:	ee 86       	std	Y+14, r14	; 0x0e
     916:	ff 86       	std	Y+15, r15	; 0x0f
     918:	08 8b       	std	Y+16, r16	; 0x10
     91a:	19 8b       	std	Y+17, r17	; 0x11
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e8       	ldi	r20, 0x80	; 128
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	66 d2       	rcall	.+1228   	; 0xdf2 <__addsf3>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	7e ef       	ldi	r23, 0xFE	; 254
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	96 e4       	ldi	r25, 0x46	; 70
     932:	c7 d2       	rcall	.+1422   	; 0xec2 <__divsf3>
     934:	2e d3       	rcall	.+1628   	; 0xf92 <__fixsfsi>
     936:	7b 8b       	std	Y+19, r23	; 0x13
     938:	6a 8b       	std	Y+18, r22	; 0x12
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	5f e3       	ldi	r21, 0x3F	; 63
     942:	c5 01       	movw	r24, r10
     944:	b4 01       	movw	r22, r8
     946:	55 d2       	rcall	.+1194   	; 0xdf2 <__addsf3>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e8       	ldi	r24, 0x80	; 128
     952:	9e e4       	ldi	r25, 0x4E	; 78
     954:	b6 d2       	rcall	.+1388   	; 0xec2 <__divsf3>
     956:	1d d3       	rcall	.+1594   	; 0xf92 <__fixsfsi>
     958:	6c 8b       	std	Y+20, r22	; 0x14
     95a:	7d 8b       	std	Y+21, r23	; 0x15
     95c:	8e 8b       	std	Y+22, r24	; 0x16
     95e:	9f 8b       	std	Y+23, r25	; 0x17
     960:	83 e0       	ldi	r24, 0x03	; 3
     962:	80 93 90 00 	sts	0x0090, r24
     966:	8a e1       	ldi	r24, 0x1A	; 26
     968:	80 93 91 00 	sts	0x0091, r24
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	80 93 71 00 	sts	0x0071, r24
     972:	8e e4       	ldi	r24, 0x4E	; 78
     974:	80 93 99 00 	sts	0x0099, r24
     978:	80 e2       	ldi	r24, 0x20	; 32
     97a:	80 93 98 00 	sts	0x0098, r24
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	08 95       	ret

00000998 <pid_Controller>:
     998:	4f 92       	push	r4
     99a:	5f 92       	push	r5
     99c:	6f 92       	push	r6
     99e:	7f 92       	push	r7
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	8b 01       	movw	r16, r22
     9ba:	ea 01       	movw	r28, r20
     9bc:	6c 01       	movw	r12, r24
     9be:	c6 1a       	sub	r12, r22
     9c0:	d7 0a       	sbc	r13, r23
     9c2:	8a 89       	ldd	r24, Y+18	; 0x12
     9c4:	9b 89       	ldd	r25, Y+19	; 0x13
     9c6:	8c 15       	cp	r24, r12
     9c8:	9d 05       	cpc	r25, r13
     9ca:	a4 f0       	brlt	.+40     	; 0x9f4 <pid_Controller+0x5c>
     9cc:	91 95       	neg	r25
     9ce:	81 95       	neg	r24
     9d0:	91 09       	sbc	r25, r1
     9d2:	c8 16       	cp	r12, r24
     9d4:	d9 06       	cpc	r13, r25
     9d6:	c4 f0       	brlt	.+48     	; 0xa08 <pid_Controller+0x70>
     9d8:	b6 01       	movw	r22, r12
     9da:	88 27       	eor	r24, r24
     9dc:	77 fd       	sbrc	r23, 7
     9de:	80 95       	com	r24
     9e0:	98 2f       	mov	r25, r24
     9e2:	0a d3       	rcall	.+1556   	; 0xff8 <__floatsisf>
     9e4:	2e 81       	ldd	r18, Y+6	; 0x06
     9e6:	3f 81       	ldd	r19, Y+7	; 0x07
     9e8:	48 85       	ldd	r20, Y+8	; 0x08
     9ea:	59 85       	ldd	r21, Y+9	; 0x09
     9ec:	b9 d3       	rcall	.+1906   	; 0x1160 <__mulsf3>
     9ee:	4b 01       	movw	r8, r22
     9f0:	5c 01       	movw	r10, r24
     9f2:	13 c0       	rjmp	.+38     	; 0xa1a <pid_Controller+0x82>
     9f4:	0f 2e       	mov	r0, r31
     9f6:	81 2c       	mov	r8, r1
     9f8:	fe ef       	ldi	r31, 0xFE	; 254
     9fa:	9f 2e       	mov	r9, r31
     9fc:	aa 24       	eor	r10, r10
     9fe:	aa 94       	dec	r10
     a00:	f6 e4       	ldi	r31, 0x46	; 70
     a02:	bf 2e       	mov	r11, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <pid_Controller+0x82>
     a08:	0f 2e       	mov	r0, r31
     a0a:	81 2c       	mov	r8, r1
     a0c:	fe ef       	ldi	r31, 0xFE	; 254
     a0e:	9f 2e       	mov	r9, r31
     a10:	aa 24       	eor	r10, r10
     a12:	aa 94       	dec	r10
     a14:	f6 ec       	ldi	r31, 0xC6	; 198
     a16:	bf 2e       	mov	r11, r31
     a18:	f0 2d       	mov	r31, r0
     a1a:	ee 24       	eor	r14, r14
     a1c:	d7 fc       	sbrc	r13, 7
     a1e:	e0 94       	com	r14
     a20:	fe 2c       	mov	r15, r14
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	ac 81       	ldd	r26, Y+4	; 0x04
     a28:	bd 81       	ldd	r27, Y+5	; 0x05
     a2a:	bc 01       	movw	r22, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	6c 0d       	add	r22, r12
     a30:	7d 1d       	adc	r23, r13
     a32:	8e 1d       	adc	r24, r14
     a34:	9f 1d       	adc	r25, r15
     a36:	cc 88       	ldd	r12, Y+20	; 0x14
     a38:	dd 88       	ldd	r13, Y+21	; 0x15
     a3a:	ee 88       	ldd	r14, Y+22	; 0x16
     a3c:	ff 88       	ldd	r15, Y+23	; 0x17
     a3e:	c6 16       	cp	r12, r22
     a40:	d7 06       	cpc	r13, r23
     a42:	e8 06       	cpc	r14, r24
     a44:	f9 06       	cpc	r15, r25
     a46:	6c f4       	brge	.+26     	; 0xa62 <pid_Controller+0xca>
     a48:	ca 82       	std	Y+2, r12	; 0x02
     a4a:	db 82       	std	Y+3, r13	; 0x03
     a4c:	ec 82       	std	Y+4, r14	; 0x04
     a4e:	fd 82       	std	Y+5, r15	; 0x05
     a50:	0f 2e       	mov	r0, r31
     a52:	41 2c       	mov	r4, r1
     a54:	51 2c       	mov	r5, r1
     a56:	f0 e8       	ldi	r31, 0x80	; 128
     a58:	6f 2e       	mov	r6, r31
     a5a:	fe e4       	ldi	r31, 0x4E	; 78
     a5c:	7f 2e       	mov	r7, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	26 c0       	rjmp	.+76     	; 0xaae <pid_Controller+0x116>
     a62:	f0 94       	com	r15
     a64:	e0 94       	com	r14
     a66:	d0 94       	com	r13
     a68:	c0 94       	com	r12
     a6a:	c1 1c       	adc	r12, r1
     a6c:	d1 1c       	adc	r13, r1
     a6e:	e1 1c       	adc	r14, r1
     a70:	f1 1c       	adc	r15, r1
     a72:	6c 15       	cp	r22, r12
     a74:	7d 05       	cpc	r23, r13
     a76:	8e 05       	cpc	r24, r14
     a78:	9f 05       	cpc	r25, r15
     a7a:	6c f4       	brge	.+26     	; 0xa96 <pid_Controller+0xfe>
     a7c:	ca 82       	std	Y+2, r12	; 0x02
     a7e:	db 82       	std	Y+3, r13	; 0x03
     a80:	ec 82       	std	Y+4, r14	; 0x04
     a82:	fd 82       	std	Y+5, r15	; 0x05
     a84:	0f 2e       	mov	r0, r31
     a86:	41 2c       	mov	r4, r1
     a88:	51 2c       	mov	r5, r1
     a8a:	f0 e8       	ldi	r31, 0x80	; 128
     a8c:	6f 2e       	mov	r6, r31
     a8e:	fe ec       	ldi	r31, 0xCE	; 206
     a90:	7f 2e       	mov	r7, r31
     a92:	f0 2d       	mov	r31, r0
     a94:	0c c0       	rjmp	.+24     	; 0xaae <pid_Controller+0x116>
     a96:	6a 83       	std	Y+2, r22	; 0x02
     a98:	7b 83       	std	Y+3, r23	; 0x03
     a9a:	8c 83       	std	Y+4, r24	; 0x04
     a9c:	9d 83       	std	Y+5, r25	; 0x05
     a9e:	ac d2       	rcall	.+1368   	; 0xff8 <__floatsisf>
     aa0:	2a 85       	ldd	r18, Y+10	; 0x0a
     aa2:	3b 85       	ldd	r19, Y+11	; 0x0b
     aa4:	4c 85       	ldd	r20, Y+12	; 0x0c
     aa6:	5d 85       	ldd	r21, Y+13	; 0x0d
     aa8:	5b d3       	rcall	.+1718   	; 0x1160 <__mulsf3>
     aaa:	2b 01       	movw	r4, r22
     aac:	3c 01       	movw	r6, r24
     aae:	68 81       	ld	r22, Y
     ab0:	79 81       	ldd	r23, Y+1	; 0x01
     ab2:	60 1b       	sub	r22, r16
     ab4:	71 0b       	sbc	r23, r17
     ab6:	88 27       	eor	r24, r24
     ab8:	77 fd       	sbrc	r23, 7
     aba:	80 95       	com	r24
     abc:	98 2f       	mov	r25, r24
     abe:	9c d2       	rcall	.+1336   	; 0xff8 <__floatsisf>
     ac0:	2e 85       	ldd	r18, Y+14	; 0x0e
     ac2:	3f 85       	ldd	r19, Y+15	; 0x0f
     ac4:	48 89       	ldd	r20, Y+16	; 0x10
     ac6:	59 89       	ldd	r21, Y+17	; 0x11
     ac8:	4b d3       	rcall	.+1686   	; 0x1160 <__mulsf3>
     aca:	6b 01       	movw	r12, r22
     acc:	7c 01       	movw	r14, r24
     ace:	19 83       	std	Y+1, r17	; 0x01
     ad0:	08 83       	st	Y, r16
     ad2:	a3 01       	movw	r20, r6
     ad4:	92 01       	movw	r18, r4
     ad6:	c5 01       	movw	r24, r10
     ad8:	b4 01       	movw	r22, r8
     ada:	8b d1       	rcall	.+790    	; 0xdf2 <__addsf3>
     adc:	a7 01       	movw	r20, r14
     ade:	96 01       	movw	r18, r12
     ae0:	88 d1       	rcall	.+784    	; 0xdf2 <__addsf3>
     ae2:	57 d2       	rcall	.+1198   	; 0xf92 <__fixsfsi>
     ae4:	46 2f       	mov	r20, r22
     ae6:	57 2f       	mov	r21, r23
     ae8:	68 2f       	mov	r22, r24
     aea:	79 2f       	mov	r23, r25
     aec:	41 30       	cpi	r20, 0x01	; 1
     aee:	80 e8       	ldi	r24, 0x80	; 128
     af0:	58 07       	cpc	r21, r24
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	68 07       	cpc	r22, r24
     af6:	78 07       	cpc	r23, r24
     af8:	24 f4       	brge	.+8      	; 0xb02 <pid_Controller+0x16a>
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	50 e8       	ldi	r21, 0x80	; 128
     afe:	6f ef       	ldi	r22, 0xFF	; 255
     b00:	7f ef       	ldi	r23, 0xFF	; 255
     b02:	41 15       	cp	r20, r1
     b04:	80 e8       	ldi	r24, 0x80	; 128
     b06:	58 07       	cpc	r21, r24
     b08:	61 05       	cpc	r22, r1
     b0a:	71 05       	cpc	r23, r1
     b0c:	24 f0       	brlt	.+8      	; 0xb16 <pid_Controller+0x17e>
     b0e:	4f ef       	ldi	r20, 0xFF	; 255
     b10:	5f e7       	ldi	r21, 0x7F	; 127
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	88 27       	eor	r24, r24
     b18:	99 27       	eor	r25, r25
     b1a:	84 1b       	sub	r24, r20
     b1c:	95 0b       	sbc	r25, r21
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	5f 90       	pop	r5
     b3c:	4f 90       	pop	r4
     b3e:	08 95       	ret

00000b40 <__vector_32>:
}


ISR(TIMER3_COMPA_vect){ //PID timer - called with interval 0.01s
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
	pid_timer = 1;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 45 02 	sts	0x0245, r25
     b56:	80 93 44 02 	sts	0x0244, r24
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <pwm_set_duty_cycle>:
     b68:	8f 92       	push	r8
     b6a:	9f 92       	push	r9
     b6c:	af 92       	push	r10
     b6e:	bf 92       	push	r11
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	6b 01       	movw	r12, r22
     b7a:	7c 01       	movw	r14, r24
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 ea       	ldi	r20, 0xA0	; 160
     b82:	51 e4       	ldi	r21, 0x41	; 65
     b84:	9a d1       	rcall	.+820    	; 0xeba <__cmpsf2>
     b86:	18 16       	cp	r1, r24
     b88:	14 f1       	brlt	.+68     	; 0xbce <pwm_set_duty_cycle+0x66>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	a9 01       	movw	r20, r18
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	e1 d2       	rcall	.+1474   	; 0x1158 <__gesf2>
     b96:	88 23       	and	r24, r24
     b98:	d4 f0       	brlt	.+52     	; 0xbce <pwm_set_duty_cycle+0x66>
     b9a:	60 91 4c 02 	lds	r22, 0x024C
     b9e:	70 91 4d 02 	lds	r23, 0x024D
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	26 d2       	rcall	.+1100   	; 0xff4 <__floatunsisf>
     ba8:	4b 01       	movw	r8, r22
     baa:	5c 01       	movw	r10, r24
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 ea       	ldi	r20, 0xA0	; 160
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	c7 01       	movw	r24, r14
     bb6:	b6 01       	movw	r22, r12
     bb8:	84 d1       	rcall	.+776    	; 0xec2 <__divsf3>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	c5 01       	movw	r24, r10
     bc0:	b4 01       	movw	r22, r8
     bc2:	ce d2       	rcall	.+1436   	; 0x1160 <__mulsf3>
     bc4:	eb d1       	rcall	.+982    	; 0xf9c <__fixunssfsi>
     bc6:	70 93 89 00 	sts	0x0089, r23
     bca:	60 93 88 00 	sts	0x0088, r22
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	08 95       	ret

00000be0 <pwm_init>:
     be0:	25 9a       	sbi	0x04, 5	; 4
     be2:	e0 e8       	ldi	r30, 0x80	; 128
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 68       	ori	r24, 0x82	; 130
     bea:	80 83       	st	Z, r24
     bec:	e1 e8       	ldi	r30, 0x81	; 129
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8a 61       	ori	r24, 0x1A	; 26
     bf4:	80 83       	st	Z, r24
     bf6:	8f e3       	ldi	r24, 0x3F	; 63
     bf8:	9c e9       	ldi	r25, 0x9C	; 156
     bfa:	90 93 4d 02 	sts	0x024D, r25
     bfe:	80 93 4c 02 	sts	0x024C, r24
     c02:	90 93 87 00 	sts	0x0087, r25
     c06:	80 93 86 00 	sts	0x0086, r24
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 ec       	ldi	r24, 0xC0	; 192
     c10:	9f e3       	ldi	r25, 0x3F	; 63
     c12:	aa cf       	rjmp	.-172    	; 0xb68 <pwm_set_duty_cycle>
     c14:	08 95       	ret

00000c16 <solenoid_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "../lib/interrupt_flags.h"

void solenoid_init(){
	DDRE |= (1 << PE4); 
     c16:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE |= (1 << PE4);
     c18:	74 9a       	sbi	0x0e, 4	; 14
	
	TCCR4A |= (1 << WGM41) | (1 << WGM40);				//Compare match mode
     c1a:	e0 ea       	ldi	r30, 0xA0	; 160
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	83 60       	ori	r24, 0x03	; 3
     c22:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM43) | (1 << WGM42) | (1 << CS42); //clock source to be used by the Timer/Counter clkI/O/64
     c24:	e1 ea       	ldi	r30, 0xA1	; 161
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8c 61       	ori	r24, 0x1C	; 28
     c2c:	80 83       	st	Z, r24
	OCR4AH = 0b01111010;
     c2e:	8a e7       	ldi	r24, 0x7A	; 122
     c30:	80 93 a9 00 	sts	0x00A9, r24
	OCR4AL = 0b10011000; //Sets the value for the compare match to 15000
     c34:	88 e9       	ldi	r24, 0x98	; 152
     c36:	80 93 a8 00 	sts	0x00A8, r24
     c3a:	08 95       	ret

00000c3c <solenoid_kick>:
}

//Turn solenoid on/off very quickly
void solenoid_kick(){
		PORTE &= ~(1 << PE4);
     c3c:	74 98       	cbi	0x0e, 4	; 14
		TIMSK4 |= (1 << OCIE4A);
     c3e:	e2 e7       	ldi	r30, 0x72	; 114
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	80 83       	st	Z, r24
		solenoid_timer = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	90 93 43 02 	sts	0x0243, r25
     c50:	80 93 42 02 	sts	0x0242, r24
     c54:	08 95       	ret

00000c56 <__vector_13>:
	 //delay is needed. Min 10ms
//To do: add interrupt based timer
}

ISR(TIMER2_COMPA_vect){
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	0b b6       	in	r0, 0x3b	; 59
     c62:	0f 92       	push	r0
     c64:	8f 93       	push	r24
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
	PORTE |= (1 << PE4);
     c6a:	74 9a       	sbi	0x0e, 4	; 14
	TIMSK4 &= ~(1 << OCIE4A);
     c6c:	e2 e7       	ldi	r30, 0x72	; 114
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8d 7f       	andi	r24, 0xFD	; 253
     c74:	80 83       	st	Z, r24
	solenoid_timer = 0;
     c76:	10 92 43 02 	sts	0x0243, r1
     c7a:	10 92 42 02 	sts	0x0242, r1
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	8f 91       	pop	r24
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <TWI_Master_Initialise>:
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	80 93 b8 00 	sts	0x00B8, r24
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	80 93 bb 00 	sts	0x00BB, r24
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	80 93 bc 00 	sts	0x00BC, r24
     ca4:	08 95       	ret

00000ca6 <TWI_Start_Transceiver_With_Data>:
     ca6:	ec eb       	ldi	r30, 0xBC	; 188
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	20 81       	ld	r18, Z
     cac:	20 fd       	sbrc	r18, 0
     cae:	fd cf       	rjmp	.-6      	; 0xcaa <TWI_Start_Transceiver_With_Data+0x4>
     cb0:	60 93 50 02 	sts	0x0250, r22
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 81       	ld	r18, Z
     cb8:	20 93 51 02 	sts	0x0251, r18
     cbc:	20 fd       	sbrc	r18, 0
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <TWI_Start_Transceiver_With_Data+0x32>
     cc0:	62 30       	cpi	r22, 0x02	; 2
     cc2:	50 f0       	brcs	.+20     	; 0xcd8 <TWI_Start_Transceiver_With_Data+0x32>
     cc4:	dc 01       	movw	r26, r24
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	e2 e5       	ldi	r30, 0x52	; 82
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	9d 91       	ld	r25, X+
     cd0:	91 93       	st	Z+, r25
     cd2:	8f 5f       	subi	r24, 0xFF	; 255
     cd4:	86 13       	cpse	r24, r22
     cd6:	fb cf       	rjmp	.-10     	; 0xcce <TWI_Start_Transceiver_With_Data+0x28>
     cd8:	10 92 4f 02 	sts	0x024F, r1
     cdc:	88 ef       	ldi	r24, 0xF8	; 248
     cde:	80 93 08 02 	sts	0x0208, r24
     ce2:	85 ea       	ldi	r24, 0xA5	; 165
     ce4:	80 93 bc 00 	sts	0x00BC, r24
     ce8:	08 95       	ret

00000cea <__vector_39>:
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	0b b6       	in	r0, 0x3b	; 59
     cf6:	0f 92       	push	r0
     cf8:	2f 93       	push	r18
     cfa:	3f 93       	push	r19
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
     d08:	80 91 b9 00 	lds	r24, 0x00B9
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	fc 01       	movw	r30, r24
     d10:	38 97       	sbiw	r30, 0x08	; 8
     d12:	e1 35       	cpi	r30, 0x51	; 81
     d14:	f1 05       	cpc	r31, r1
     d16:	08 f0       	brcs	.+2      	; 0xd1a <__vector_39+0x30>
     d18:	55 c0       	rjmp	.+170    	; 0xdc4 <__vector_39+0xda>
     d1a:	ee 58       	subi	r30, 0x8E	; 142
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	9f c2       	rjmp	.+1342   	; 0x125e <__tablejump2__>
     d20:	10 92 4e 02 	sts	0x024E, r1
     d24:	e0 91 4e 02 	lds	r30, 0x024E
     d28:	80 91 50 02 	lds	r24, 0x0250
     d2c:	e8 17       	cp	r30, r24
     d2e:	70 f4       	brcc	.+28     	; 0xd4c <__vector_39+0x62>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	8e 0f       	add	r24, r30
     d34:	80 93 4e 02 	sts	0x024E, r24
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	ef 5a       	subi	r30, 0xAF	; 175
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	80 81       	ld	r24, Z
     d40:	80 93 bb 00 	sts	0x00BB, r24
     d44:	85 e8       	ldi	r24, 0x85	; 133
     d46:	80 93 bc 00 	sts	0x00BC, r24
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__vector_39+0xe8>
     d4c:	80 91 4f 02 	lds	r24, 0x024F
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	80 93 4f 02 	sts	0x024F, r24
     d56:	84 e9       	ldi	r24, 0x94	; 148
     d58:	80 93 bc 00 	sts	0x00BC, r24
     d5c:	3a c0       	rjmp	.+116    	; 0xdd2 <__vector_39+0xe8>
     d5e:	e0 91 4e 02 	lds	r30, 0x024E
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	8e 0f       	add	r24, r30
     d66:	80 93 4e 02 	sts	0x024E, r24
     d6a:	80 91 bb 00 	lds	r24, 0x00BB
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	ef 5a       	subi	r30, 0xAF	; 175
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	80 83       	st	Z, r24
     d76:	20 91 4e 02 	lds	r18, 0x024E
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	80 91 50 02 	lds	r24, 0x0250
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	28 17       	cp	r18, r24
     d86:	39 07       	cpc	r19, r25
     d88:	24 f4       	brge	.+8      	; 0xd92 <__vector_39+0xa8>
     d8a:	85 ec       	ldi	r24, 0xC5	; 197
     d8c:	80 93 bc 00 	sts	0x00BC, r24
     d90:	20 c0       	rjmp	.+64     	; 0xdd2 <__vector_39+0xe8>
     d92:	85 e8       	ldi	r24, 0x85	; 133
     d94:	80 93 bc 00 	sts	0x00BC, r24
     d98:	1c c0       	rjmp	.+56     	; 0xdd2 <__vector_39+0xe8>
     d9a:	80 91 bb 00 	lds	r24, 0x00BB
     d9e:	e0 91 4e 02 	lds	r30, 0x024E
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	ef 5a       	subi	r30, 0xAF	; 175
     da6:	fd 4f       	sbci	r31, 0xFD	; 253
     da8:	80 83       	st	Z, r24
     daa:	80 91 4f 02 	lds	r24, 0x024F
     dae:	81 60       	ori	r24, 0x01	; 1
     db0:	80 93 4f 02 	sts	0x024F, r24
     db4:	84 e9       	ldi	r24, 0x94	; 148
     db6:	80 93 bc 00 	sts	0x00BC, r24
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <__vector_39+0xe8>
     dbc:	85 ea       	ldi	r24, 0xA5	; 165
     dbe:	80 93 bc 00 	sts	0x00BC, r24
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <__vector_39+0xe8>
     dc4:	80 91 b9 00 	lds	r24, 0x00B9
     dc8:	80 93 08 02 	sts	0x0208, r24
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	80 93 bc 00 	sts	0x00BC, r24
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	3f 91       	pop	r19
     de0:	2f 91       	pop	r18
     de2:	0f 90       	pop	r0
     de4:	0b be       	out	0x3b, r0	; 59
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <__subsf3>:
     df0:	50 58       	subi	r21, 0x80	; 128

00000df2 <__addsf3>:
     df2:	bb 27       	eor	r27, r27
     df4:	aa 27       	eor	r26, r26
     df6:	0e d0       	rcall	.+28     	; 0xe14 <__addsf3x>
     df8:	75 c1       	rjmp	.+746    	; 0x10e4 <__fp_round>
     dfa:	66 d1       	rcall	.+716    	; 0x10c8 <__fp_pscA>
     dfc:	30 f0       	brcs	.+12     	; 0xe0a <__addsf3+0x18>
     dfe:	6b d1       	rcall	.+726    	; 0x10d6 <__fp_pscB>
     e00:	20 f0       	brcs	.+8      	; 0xe0a <__addsf3+0x18>
     e02:	31 f4       	brne	.+12     	; 0xe10 <__addsf3+0x1e>
     e04:	9f 3f       	cpi	r25, 0xFF	; 255
     e06:	11 f4       	brne	.+4      	; 0xe0c <__addsf3+0x1a>
     e08:	1e f4       	brtc	.+6      	; 0xe10 <__addsf3+0x1e>
     e0a:	5b c1       	rjmp	.+694    	; 0x10c2 <__fp_nan>
     e0c:	0e f4       	brtc	.+2      	; 0xe10 <__addsf3+0x1e>
     e0e:	e0 95       	com	r30
     e10:	e7 fb       	bst	r30, 7
     e12:	51 c1       	rjmp	.+674    	; 0x10b6 <__fp_inf>

00000e14 <__addsf3x>:
     e14:	e9 2f       	mov	r30, r25
     e16:	77 d1       	rcall	.+750    	; 0x1106 <__fp_split3>
     e18:	80 f3       	brcs	.-32     	; 0xdfa <__addsf3+0x8>
     e1a:	ba 17       	cp	r27, r26
     e1c:	62 07       	cpc	r22, r18
     e1e:	73 07       	cpc	r23, r19
     e20:	84 07       	cpc	r24, r20
     e22:	95 07       	cpc	r25, r21
     e24:	18 f0       	brcs	.+6      	; 0xe2c <__addsf3x+0x18>
     e26:	71 f4       	brne	.+28     	; 0xe44 <__addsf3x+0x30>
     e28:	9e f5       	brtc	.+102    	; 0xe90 <__addsf3x+0x7c>
     e2a:	8f c1       	rjmp	.+798    	; 0x114a <__fp_zero>
     e2c:	0e f4       	brtc	.+2      	; 0xe30 <__addsf3x+0x1c>
     e2e:	e0 95       	com	r30
     e30:	0b 2e       	mov	r0, r27
     e32:	ba 2f       	mov	r27, r26
     e34:	a0 2d       	mov	r26, r0
     e36:	0b 01       	movw	r0, r22
     e38:	b9 01       	movw	r22, r18
     e3a:	90 01       	movw	r18, r0
     e3c:	0c 01       	movw	r0, r24
     e3e:	ca 01       	movw	r24, r20
     e40:	a0 01       	movw	r20, r0
     e42:	11 24       	eor	r1, r1
     e44:	ff 27       	eor	r31, r31
     e46:	59 1b       	sub	r21, r25
     e48:	99 f0       	breq	.+38     	; 0xe70 <__addsf3x+0x5c>
     e4a:	59 3f       	cpi	r21, 0xF9	; 249
     e4c:	50 f4       	brcc	.+20     	; 0xe62 <__addsf3x+0x4e>
     e4e:	50 3e       	cpi	r21, 0xE0	; 224
     e50:	68 f1       	brcs	.+90     	; 0xeac <__addsf3x+0x98>
     e52:	1a 16       	cp	r1, r26
     e54:	f0 40       	sbci	r31, 0x00	; 0
     e56:	a2 2f       	mov	r26, r18
     e58:	23 2f       	mov	r18, r19
     e5a:	34 2f       	mov	r19, r20
     e5c:	44 27       	eor	r20, r20
     e5e:	58 5f       	subi	r21, 0xF8	; 248
     e60:	f3 cf       	rjmp	.-26     	; 0xe48 <__addsf3x+0x34>
     e62:	46 95       	lsr	r20
     e64:	37 95       	ror	r19
     e66:	27 95       	ror	r18
     e68:	a7 95       	ror	r26
     e6a:	f0 40       	sbci	r31, 0x00	; 0
     e6c:	53 95       	inc	r21
     e6e:	c9 f7       	brne	.-14     	; 0xe62 <__addsf3x+0x4e>
     e70:	7e f4       	brtc	.+30     	; 0xe90 <__addsf3x+0x7c>
     e72:	1f 16       	cp	r1, r31
     e74:	ba 0b       	sbc	r27, r26
     e76:	62 0b       	sbc	r22, r18
     e78:	73 0b       	sbc	r23, r19
     e7a:	84 0b       	sbc	r24, r20
     e7c:	ba f0       	brmi	.+46     	; 0xeac <__addsf3x+0x98>
     e7e:	91 50       	subi	r25, 0x01	; 1
     e80:	a1 f0       	breq	.+40     	; 0xeaa <__addsf3x+0x96>
     e82:	ff 0f       	add	r31, r31
     e84:	bb 1f       	adc	r27, r27
     e86:	66 1f       	adc	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	c2 f7       	brpl	.-16     	; 0xe7e <__addsf3x+0x6a>
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <__addsf3x+0x98>
     e90:	ba 0f       	add	r27, r26
     e92:	62 1f       	adc	r22, r18
     e94:	73 1f       	adc	r23, r19
     e96:	84 1f       	adc	r24, r20
     e98:	48 f4       	brcc	.+18     	; 0xeac <__addsf3x+0x98>
     e9a:	87 95       	ror	r24
     e9c:	77 95       	ror	r23
     e9e:	67 95       	ror	r22
     ea0:	b7 95       	ror	r27
     ea2:	f7 95       	ror	r31
     ea4:	9e 3f       	cpi	r25, 0xFE	; 254
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <__addsf3x+0x96>
     ea8:	b3 cf       	rjmp	.-154    	; 0xe10 <__addsf3+0x1e>
     eaa:	93 95       	inc	r25
     eac:	88 0f       	add	r24, r24
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <__addsf3x+0x9e>
     eb0:	99 27       	eor	r25, r25
     eb2:	ee 0f       	add	r30, r30
     eb4:	97 95       	ror	r25
     eb6:	87 95       	ror	r24
     eb8:	08 95       	ret

00000eba <__cmpsf2>:
     eba:	d9 d0       	rcall	.+434    	; 0x106e <__fp_cmp>
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <__cmpsf2+0x6>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	08 95       	ret

00000ec2 <__divsf3>:
     ec2:	0c d0       	rcall	.+24     	; 0xedc <__divsf3x>
     ec4:	0f c1       	rjmp	.+542    	; 0x10e4 <__fp_round>
     ec6:	07 d1       	rcall	.+526    	; 0x10d6 <__fp_pscB>
     ec8:	40 f0       	brcs	.+16     	; 0xeda <__divsf3+0x18>
     eca:	fe d0       	rcall	.+508    	; 0x10c8 <__fp_pscA>
     ecc:	30 f0       	brcs	.+12     	; 0xeda <__divsf3+0x18>
     ece:	21 f4       	brne	.+8      	; 0xed8 <__divsf3+0x16>
     ed0:	5f 3f       	cpi	r21, 0xFF	; 255
     ed2:	19 f0       	breq	.+6      	; 0xeda <__divsf3+0x18>
     ed4:	f0 c0       	rjmp	.+480    	; 0x10b6 <__fp_inf>
     ed6:	51 11       	cpse	r21, r1
     ed8:	39 c1       	rjmp	.+626    	; 0x114c <__fp_szero>
     eda:	f3 c0       	rjmp	.+486    	; 0x10c2 <__fp_nan>

00000edc <__divsf3x>:
     edc:	14 d1       	rcall	.+552    	; 0x1106 <__fp_split3>
     ede:	98 f3       	brcs	.-26     	; 0xec6 <__divsf3+0x4>

00000ee0 <__divsf3_pse>:
     ee0:	99 23       	and	r25, r25
     ee2:	c9 f3       	breq	.-14     	; 0xed6 <__divsf3+0x14>
     ee4:	55 23       	and	r21, r21
     ee6:	b1 f3       	breq	.-20     	; 0xed4 <__divsf3+0x12>
     ee8:	95 1b       	sub	r25, r21
     eea:	55 0b       	sbc	r21, r21
     eec:	bb 27       	eor	r27, r27
     eee:	aa 27       	eor	r26, r26
     ef0:	62 17       	cp	r22, r18
     ef2:	73 07       	cpc	r23, r19
     ef4:	84 07       	cpc	r24, r20
     ef6:	38 f0       	brcs	.+14     	; 0xf06 <__divsf3_pse+0x26>
     ef8:	9f 5f       	subi	r25, 0xFF	; 255
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	44 1f       	adc	r20, r20
     f02:	aa 1f       	adc	r26, r26
     f04:	a9 f3       	breq	.-22     	; 0xef0 <__divsf3_pse+0x10>
     f06:	33 d0       	rcall	.+102    	; 0xf6e <__divsf3_pse+0x8e>
     f08:	0e 2e       	mov	r0, r30
     f0a:	3a f0       	brmi	.+14     	; 0xf1a <__divsf3_pse+0x3a>
     f0c:	e0 e8       	ldi	r30, 0x80	; 128
     f0e:	30 d0       	rcall	.+96     	; 0xf70 <__divsf3_pse+0x90>
     f10:	91 50       	subi	r25, 0x01	; 1
     f12:	50 40       	sbci	r21, 0x00	; 0
     f14:	e6 95       	lsr	r30
     f16:	00 1c       	adc	r0, r0
     f18:	ca f7       	brpl	.-14     	; 0xf0c <__divsf3_pse+0x2c>
     f1a:	29 d0       	rcall	.+82     	; 0xf6e <__divsf3_pse+0x8e>
     f1c:	fe 2f       	mov	r31, r30
     f1e:	27 d0       	rcall	.+78     	; 0xf6e <__divsf3_pse+0x8e>
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	88 1f       	adc	r24, r24
     f26:	bb 1f       	adc	r27, r27
     f28:	26 17       	cp	r18, r22
     f2a:	37 07       	cpc	r19, r23
     f2c:	48 07       	cpc	r20, r24
     f2e:	ab 07       	cpc	r26, r27
     f30:	b0 e8       	ldi	r27, 0x80	; 128
     f32:	09 f0       	breq	.+2      	; 0xf36 <__divsf3_pse+0x56>
     f34:	bb 0b       	sbc	r27, r27
     f36:	80 2d       	mov	r24, r0
     f38:	bf 01       	movw	r22, r30
     f3a:	ff 27       	eor	r31, r31
     f3c:	93 58       	subi	r25, 0x83	; 131
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	2a f0       	brmi	.+10     	; 0xf4c <__divsf3_pse+0x6c>
     f42:	9e 3f       	cpi	r25, 0xFE	; 254
     f44:	51 05       	cpc	r21, r1
     f46:	68 f0       	brcs	.+26     	; 0xf62 <__divsf3_pse+0x82>
     f48:	b6 c0       	rjmp	.+364    	; 0x10b6 <__fp_inf>
     f4a:	00 c1       	rjmp	.+512    	; 0x114c <__fp_szero>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	ec f3       	brlt	.-6      	; 0xf4a <__divsf3_pse+0x6a>
     f50:	98 3e       	cpi	r25, 0xE8	; 232
     f52:	dc f3       	brlt	.-10     	; 0xf4a <__divsf3_pse+0x6a>
     f54:	86 95       	lsr	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f7 95       	ror	r31
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	c9 f7       	brne	.-14     	; 0xf54 <__divsf3_pse+0x74>
     f62:	88 0f       	add	r24, r24
     f64:	91 1d       	adc	r25, r1
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	97 f9       	bld	r25, 7
     f6c:	08 95       	ret
     f6e:	e1 e0       	ldi	r30, 0x01	; 1
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	bb 1f       	adc	r27, r27
     f78:	62 17       	cp	r22, r18
     f7a:	73 07       	cpc	r23, r19
     f7c:	84 07       	cpc	r24, r20
     f7e:	ba 07       	cpc	r27, r26
     f80:	20 f0       	brcs	.+8      	; 0xf8a <__divsf3_pse+0xaa>
     f82:	62 1b       	sub	r22, r18
     f84:	73 0b       	sbc	r23, r19
     f86:	84 0b       	sbc	r24, r20
     f88:	ba 0b       	sbc	r27, r26
     f8a:	ee 1f       	adc	r30, r30
     f8c:	88 f7       	brcc	.-30     	; 0xf70 <__divsf3_pse+0x90>
     f8e:	e0 95       	com	r30
     f90:	08 95       	ret

00000f92 <__fixsfsi>:
     f92:	04 d0       	rcall	.+8      	; 0xf9c <__fixunssfsi>
     f94:	68 94       	set
     f96:	b1 11       	cpse	r27, r1
     f98:	d9 c0       	rjmp	.+434    	; 0x114c <__fp_szero>
     f9a:	08 95       	ret

00000f9c <__fixunssfsi>:
     f9c:	bc d0       	rcall	.+376    	; 0x1116 <__fp_splitA>
     f9e:	88 f0       	brcs	.+34     	; 0xfc2 <__fixunssfsi+0x26>
     fa0:	9f 57       	subi	r25, 0x7F	; 127
     fa2:	90 f0       	brcs	.+36     	; 0xfc8 <__fixunssfsi+0x2c>
     fa4:	b9 2f       	mov	r27, r25
     fa6:	99 27       	eor	r25, r25
     fa8:	b7 51       	subi	r27, 0x17	; 23
     faa:	a0 f0       	brcs	.+40     	; 0xfd4 <__fixunssfsi+0x38>
     fac:	d1 f0       	breq	.+52     	; 0xfe2 <__fixunssfsi+0x46>
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	1a f0       	brmi	.+6      	; 0xfbe <__fixunssfsi+0x22>
     fb8:	ba 95       	dec	r27
     fba:	c9 f7       	brne	.-14     	; 0xfae <__fixunssfsi+0x12>
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <__fixunssfsi+0x46>
     fbe:	b1 30       	cpi	r27, 0x01	; 1
     fc0:	81 f0       	breq	.+32     	; 0xfe2 <__fixunssfsi+0x46>
     fc2:	c3 d0       	rcall	.+390    	; 0x114a <__fp_zero>
     fc4:	b1 e0       	ldi	r27, 0x01	; 1
     fc6:	08 95       	ret
     fc8:	c0 c0       	rjmp	.+384    	; 0x114a <__fp_zero>
     fca:	67 2f       	mov	r22, r23
     fcc:	78 2f       	mov	r23, r24
     fce:	88 27       	eor	r24, r24
     fd0:	b8 5f       	subi	r27, 0xF8	; 248
     fd2:	39 f0       	breq	.+14     	; 0xfe2 <__fixunssfsi+0x46>
     fd4:	b9 3f       	cpi	r27, 0xF9	; 249
     fd6:	cc f3       	brlt	.-14     	; 0xfca <__fixunssfsi+0x2e>
     fd8:	86 95       	lsr	r24
     fda:	77 95       	ror	r23
     fdc:	67 95       	ror	r22
     fde:	b3 95       	inc	r27
     fe0:	d9 f7       	brne	.-10     	; 0xfd8 <__fixunssfsi+0x3c>
     fe2:	3e f4       	brtc	.+14     	; 0xff2 <__fixunssfsi+0x56>
     fe4:	90 95       	com	r25
     fe6:	80 95       	com	r24
     fe8:	70 95       	com	r23
     fea:	61 95       	neg	r22
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	8f 4f       	sbci	r24, 0xFF	; 255
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	08 95       	ret

00000ff4 <__floatunsisf>:
     ff4:	e8 94       	clt
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <__floatsisf+0x12>

00000ff8 <__floatsisf>:
     ff8:	97 fb       	bst	r25, 7
     ffa:	3e f4       	brtc	.+14     	; 0x100a <__floatsisf+0x12>
     ffc:	90 95       	com	r25
     ffe:	80 95       	com	r24
    1000:	70 95       	com	r23
    1002:	61 95       	neg	r22
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	99 23       	and	r25, r25
    100c:	a9 f0       	breq	.+42     	; 0x1038 <__floatsisf+0x40>
    100e:	f9 2f       	mov	r31, r25
    1010:	96 e9       	ldi	r25, 0x96	; 150
    1012:	bb 27       	eor	r27, r27
    1014:	93 95       	inc	r25
    1016:	f6 95       	lsr	r31
    1018:	87 95       	ror	r24
    101a:	77 95       	ror	r23
    101c:	67 95       	ror	r22
    101e:	b7 95       	ror	r27
    1020:	f1 11       	cpse	r31, r1
    1022:	f8 cf       	rjmp	.-16     	; 0x1014 <__floatsisf+0x1c>
    1024:	fa f4       	brpl	.+62     	; 0x1064 <__floatsisf+0x6c>
    1026:	bb 0f       	add	r27, r27
    1028:	11 f4       	brne	.+4      	; 0x102e <__floatsisf+0x36>
    102a:	60 ff       	sbrs	r22, 0
    102c:	1b c0       	rjmp	.+54     	; 0x1064 <__floatsisf+0x6c>
    102e:	6f 5f       	subi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	16 c0       	rjmp	.+44     	; 0x1064 <__floatsisf+0x6c>
    1038:	88 23       	and	r24, r24
    103a:	11 f0       	breq	.+4      	; 0x1040 <__floatsisf+0x48>
    103c:	96 e9       	ldi	r25, 0x96	; 150
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <__floatsisf+0x6a>
    1040:	77 23       	and	r23, r23
    1042:	21 f0       	breq	.+8      	; 0x104c <__floatsisf+0x54>
    1044:	9e e8       	ldi	r25, 0x8E	; 142
    1046:	87 2f       	mov	r24, r23
    1048:	76 2f       	mov	r23, r22
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <__floatsisf+0x5e>
    104c:	66 23       	and	r22, r22
    104e:	71 f0       	breq	.+28     	; 0x106c <__floatsisf+0x74>
    1050:	96 e8       	ldi	r25, 0x86	; 134
    1052:	86 2f       	mov	r24, r22
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	2a f0       	brmi	.+10     	; 0x1064 <__floatsisf+0x6c>
    105a:	9a 95       	dec	r25
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	da f7       	brpl	.-10     	; 0x105a <__floatsisf+0x62>
    1064:	88 0f       	add	r24, r24
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret

0000106e <__fp_cmp>:
    106e:	99 0f       	add	r25, r25
    1070:	00 08       	sbc	r0, r0
    1072:	55 0f       	add	r21, r21
    1074:	aa 0b       	sbc	r26, r26
    1076:	e0 e8       	ldi	r30, 0x80	; 128
    1078:	fe ef       	ldi	r31, 0xFE	; 254
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	e8 07       	cpc	r30, r24
    1080:	f9 07       	cpc	r31, r25
    1082:	c0 f0       	brcs	.+48     	; 0x10b4 <__fp_cmp+0x46>
    1084:	12 16       	cp	r1, r18
    1086:	13 06       	cpc	r1, r19
    1088:	e4 07       	cpc	r30, r20
    108a:	f5 07       	cpc	r31, r21
    108c:	98 f0       	brcs	.+38     	; 0x10b4 <__fp_cmp+0x46>
    108e:	62 1b       	sub	r22, r18
    1090:	73 0b       	sbc	r23, r19
    1092:	84 0b       	sbc	r24, r20
    1094:	95 0b       	sbc	r25, r21
    1096:	39 f4       	brne	.+14     	; 0x10a6 <__fp_cmp+0x38>
    1098:	0a 26       	eor	r0, r26
    109a:	61 f0       	breq	.+24     	; 0x10b4 <__fp_cmp+0x46>
    109c:	23 2b       	or	r18, r19
    109e:	24 2b       	or	r18, r20
    10a0:	25 2b       	or	r18, r21
    10a2:	21 f4       	brne	.+8      	; 0x10ac <__fp_cmp+0x3e>
    10a4:	08 95       	ret
    10a6:	0a 26       	eor	r0, r26
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__fp_cmp+0x3e>
    10aa:	a1 40       	sbci	r26, 0x01	; 1
    10ac:	a6 95       	lsr	r26
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	81 1d       	adc	r24, r1
    10b2:	81 1d       	adc	r24, r1
    10b4:	08 95       	ret

000010b6 <__fp_inf>:
    10b6:	97 f9       	bld	r25, 7
    10b8:	9f 67       	ori	r25, 0x7F	; 127
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	08 95       	ret

000010c2 <__fp_nan>:
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	80 ec       	ldi	r24, 0xC0	; 192
    10c6:	08 95       	ret

000010c8 <__fp_pscA>:
    10c8:	00 24       	eor	r0, r0
    10ca:	0a 94       	dec	r0
    10cc:	16 16       	cp	r1, r22
    10ce:	17 06       	cpc	r1, r23
    10d0:	18 06       	cpc	r1, r24
    10d2:	09 06       	cpc	r0, r25
    10d4:	08 95       	ret

000010d6 <__fp_pscB>:
    10d6:	00 24       	eor	r0, r0
    10d8:	0a 94       	dec	r0
    10da:	12 16       	cp	r1, r18
    10dc:	13 06       	cpc	r1, r19
    10de:	14 06       	cpc	r1, r20
    10e0:	05 06       	cpc	r0, r21
    10e2:	08 95       	ret

000010e4 <__fp_round>:
    10e4:	09 2e       	mov	r0, r25
    10e6:	03 94       	inc	r0
    10e8:	00 0c       	add	r0, r0
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__fp_round+0xc>
    10ec:	88 23       	and	r24, r24
    10ee:	52 f0       	brmi	.+20     	; 0x1104 <__fp_round+0x20>
    10f0:	bb 0f       	add	r27, r27
    10f2:	40 f4       	brcc	.+16     	; 0x1104 <__fp_round+0x20>
    10f4:	bf 2b       	or	r27, r31
    10f6:	11 f4       	brne	.+4      	; 0x10fc <__fp_round+0x18>
    10f8:	60 ff       	sbrs	r22, 0
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <__fp_round+0x20>
    10fc:	6f 5f       	subi	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	08 95       	ret

00001106 <__fp_split3>:
    1106:	57 fd       	sbrc	r21, 7
    1108:	90 58       	subi	r25, 0x80	; 128
    110a:	44 0f       	add	r20, r20
    110c:	55 1f       	adc	r21, r21
    110e:	59 f0       	breq	.+22     	; 0x1126 <__fp_splitA+0x10>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	71 f0       	breq	.+28     	; 0x1130 <__fp_splitA+0x1a>
    1114:	47 95       	ror	r20

00001116 <__fp_splitA>:
    1116:	88 0f       	add	r24, r24
    1118:	97 fb       	bst	r25, 7
    111a:	99 1f       	adc	r25, r25
    111c:	61 f0       	breq	.+24     	; 0x1136 <__fp_splitA+0x20>
    111e:	9f 3f       	cpi	r25, 0xFF	; 255
    1120:	79 f0       	breq	.+30     	; 0x1140 <__fp_splitA+0x2a>
    1122:	87 95       	ror	r24
    1124:	08 95       	ret
    1126:	12 16       	cp	r1, r18
    1128:	13 06       	cpc	r1, r19
    112a:	14 06       	cpc	r1, r20
    112c:	55 1f       	adc	r21, r21
    112e:	f2 cf       	rjmp	.-28     	; 0x1114 <__fp_split3+0xe>
    1130:	46 95       	lsr	r20
    1132:	f1 df       	rcall	.-30     	; 0x1116 <__fp_splitA>
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <__fp_splitA+0x30>
    1136:	16 16       	cp	r1, r22
    1138:	17 06       	cpc	r1, r23
    113a:	18 06       	cpc	r1, r24
    113c:	99 1f       	adc	r25, r25
    113e:	f1 cf       	rjmp	.-30     	; 0x1122 <__fp_splitA+0xc>
    1140:	86 95       	lsr	r24
    1142:	71 05       	cpc	r23, r1
    1144:	61 05       	cpc	r22, r1
    1146:	08 94       	sec
    1148:	08 95       	ret

0000114a <__fp_zero>:
    114a:	e8 94       	clt

0000114c <__fp_szero>:
    114c:	bb 27       	eor	r27, r27
    114e:	66 27       	eor	r22, r22
    1150:	77 27       	eor	r23, r23
    1152:	cb 01       	movw	r24, r22
    1154:	97 f9       	bld	r25, 7
    1156:	08 95       	ret

00001158 <__gesf2>:
    1158:	8a df       	rcall	.-236    	; 0x106e <__fp_cmp>
    115a:	08 f4       	brcc	.+2      	; 0x115e <__gesf2+0x6>
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__mulsf3>:
    1160:	0b d0       	rcall	.+22     	; 0x1178 <__mulsf3x>
    1162:	c0 cf       	rjmp	.-128    	; 0x10e4 <__fp_round>
    1164:	b1 df       	rcall	.-158    	; 0x10c8 <__fp_pscA>
    1166:	28 f0       	brcs	.+10     	; 0x1172 <__mulsf3+0x12>
    1168:	b6 df       	rcall	.-148    	; 0x10d6 <__fp_pscB>
    116a:	18 f0       	brcs	.+6      	; 0x1172 <__mulsf3+0x12>
    116c:	95 23       	and	r25, r21
    116e:	09 f0       	breq	.+2      	; 0x1172 <__mulsf3+0x12>
    1170:	a2 cf       	rjmp	.-188    	; 0x10b6 <__fp_inf>
    1172:	a7 cf       	rjmp	.-178    	; 0x10c2 <__fp_nan>
    1174:	11 24       	eor	r1, r1
    1176:	ea cf       	rjmp	.-44     	; 0x114c <__fp_szero>

00001178 <__mulsf3x>:
    1178:	c6 df       	rcall	.-116    	; 0x1106 <__fp_split3>
    117a:	a0 f3       	brcs	.-24     	; 0x1164 <__mulsf3+0x4>

0000117c <__mulsf3_pse>:
    117c:	95 9f       	mul	r25, r21
    117e:	d1 f3       	breq	.-12     	; 0x1174 <__mulsf3+0x14>
    1180:	95 0f       	add	r25, r21
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	55 1f       	adc	r21, r21
    1186:	62 9f       	mul	r22, r18
    1188:	f0 01       	movw	r30, r0
    118a:	72 9f       	mul	r23, r18
    118c:	bb 27       	eor	r27, r27
    118e:	f0 0d       	add	r31, r0
    1190:	b1 1d       	adc	r27, r1
    1192:	63 9f       	mul	r22, r19
    1194:	aa 27       	eor	r26, r26
    1196:	f0 0d       	add	r31, r0
    1198:	b1 1d       	adc	r27, r1
    119a:	aa 1f       	adc	r26, r26
    119c:	64 9f       	mul	r22, r20
    119e:	66 27       	eor	r22, r22
    11a0:	b0 0d       	add	r27, r0
    11a2:	a1 1d       	adc	r26, r1
    11a4:	66 1f       	adc	r22, r22
    11a6:	82 9f       	mul	r24, r18
    11a8:	22 27       	eor	r18, r18
    11aa:	b0 0d       	add	r27, r0
    11ac:	a1 1d       	adc	r26, r1
    11ae:	62 1f       	adc	r22, r18
    11b0:	73 9f       	mul	r23, r19
    11b2:	b0 0d       	add	r27, r0
    11b4:	a1 1d       	adc	r26, r1
    11b6:	62 1f       	adc	r22, r18
    11b8:	83 9f       	mul	r24, r19
    11ba:	a0 0d       	add	r26, r0
    11bc:	61 1d       	adc	r22, r1
    11be:	22 1f       	adc	r18, r18
    11c0:	74 9f       	mul	r23, r20
    11c2:	33 27       	eor	r19, r19
    11c4:	a0 0d       	add	r26, r0
    11c6:	61 1d       	adc	r22, r1
    11c8:	23 1f       	adc	r18, r19
    11ca:	84 9f       	mul	r24, r20
    11cc:	60 0d       	add	r22, r0
    11ce:	21 1d       	adc	r18, r1
    11d0:	82 2f       	mov	r24, r18
    11d2:	76 2f       	mov	r23, r22
    11d4:	6a 2f       	mov	r22, r26
    11d6:	11 24       	eor	r1, r1
    11d8:	9f 57       	subi	r25, 0x7F	; 127
    11da:	50 40       	sbci	r21, 0x00	; 0
    11dc:	8a f0       	brmi	.+34     	; 0x1200 <__mulsf3_pse+0x84>
    11de:	e1 f0       	breq	.+56     	; 0x1218 <__mulsf3_pse+0x9c>
    11e0:	88 23       	and	r24, r24
    11e2:	4a f0       	brmi	.+18     	; 0x11f6 <__mulsf3_pse+0x7a>
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	bb 1f       	adc	r27, r27
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	50 40       	sbci	r21, 0x00	; 0
    11f4:	a9 f7       	brne	.-22     	; 0x11e0 <__mulsf3_pse+0x64>
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	51 05       	cpc	r21, r1
    11fa:	70 f0       	brcs	.+28     	; 0x1218 <__mulsf3_pse+0x9c>
    11fc:	5c cf       	rjmp	.-328    	; 0x10b6 <__fp_inf>
    11fe:	a6 cf       	rjmp	.-180    	; 0x114c <__fp_szero>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	ec f3       	brlt	.-6      	; 0x11fe <__mulsf3_pse+0x82>
    1204:	98 3e       	cpi	r25, 0xE8	; 232
    1206:	dc f3       	brlt	.-10     	; 0x11fe <__mulsf3_pse+0x82>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b7 95       	ror	r27
    1210:	f7 95       	ror	r31
    1212:	e7 95       	ror	r30
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	c1 f7       	brne	.-16     	; 0x1208 <__mulsf3_pse+0x8c>
    1218:	fe 2b       	or	r31, r30
    121a:	88 0f       	add	r24, r24
    121c:	91 1d       	adc	r25, r1
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret

00001226 <__divmodsi4>:
    1226:	05 2e       	mov	r0, r21
    1228:	97 fb       	bst	r25, 7
    122a:	16 f4       	brtc	.+4      	; 0x1230 <__divmodsi4+0xa>
    122c:	00 94       	com	r0
    122e:	0f d0       	rcall	.+30     	; 0x124e <__negsi2>
    1230:	57 fd       	sbrc	r21, 7
    1232:	05 d0       	rcall	.+10     	; 0x123e <__divmodsi4_neg2>
    1234:	1a d0       	rcall	.+52     	; 0x126a <__udivmodsi4>
    1236:	07 fc       	sbrc	r0, 7
    1238:	02 d0       	rcall	.+4      	; 0x123e <__divmodsi4_neg2>
    123a:	46 f4       	brtc	.+16     	; 0x124c <__divmodsi4_exit>
    123c:	08 c0       	rjmp	.+16     	; 0x124e <__negsi2>

0000123e <__divmodsi4_neg2>:
    123e:	50 95       	com	r21
    1240:	40 95       	com	r20
    1242:	30 95       	com	r19
    1244:	21 95       	neg	r18
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	4f 4f       	sbci	r20, 0xFF	; 255
    124a:	5f 4f       	sbci	r21, 0xFF	; 255

0000124c <__divmodsi4_exit>:
    124c:	08 95       	ret

0000124e <__negsi2>:
    124e:	90 95       	com	r25
    1250:	80 95       	com	r24
    1252:	70 95       	com	r23
    1254:	61 95       	neg	r22
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__tablejump2__>:
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31

00001262 <__tablejump__>:
    1262:	05 90       	lpm	r0, Z+
    1264:	f4 91       	lpm	r31, Z
    1266:	e0 2d       	mov	r30, r0
    1268:	19 94       	eijmp

0000126a <__udivmodsi4>:
    126a:	a1 e2       	ldi	r26, 0x21	; 33
    126c:	1a 2e       	mov	r1, r26
    126e:	aa 1b       	sub	r26, r26
    1270:	bb 1b       	sub	r27, r27
    1272:	fd 01       	movw	r30, r26
    1274:	0d c0       	rjmp	.+26     	; 0x1290 <__udivmodsi4_ep>

00001276 <__udivmodsi4_loop>:
    1276:	aa 1f       	adc	r26, r26
    1278:	bb 1f       	adc	r27, r27
    127a:	ee 1f       	adc	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	a2 17       	cp	r26, r18
    1280:	b3 07       	cpc	r27, r19
    1282:	e4 07       	cpc	r30, r20
    1284:	f5 07       	cpc	r31, r21
    1286:	20 f0       	brcs	.+8      	; 0x1290 <__udivmodsi4_ep>
    1288:	a2 1b       	sub	r26, r18
    128a:	b3 0b       	sbc	r27, r19
    128c:	e4 0b       	sbc	r30, r20
    128e:	f5 0b       	sbc	r31, r21

00001290 <__udivmodsi4_ep>:
    1290:	66 1f       	adc	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	1a 94       	dec	r1
    129a:	69 f7       	brne	.-38     	; 0x1276 <__udivmodsi4_loop>
    129c:	60 95       	com	r22
    129e:	70 95       	com	r23
    12a0:	80 95       	com	r24
    12a2:	90 95       	com	r25
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	bd 01       	movw	r22, r26
    12aa:	cf 01       	movw	r24, r30
    12ac:	08 95       	ret

000012ae <malloc>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	91 05       	cpc	r25, r1
    12b6:	10 f4       	brcc	.+4      	; 0x12bc <malloc+0xe>
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	e0 91 6f 02 	lds	r30, 0x026F
    12c0:	f0 91 70 02 	lds	r31, 0x0270
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	a0 e0       	ldi	r26, 0x00	; 0
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	39 f1       	breq	.+78     	; 0x131e <malloc+0x70>
    12d0:	40 81       	ld	r20, Z
    12d2:	51 81       	ldd	r21, Z+1	; 0x01
    12d4:	48 17       	cp	r20, r24
    12d6:	59 07       	cpc	r21, r25
    12d8:	b8 f0       	brcs	.+46     	; 0x1308 <malloc+0x5a>
    12da:	48 17       	cp	r20, r24
    12dc:	59 07       	cpc	r21, r25
    12de:	71 f4       	brne	.+28     	; 0x12fc <malloc+0x4e>
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	10 97       	sbiw	r26, 0x00	; 0
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <malloc+0x44>
    12e8:	13 96       	adiw	r26, 0x03	; 3
    12ea:	9c 93       	st	X, r25
    12ec:	8e 93       	st	-X, r24
    12ee:	12 97       	sbiw	r26, 0x02	; 2
    12f0:	2c c0       	rjmp	.+88     	; 0x134a <malloc+0x9c>
    12f2:	90 93 70 02 	sts	0x0270, r25
    12f6:	80 93 6f 02 	sts	0x026F, r24
    12fa:	27 c0       	rjmp	.+78     	; 0x134a <malloc+0x9c>
    12fc:	21 15       	cp	r18, r1
    12fe:	31 05       	cpc	r19, r1
    1300:	31 f0       	breq	.+12     	; 0x130e <malloc+0x60>
    1302:	42 17       	cp	r20, r18
    1304:	53 07       	cpc	r21, r19
    1306:	18 f0       	brcs	.+6      	; 0x130e <malloc+0x60>
    1308:	a9 01       	movw	r20, r18
    130a:	db 01       	movw	r26, r22
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <malloc+0x62>
    130e:	ef 01       	movw	r28, r30
    1310:	9a 01       	movw	r18, r20
    1312:	bd 01       	movw	r22, r26
    1314:	df 01       	movw	r26, r30
    1316:	02 80       	ldd	r0, Z+2	; 0x02
    1318:	f3 81       	ldd	r31, Z+3	; 0x03
    131a:	e0 2d       	mov	r30, r0
    131c:	d7 cf       	rjmp	.-82     	; 0x12cc <malloc+0x1e>
    131e:	21 15       	cp	r18, r1
    1320:	31 05       	cpc	r19, r1
    1322:	f9 f0       	breq	.+62     	; 0x1362 <malloc+0xb4>
    1324:	28 1b       	sub	r18, r24
    1326:	39 0b       	sbc	r19, r25
    1328:	24 30       	cpi	r18, 0x04	; 4
    132a:	31 05       	cpc	r19, r1
    132c:	80 f4       	brcc	.+32     	; 0x134e <malloc+0xa0>
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	61 15       	cp	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	21 f0       	breq	.+8      	; 0x1340 <malloc+0x92>
    1338:	fb 01       	movw	r30, r22
    133a:	93 83       	std	Z+3, r25	; 0x03
    133c:	82 83       	std	Z+2, r24	; 0x02
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <malloc+0x9a>
    1340:	90 93 70 02 	sts	0x0270, r25
    1344:	80 93 6f 02 	sts	0x026F, r24
    1348:	fe 01       	movw	r30, r28
    134a:	32 96       	adiw	r30, 0x02	; 2
    134c:	44 c0       	rjmp	.+136    	; 0x13d6 <malloc+0x128>
    134e:	fe 01       	movw	r30, r28
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	81 93       	st	Z+, r24
    1356:	91 93       	st	Z+, r25
    1358:	22 50       	subi	r18, 0x02	; 2
    135a:	31 09       	sbc	r19, r1
    135c:	39 83       	std	Y+1, r19	; 0x01
    135e:	28 83       	st	Y, r18
    1360:	3a c0       	rjmp	.+116    	; 0x13d6 <malloc+0x128>
    1362:	20 91 6d 02 	lds	r18, 0x026D
    1366:	30 91 6e 02 	lds	r19, 0x026E
    136a:	23 2b       	or	r18, r19
    136c:	41 f4       	brne	.+16     	; 0x137e <malloc+0xd0>
    136e:	20 91 02 02 	lds	r18, 0x0202
    1372:	30 91 03 02 	lds	r19, 0x0203
    1376:	30 93 6e 02 	sts	0x026E, r19
    137a:	20 93 6d 02 	sts	0x026D, r18
    137e:	20 91 00 02 	lds	r18, 0x0200
    1382:	30 91 01 02 	lds	r19, 0x0201
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	41 f4       	brne	.+16     	; 0x139c <malloc+0xee>
    138c:	2d b7       	in	r18, 0x3d	; 61
    138e:	3e b7       	in	r19, 0x3e	; 62
    1390:	40 91 04 02 	lds	r20, 0x0204
    1394:	50 91 05 02 	lds	r21, 0x0205
    1398:	24 1b       	sub	r18, r20
    139a:	35 0b       	sbc	r19, r21
    139c:	e0 91 6d 02 	lds	r30, 0x026D
    13a0:	f0 91 6e 02 	lds	r31, 0x026E
    13a4:	e2 17       	cp	r30, r18
    13a6:	f3 07       	cpc	r31, r19
    13a8:	a0 f4       	brcc	.+40     	; 0x13d2 <malloc+0x124>
    13aa:	2e 1b       	sub	r18, r30
    13ac:	3f 0b       	sbc	r19, r31
    13ae:	28 17       	cp	r18, r24
    13b0:	39 07       	cpc	r19, r25
    13b2:	78 f0       	brcs	.+30     	; 0x13d2 <malloc+0x124>
    13b4:	ac 01       	movw	r20, r24
    13b6:	4e 5f       	subi	r20, 0xFE	; 254
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	24 17       	cp	r18, r20
    13bc:	35 07       	cpc	r19, r21
    13be:	48 f0       	brcs	.+18     	; 0x13d2 <malloc+0x124>
    13c0:	4e 0f       	add	r20, r30
    13c2:	5f 1f       	adc	r21, r31
    13c4:	50 93 6e 02 	sts	0x026E, r21
    13c8:	40 93 6d 02 	sts	0x026D, r20
    13cc:	81 93       	st	Z+, r24
    13ce:	91 93       	st	Z+, r25
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <malloc+0x128>
    13d2:	e0 e0       	ldi	r30, 0x00	; 0
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	cf 01       	movw	r24, r30
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <free>:
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <free+0xa>
    13e6:	87 c0       	rjmp	.+270    	; 0x14f6 <free+0x118>
    13e8:	fc 01       	movw	r30, r24
    13ea:	32 97       	sbiw	r30, 0x02	; 2
    13ec:	13 82       	std	Z+3, r1	; 0x03
    13ee:	12 82       	std	Z+2, r1	; 0x02
    13f0:	c0 91 6f 02 	lds	r28, 0x026F
    13f4:	d0 91 70 02 	lds	r29, 0x0270
    13f8:	20 97       	sbiw	r28, 0x00	; 0
    13fa:	81 f4       	brne	.+32     	; 0x141c <free+0x3e>
    13fc:	20 81       	ld	r18, Z
    13fe:	31 81       	ldd	r19, Z+1	; 0x01
    1400:	28 0f       	add	r18, r24
    1402:	39 1f       	adc	r19, r25
    1404:	80 91 6d 02 	lds	r24, 0x026D
    1408:	90 91 6e 02 	lds	r25, 0x026E
    140c:	82 17       	cp	r24, r18
    140e:	93 07       	cpc	r25, r19
    1410:	79 f5       	brne	.+94     	; 0x1470 <free+0x92>
    1412:	f0 93 6e 02 	sts	0x026E, r31
    1416:	e0 93 6d 02 	sts	0x026D, r30
    141a:	6d c0       	rjmp	.+218    	; 0x14f6 <free+0x118>
    141c:	de 01       	movw	r26, r28
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	ae 17       	cp	r26, r30
    1424:	bf 07       	cpc	r27, r31
    1426:	50 f4       	brcc	.+20     	; 0x143c <free+0x5e>
    1428:	12 96       	adiw	r26, 0x02	; 2
    142a:	4d 91       	ld	r20, X+
    142c:	5c 91       	ld	r21, X
    142e:	13 97       	sbiw	r26, 0x03	; 3
    1430:	9d 01       	movw	r18, r26
    1432:	41 15       	cp	r20, r1
    1434:	51 05       	cpc	r21, r1
    1436:	09 f1       	breq	.+66     	; 0x147a <free+0x9c>
    1438:	da 01       	movw	r26, r20
    143a:	f3 cf       	rjmp	.-26     	; 0x1422 <free+0x44>
    143c:	b3 83       	std	Z+3, r27	; 0x03
    143e:	a2 83       	std	Z+2, r26	; 0x02
    1440:	40 81       	ld	r20, Z
    1442:	51 81       	ldd	r21, Z+1	; 0x01
    1444:	84 0f       	add	r24, r20
    1446:	95 1f       	adc	r25, r21
    1448:	8a 17       	cp	r24, r26
    144a:	9b 07       	cpc	r25, r27
    144c:	71 f4       	brne	.+28     	; 0x146a <free+0x8c>
    144e:	8d 91       	ld	r24, X+
    1450:	9c 91       	ld	r25, X
    1452:	11 97       	sbiw	r26, 0x01	; 1
    1454:	84 0f       	add	r24, r20
    1456:	95 1f       	adc	r25, r21
    1458:	02 96       	adiw	r24, 0x02	; 2
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	12 96       	adiw	r26, 0x02	; 2
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	13 97       	sbiw	r26, 0x03	; 3
    1466:	93 83       	std	Z+3, r25	; 0x03
    1468:	82 83       	std	Z+2, r24	; 0x02
    146a:	21 15       	cp	r18, r1
    146c:	31 05       	cpc	r19, r1
    146e:	29 f4       	brne	.+10     	; 0x147a <free+0x9c>
    1470:	f0 93 70 02 	sts	0x0270, r31
    1474:	e0 93 6f 02 	sts	0x026F, r30
    1478:	3e c0       	rjmp	.+124    	; 0x14f6 <free+0x118>
    147a:	d9 01       	movw	r26, r18
    147c:	13 96       	adiw	r26, 0x03	; 3
    147e:	fc 93       	st	X, r31
    1480:	ee 93       	st	-X, r30
    1482:	12 97       	sbiw	r26, 0x02	; 2
    1484:	4d 91       	ld	r20, X+
    1486:	5d 91       	ld	r21, X+
    1488:	a4 0f       	add	r26, r20
    148a:	b5 1f       	adc	r27, r21
    148c:	ea 17       	cp	r30, r26
    148e:	fb 07       	cpc	r31, r27
    1490:	79 f4       	brne	.+30     	; 0x14b0 <free+0xd2>
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	02 96       	adiw	r24, 0x02	; 2
    149c:	d9 01       	movw	r26, r18
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	9c 93       	st	X, r25
    14a2:	8e 93       	st	-X, r24
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	13 96       	adiw	r26, 0x03	; 3
    14aa:	9c 93       	st	X, r25
    14ac:	8e 93       	st	-X, r24
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	e0 e0       	ldi	r30, 0x00	; 0
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <free+0xe4>
    14bc:	fe 01       	movw	r30, r28
    14be:	ec 01       	movw	r28, r24
    14c0:	f9 cf       	rjmp	.-14     	; 0x14b4 <free+0xd6>
    14c2:	ce 01       	movw	r24, r28
    14c4:	02 96       	adiw	r24, 0x02	; 2
    14c6:	28 81       	ld	r18, Y
    14c8:	39 81       	ldd	r19, Y+1	; 0x01
    14ca:	82 0f       	add	r24, r18
    14cc:	93 1f       	adc	r25, r19
    14ce:	20 91 6d 02 	lds	r18, 0x026D
    14d2:	30 91 6e 02 	lds	r19, 0x026E
    14d6:	28 17       	cp	r18, r24
    14d8:	39 07       	cpc	r19, r25
    14da:	69 f4       	brne	.+26     	; 0x14f6 <free+0x118>
    14dc:	30 97       	sbiw	r30, 0x00	; 0
    14de:	29 f4       	brne	.+10     	; 0x14ea <free+0x10c>
    14e0:	10 92 70 02 	sts	0x0270, r1
    14e4:	10 92 6f 02 	sts	0x026F, r1
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <free+0x110>
    14ea:	13 82       	std	Z+3, r1	; 0x03
    14ec:	12 82       	std	Z+2, r1	; 0x02
    14ee:	d0 93 6e 02 	sts	0x026E, r29
    14f2:	c0 93 6d 02 	sts	0x026D, r28
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <fdevopen>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ec 01       	movw	r28, r24
    1506:	8b 01       	movw	r16, r22
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	31 f4       	brne	.+12     	; 0x1518 <fdevopen+0x1c>
    150c:	61 15       	cp	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	19 f4       	brne	.+6      	; 0x1518 <fdevopen+0x1c>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	37 c0       	rjmp	.+110    	; 0x1586 <fdevopen+0x8a>
    1518:	6e e0       	ldi	r22, 0x0E	; 14
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	63 d2       	rcall	.+1222   	; 0x19e8 <calloc>
    1522:	fc 01       	movw	r30, r24
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	a9 f3       	breq	.-22     	; 0x1512 <fdevopen+0x16>
    1528:	80 e8       	ldi	r24, 0x80	; 128
    152a:	83 83       	std	Z+3, r24	; 0x03
    152c:	01 15       	cp	r16, r1
    152e:	11 05       	cpc	r17, r1
    1530:	71 f0       	breq	.+28     	; 0x154e <fdevopen+0x52>
    1532:	13 87       	std	Z+11, r17	; 0x0b
    1534:	02 87       	std	Z+10, r16	; 0x0a
    1536:	81 e8       	ldi	r24, 0x81	; 129
    1538:	83 83       	std	Z+3, r24	; 0x03
    153a:	80 91 71 02 	lds	r24, 0x0271
    153e:	90 91 72 02 	lds	r25, 0x0272
    1542:	89 2b       	or	r24, r25
    1544:	21 f4       	brne	.+8      	; 0x154e <fdevopen+0x52>
    1546:	f0 93 72 02 	sts	0x0272, r31
    154a:	e0 93 71 02 	sts	0x0271, r30
    154e:	20 97       	sbiw	r28, 0x00	; 0
    1550:	c9 f0       	breq	.+50     	; 0x1584 <fdevopen+0x88>
    1552:	d1 87       	std	Z+9, r29	; 0x09
    1554:	c0 87       	std	Z+8, r28	; 0x08
    1556:	83 81       	ldd	r24, Z+3	; 0x03
    1558:	82 60       	ori	r24, 0x02	; 2
    155a:	83 83       	std	Z+3, r24	; 0x03
    155c:	80 91 73 02 	lds	r24, 0x0273
    1560:	90 91 74 02 	lds	r25, 0x0274
    1564:	89 2b       	or	r24, r25
    1566:	71 f4       	brne	.+28     	; 0x1584 <fdevopen+0x88>
    1568:	f0 93 74 02 	sts	0x0274, r31
    156c:	e0 93 73 02 	sts	0x0273, r30
    1570:	80 91 75 02 	lds	r24, 0x0275
    1574:	90 91 76 02 	lds	r25, 0x0276
    1578:	89 2b       	or	r24, r25
    157a:	21 f4       	brne	.+8      	; 0x1584 <fdevopen+0x88>
    157c:	f0 93 76 02 	sts	0x0276, r31
    1580:	e0 93 75 02 	sts	0x0275, r30
    1584:	cf 01       	movw	r24, r30
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <printf>:
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	fe 01       	movw	r30, r28
    159a:	36 96       	adiw	r30, 0x06	; 6
    159c:	61 91       	ld	r22, Z+
    159e:	71 91       	ld	r23, Z+
    15a0:	af 01       	movw	r20, r30
    15a2:	80 91 73 02 	lds	r24, 0x0273
    15a6:	90 91 74 02 	lds	r25, 0x0274
    15aa:	30 d0       	rcall	.+96     	; 0x160c <vfprintf>
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <puts>:
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	e0 91 73 02 	lds	r30, 0x0273
    15be:	f0 91 74 02 	lds	r31, 0x0274
    15c2:	23 81       	ldd	r18, Z+3	; 0x03
    15c4:	21 ff       	sbrs	r18, 1
    15c6:	1b c0       	rjmp	.+54     	; 0x15fe <puts+0x4c>
    15c8:	ec 01       	movw	r28, r24
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	89 91       	ld	r24, Y+
    15d0:	60 91 73 02 	lds	r22, 0x0273
    15d4:	70 91 74 02 	lds	r23, 0x0274
    15d8:	db 01       	movw	r26, r22
    15da:	18 96       	adiw	r26, 0x08	; 8
    15dc:	ed 91       	ld	r30, X+
    15de:	fc 91       	ld	r31, X
    15e0:	19 97       	sbiw	r26, 0x09	; 9
    15e2:	88 23       	and	r24, r24
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <puts+0x40>
    15e6:	19 95       	eicall
    15e8:	89 2b       	or	r24, r25
    15ea:	89 f3       	breq	.-30     	; 0x15ce <puts+0x1c>
    15ec:	0f ef       	ldi	r16, 0xFF	; 255
    15ee:	1f ef       	ldi	r17, 0xFF	; 255
    15f0:	ee cf       	rjmp	.-36     	; 0x15ce <puts+0x1c>
    15f2:	8a e0       	ldi	r24, 0x0A	; 10
    15f4:	19 95       	eicall
    15f6:	89 2b       	or	r24, r25
    15f8:	11 f4       	brne	.+4      	; 0x15fe <puts+0x4c>
    15fa:	c8 01       	movw	r24, r16
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <puts+0x50>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <vfprintf>:
    160c:	2f 92       	push	r2
    160e:	3f 92       	push	r3
    1610:	4f 92       	push	r4
    1612:	5f 92       	push	r5
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	2c 97       	sbiw	r28, 0x0c	; 12
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	7c 01       	movw	r14, r24
    1642:	6b 01       	movw	r12, r22
    1644:	8a 01       	movw	r16, r20
    1646:	fc 01       	movw	r30, r24
    1648:	17 82       	std	Z+7, r1	; 0x07
    164a:	16 82       	std	Z+6, r1	; 0x06
    164c:	83 81       	ldd	r24, Z+3	; 0x03
    164e:	81 ff       	sbrs	r24, 1
    1650:	b0 c1       	rjmp	.+864    	; 0x19b2 <vfprintf+0x3a6>
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	4c 01       	movw	r8, r24
    1658:	f7 01       	movw	r30, r14
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	f6 01       	movw	r30, r12
    165e:	93 fd       	sbrc	r25, 3
    1660:	85 91       	lpm	r24, Z+
    1662:	93 ff       	sbrs	r25, 3
    1664:	81 91       	ld	r24, Z+
    1666:	6f 01       	movw	r12, r30
    1668:	88 23       	and	r24, r24
    166a:	09 f4       	brne	.+2      	; 0x166e <vfprintf+0x62>
    166c:	9e c1       	rjmp	.+828    	; 0x19aa <vfprintf+0x39e>
    166e:	85 32       	cpi	r24, 0x25	; 37
    1670:	39 f4       	brne	.+14     	; 0x1680 <vfprintf+0x74>
    1672:	93 fd       	sbrc	r25, 3
    1674:	85 91       	lpm	r24, Z+
    1676:	93 ff       	sbrs	r25, 3
    1678:	81 91       	ld	r24, Z+
    167a:	6f 01       	movw	r12, r30
    167c:	85 32       	cpi	r24, 0x25	; 37
    167e:	21 f4       	brne	.+8      	; 0x1688 <vfprintf+0x7c>
    1680:	b7 01       	movw	r22, r14
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	e8 d1       	rcall	.+976    	; 0x1a56 <fputc>
    1686:	e8 cf       	rjmp	.-48     	; 0x1658 <vfprintf+0x4c>
    1688:	51 2c       	mov	r5, r1
    168a:	31 2c       	mov	r3, r1
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	20 32       	cpi	r18, 0x20	; 32
    1690:	a0 f4       	brcc	.+40     	; 0x16ba <vfprintf+0xae>
    1692:	8b 32       	cpi	r24, 0x2B	; 43
    1694:	69 f0       	breq	.+26     	; 0x16b0 <vfprintf+0xa4>
    1696:	30 f4       	brcc	.+12     	; 0x16a4 <vfprintf+0x98>
    1698:	80 32       	cpi	r24, 0x20	; 32
    169a:	59 f0       	breq	.+22     	; 0x16b2 <vfprintf+0xa6>
    169c:	83 32       	cpi	r24, 0x23	; 35
    169e:	69 f4       	brne	.+26     	; 0x16ba <vfprintf+0xae>
    16a0:	20 61       	ori	r18, 0x10	; 16
    16a2:	2c c0       	rjmp	.+88     	; 0x16fc <vfprintf+0xf0>
    16a4:	8d 32       	cpi	r24, 0x2D	; 45
    16a6:	39 f0       	breq	.+14     	; 0x16b6 <vfprintf+0xaa>
    16a8:	80 33       	cpi	r24, 0x30	; 48
    16aa:	39 f4       	brne	.+14     	; 0x16ba <vfprintf+0xae>
    16ac:	21 60       	ori	r18, 0x01	; 1
    16ae:	26 c0       	rjmp	.+76     	; 0x16fc <vfprintf+0xf0>
    16b0:	22 60       	ori	r18, 0x02	; 2
    16b2:	24 60       	ori	r18, 0x04	; 4
    16b4:	23 c0       	rjmp	.+70     	; 0x16fc <vfprintf+0xf0>
    16b6:	28 60       	ori	r18, 0x08	; 8
    16b8:	21 c0       	rjmp	.+66     	; 0x16fc <vfprintf+0xf0>
    16ba:	27 fd       	sbrc	r18, 7
    16bc:	27 c0       	rjmp	.+78     	; 0x170c <vfprintf+0x100>
    16be:	30 ed       	ldi	r19, 0xD0	; 208
    16c0:	38 0f       	add	r19, r24
    16c2:	3a 30       	cpi	r19, 0x0A	; 10
    16c4:	78 f4       	brcc	.+30     	; 0x16e4 <vfprintf+0xd8>
    16c6:	26 ff       	sbrs	r18, 6
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0xca>
    16ca:	fa e0       	ldi	r31, 0x0A	; 10
    16cc:	5f 9e       	mul	r5, r31
    16ce:	30 0d       	add	r19, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	53 2e       	mov	r5, r19
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <vfprintf+0xf0>
    16d6:	8a e0       	ldi	r24, 0x0A	; 10
    16d8:	38 9e       	mul	r3, r24
    16da:	30 0d       	add	r19, r0
    16dc:	11 24       	eor	r1, r1
    16de:	33 2e       	mov	r3, r19
    16e0:	20 62       	ori	r18, 0x20	; 32
    16e2:	0c c0       	rjmp	.+24     	; 0x16fc <vfprintf+0xf0>
    16e4:	8e 32       	cpi	r24, 0x2E	; 46
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <vfprintf+0xe4>
    16e8:	26 fd       	sbrc	r18, 6
    16ea:	5f c1       	rjmp	.+702    	; 0x19aa <vfprintf+0x39e>
    16ec:	20 64       	ori	r18, 0x40	; 64
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0xf0>
    16f0:	8c 36       	cpi	r24, 0x6C	; 108
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <vfprintf+0xec>
    16f4:	20 68       	ori	r18, 0x80	; 128
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0xf0>
    16f8:	88 36       	cpi	r24, 0x68	; 104
    16fa:	41 f4       	brne	.+16     	; 0x170c <vfprintf+0x100>
    16fc:	f6 01       	movw	r30, r12
    16fe:	93 fd       	sbrc	r25, 3
    1700:	85 91       	lpm	r24, Z+
    1702:	93 ff       	sbrs	r25, 3
    1704:	81 91       	ld	r24, Z+
    1706:	6f 01       	movw	r12, r30
    1708:	81 11       	cpse	r24, r1
    170a:	c1 cf       	rjmp	.-126    	; 0x168e <vfprintf+0x82>
    170c:	98 2f       	mov	r25, r24
    170e:	9f 7d       	andi	r25, 0xDF	; 223
    1710:	95 54       	subi	r25, 0x45	; 69
    1712:	93 30       	cpi	r25, 0x03	; 3
    1714:	28 f4       	brcc	.+10     	; 0x1720 <vfprintf+0x114>
    1716:	0c 5f       	subi	r16, 0xFC	; 252
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	ff e3       	ldi	r31, 0x3F	; 63
    171c:	f9 83       	std	Y+1, r31	; 0x01
    171e:	0d c0       	rjmp	.+26     	; 0x173a <vfprintf+0x12e>
    1720:	83 36       	cpi	r24, 0x63	; 99
    1722:	31 f0       	breq	.+12     	; 0x1730 <vfprintf+0x124>
    1724:	83 37       	cpi	r24, 0x73	; 115
    1726:	71 f0       	breq	.+28     	; 0x1744 <vfprintf+0x138>
    1728:	83 35       	cpi	r24, 0x53	; 83
    172a:	09 f0       	breq	.+2      	; 0x172e <vfprintf+0x122>
    172c:	57 c0       	rjmp	.+174    	; 0x17dc <vfprintf+0x1d0>
    172e:	21 c0       	rjmp	.+66     	; 0x1772 <vfprintf+0x166>
    1730:	f8 01       	movw	r30, r16
    1732:	80 81       	ld	r24, Z
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	0e 5f       	subi	r16, 0xFE	; 254
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	44 24       	eor	r4, r4
    173c:	43 94       	inc	r4
    173e:	51 2c       	mov	r5, r1
    1740:	54 01       	movw	r10, r8
    1742:	14 c0       	rjmp	.+40     	; 0x176c <vfprintf+0x160>
    1744:	38 01       	movw	r6, r16
    1746:	f2 e0       	ldi	r31, 0x02	; 2
    1748:	6f 0e       	add	r6, r31
    174a:	71 1c       	adc	r7, r1
    174c:	f8 01       	movw	r30, r16
    174e:	a0 80       	ld	r10, Z
    1750:	b1 80       	ldd	r11, Z+1	; 0x01
    1752:	26 ff       	sbrs	r18, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x150>
    1756:	65 2d       	mov	r22, r5
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x154>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c5 01       	movw	r24, r10
    1762:	2c 87       	std	Y+12, r18	; 0x0c
    1764:	6d d1       	rcall	.+730    	; 0x1a40 <strnlen>
    1766:	2c 01       	movw	r4, r24
    1768:	83 01       	movw	r16, r6
    176a:	2c 85       	ldd	r18, Y+12	; 0x0c
    176c:	2f 77       	andi	r18, 0x7F	; 127
    176e:	22 2e       	mov	r2, r18
    1770:	16 c0       	rjmp	.+44     	; 0x179e <vfprintf+0x192>
    1772:	38 01       	movw	r6, r16
    1774:	f2 e0       	ldi	r31, 0x02	; 2
    1776:	6f 0e       	add	r6, r31
    1778:	71 1c       	adc	r7, r1
    177a:	f8 01       	movw	r30, r16
    177c:	a0 80       	ld	r10, Z
    177e:	b1 80       	ldd	r11, Z+1	; 0x01
    1780:	26 ff       	sbrs	r18, 6
    1782:	03 c0       	rjmp	.+6      	; 0x178a <vfprintf+0x17e>
    1784:	65 2d       	mov	r22, r5
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x182>
    178a:	6f ef       	ldi	r22, 0xFF	; 255
    178c:	7f ef       	ldi	r23, 0xFF	; 255
    178e:	c5 01       	movw	r24, r10
    1790:	2c 87       	std	Y+12, r18	; 0x0c
    1792:	44 d1       	rcall	.+648    	; 0x1a1c <strnlen_P>
    1794:	2c 01       	movw	r4, r24
    1796:	2c 85       	ldd	r18, Y+12	; 0x0c
    1798:	20 68       	ori	r18, 0x80	; 128
    179a:	22 2e       	mov	r2, r18
    179c:	83 01       	movw	r16, r6
    179e:	23 fc       	sbrc	r2, 3
    17a0:	19 c0       	rjmp	.+50     	; 0x17d4 <vfprintf+0x1c8>
    17a2:	83 2d       	mov	r24, r3
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	48 16       	cp	r4, r24
    17a8:	59 06       	cpc	r5, r25
    17aa:	a0 f4       	brcc	.+40     	; 0x17d4 <vfprintf+0x1c8>
    17ac:	b7 01       	movw	r22, r14
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	51 d1       	rcall	.+674    	; 0x1a56 <fputc>
    17b4:	3a 94       	dec	r3
    17b6:	f5 cf       	rjmp	.-22     	; 0x17a2 <vfprintf+0x196>
    17b8:	f5 01       	movw	r30, r10
    17ba:	27 fc       	sbrc	r2, 7
    17bc:	85 91       	lpm	r24, Z+
    17be:	27 fe       	sbrs	r2, 7
    17c0:	81 91       	ld	r24, Z+
    17c2:	5f 01       	movw	r10, r30
    17c4:	b7 01       	movw	r22, r14
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	46 d1       	rcall	.+652    	; 0x1a56 <fputc>
    17ca:	31 10       	cpse	r3, r1
    17cc:	3a 94       	dec	r3
    17ce:	f1 e0       	ldi	r31, 0x01	; 1
    17d0:	4f 1a       	sub	r4, r31
    17d2:	51 08       	sbc	r5, r1
    17d4:	41 14       	cp	r4, r1
    17d6:	51 04       	cpc	r5, r1
    17d8:	79 f7       	brne	.-34     	; 0x17b8 <vfprintf+0x1ac>
    17da:	de c0       	rjmp	.+444    	; 0x1998 <vfprintf+0x38c>
    17dc:	84 36       	cpi	r24, 0x64	; 100
    17de:	11 f0       	breq	.+4      	; 0x17e4 <vfprintf+0x1d8>
    17e0:	89 36       	cpi	r24, 0x69	; 105
    17e2:	31 f5       	brne	.+76     	; 0x1830 <vfprintf+0x224>
    17e4:	f8 01       	movw	r30, r16
    17e6:	27 ff       	sbrs	r18, 7
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <vfprintf+0x1ec>
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	0c 5f       	subi	r16, 0xFC	; 252
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	08 c0       	rjmp	.+16     	; 0x1808 <vfprintf+0x1fc>
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	88 27       	eor	r24, r24
    17fe:	77 fd       	sbrc	r23, 7
    1800:	80 95       	com	r24
    1802:	98 2f       	mov	r25, r24
    1804:	0e 5f       	subi	r16, 0xFE	; 254
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	2f 76       	andi	r18, 0x6F	; 111
    180a:	b2 2e       	mov	r11, r18
    180c:	97 ff       	sbrs	r25, 7
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x216>
    1810:	90 95       	com	r25
    1812:	80 95       	com	r24
    1814:	70 95       	com	r23
    1816:	61 95       	neg	r22
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	8f 4f       	sbci	r24, 0xFF	; 255
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	20 68       	ori	r18, 0x80	; 128
    1820:	b2 2e       	mov	r11, r18
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	a4 01       	movw	r20, r8
    1828:	48 d1       	rcall	.+656    	; 0x1aba <__ultoa_invert>
    182a:	a8 2e       	mov	r10, r24
    182c:	a8 18       	sub	r10, r8
    182e:	43 c0       	rjmp	.+134    	; 0x18b6 <vfprintf+0x2aa>
    1830:	85 37       	cpi	r24, 0x75	; 117
    1832:	29 f4       	brne	.+10     	; 0x183e <vfprintf+0x232>
    1834:	2f 7e       	andi	r18, 0xEF	; 239
    1836:	b2 2e       	mov	r11, r18
    1838:	2a e0       	ldi	r18, 0x0A	; 10
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	25 c0       	rjmp	.+74     	; 0x1888 <vfprintf+0x27c>
    183e:	f2 2f       	mov	r31, r18
    1840:	f9 7f       	andi	r31, 0xF9	; 249
    1842:	bf 2e       	mov	r11, r31
    1844:	8f 36       	cpi	r24, 0x6F	; 111
    1846:	c1 f0       	breq	.+48     	; 0x1878 <vfprintf+0x26c>
    1848:	18 f4       	brcc	.+6      	; 0x1850 <vfprintf+0x244>
    184a:	88 35       	cpi	r24, 0x58	; 88
    184c:	79 f0       	breq	.+30     	; 0x186c <vfprintf+0x260>
    184e:	ad c0       	rjmp	.+346    	; 0x19aa <vfprintf+0x39e>
    1850:	80 37       	cpi	r24, 0x70	; 112
    1852:	19 f0       	breq	.+6      	; 0x185a <vfprintf+0x24e>
    1854:	88 37       	cpi	r24, 0x78	; 120
    1856:	21 f0       	breq	.+8      	; 0x1860 <vfprintf+0x254>
    1858:	a8 c0       	rjmp	.+336    	; 0x19aa <vfprintf+0x39e>
    185a:	2f 2f       	mov	r18, r31
    185c:	20 61       	ori	r18, 0x10	; 16
    185e:	b2 2e       	mov	r11, r18
    1860:	b4 fe       	sbrs	r11, 4
    1862:	0d c0       	rjmp	.+26     	; 0x187e <vfprintf+0x272>
    1864:	8b 2d       	mov	r24, r11
    1866:	84 60       	ori	r24, 0x04	; 4
    1868:	b8 2e       	mov	r11, r24
    186a:	09 c0       	rjmp	.+18     	; 0x187e <vfprintf+0x272>
    186c:	24 ff       	sbrs	r18, 4
    186e:	0a c0       	rjmp	.+20     	; 0x1884 <vfprintf+0x278>
    1870:	9f 2f       	mov	r25, r31
    1872:	96 60       	ori	r25, 0x06	; 6
    1874:	b9 2e       	mov	r11, r25
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x278>
    1878:	28 e0       	ldi	r18, 0x08	; 8
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	05 c0       	rjmp	.+10     	; 0x1888 <vfprintf+0x27c>
    187e:	20 e1       	ldi	r18, 0x10	; 16
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x27c>
    1884:	20 e1       	ldi	r18, 0x10	; 16
    1886:	32 e0       	ldi	r19, 0x02	; 2
    1888:	f8 01       	movw	r30, r16
    188a:	b7 fe       	sbrs	r11, 7
    188c:	07 c0       	rjmp	.+14     	; 0x189c <vfprintf+0x290>
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	0c 5f       	subi	r16, 0xFC	; 252
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x29c>
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 5f       	subi	r16, 0xFE	; 254
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	a4 01       	movw	r20, r8
    18aa:	07 d1       	rcall	.+526    	; 0x1aba <__ultoa_invert>
    18ac:	a8 2e       	mov	r10, r24
    18ae:	a8 18       	sub	r10, r8
    18b0:	fb 2d       	mov	r31, r11
    18b2:	ff 77       	andi	r31, 0x7F	; 127
    18b4:	bf 2e       	mov	r11, r31
    18b6:	b6 fe       	sbrs	r11, 6
    18b8:	0b c0       	rjmp	.+22     	; 0x18d0 <vfprintf+0x2c4>
    18ba:	2b 2d       	mov	r18, r11
    18bc:	2e 7f       	andi	r18, 0xFE	; 254
    18be:	a5 14       	cp	r10, r5
    18c0:	50 f4       	brcc	.+20     	; 0x18d6 <vfprintf+0x2ca>
    18c2:	b4 fe       	sbrs	r11, 4
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <vfprintf+0x2ce>
    18c6:	b2 fc       	sbrc	r11, 2
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <vfprintf+0x2ce>
    18ca:	2b 2d       	mov	r18, r11
    18cc:	2e 7e       	andi	r18, 0xEE	; 238
    18ce:	05 c0       	rjmp	.+10     	; 0x18da <vfprintf+0x2ce>
    18d0:	7a 2c       	mov	r7, r10
    18d2:	2b 2d       	mov	r18, r11
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <vfprintf+0x2d0>
    18d6:	7a 2c       	mov	r7, r10
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <vfprintf+0x2d0>
    18da:	75 2c       	mov	r7, r5
    18dc:	24 ff       	sbrs	r18, 4
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <vfprintf+0x2ee>
    18e0:	fe 01       	movw	r30, r28
    18e2:	ea 0d       	add	r30, r10
    18e4:	f1 1d       	adc	r31, r1
    18e6:	80 81       	ld	r24, Z
    18e8:	80 33       	cpi	r24, 0x30	; 48
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <vfprintf+0x2e4>
    18ec:	29 7e       	andi	r18, 0xE9	; 233
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <vfprintf+0x2f6>
    18f0:	22 ff       	sbrs	r18, 2
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <vfprintf+0x2f4>
    18f4:	73 94       	inc	r7
    18f6:	73 94       	inc	r7
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <vfprintf+0x2f6>
    18fa:	82 2f       	mov	r24, r18
    18fc:	86 78       	andi	r24, 0x86	; 134
    18fe:	09 f0       	breq	.+2      	; 0x1902 <vfprintf+0x2f6>
    1900:	73 94       	inc	r7
    1902:	23 fd       	sbrc	r18, 3
    1904:	12 c0       	rjmp	.+36     	; 0x192a <vfprintf+0x31e>
    1906:	20 ff       	sbrs	r18, 0
    1908:	06 c0       	rjmp	.+12     	; 0x1916 <vfprintf+0x30a>
    190a:	5a 2c       	mov	r5, r10
    190c:	73 14       	cp	r7, r3
    190e:	18 f4       	brcc	.+6      	; 0x1916 <vfprintf+0x30a>
    1910:	53 0c       	add	r5, r3
    1912:	57 18       	sub	r5, r7
    1914:	73 2c       	mov	r7, r3
    1916:	73 14       	cp	r7, r3
    1918:	60 f4       	brcc	.+24     	; 0x1932 <vfprintf+0x326>
    191a:	b7 01       	movw	r22, r14
    191c:	80 e2       	ldi	r24, 0x20	; 32
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	2c 87       	std	Y+12, r18	; 0x0c
    1922:	99 d0       	rcall	.+306    	; 0x1a56 <fputc>
    1924:	73 94       	inc	r7
    1926:	2c 85       	ldd	r18, Y+12	; 0x0c
    1928:	f6 cf       	rjmp	.-20     	; 0x1916 <vfprintf+0x30a>
    192a:	73 14       	cp	r7, r3
    192c:	10 f4       	brcc	.+4      	; 0x1932 <vfprintf+0x326>
    192e:	37 18       	sub	r3, r7
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vfprintf+0x328>
    1932:	31 2c       	mov	r3, r1
    1934:	24 ff       	sbrs	r18, 4
    1936:	11 c0       	rjmp	.+34     	; 0x195a <vfprintf+0x34e>
    1938:	b7 01       	movw	r22, r14
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	2c 87       	std	Y+12, r18	; 0x0c
    1940:	8a d0       	rcall	.+276    	; 0x1a56 <fputc>
    1942:	2c 85       	ldd	r18, Y+12	; 0x0c
    1944:	22 ff       	sbrs	r18, 2
    1946:	16 c0       	rjmp	.+44     	; 0x1974 <vfprintf+0x368>
    1948:	21 ff       	sbrs	r18, 1
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <vfprintf+0x346>
    194c:	88 e5       	ldi	r24, 0x58	; 88
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x34a>
    1952:	88 e7       	ldi	r24, 0x78	; 120
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	b7 01       	movw	r22, r14
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <vfprintf+0x366>
    195a:	82 2f       	mov	r24, r18
    195c:	86 78       	andi	r24, 0x86	; 134
    195e:	51 f0       	breq	.+20     	; 0x1974 <vfprintf+0x368>
    1960:	21 fd       	sbrc	r18, 1
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x35c>
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	01 c0       	rjmp	.+2      	; 0x196a <vfprintf+0x35e>
    1968:	8b e2       	ldi	r24, 0x2B	; 43
    196a:	27 fd       	sbrc	r18, 7
    196c:	8d e2       	ldi	r24, 0x2D	; 45
    196e:	b7 01       	movw	r22, r14
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	71 d0       	rcall	.+226    	; 0x1a56 <fputc>
    1974:	a5 14       	cp	r10, r5
    1976:	30 f4       	brcc	.+12     	; 0x1984 <vfprintf+0x378>
    1978:	b7 01       	movw	r22, r14
    197a:	80 e3       	ldi	r24, 0x30	; 48
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	6b d0       	rcall	.+214    	; 0x1a56 <fputc>
    1980:	5a 94       	dec	r5
    1982:	f8 cf       	rjmp	.-16     	; 0x1974 <vfprintf+0x368>
    1984:	aa 94       	dec	r10
    1986:	f4 01       	movw	r30, r8
    1988:	ea 0d       	add	r30, r10
    198a:	f1 1d       	adc	r31, r1
    198c:	80 81       	ld	r24, Z
    198e:	b7 01       	movw	r22, r14
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	61 d0       	rcall	.+194    	; 0x1a56 <fputc>
    1994:	a1 10       	cpse	r10, r1
    1996:	f6 cf       	rjmp	.-20     	; 0x1984 <vfprintf+0x378>
    1998:	33 20       	and	r3, r3
    199a:	09 f4       	brne	.+2      	; 0x199e <vfprintf+0x392>
    199c:	5d ce       	rjmp	.-838    	; 0x1658 <vfprintf+0x4c>
    199e:	b7 01       	movw	r22, r14
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	58 d0       	rcall	.+176    	; 0x1a56 <fputc>
    19a6:	3a 94       	dec	r3
    19a8:	f7 cf       	rjmp	.-18     	; 0x1998 <vfprintf+0x38c>
    19aa:	f7 01       	movw	r30, r14
    19ac:	86 81       	ldd	r24, Z+6	; 0x06
    19ae:	97 81       	ldd	r25, Z+7	; 0x07
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <vfprintf+0x3aa>
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	9f ef       	ldi	r25, 0xFF	; 255
    19b6:	2c 96       	adiw	r28, 0x0c	; 12
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	bf 90       	pop	r11
    19d4:	af 90       	pop	r10
    19d6:	9f 90       	pop	r9
    19d8:	8f 90       	pop	r8
    19da:	7f 90       	pop	r7
    19dc:	6f 90       	pop	r6
    19de:	5f 90       	pop	r5
    19e0:	4f 90       	pop	r4
    19e2:	3f 90       	pop	r3
    19e4:	2f 90       	pop	r2
    19e6:	08 95       	ret

000019e8 <calloc>:
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	86 9f       	mul	r24, r22
    19f2:	80 01       	movw	r16, r0
    19f4:	87 9f       	mul	r24, r23
    19f6:	10 0d       	add	r17, r0
    19f8:	96 9f       	mul	r25, r22
    19fa:	10 0d       	add	r17, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	c8 01       	movw	r24, r16
    1a00:	56 dc       	rcall	.-1876   	; 0x12ae <malloc>
    1a02:	ec 01       	movw	r28, r24
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	21 f0       	breq	.+8      	; 0x1a10 <calloc+0x28>
    1a08:	a8 01       	movw	r20, r16
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	11 d0       	rcall	.+34     	; 0x1a32 <memset>
    1a10:	ce 01       	movw	r24, r28
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	08 95       	ret

00001a1c <strnlen_P>:
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	05 90       	lpm	r0, Z+
    1a20:	61 50       	subi	r22, 0x01	; 1
    1a22:	70 40       	sbci	r23, 0x00	; 0
    1a24:	01 10       	cpse	r0, r1
    1a26:	d8 f7       	brcc	.-10     	; 0x1a1e <strnlen_P+0x2>
    1a28:	80 95       	com	r24
    1a2a:	90 95       	com	r25
    1a2c:	8e 0f       	add	r24, r30
    1a2e:	9f 1f       	adc	r25, r31
    1a30:	08 95       	ret

00001a32 <memset>:
    1a32:	dc 01       	movw	r26, r24
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <memset+0x6>
    1a36:	6d 93       	st	X+, r22
    1a38:	41 50       	subi	r20, 0x01	; 1
    1a3a:	50 40       	sbci	r21, 0x00	; 0
    1a3c:	e0 f7       	brcc	.-8      	; 0x1a36 <memset+0x4>
    1a3e:	08 95       	ret

00001a40 <strnlen>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	61 50       	subi	r22, 0x01	; 1
    1a44:	70 40       	sbci	r23, 0x00	; 0
    1a46:	01 90       	ld	r0, Z+
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <fputc>:
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	18 2f       	mov	r17, r24
    1a60:	09 2f       	mov	r16, r25
    1a62:	eb 01       	movw	r28, r22
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 fd       	sbrc	r24, 1
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <fputc+0x1a>
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	20 c0       	rjmp	.+64     	; 0x1ab0 <fputc+0x5a>
    1a70:	82 ff       	sbrs	r24, 2
    1a72:	10 c0       	rjmp	.+32     	; 0x1a94 <fputc+0x3e>
    1a74:	4e 81       	ldd	r20, Y+6	; 0x06
    1a76:	5f 81       	ldd	r21, Y+7	; 0x07
    1a78:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7c:	42 17       	cp	r20, r18
    1a7e:	53 07       	cpc	r21, r19
    1a80:	7c f4       	brge	.+30     	; 0x1aa0 <fputc+0x4a>
    1a82:	e8 81       	ld	r30, Y
    1a84:	f9 81       	ldd	r31, Y+1	; 0x01
    1a86:	9f 01       	movw	r18, r30
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	39 83       	std	Y+1, r19	; 0x01
    1a8e:	28 83       	st	Y, r18
    1a90:	10 83       	st	Z, r17
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <fputc+0x4a>
    1a94:	e8 85       	ldd	r30, Y+8	; 0x08
    1a96:	f9 85       	ldd	r31, Y+9	; 0x09
    1a98:	81 2f       	mov	r24, r17
    1a9a:	19 95       	eicall
    1a9c:	89 2b       	or	r24, r25
    1a9e:	29 f7       	brne	.-54     	; 0x1a6a <fputc+0x14>
    1aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa2:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa4:	2f 5f       	subi	r18, 0xFF	; 255
    1aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa8:	3f 83       	std	Y+7, r19	; 0x07
    1aaa:	2e 83       	std	Y+6, r18	; 0x06
    1aac:	81 2f       	mov	r24, r17
    1aae:	90 2f       	mov	r25, r16
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <__ultoa_invert>:
    1aba:	fa 01       	movw	r30, r20
    1abc:	aa 27       	eor	r26, r26
    1abe:	28 30       	cpi	r18, 0x08	; 8
    1ac0:	51 f1       	breq	.+84     	; 0x1b16 <__ultoa_invert+0x5c>
    1ac2:	20 31       	cpi	r18, 0x10	; 16
    1ac4:	81 f1       	breq	.+96     	; 0x1b26 <__ultoa_invert+0x6c>
    1ac6:	e8 94       	clt
    1ac8:	6f 93       	push	r22
    1aca:	6e 7f       	andi	r22, 0xFE	; 254
    1acc:	6e 5f       	subi	r22, 0xFE	; 254
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	af 4f       	sbci	r26, 0xFF	; 255
    1ad6:	b1 e0       	ldi	r27, 0x01	; 1
    1ad8:	3e d0       	rcall	.+124    	; 0x1b56 <__ultoa_invert+0x9c>
    1ada:	b4 e0       	ldi	r27, 0x04	; 4
    1adc:	3c d0       	rcall	.+120    	; 0x1b56 <__ultoa_invert+0x9c>
    1ade:	67 0f       	add	r22, r23
    1ae0:	78 1f       	adc	r23, r24
    1ae2:	89 1f       	adc	r24, r25
    1ae4:	9a 1f       	adc	r25, r26
    1ae6:	a1 1d       	adc	r26, r1
    1ae8:	68 0f       	add	r22, r24
    1aea:	79 1f       	adc	r23, r25
    1aec:	8a 1f       	adc	r24, r26
    1aee:	91 1d       	adc	r25, r1
    1af0:	a1 1d       	adc	r26, r1
    1af2:	6a 0f       	add	r22, r26
    1af4:	71 1d       	adc	r23, r1
    1af6:	81 1d       	adc	r24, r1
    1af8:	91 1d       	adc	r25, r1
    1afa:	a1 1d       	adc	r26, r1
    1afc:	20 d0       	rcall	.+64     	; 0x1b3e <__ultoa_invert+0x84>
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <__ultoa_invert+0x48>
    1b00:	68 94       	set
    1b02:	3f 91       	pop	r19
    1b04:	2a e0       	ldi	r18, 0x0A	; 10
    1b06:	26 9f       	mul	r18, r22
    1b08:	11 24       	eor	r1, r1
    1b0a:	30 19       	sub	r19, r0
    1b0c:	30 5d       	subi	r19, 0xD0	; 208
    1b0e:	31 93       	st	Z+, r19
    1b10:	de f6       	brtc	.-74     	; 0x1ac8 <__ultoa_invert+0xe>
    1b12:	cf 01       	movw	r24, r30
    1b14:	08 95       	ret
    1b16:	46 2f       	mov	r20, r22
    1b18:	47 70       	andi	r20, 0x07	; 7
    1b1a:	40 5d       	subi	r20, 0xD0	; 208
    1b1c:	41 93       	st	Z+, r20
    1b1e:	b3 e0       	ldi	r27, 0x03	; 3
    1b20:	0f d0       	rcall	.+30     	; 0x1b40 <__ultoa_invert+0x86>
    1b22:	c9 f7       	brne	.-14     	; 0x1b16 <__ultoa_invert+0x5c>
    1b24:	f6 cf       	rjmp	.-20     	; 0x1b12 <__ultoa_invert+0x58>
    1b26:	46 2f       	mov	r20, r22
    1b28:	4f 70       	andi	r20, 0x0F	; 15
    1b2a:	40 5d       	subi	r20, 0xD0	; 208
    1b2c:	4a 33       	cpi	r20, 0x3A	; 58
    1b2e:	18 f0       	brcs	.+6      	; 0x1b36 <__ultoa_invert+0x7c>
    1b30:	49 5d       	subi	r20, 0xD9	; 217
    1b32:	31 fd       	sbrc	r19, 1
    1b34:	40 52       	subi	r20, 0x20	; 32
    1b36:	41 93       	st	Z+, r20
    1b38:	02 d0       	rcall	.+4      	; 0x1b3e <__ultoa_invert+0x84>
    1b3a:	a9 f7       	brne	.-22     	; 0x1b26 <__ultoa_invert+0x6c>
    1b3c:	ea cf       	rjmp	.-44     	; 0x1b12 <__ultoa_invert+0x58>
    1b3e:	b4 e0       	ldi	r27, 0x04	; 4
    1b40:	a6 95       	lsr	r26
    1b42:	97 95       	ror	r25
    1b44:	87 95       	ror	r24
    1b46:	77 95       	ror	r23
    1b48:	67 95       	ror	r22
    1b4a:	ba 95       	dec	r27
    1b4c:	c9 f7       	brne	.-14     	; 0x1b40 <__ultoa_invert+0x86>
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	61 05       	cpc	r22, r1
    1b52:	71 05       	cpc	r23, r1
    1b54:	08 95       	ret
    1b56:	9b 01       	movw	r18, r22
    1b58:	ac 01       	movw	r20, r24
    1b5a:	0a 2e       	mov	r0, r26
    1b5c:	06 94       	lsr	r0
    1b5e:	57 95       	ror	r21
    1b60:	47 95       	ror	r20
    1b62:	37 95       	ror	r19
    1b64:	27 95       	ror	r18
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__ultoa_invert+0xa2>
    1b6a:	62 0f       	add	r22, r18
    1b6c:	73 1f       	adc	r23, r19
    1b6e:	84 1f       	adc	r24, r20
    1b70:	95 1f       	adc	r25, r21
    1b72:	a0 1d       	adc	r26, r0
    1b74:	08 95       	ret

00001b76 <_exit>:
    1b76:	f8 94       	cli

00001b78 <__stop_program>:
    1b78:	ff cf       	rjmp	.-2      	; 0x1b78 <__stop_program>
